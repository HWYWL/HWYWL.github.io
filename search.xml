<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Linux常用但我记不住的命令</title>
      <link href="/2020/02/26/Linux%E5%B8%B8%E7%94%A8%E4%BD%86%E6%88%91%E8%AE%B0%E4%B8%8D%E4%BD%8F%E7%9A%84%E5%91%BD%E4%BB%A4/"/>
      <url>/2020/02/26/Linux%E5%B8%B8%E7%94%A8%E4%BD%86%E6%88%91%E8%AE%B0%E4%B8%8D%E4%BD%8F%E7%9A%84%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><p>Linux如何查看端口</p><p>1、lsof -i:端口号 用于查看某一端口的占用情况，比如查看8000端口使用情况，lsof -i:8000</p><a id="more"></a><p>Linux如何查看端口</p><p>1、lsof -i:端口号 用于查看某一端口的占用情况，比如查看8000端口使用情况，lsof -i:8000</p><div class="cnblogs_code" style="margin: 5px 0px; padding: 5px; background-color: rgb(245, 245, 245); border: 1px solid rgb(204, 204, 204); overflow: auto; font-family: " courier new" !important; font-size: 12px !important;">  <pre style="margin-bottom: 0px; padding: 0px; white-space: pre-wrap; font-family: " courier new" !important; font-size: 12px !important;"># lsof -i:<span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">8000</span> <span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(0, 0, 0);">COMMAND   PID USER   FD   TYPE  DEVICE SIZE</span>/<span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(0, 0, 0);">OFF NODE NAME  lwfs</span> <span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">22065</span> root    <span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">6u</span>  IPv4 <span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">4395053</span>      0t0  TCP *:irdmi (LISTEN)</pre></div><p>可以看到8000端口已经被轻量级文件系统转发服务lwfs占用</p><p>2、netstat -tunlp |grep 端口号，用于查看指定的端口号的进程情况，如查看8000端口的情况，netstat -tunlp |grep 8000</p><div class="cnblogs_code" style="margin: 5px 0px; padding: 5px; background-color: rgb(245, 245, 245); border: 1px solid rgb(204, 204, 204); overflow: auto; font-family: " courier new" !important; font-size: 12px !important;">  <div class="cnblogs_code_toolbar" style="margin: 5px 0px 0px; padding: 0px;"><span class="cnblogs_code_copy" style="margin: 0px; padding: 0px 5px 0px 0px; line-height: 1.8;"><a title="复制代码" style="margin: 0px; padding: 0px; color: rgb(0, 0, 0); border: none !important; background-color: rgb(245, 245, 245) !important;">![复制代码](https://common.cnblogs.com/images/copycode.gif)</a></span></div><pre style="margin-bottom: 0px; padding: 0px; white-space: pre-wrap; font-family: " courier new" !important; font-size: 12px !important;"># netstat -<span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(0, 0, 0);">tunlp Active Internet connections (only servers)Proto Recv</span>-Q Send-Q Local Address               Foreign Address             State       PID/<span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(0, 0, 0);">Program name   tcp</span> <span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">0</span>      <span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">0</span> <span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">0.0</span>.<span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">0.0</span>:<span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">111</span>                 <span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">0.0</span>.<span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">0.0</span>:*                   LISTEN      <span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">4814</span>/<span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(0, 0, 0);">rpcbind        tcp</span> <span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">0</span>      <span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">0</span> <span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">0.0</span>.<span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">0.0</span>:<span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">5908</span>                <span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">0.0</span>.<span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">0.0</span>:*                   LISTEN      <span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">25492</span>/qemu-<span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(0, 0, 0);">kvm      tcp</span> <span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">0</span>      <span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">0</span> <span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">0.0</span>.<span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">0.0</span>:<span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">6996</span>                <span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">0.0</span>.<span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">0.0</span>:*                   LISTEN      <span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">22065</span>/<span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(0, 0, 0);">lwfs          tcp</span> <span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">0</span>      <span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">0</span> <span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">192.168</span>.<span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">122.1</span>:<span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">53</span>            <span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">0.0</span>.<span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">0.0</span>:*                   LISTEN      <span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">38296</span>/<span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(0, 0, 0);">dnsmasq       tcp</span> <span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">0</span>      <span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">0</span> <span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">0.0</span>.<span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">0.0</span>:<span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">22</span>                  <span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">0.0</span>.<span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">0.0</span>:*                   LISTEN      <span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">5278</span>/<span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(0, 0, 0);">sshd           tcp</span> <span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">0</span>      <span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">0</span> <span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">127.0</span>.<span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">0.1</span>:<span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">631</span>               <span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">0.0</span>.<span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">0.0</span>:*                   LISTEN      <span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">5013</span>/<span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(0, 0, 0);">cupsd          tcp</span> <span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">0</span>      <span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">0</span> <span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">127.0</span>.<span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">0.1</span>:<span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">25</span>                <span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">0.0</span>.<span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">0.0</span>:*                   LISTEN      <span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">5962</span>/<span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(0, 0, 0);">master         tcp</span> <span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">0</span>      <span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">0</span> <span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">0.0</span>.<span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">0.0</span>:<span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">8666</span>                <span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">0.0</span>.<span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">0.0</span>:*                   LISTEN      <span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">44868</span>/<span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(0, 0, 0);">lwfs          tcp</span> <span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">0</span>      <span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">0</span> <span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">0.0</span>.<span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">0.0</span>:<span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">8000</span>                <span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">0.0</span>.<span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">0.0</span>:*                   LISTEN      <span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">22065</span>/lwfs        </pre><div class="cnblogs_code_toolbar" style="margin: 5px 0px 0px; padding: 0px;"><span class="cnblogs_code_copy" style="margin: 0px; padding: 0px 5px 0px 0px; line-height: 1.8;"><a title="复制代码" style="margin: 0px; padding: 0px; color: rgb(0, 0, 0); border: none !important; background-color: rgb(245, 245, 245) !important;">![复制代码](https://common.cnblogs.com/images/copycode.gif)</a></span></div></div><div class="cnblogs_code" style="margin: 5px 0px; padding: 5px; background-color: rgb(245, 245, 245); border: 1px solid rgb(204, 204, 204); overflow: auto; font-family: " courier new" !important; font-size: 12px !important;">  <pre style="margin-bottom: 0px; padding: 0px; white-space: pre-wrap; font-family: " courier new" !important; font-size: 12px !important;"># netstat -tunlp | <span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(0, 0, 255);">grep</span> <span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">8000</span> <span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(0, 0, 0);">tcp</span> <span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">0</span>      <span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">0</span> <span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">0.0</span>.<span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">0.0</span>:<span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">8000</span>                <span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">0.0</span>.<span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">0.0</span>:*                   LISTEN      <span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">22065</span>/lwfs          </pre></div><p>说明一下几个参数的含义：</p><div class="cnblogs_code" style="margin: 5px 0px; padding: 5px; background-color: rgb(245, 245, 245); border: 1px solid rgb(204, 204, 204); overflow: auto; font-family: " courier new" !important; font-size: 12px !important;">  <div class="cnblogs_code_toolbar" style="margin: 5px 0px 0px; padding: 0px;"><span class="cnblogs_code_copy" style="margin: 0px; padding: 0px 5px 0px 0px; line-height: 1.8;"><a title="复制代码" style="margin: 0px; padding: 0px; color: rgb(0, 0, 0); border: none !important; background-color: rgb(245, 245, 245) !important;">![复制代码](https://common.cnblogs.com/images/copycode.gif)</a></span></div><pre style="margin-bottom: 0px; padding: 0px; white-space: pre-wrap; font-family: " courier new" !important; font-size: 12px !important;"> <span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(255, 0, 0);">-t (tcp) 仅显示tcp相关选项                                 -u (udp)仅显示udp相关选项                                 -n 拒绝显示别名，能显示数字的全部转化为数字                                 -l 仅列出在Listen(监听)的服务状态                                 -</span><span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(0, 0, 0);"><span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(255, 0, 0);">p 显示建立相关链接的程序名</span></span> </pre><div class="cnblogs_code_toolbar" style="margin: 5px 0px 0px; padding: 0px;"><span class="cnblogs_code_copy" style="margin: 0px; padding: 0px 5px 0px 0px; line-height: 1.8;"><a title="复制代码" style="margin: 0px; padding: 0px; color: rgb(0, 0, 0); border: none !important; background-color: rgb(245, 245, 245) !important;">![复制代码](https://common.cnblogs.com/images/copycode.gif)</a></span></div></div><p>后台启动一个jar：</p><div class="cnblogs_code" style="margin: 5px 0px; padding: 5px; background-color: rgb(245, 245, 245); border: 1px solid rgb(204, 204, 204); overflow: auto; font-family: " courier new" !important; font-size: 12px !important;">  <pre style="padding: 0px; margin-bottom: 0px; line-height: 1.42857; white-space: pre-wrap; font-family: " courier new" !important; font-size: 12px !important;">nohup java -jar xxx.jar &    </pre></div><p><span style="font-family: " helvetica neue", helvetica, "pingfang sc", "hiragino sans gb", "microsoft yahei", "noto cjk "wenquanyi micro hei", arial, sans-serif; font-size: 13px;">tail 命令可用于查看文件的内容，有一个常用的参数</span> <span class="marked" style="border: 0px; margin: 0px; padding: 0.2em; background-color: rgb(236, 234, 230); border-radius: 3px; font-weight: bold; font-family: SFMono-Regular, Consolas, " liberation mono", menlo, courier, monospace; font-size: 13px;">-f</span> <span style="font-family: " helvetica neue", helvetica, "pingfang sc", "hiragino sans gb", "microsoft yahei", "noto cjk "wenquanyi micro hei", arial, sans-serif; font-size: 13px;">常用于查阅正在改变的日志文件。</span></p><div class="cnblogs_code" style="margin: 5px 0px; padding: 5px; background-color: rgb(245, 245, 245); border: 1px solid rgb(204, 204, 204); overflow: auto; font-family: " courier new" !important; font-size: 12px !important;">  <pre style="padding: 0px; margin-bottom: 0px; line-height: 1.42857; white-space: pre-wrap; font-family: " courier new" !important; font-size: 12px !important;">  **命令格式：**  <pre class="prettyprint prettyprinted" style="border-left-width: 4px; border-color: rgb(221, 221, 221); margin: 15px auto; padding: 10px 15px; font-variant-numeric: normal; font-variant-east-asian: normal; font-stretch: normal; font-size: 12px; line-height: 20px; font-family: Menlo, Monaco, Consolas, " andale mono", "lucida console", "courier new", monospace; white-space: pre-wrap; background: url(" images codecolorer_bg.gif") center top rgb(251, 251, 251);"><span class="pln" style="border: 0px; margin: 0px; padding: 0px; color: rgb(0, 0, 0);">tail</span> <span class="pun" style="border: 0px; margin: 0px; padding: 0px; color: rgb(102, 102, 0);">[参数]</span> <span class="pln" style="border: 0px; margin: 0px; padding: 0px; color: rgb(0, 0, 0);"></span> <span class="pun" style="border: 0px; margin: 0px; padding: 0px; color: rgb(102, 102, 0);">[文件]</span> <span class="pln" style="border: 0px; margin: 0px; padding: 0px; color: rgb(0, 0, 0);"></span> </pre><p></p></pre></div><p><strong>参数：</strong></p><div class="cnblogs_code" style="margin: 5px 0px; padding: 5px; background-color: rgb(245, 245, 245); border: 1px solid rgb(204, 204, 204); overflow: auto; font-family: " courier new" !important; font-size: 12px !important;">  <pre style="padding: 0px; margin-bottom: 0px; line-height: 1.42857; white-space: pre-wrap; font-family: " courier new" !important; font-size: 12px !important;">   _-f 循环读取_   -q 不显示处理信息   _-v 显示详细的处理信息_   -c<数目> 显示的字节数   _-n<行数> 显示行数_   --pid=PID 与-f合用,表示在进程ID,PID死掉之后结束.   _-q, --quiet, --silent 从不输出给出文件名的首部_   -s, --sleep-interval=S 与-f合用,表示在每次反复的间隔休眠S秒  </pre></div><p><strong>实例</strong></p><p>要显示 notes.log 文件的最后 10 行，请输入以下命令：</p><pre class="prettyprint prettyprinted" style="border-left-width: 4px; border-color: rgb(221, 221, 221); margin: 15px auto; padding: 10px 15px; font-variant-numeric: normal; font-variant-east-asian: normal; font-stretch: normal; font-size: 12px; line-height: 20px; font-family: Menlo, Monaco, Consolas, " andale mono", "lucida console", "courier new", monospace; white-space: pre-wrap; background: url(" images codecolorer_bg.gif") center top rgb(251, 251, 251);"><span class="pln" style="border: 0px; margin: 0px; padding: 0px; color: rgb(0, 0, 0);">tail notes</span><span class="pun" style="border: 0px; margin: 0px; padding: 0px; color: rgb(102, 102, 0);">.</span><span class="pln" style="border: 0px; margin: 0px; padding: 0px; color: rgb(0, 0, 0);">log</span></pre><p>要跟踪名为 notes.log 的文件的增长情况，请输入以下命令：</p><pre class="prettyprint prettyprinted" style="border-left-width: 4px; border-color: rgb(221, 221, 221); margin: 15px auto; padding: 10px 15px; font-variant-numeric: normal; font-variant-east-asian: normal; font-stretch: normal; font-size: 12px; line-height: 20px; font-family: Menlo, Monaco, Consolas, " andale mono", "lucida console", "courier new", monospace; white-space: pre-wrap; background: url(" images codecolorer_bg.gif") center top rgb(251, 251, 251);"><span class="pln" style="border: 0px; margin: 0px; padding: 0px; color: rgb(0, 0, 0);">tail</span> <span class="pun" style="border: 0px; margin: 0px; padding: 0px; color: rgb(102, 102, 0);">-</span><span class="pln" style="border: 0px; margin: 0px; padding: 0px; color: rgb(0, 0, 0);">f notes</span><span class="pun" style="border: 0px; margin: 0px; padding: 0px; color: rgb(102, 102, 0);">.</span><span class="pln" style="border: 0px; margin: 0px; padding: 0px; color: rgb(0, 0, 0);">log</span></pre><p>此命令显示 notes.log 文件的最后 10 行。当将某些行添加至 notes.log 文件时，tail 命令会继续显示这些行。 显示一直继续，直到您按下（Ctrl-C）组合键停止显示。</p><p>vmstat - 虚拟内存统计</p><p>vmstat 命令报告有关进程、内存、分页、块 IO、中断和 CPU 活动等信息。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># vmstat 3</span><br></pre></td></tr></tbody></table></figure></div><p>输出示例：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">procs -----------memory---------- ---swap-- -----io---- --system-- -----cpu------</span><br><span class="line"> r b swpd free buff cache si so bi bo in cs us sy id wa st</span><br><span class="line"> 0 0 0 2540988 522188 5130400 0 0 2 32 4 2 4 1 96 0 0</span><br><span class="line"> 1 0 0 2540988 522188 5130400 0 0 0 720 1199 665 1 0 99 0 0</span><br><span class="line"> 0 0 0 2540956 522188 5130400 0 0 0 0 1151 1569 4 1 95 0 0</span><br><span class="line"> 0 0 0 2540956 522188 5130500 0 0 0 6 1117 439 1 0 99 0 0</span><br><span class="line"> 0 0 0 2540940 522188 5130512 0 0 0 536 1189 932 1 0 98 0 0</span><br><span class="line"> 0 0 0 2538444 522188 5130588 0 0 0 0 1187 1417 4 1 96 0 0</span><br><span class="line"> 0 0 0 2490060 522188 5130640 0 0 0 18 1253 1123 5 1 94 0 0</span><br></pre></td></tr></tbody></table></figure></div><p>2.找出占用内存资源最多的前 10 个进程</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -auxf | sort -nr -k 4 | head -10</span><br></pre></td></tr></tbody></table></figure></div><p>3.找出占用 CPU 资源最多的前 10 个进程</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -auxf | sort -nr -k 3 | head -10</span><br></pre></td></tr></tbody></table></figure></div><h3 id="常用私活"><a href="#常用私活" class="headerlink" title="常用私活"></a>常用私活</h3><p>查找文件<strong>all-server.log</strong>中含<strong>deviceId</strong>有的内容并显示出来</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find -type f -name 'all-server.log'|xargs grep "deviceId"</span><br></pre></td></tr></tbody></table></figure></div><p>统计<strong>aaa</strong>在文件<strong>all-server.log</strong>出现的次数</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat all-server.log |grep "aaa"|wc -l</span><br></pre></td></tr></tbody></table></figure></div></body></html>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 操作系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>写代码怎能不会这些Linux命令</title>
      <link href="/2020/02/26/%E5%86%99%E4%BB%A3%E7%A0%81%E6%80%8E%E8%83%BD%E4%B8%8D%E4%BC%9A%E8%BF%99%E4%BA%9BLinux%E5%91%BD%E4%BB%A4/"/>
      <url>/2020/02/26/%E5%86%99%E4%BB%A3%E7%A0%81%E6%80%8E%E8%83%BD%E4%B8%8D%E4%BC%9A%E8%BF%99%E4%BA%9BLinux%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><p> 这篇文章翻译自 <a href="http://www.thegeekstuff.com/2010/11/50-linux-commands" target="_blank" rel="noopener">http://www.thegeekstuff.com/2010/11/50-linux-commands</a> 这些都是一些很常用的命令，这篇文章中每个命令都有一些简单的示例说明它的用法， 对于想学习Unix/Linux的人，这些命令基本上都是需要掌握的。</p><a id="more"></a><article class="markdown-body"><blockquote><p>这篇文章翻译自 <a href="http://www.thegeekstuff.com/2010/11/50-linux-commands/" target="_blank" rel="noopener">http://www.thegeekstuff.com/2010/11/50-linux-commands</a> 这些都是一些很常用的命令，这篇文章中每个命令都有一些简单的示例说明它的用法， 对于想学习Unix/Linux的人，这些命令基本上都是需要掌握的。</p></blockquote><p>同时我也做了一张简易版的图例：</p><p><a href="https://i.loli.net/2017/08/22/599b9b3ca5bb7.png" target="_blank" rel="noopener"><img alt="Linux命令表" title="Linux命令表" data-src="https://i.loli.net/2017/08/22/599b9b3ca5bb7.png" class="lazyload"></a></p><h2 id="1-tar"><a href="#1-tar" class="headerlink" title="1. tar"></a>1. tar</h2><p>创建一个新的tar文件</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ tar cvf archive_name.tar dirname/</code></pre></div></div><p>解压tar文件</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ tar xvf archive_name.tar</code></pre></div></div><p>查看tar文件</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ tar tvf archive_name.tar</code></pre></div></div><p>更多示例：<a href="http://www.thegeekstuff.com/2010/04/unix-tar-command-examples/" target="_blank" rel="noopener">The Ultimate Tar Command Tutorial with 10 Practical Examples</a></p><h2 id="2-grep"><a href="#2-grep" class="headerlink" title="2. grep"></a>2. grep</h2><p>在文件中查找字符串(不区分大小写)</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ grep -i "the" demo_file</code></pre></div></div><p>输出成功匹配的行，以及该行之后的三行</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ grep -A 3 -i "example" demo_text</code></pre></div></div><p>在一个文件夹中递归查询包含指定字符串的文件</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ grep -r "ramesh" *</code></pre></div></div><p>更多示例：<a href="http://www.thegeekstuff.com/2009/03/15-practical-unix-grep-command-examples/" target="_blank" rel="noopener">Get a Grip on the Grep! – 15 Practical Grep Command Examples</a></p><h2 id="3-find"><a href="#3-find" class="headerlink" title="3. find"></a>3. find</h2><p>查找指定文件名的文件(不区分大小写)</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ find -iname "MyProgram.c"</code></pre></div></div><p>对找到的文件执行某个命令</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ find -iname "MyProgram.c" -exec md5sum {} \;</code></pre></div></div><p>查找home目录下的所有空文件</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ find ~ -empty</code></pre></div></div><p>更多示例：<a href="http://www.thegeekstuff.com/2009/03/15-practical-linux-find-command-examples/" target="_blank" rel="noopener">Mommy, I found it! — 15 Practical Linux Find Command Examples</a></p><h2 id="4-ssh"><a href="#4-ssh" class="headerlink" title="4. ssh"></a>4. ssh</h2><p>登录到远程主机</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ ssh -l jsmith remotehost.example.com</code></pre></div></div><p>调试ssh客户端</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ ssh -v -l jsmith remotehost.example.com</code></pre></div></div><p>显示ssh客户端版本</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ ssh -V</code></pre></div></div><p>更多示例：<a href="http://www.thegeekstuff.com/2008/05/5-basic-linux-ssh-client-commands/" target="_blank" rel="noopener">5 Basic Linux SSH Client Commands</a></p><h2 id="5-sed"><a href="#5-sed" class="headerlink" title="5. sed"></a>5. sed</h2><p>当你将Dos系统中的文件复制到Unix/Linux后，这个文件每行都会以\r\n结尾，sed可以轻易将其转换为Unix格式的文件，使用\n结尾的文件</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ sed 's/.$//' filename</code></pre></div></div><p>反转文件内容并输出</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ sed -n '1!G; h; p' filename</code></pre></div></div><p>为非空行添加行号</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ sed '/./=' thegeekstuff.txt | sed 'N; s/\n/ /'</code></pre></div></div><p>更多示例：<a href="http://www.thegeekstuff.com/2009/10/unix-sed-tutorial-advanced-sed-substitution-examples/" target="_blank" rel="noopener">Advanced Sed Substitution Examples</a></p><h2 id="6-awk"><a href="#6-awk" class="headerlink" title="6. awk"></a>6. awk</h2><p>删除重复行</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ awk '!($0 in array) { array[$0]; print}' temp</code></pre></div></div><p>打印/etc/passwd中所有包含同样的uid和gid的行</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ awk -F ':' '$3=$4' /etc/passwd</code></pre></div></div><p>打印文件中的指定部分的字段</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ awk '{print $2,$5;}' employee.txt</code></pre></div></div><p>更多示例：<a href="http://www.thegeekstuff.com/2010/01/8-powerful-awk-built-in-variables-fs-ofs-rs-ors-nr-nf-filename-fnr/" target="_blank" rel="noopener">8 Powerful Awk Built-in Variables – FS, OFS, RS, ORS, NR, NF, FILENAME, FNR</a></p><h2 id="7-vim"><a href="#7-vim" class="headerlink" title="7. vim"></a>7. vim</h2><p>打开文件并跳到第10行</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ vim +10 filename.txt</code></pre></div></div><p>打开文件跳到第一个匹配的行</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ vim +/search-term filename.txt</code></pre></div></div><p>以只读模式打开文件</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ vim -R /etc/passwd</code></pre></div></div><p>更多示例：<a href="http://www.thegeekstuff.com/2009/01/vi-and-vim-macro-tutorial-how-to-record-and-play/" target="_blank" rel="noopener">How To Record and Play in Vim Editor</a></p><h2 id="8-diff"><a href="#8-diff" class="headerlink" title="8. diff"></a>8. diff</h2><p>比较的时候忽略空白符</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ diff -w name_list.txt name_list_new.txt</code></pre></div></div><h2 id="9-sort"><a href="#9-sort" class="headerlink" title="9. sort"></a>9. sort</h2><p>以升序对文件内容排序</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ sort names.txt</code></pre></div></div><p>以降序对文件内容排序</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ sort -r names.txt</code></pre></div></div><p>以第三个字段对/etc/passwd的内容排序</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ sort -t: -k 3n /etc/passwd | more</code></pre></div></div><h2 id="10-export"><a href="#10-export" class="headerlink" title="10. export"></a>10. export</h2><p>输出跟字符串oracle匹配的环境变量</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ export | grep ORCALEdeclare -x ORACLE_BASE="/u01/app/oracle"declare -x ORACLE_HOME="/u01/app/oracle/product/10.2.0"declare -x ORACLE_SID="med"declare -x ORACLE_TERM="xterm"</code></pre></div></div><p>设置全局环境变量</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ export ORACLE_HOME=/u01/app/oracle/product/10.2.0</code></pre></div></div><h2 id="11-xargs"><a href="#11-xargs" class="headerlink" title="11. xargs"></a>11. xargs</h2><p>将所有图片文件拷贝到外部驱动器</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ ls *.jpg | xargs -n1 -i cp {} /external-hard-drive/directory</code></pre></div></div><p>将系统中所有jpd文件压缩打包</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ find / -name *.jpg -type f -print | xargs tar -cvzf images.tar.gz</code></pre></div></div><p>下载文件中列出的所有url对应的页面</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ cat url-list.txt | xargs wget –c</code></pre></div></div><h2 id="12-ls"><a href="#12-ls" class="headerlink" title="12. ls"></a>12. ls</h2><p>以易读的方式显示文件大小(显示为MB,GB…)</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ ls -lh-rw-r----- 1 ramesh team-dev 8.9M Jun 12 15:27 arch-linux.txt.gz</code></pre></div></div><p>以最后修改时间升序列出文件</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ ls -ltr</code></pre></div></div><p>在文件名后面显示文件类型</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ ls -F</code></pre></div></div><p>更多示例：<a href="http://www.thegeekstuff.com/2009/07/linux-ls-command-examples/" target="_blank" rel="noopener">Unix LS Command: 15 Practical Examples</a></p><h2 id="13-pwd"><a href="#13-pwd" class="headerlink" title="13. pwd"></a>13. pwd</h2><p>输出当前工作目录</p><h2 id="14-cd"><a href="#14-cd" class="headerlink" title="14. cd"></a>14. cd</h2><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>cd -可以在最近工作的两个目录间切换</code></pre></div></div><p>使用 <strong>shopt -s cdspell</strong> 可以设置自动对 cd 命令进行拼写检查</p><p>更多示例：<a href="http://www.thegeekstuff.com/2008/10/6-awesome-linux-cd-command-hacks-productivity-tip3-for-geeks/" target="_blank" rel="noopener">6 Awesome Linux cd command Hacks</a></p><h2 id="15-gzip"><a href="#15-gzip" class="headerlink" title="15. gzip"></a>15. gzip</h2><p>创建一个 <code>*.gz</code> 的压缩文件</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ gzip test.txt</code></pre></div></div><p>解压 <code>*.gz</code> 文件</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ gzip -d test.txt.gz</code></pre></div></div><p>显示压缩的比率</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ gzip -l *.gz     compressed        uncompressed  ratio uncompressed_name          23709               97975  75.8% asp-patch-rpms.txt</code></pre></div></div><h2 id="16-bzip2"><a href="#16-bzip2" class="headerlink" title="16. bzip2"></a>16. bzip2</h2><p>创建 <code>*.bz2</code> 压缩文件</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ bzip2 test.txt</code></pre></div></div><p>解压 <code>*.bz2</code> 文件</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>bzip2 -d test.txt.bz2</code></pre></div></div><p>更多示例：<a href="http://www.thegeekstuff.com/2010/10/bzcommand-examples/" target="_blank" rel="noopener">BZ is Eazy! bzip2, bzgrep, bzcmp, bzdiff, bzcat, bzless, bzmore examples</a></p><h2 id="17-uzip"><a href="#17-uzip" class="headerlink" title="17. uzip"></a>17. uzip</h2><p>解压 <code>*.zip</code> 文件</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ unzip test.zip</code></pre></div></div><p>查看 <code>*.zip</code> 文件的内容</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ unzip -l jasper.zipArchive:  jasper.zipLength     Date   Time    Name--------    ----   ----    ----40995  11-30-98 23:50   META-INF/MANIFEST.MF32169  08-25-98 21:07   classes_15964  08-25-98 21:07   classes_names10542  08-25-98 21:07   classes_ncomp</code></pre></div></div><h2 id="18-shutdown"><a href="#18-shutdown" class="headerlink" title="18. shutdown"></a>18. shutdown</h2><p>关闭系统并立即关机</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ shutdown -h now</code></pre></div></div><p>10分钟后关机</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ shutdown -h +10</code></pre></div></div><p>重启</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ shutdown -r now</code></pre></div></div><p>重启期间强制进行系统检查</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ shutdown -Fr now</code></pre></div></div><h2 id="19-ftp"><a href="#19-ftp" class="headerlink" title="19. ftp"></a>19. ftp</h2><p>ftp命令和sftp命令的用法基本相似连接ftp服务器并下载多个文件</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ ftp IP/hostnameftp> mget *.html</code></pre></div></div><p>显示远程主机上文件列表</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>ftp> mls *.html -/ftptest/features.html/ftptest/index.html/ftptest/othertools.html/ftptest/samplereport.html/ftptest/usage.html</code></pre></div></div><p>更多示例：<a href="http://www.thegeekstuff.com/2010/06/ftp-sftp-tutorial/" target="_blank" rel="noopener">FTP and SFTP Beginners Guide with 10 Examples</a></p><h2 id="20-crontab"><a href="#20-crontab" class="headerlink" title="20. crontab"></a>20. crontab</h2><p>查看某个用户的 <code>crontab</code> 入口</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ crontab -u john -l</code></pre></div></div><p>设置一个每十分钟执行一次的计划任务</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>*/10 * * * * /home/ramesh/check-disk-space</code></pre></div></div><p>更多示例：<a href="http://www.thegeekstuff.com/2009/06/15-practical-crontab-examples/" target="_blank" rel="noopener">Linux Crontab: 15 Awesome Cron Job Examples</a></p><h2 id="21-service"><a href="#21-service" class="headerlink" title="21. service"></a>21. service</h2><p>service 命令用于运行 System V init 脚本，这些脚本一般位于/etc/init.d文件下，这个命令可以直接运行这个文件夹里面的脚本，而不用加上路径</p><p>查看服务状态</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ service ssh status</code></pre></div></div><p>查看所有服务状态</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ service --status-all</code></pre></div></div><p>重启服务</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ service ssh restart</code></pre></div></div><h2 id="22-ps"><a href="#22-ps" class="headerlink" title="22. ps"></a>22. ps</h2><p>ps命令用于显示正在运行中的进程的信息，ps命令有很多选项，这里只列出了几个</p><p>查看当前正在运行的所有进程</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ ps -ef | more</code></pre></div></div><p>以树状结构显示当前正在运行的进程，H选项表示显示进程的层次结构</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ ps -efH | more</code></pre></div></div><h2 id="23-free"><a href="#23-free" class="headerlink" title="23. free"></a>23. free</h2><p>这个命令用于显示系统当前内存的使用情况，包括已用内存、可用内存和交换内存的情况</p><p>默认情况下free会以字节为单位输出内存的使用量</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ free             total       used       free     shared    buffers     cachedMem:       3566408    1580220    1986188          0     203988     902960-/+ buffers/cache:     473272    3093136Swap:      4000176          0    4000176</code></pre></div></div><p>如果你想以其他单位输出内存的使用量，需要加一个选项，-g为GB，-m为MB，-k为KB，-b为字节</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ free -g             total       used       free     shared    buffers     cachedMem:             3          1          1          0          0          0-/+ buffers/cache:          0          2Swap:            3          0          3</code></pre></div></div><p>如果你想查看所有内存的汇总，请使用-t选项，使用这个选项会在输出中加一个汇总行</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>ramesh@ramesh-laptop:~$ free -t             total       used       free     shared    buffers     cachedMem:       3566408    1592148    1974260          0     204260     912556-/+ buffers/cache:     475332    3091076Swap:      4000176          0    4000176Total:     7566584    1592148    5974436</code></pre></div></div><h2 id="24-top"><a href="#24-top" class="headerlink" title="24. top"></a>24. top</h2><p>top命令会显示当前系统中占用资源最多的一些进程（默认以CPU占用率排序）如果你想改变排序方式，可以在结果列表中点击O（大写字母O）会显示所有可用于排序的列，这个时候你就可以选择你想排序的列</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>Current Sort Field:  P  for window 1:DefSelect sort field via field letter, type any other key to return  a: PID        = Process Id              v: nDRT       = Dirty Pages count  d: UID        = User Id                 y: WCHAN      = Sleeping in Function  e: USER       = User Name               z: Flags      = Task Flags  ........</code></pre></div></div><p>如果只想显示某个特定用户的进程，可以使用-u选项</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ top -u oracle</code></pre></div></div><p>更多示例：<a href="http://www.thegeekstuff.com/2010/01/15-practical-unix-linux-top-command-examples/" target="_blank" rel="noopener">Can You Top This? 15 Practical Linux Top Command Examples</a></p><h2 id="25-df"><a href="#25-df" class="headerlink" title="25. df"></a>25. df</h2><p>显示文件系统的磁盘使用情况，默认情况下df -k 将以字节为单位输出磁盘的使用量</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ df -kFilesystem           1K-blocks      Used Available Use% Mounted on/dev/sda1             29530400   3233104  24797232  12% //dev/sda2            120367992  50171596  64082060  44% /home</code></pre></div></div><p>使用 <code>-h</code> 选项可以以更符合阅读习惯的方式显示磁盘使用量</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ df -hFilesystem                  Size   Used  Avail Capacity  iused      ifree %iused  Mounted on/dev/disk0s2               232Gi   84Gi  148Gi    37% 21998562   38864868   36%   /devfs                      187Ki  187Ki    0Bi   100%      648          0  100%   /devmap -hosts                   0Bi    0Bi    0Bi   100%        0          0  100%   /netmap auto_home                0Bi    0Bi    0Bi   100%        0          0  100%   /home/dev/disk0s4               466Gi   45Gi  421Gi    10%   112774  440997174    0%   /Volumes/BOOTCAMP//app@izenesoft.cn/public  2.7Ti  1.3Ti  1.4Ti    48%        0 18446744073709551615    0%   /Volumes/public</code></pre></div></div><p>使用 <code>-T</code> 选项显示文件系统类型</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ df -TFilesystem    Type   1K-blocks      Used Available Use% Mounted on/dev/sda1     ext4    29530400   3233120  24797216  12% //dev/sda2     ext4   120367992  50171596  64082060  44% /home</code></pre></div></div><h2 id="26-kill"><a href="#26-kill" class="headerlink" title="26. kill"></a>26. kill</h2><p>kill 用于终止一个进程。一般我们会先用ps -ef查找某个进程得到它的进程号，然后再使用kill -9 进程号终止该进程。你还可以使用killall、pkill、xkill来终止进程</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ ps -ef | grep vimramesh    7243  7222  9 22:43 pts/2    00:00:00 vim$ kill -9 7243</code></pre></div></div><p>更多示例：<a href="http://www.thegeekstuff.com/2009/12/4-ways-to-kill-a-process-kill-killall-pkill-xkill/" target="_blank" rel="noopener">4 Ways to Kill a Process – kill, killall, pkill, xkill</a></p><h2 id="27-rm"><a href="#27-rm" class="headerlink" title="27. rm"></a>27. rm</h2><p>删除文件前先确认</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ rm -i filename.txt</code></pre></div></div><p>在文件名中使用shell的元字符会非常有用。删除文件前先打印文件名并进行确认</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ rm -i file*</code></pre></div></div><p>递归删除文件夹下所有文件，并删除该文件夹</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ rm -r example</code></pre></div></div><h2 id="28-cp"><a href="#28-cp" class="headerlink" title="28. cp"></a>28. cp</h2><p>拷贝文件1到文件2，并保持文件的权限、属主和时间戳</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ cp -p file1 file2</code></pre></div></div><p>拷贝file1到file2，如果file2存在会提示是否覆盖</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ cp -i file1 file2</code></pre></div></div><h2 id="29-mv"><a href="#29-mv" class="headerlink" title="29. mv"></a>29. mv</h2><p>将文件名file1重命名为file2，如果file2存在则提示是否覆盖</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ mv -i file1 file2</code></pre></div></div><p>注意如果使用-f选项则不会进行提示</p><p>-v会输出重命名的过程，当文件名中包含通配符时，这个选项会非常方便</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ mv -v file1 file2</code></pre></div></div><h2 id="30-cat"><a href="#30-cat" class="headerlink" title="30. cat"></a>30. cat</h2><p>你可以一次查看多个文件的内容，下面的命令会先打印file1的内容，然后打印file2的内容</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ cat file1 file2</code></pre></div></div><p>-n命令可以在每行的前面加上行号</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ cat -n /etc/logrotate.conf/var/log/btmp {missingok3        monthly4        create 0660 root utmp5        rotate 16 }</code></pre></div></div><h2 id="31-mount"><a href="#31-mount" class="headerlink" title="31. mount"></a>31. mount</h2><p>如果要挂载一个文件系统，需要先创建一个目录，然后将这个文件系统挂载到这个目录上</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code># mkdir /u01# mount /dev/sdb1 /u01</code></pre></div></div><p>也可以把它添加到fstab中进行自动挂载，这样任何时候系统重启的时候，文件系统都会被加载</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>/dev/sdb1 /u01 ext2 defaults 0 2</code></pre></div></div><h2 id="32-chmod"><a href="#32-chmod" class="headerlink" title="32. chmod"></a>32. chmod</h2><p>chmod用于改变文件和目录的权限</p><p>给指定文件的属主和属组所有权限(包括读、写、执行)</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ chmod ug+rwx file.txt</code></pre></div></div><p>删除指定文件的属组的所有权限</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ chmod g-rwx file.txt</code></pre></div></div><p>修改目录的权限，以及递归修改目录下面所有文件和子目录的权限</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ chmod -R ug+rwx file.txt</code></pre></div></div><p>更多示例：<a href="http://www.thegeekstuff.com/2010/06/chmod-command-examples/" target="_blank" rel="noopener">7 Chmod Command Examples for Beginners</a></p><h2 id="33-chown"><a href="#33-chown" class="headerlink" title="33. chown"></a>33. chown</h2><p>chown用于改变文件属主和属组</p><p>同时将某个文件的属主改为oracle，属组改为db</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ chown oracle:dba dbora.sh</code></pre></div></div><p>使用-R选项对目录和目录下的文件进行递归修改</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ chown -R oracle:dba /home/oracle</code></pre></div></div><h2 id="34-passwd"><a href="#34-passwd" class="headerlink" title="34. passwd"></a>34. passwd</h2><p>passwd用于在命令行修改密码，使用这个命令会要求你先输入旧密码，然后输入新密码</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ passwd</code></pre></div></div><p>超级用户可以用这个命令修改其他用户的密码，这个时候不需要输入用户的密码</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code># passwd USERNAME</code></pre></div></div><p>passwd还可以删除某个用户的密码，这个命令只有root用户才能操作，删除密码后，这个用户不需要输入密码就可以登录到系统</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code># passwd -d USERNAME</code></pre></div></div><h2 id="35-mkdir"><a href="#35-mkdir" class="headerlink" title="35. mkdir"></a>35. mkdir</h2><p>在home目录下创建一个名为temp的目录</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ mkdir ~/temp</code></pre></div></div><p>使用-p选项可以创建一个路径上所有不存在的目录</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ mkdir -p dir1/dir2/dir3/dir4/</code></pre></div></div><h2 id="36-ifconfig"><a href="#36-ifconfig" class="headerlink" title="36. ifconfig"></a>36. ifconfig</h2><p>ifconfig用于查看和配置Linux系统的网络接口</p><p>查看所有网络接口及其状态</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ ifconfig -a</code></pre></div></div><p>使用up和down命令启动或停止某个接口</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ ifconfig eth0 up$ ifconfig eth0 down</code></pre></div></div><p>更多示例：<a href="http://www.thegeekstuff.com/2009/03/ifconfig-7-examples-to-configure-network-interface/" target="_blank" rel="noopener">Ifconfig: 7 Examples To Configure Network Interface</a></p><h2 id="37-uname"><a href="#37-uname" class="headerlink" title="37. uname"></a>37. uname</h2><p>uname可以显示一些重要的系统信息，例如内核名称、主机名、内核版本号、处理器类型之类的信息</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ uname -aLinux john-laptop 2.6.32-24-generic #41-Ubuntu SMP Thu Aug 19 01:12:52 UTC 2010 i686 GNU/Linux</code></pre></div></div><h2 id="38-whereis"><a href="#38-whereis" class="headerlink" title="38. whereis"></a>38. whereis</h2><p>当你不知道某个命令的位置时可以使用whereis命令，下面使用whereis查找ls的位置</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ whereis lsls: /bin/ls /usr/share/man/man1/ls.1.gz /usr/share/man/man1p/ls.1p.gz</code></pre></div></div><p>当你想查找某个可执行程序的位置，但这个程序又不在whereis的默认目录下，你可以使用-B选项，并指定目录作为这个选项的参数。下面的命令在/tmp目录下查找lsmk命令</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ whereis -u -B /tmp -f lsmklsmk: /tmp/lsmk</code></pre></div></div><h2 id="39-whatis"><a href="#39-whatis" class="headerlink" title="39. whatis"></a>39. whatis</h2><p>wathis显示某个命令的描述信息</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ whatis lsls        (1)  - list directory contents$ whatis ifconfigifconfig (8)         - configure a network interface</code></pre></div></div><h2 id="40-locate"><a href="#40-locate" class="headerlink" title="40. locate"></a>40. locate</h2><p>locate命名可以显示某个指定文件（或一组文件）的路径，它会使用由updatedb创建的数据库</p><p>下面的命令会显示系统中所有包含crontab字符串的文件</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ locate crontab/etc/anacrontab/etc/crontab/usr/bin/crontab/usr/share/doc/cron/examples/crontab2english.pl.gz/usr/share/man/man1/crontab.1.gz/usr/share/man/man5/anacrontab.5.gz/usr/share/man/man5/crontab.5.gz/usr/share/vim/vim72/syntax/crontab.vim</code></pre></div></div><h2 id="41-man"><a href="#41-man" class="headerlink" title="41. man"></a>41. man</h2><p>显示某个命令的man页面</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ man crontab</code></pre></div></div><p>有些命令可能会有多个man页面，每个man页面对应一种命令类型</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ man SECTION-NUMBER commandname</code></pre></div></div><p>man页面一般可以分为8种命令类型</p><ol><li>用户命令</li><li>系统调用</li><li>c库函数</li><li>设备与网络接口</li><li>文件格式</li><li>游戏与屏保</li><li>环境、表、宏</li><li>系统管理员命令和后台运行命令</li></ol><p>例如，我们执行 <code>whatis crontab</code>，你可以看到 <code>crontab</code> 有两个命令类型1和5，所以我们可以通过下面的命令查看命令类型5的man页面</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ whatis crontabcrontab (1)          - maintain crontab files for individual users (V3)crontab (5)          - tables for driving cron$ man 5 crontab</code></pre></div></div><h2 id="42-tail"><a href="#42-tail" class="headerlink" title="42. tail"></a>42. tail</h2><p>tail命令默认显示文件最后的10行文本</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ tail filename.txt</code></pre></div></div><p>你可以使用-n选项指定要显示的行数</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ tail -n N filename.txt</code></pre></div></div><p>你也可以使用-f选项进行实时查看，这个命令执行后会等待，如果有新行添加到文件尾部，它会继续输出新的行，在查看日志时这个选项会非常有用。你可以通过CTRL-C终止命令的执行</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ tail -f log-file</code></pre></div></div><p>更多示例：<a href="http://www.thegeekstuff.com/2009/09/multitail-to-view-tail-f-output-of-multiple-log-files-in-one-terminal/" target="_blank" rel="noopener">3 Methods To View tail -f output of Multiple Log Files in One Terminal</a></p><h2 id="43-less"><a href="#43-less" class="headerlink" title="43. less"></a>43. less</h2><p>这个命名可以在不加载整个文件的前提下显示文件内容，在查看大型日志文件的时候这个命令会非常有用</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ less huge-log-file.log</code></pre></div></div><p>当你用less命令打开某个文件时，下面两个按键会给你带来很多帮助，他们用于向前和向后滚屏</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>CTRL+F – forward one windowCTRL+B – backward one window</code></pre></div></div><p>更多示例：<a href="http://www.thegeekstuff.com/2010/02/unix-less-command-10-tips-for-effective-navigation/" target="_blank" rel="noopener">Unix Less Command: 10 Tips for Effective Navigation</a></p><h2 id="44-su"><a href="#44-su" class="headerlink" title="44. su"></a>44. su</h2><p>su命令用于切换用户账号，超级用户使用这个命令可以切换到任何其他用户而不用输入密码</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ su - USERNAME</code></pre></div></div><p>用另外一个用户名执行一个命令下面的示例中用户john使用raj用户名执行ls命令，执行完后返回john的账号</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>[john@dev-server]$ su - raj -c 'ls'[john@dev-server]$</code></pre></div></div><p>用指定用户登录，并且使用指定的shell程序，而不用默认的</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ su -s 'SHELLNAME' USERNAME</code></pre></div></div><h2 id="45-mysql"><a href="#45-mysql" class="headerlink" title="45. mysql"></a>45. mysql</h2><p>mysql可能是Linux上使用最广泛的数据库，即使你没有在你的服务器上安装mysql，你也可以使用mysql客户端连接到远程的mysql服务器</p><p>连接一个远程数据库，需要输入密码</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ mysql -u root -p -h 192.168.1.2</code></pre></div></div><p>连接本地数据库</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ mysql -u root -p</code></pre></div></div><p>你也可以在命令行中输入数据库密码，只需要在-p后面加上密码作为参数，可以直接写在p后面而不用加空格</p><h2 id="46-yum"><a href="#46-yum" class="headerlink" title="46. yum"></a>46. yum</h2><p>使用yum安装apache</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ yum install httpd</code></pre></div></div><p>更新apache</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ yum update httpd</code></pre></div></div><p>卸载/删除apache</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ yum remove httpd</code></pre></div></div><h2 id="47-rpm"><a href="#47-rpm" class="headerlink" title="47. rpm"></a>47. rpm</h2><p>使用rpm安装apache</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code># rpm -ivh httpd-2.2.3-22.0.1.el5.i386.rpm</code></pre></div></div><p>更新apache</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code># rpm -uvh httpd-2.2.3-22.0.1.el5.i386.rpm</code></pre></div></div><p>卸载/删除apache</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code># rpm -ev httpd</code></pre></div></div><p>更多示例：<a href="http://www.thegeekstuff.com/2010/07/rpm-command-examples/" target="_blank" rel="noopener">RPM Command: 15 Examples to Install, Uninstall, Upgrade, Query RPM Packages</a></p><h2 id="48-ping"><a href="#48-ping" class="headerlink" title="48. ping"></a>48. ping</h2><p>ping一个远程主机，只发5个数据包</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ ping -c 5 gmail.com</code></pre></div></div><p>更多示例：<a href="http://www.thegeekstuff.com/2009/11/ping-tutorial-13-effective-ping-command-examples/" target="_blank" rel="noopener">Ping Tutorial: 15 Effective Ping Command Examples</a></p><h2 id="49-date"><a href="#49-date" class="headerlink" title="49. date"></a>49. date</h2><p>设置系统日期</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code># date -s "01/31/2010 23:59:53"</code></pre></div></div><p>当你修改了系统时间，你需要同步硬件时间和系统时间</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code># hwclock –systohc# hwclock --systohc –utc</code></pre></div></div><h2 id="50-wget"><a href="#50-wget" class="headerlink" title="50. wget"></a>50. wget</h2><p>使用wget从网上下载软件、音乐、视频</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ wget http://prdownloads.sourceforge.net/sourceforge/nagios/nagios-3.2.1.tar.gz</code></pre></div></div><p>下载文件并以指定的文件名保存文件</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ wget -O taglist.zip http://www.vim.org/scripts/download_script.php?src_id=7701</code></pre></div></div><p>更多示例：<a href="http://www.thegeekstuff.com/2009/09/the-ultimate-wget-download-guide-with-15-awesome-examples/" target="_blank" rel="noopener">The Ultimate Wget Download Guide With 15 Awesome Examples</a></p><div class="copy-right"><p>本文由 <a href="javascript:void(0);">王爵nice</a> 创作， 采用 <a href="https://creativecommons.org/licenses/by/4.0/deed.zh" target="_blank" rel="noopener">知识共享署名4.0</a> 国际许可协议进行许可。</p><p>本站文章除注明转载/出处外，均为本站原创或翻译，转载前请务必署名。</p></div></article></body></html>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 操作系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu18.04修改swap分区大小</title>
      <link href="/2020/02/26/Ubuntu18-04%E4%BF%AE%E6%94%B9swap%E5%88%86%E5%8C%BA%E5%A4%A7%E5%B0%8F/"/>
      <url>/2020/02/26/Ubuntu18-04%E4%BF%AE%E6%94%B9swap%E5%88%86%E5%8C%BA%E5%A4%A7%E5%B0%8F/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><p> 这篇文章翻译自 <a href="http://www.thegeekstuff.com/2010/11/50-linux-commands" target="_blank" rel="noopener">http://www.thegeekstuff.com/2010/11/50-linux-commands</a> 这些都是一些很常用的命令，这篇文章中每个命令都有一些简单的示例说明它的用法， 对于想学习Unix/Linux的人，这些命令基本上都是需要掌握的。</p><a id="more"></a><article class="markdown-body"><blockquote><p>这篇文章翻译自 <a href="http://www.thegeekstuff.com/2010/11/50-linux-commands/" target="_blank" rel="noopener">http://www.thegeekstuff.com/2010/11/50-linux-commands</a> 这些都是一些很常用的命令，这篇文章中每个命令都有一些简单的示例说明它的用法， 对于想学习Unix/Linux的人，这些命令基本上都是需要掌握的。</p></blockquote><p>同时我也做了一张简易版的图例：</p><p><a href="https://i.loli.net/2017/08/22/599b9b3ca5bb7.png" target="_blank" rel="noopener"><img alt="Linux命令表" title="Linux命令表" data-src="https://i.loli.net/2017/08/22/599b9b3ca5bb7.png" class="lazyload"></a></p><h2 id="1-tar"><a href="#1-tar" class="headerlink" title="1. tar"></a>1. tar</h2><p>创建一个新的tar文件</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ tar cvf archive_name.tar dirname/</code></pre></div></div><p>解压tar文件</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ tar xvf archive_name.tar</code></pre></div></div><p>查看tar文件</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ tar tvf archive_name.tar</code></pre></div></div><p>更多示例：<a href="http://www.thegeekstuff.com/2010/04/unix-tar-command-examples/" target="_blank" rel="noopener">The Ultimate Tar Command Tutorial with 10 Practical Examples</a></p><h2 id="2-grep"><a href="#2-grep" class="headerlink" title="2. grep"></a>2. grep</h2><p>在文件中查找字符串(不区分大小写)</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ grep -i "the" demo_file</code></pre></div></div><p>输出成功匹配的行，以及该行之后的三行</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ grep -A 3 -i "example" demo_text</code></pre></div></div><p>在一个文件夹中递归查询包含指定字符串的文件</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ grep -r "ramesh" *</code></pre></div></div><p>更多示例：<a href="http://www.thegeekstuff.com/2009/03/15-practical-unix-grep-command-examples/" target="_blank" rel="noopener">Get a Grip on the Grep! – 15 Practical Grep Command Examples</a></p><h2 id="3-find"><a href="#3-find" class="headerlink" title="3. find"></a>3. find</h2><p>查找指定文件名的文件(不区分大小写)</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ find -iname "MyProgram.c"</code></pre></div></div><p>对找到的文件执行某个命令</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ find -iname "MyProgram.c" -exec md5sum {} \;</code></pre></div></div><p>查找home目录下的所有空文件</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ find ~ -empty</code></pre></div></div><p>更多示例：<a href="http://www.thegeekstuff.com/2009/03/15-practical-linux-find-command-examples/" target="_blank" rel="noopener">Mommy, I found it! — 15 Practical Linux Find Command Examples</a></p><h2 id="4-ssh"><a href="#4-ssh" class="headerlink" title="4. ssh"></a>4. ssh</h2><p>登录到远程主机</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ ssh -l jsmith remotehost.example.com</code></pre></div></div><p>调试ssh客户端</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ ssh -v -l jsmith remotehost.example.com</code></pre></div></div><p>显示ssh客户端版本</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ ssh -V</code></pre></div></div><p>更多示例：<a href="http://www.thegeekstuff.com/2008/05/5-basic-linux-ssh-client-commands/" target="_blank" rel="noopener">5 Basic Linux SSH Client Commands</a></p><h2 id="5-sed"><a href="#5-sed" class="headerlink" title="5. sed"></a>5. sed</h2><p>当你将Dos系统中的文件复制到Unix/Linux后，这个文件每行都会以\r\n结尾，sed可以轻易将其转换为Unix格式的文件，使用\n结尾的文件</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ sed 's/.$//' filename</code></pre></div></div><p>反转文件内容并输出</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ sed -n '1!G; h; p' filename</code></pre></div></div><p>为非空行添加行号</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ sed '/./=' thegeekstuff.txt | sed 'N; s/\n/ /'</code></pre></div></div><p>更多示例：<a href="http://www.thegeekstuff.com/2009/10/unix-sed-tutorial-advanced-sed-substitution-examples/" target="_blank" rel="noopener">Advanced Sed Substitution Examples</a></p><h2 id="6-awk"><a href="#6-awk" class="headerlink" title="6. awk"></a>6. awk</h2><p>删除重复行</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ awk '!($0 in array) { array[$0]; print}' temp</code></pre></div></div><p>打印/etc/passwd中所有包含同样的uid和gid的行</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ awk -F ':' '$3=$4' /etc/passwd</code></pre></div></div><p>打印文件中的指定部分的字段</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ awk '{print $2,$5;}' employee.txt</code></pre></div></div><p>更多示例：<a href="http://www.thegeekstuff.com/2010/01/8-powerful-awk-built-in-variables-fs-ofs-rs-ors-nr-nf-filename-fnr/" target="_blank" rel="noopener">8 Powerful Awk Built-in Variables – FS, OFS, RS, ORS, NR, NF, FILENAME, FNR</a></p><h2 id="7-vim"><a href="#7-vim" class="headerlink" title="7. vim"></a>7. vim</h2><p>打开文件并跳到第10行</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ vim +10 filename.txt</code></pre></div></div><p>打开文件跳到第一个匹配的行</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ vim +/search-term filename.txt</code></pre></div></div><p>以只读模式打开文件</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ vim -R /etc/passwd</code></pre></div></div><p>更多示例：<a href="http://www.thegeekstuff.com/2009/01/vi-and-vim-macro-tutorial-how-to-record-and-play/" target="_blank" rel="noopener">How To Record and Play in Vim Editor</a></p><h2 id="8-diff"><a href="#8-diff" class="headerlink" title="8. diff"></a>8. diff</h2><p>比较的时候忽略空白符</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ diff -w name_list.txt name_list_new.txt</code></pre></div></div><h2 id="9-sort"><a href="#9-sort" class="headerlink" title="9. sort"></a>9. sort</h2><p>以升序对文件内容排序</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ sort names.txt</code></pre></div></div><p>以降序对文件内容排序</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ sort -r names.txt</code></pre></div></div><p>以第三个字段对/etc/passwd的内容排序</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ sort -t: -k 3n /etc/passwd | more</code></pre></div></div><h2 id="10-export"><a href="#10-export" class="headerlink" title="10. export"></a>10. export</h2><p>输出跟字符串oracle匹配的环境变量</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ export | grep ORCALEdeclare -x ORACLE_BASE="/u01/app/oracle"declare -x ORACLE_HOME="/u01/app/oracle/product/10.2.0"declare -x ORACLE_SID="med"declare -x ORACLE_TERM="xterm"</code></pre></div></div><p>设置全局环境变量</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ export ORACLE_HOME=/u01/app/oracle/product/10.2.0</code></pre></div></div><h2 id="11-xargs"><a href="#11-xargs" class="headerlink" title="11. xargs"></a>11. xargs</h2><p>将所有图片文件拷贝到外部驱动器</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ ls *.jpg | xargs -n1 -i cp {} /external-hard-drive/directory</code></pre></div></div><p>将系统中所有jpd文件压缩打包</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ find / -name *.jpg -type f -print | xargs tar -cvzf images.tar.gz</code></pre></div></div><p>下载文件中列出的所有url对应的页面</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ cat url-list.txt | xargs wget –c</code></pre></div></div><h2 id="12-ls"><a href="#12-ls" class="headerlink" title="12. ls"></a>12. ls</h2><p>以易读的方式显示文件大小(显示为MB,GB…)</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ ls -lh-rw-r----- 1 ramesh team-dev 8.9M Jun 12 15:27 arch-linux.txt.gz</code></pre></div></div><p>以最后修改时间升序列出文件</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ ls -ltr</code></pre></div></div><p>在文件名后面显示文件类型</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ ls -F</code></pre></div></div><p>更多示例：<a href="http://www.thegeekstuff.com/2009/07/linux-ls-command-examples/" target="_blank" rel="noopener">Unix LS Command: 15 Practical Examples</a></p><h2 id="13-pwd"><a href="#13-pwd" class="headerlink" title="13. pwd"></a>13. pwd</h2><p>输出当前工作目录</p><h2 id="14-cd"><a href="#14-cd" class="headerlink" title="14. cd"></a>14. cd</h2><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>cd -可以在最近工作的两个目录间切换</code></pre></div></div><p>使用 <strong>shopt -s cdspell</strong> 可以设置自动对 cd 命令进行拼写检查</p><p>更多示例：<a href="http://www.thegeekstuff.com/2008/10/6-awesome-linux-cd-command-hacks-productivity-tip3-for-geeks/" target="_blank" rel="noopener">6 Awesome Linux cd command Hacks</a></p><h2 id="15-gzip"><a href="#15-gzip" class="headerlink" title="15. gzip"></a>15. gzip</h2><p>创建一个 <code>*.gz</code> 的压缩文件</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ gzip test.txt</code></pre></div></div><p>解压 <code>*.gz</code> 文件</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ gzip -d test.txt.gz</code></pre></div></div><p>显示压缩的比率</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ gzip -l *.gz     compressed        uncompressed  ratio uncompressed_name          23709               97975  75.8% asp-patch-rpms.txt</code></pre></div></div><h2 id="16-bzip2"><a href="#16-bzip2" class="headerlink" title="16. bzip2"></a>16. bzip2</h2><p>创建 <code>*.bz2</code> 压缩文件</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ bzip2 test.txt</code></pre></div></div><p>解压 <code>*.bz2</code> 文件</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>bzip2 -d test.txt.bz2</code></pre></div></div><p>更多示例：<a href="http://www.thegeekstuff.com/2010/10/bzcommand-examples/" target="_blank" rel="noopener">BZ is Eazy! bzip2, bzgrep, bzcmp, bzdiff, bzcat, bzless, bzmore examples</a></p><h2 id="17-uzip"><a href="#17-uzip" class="headerlink" title="17. uzip"></a>17. uzip</h2><p>解压 <code>*.zip</code> 文件</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ unzip test.zip</code></pre></div></div><p>查看 <code>*.zip</code> 文件的内容</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ unzip -l jasper.zipArchive:  jasper.zipLength     Date   Time    Name--------    ----   ----    ----40995  11-30-98 23:50   META-INF/MANIFEST.MF32169  08-25-98 21:07   classes_15964  08-25-98 21:07   classes_names10542  08-25-98 21:07   classes_ncomp</code></pre></div></div><h2 id="18-shutdown"><a href="#18-shutdown" class="headerlink" title="18. shutdown"></a>18. shutdown</h2><p>关闭系统并立即关机</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ shutdown -h now</code></pre></div></div><p>10分钟后关机</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ shutdown -h +10</code></pre></div></div><p>重启</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ shutdown -r now</code></pre></div></div><p>重启期间强制进行系统检查</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ shutdown -Fr now</code></pre></div></div><h2 id="19-ftp"><a href="#19-ftp" class="headerlink" title="19. ftp"></a>19. ftp</h2><p>ftp命令和sftp命令的用法基本相似连接ftp服务器并下载多个文件</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ ftp IP/hostnameftp> mget *.html</code></pre></div></div><p>显示远程主机上文件列表</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>ftp> mls *.html -/ftptest/features.html/ftptest/index.html/ftptest/othertools.html/ftptest/samplereport.html/ftptest/usage.html</code></pre></div></div><p>更多示例：<a href="http://www.thegeekstuff.com/2010/06/ftp-sftp-tutorial/" target="_blank" rel="noopener">FTP and SFTP Beginners Guide with 10 Examples</a></p><h2 id="20-crontab"><a href="#20-crontab" class="headerlink" title="20. crontab"></a>20. crontab</h2><p>查看某个用户的 <code>crontab</code> 入口</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ crontab -u john -l</code></pre></div></div><p>设置一个每十分钟执行一次的计划任务</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>*/10 * * * * /home/ramesh/check-disk-space</code></pre></div></div><p>更多示例：<a href="http://www.thegeekstuff.com/2009/06/15-practical-crontab-examples/" target="_blank" rel="noopener">Linux Crontab: 15 Awesome Cron Job Examples</a></p><h2 id="21-service"><a href="#21-service" class="headerlink" title="21. service"></a>21. service</h2><p>service 命令用于运行 System V init 脚本，这些脚本一般位于/etc/init.d文件下，这个命令可以直接运行这个文件夹里面的脚本，而不用加上路径</p><p>查看服务状态</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ service ssh status</code></pre></div></div><p>查看所有服务状态</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ service --status-all</code></pre></div></div><p>重启服务</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ service ssh restart</code></pre></div></div><h2 id="22-ps"><a href="#22-ps" class="headerlink" title="22. ps"></a>22. ps</h2><p>ps命令用于显示正在运行中的进程的信息，ps命令有很多选项，这里只列出了几个</p><p>查看当前正在运行的所有进程</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ ps -ef | more</code></pre></div></div><p>以树状结构显示当前正在运行的进程，H选项表示显示进程的层次结构</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ ps -efH | more</code></pre></div></div><h2 id="23-free"><a href="#23-free" class="headerlink" title="23. free"></a>23. free</h2><p>这个命令用于显示系统当前内存的使用情况，包括已用内存、可用内存和交换内存的情况</p><p>默认情况下free会以字节为单位输出内存的使用量</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ free             total       used       free     shared    buffers     cachedMem:       3566408    1580220    1986188          0     203988     902960-/+ buffers/cache:     473272    3093136Swap:      4000176          0    4000176</code></pre></div></div><p>如果你想以其他单位输出内存的使用量，需要加一个选项，-g为GB，-m为MB，-k为KB，-b为字节</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ free -g             total       used       free     shared    buffers     cachedMem:             3          1          1          0          0          0-/+ buffers/cache:          0          2Swap:            3          0          3</code></pre></div></div><p>如果你想查看所有内存的汇总，请使用-t选项，使用这个选项会在输出中加一个汇总行</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>ramesh@ramesh-laptop:~$ free -t             total       used       free     shared    buffers     cachedMem:       3566408    1592148    1974260          0     204260     912556-/+ buffers/cache:     475332    3091076Swap:      4000176          0    4000176Total:     7566584    1592148    5974436</code></pre></div></div><h2 id="24-top"><a href="#24-top" class="headerlink" title="24. top"></a>24. top</h2><p>top命令会显示当前系统中占用资源最多的一些进程（默认以CPU占用率排序）如果你想改变排序方式，可以在结果列表中点击O（大写字母O）会显示所有可用于排序的列，这个时候你就可以选择你想排序的列</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>Current Sort Field:  P  for window 1:DefSelect sort field via field letter, type any other key to return  a: PID        = Process Id              v: nDRT       = Dirty Pages count  d: UID        = User Id                 y: WCHAN      = Sleeping in Function  e: USER       = User Name               z: Flags      = Task Flags  ........</code></pre></div></div><p>如果只想显示某个特定用户的进程，可以使用-u选项</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ top -u oracle</code></pre></div></div><p>更多示例：<a href="http://www.thegeekstuff.com/2010/01/15-practical-unix-linux-top-command-examples/" target="_blank" rel="noopener">Can You Top This? 15 Practical Linux Top Command Examples</a></p><h2 id="25-df"><a href="#25-df" class="headerlink" title="25. df"></a>25. df</h2><p>显示文件系统的磁盘使用情况，默认情况下df -k 将以字节为单位输出磁盘的使用量</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ df -kFilesystem           1K-blocks      Used Available Use% Mounted on/dev/sda1             29530400   3233104  24797232  12% //dev/sda2            120367992  50171596  64082060  44% /home</code></pre></div></div><p>使用 <code>-h</code> 选项可以以更符合阅读习惯的方式显示磁盘使用量</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ df -hFilesystem                  Size   Used  Avail Capacity  iused      ifree %iused  Mounted on/dev/disk0s2               232Gi   84Gi  148Gi    37% 21998562   38864868   36%   /devfs                      187Ki  187Ki    0Bi   100%      648          0  100%   /devmap -hosts                   0Bi    0Bi    0Bi   100%        0          0  100%   /netmap auto_home                0Bi    0Bi    0Bi   100%        0          0  100%   /home/dev/disk0s4               466Gi   45Gi  421Gi    10%   112774  440997174    0%   /Volumes/BOOTCAMP//app@izenesoft.cn/public  2.7Ti  1.3Ti  1.4Ti    48%        0 18446744073709551615    0%   /Volumes/public</code></pre></div></div><p>使用 <code>-T</code> 选项显示文件系统类型</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ df -TFilesystem    Type   1K-blocks      Used Available Use% Mounted on/dev/sda1     ext4    29530400   3233120  24797216  12% //dev/sda2     ext4   120367992  50171596  64082060  44% /home</code></pre></div></div><h2 id="26-kill"><a href="#26-kill" class="headerlink" title="26. kill"></a>26. kill</h2><p>kill 用于终止一个进程。一般我们会先用ps -ef查找某个进程得到它的进程号，然后再使用kill -9 进程号终止该进程。你还可以使用killall、pkill、xkill来终止进程</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ ps -ef | grep vimramesh    7243  7222  9 22:43 pts/2    00:00:00 vim$ kill -9 7243</code></pre></div></div><p>更多示例：<a href="http://www.thegeekstuff.com/2009/12/4-ways-to-kill-a-process-kill-killall-pkill-xkill/" target="_blank" rel="noopener">4 Ways to Kill a Process – kill, killall, pkill, xkill</a></p><h2 id="27-rm"><a href="#27-rm" class="headerlink" title="27. rm"></a>27. rm</h2><p>删除文件前先确认</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ rm -i filename.txt</code></pre></div></div><p>在文件名中使用shell的元字符会非常有用。删除文件前先打印文件名并进行确认</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ rm -i file*</code></pre></div></div><p>递归删除文件夹下所有文件，并删除该文件夹</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ rm -r example</code></pre></div></div><h2 id="28-cp"><a href="#28-cp" class="headerlink" title="28. cp"></a>28. cp</h2><p>拷贝文件1到文件2，并保持文件的权限、属主和时间戳</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ cp -p file1 file2</code></pre></div></div><p>拷贝file1到file2，如果file2存在会提示是否覆盖</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ cp -i file1 file2</code></pre></div></div><h2 id="29-mv"><a href="#29-mv" class="headerlink" title="29. mv"></a>29. mv</h2><p>将文件名file1重命名为file2，如果file2存在则提示是否覆盖</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ mv -i file1 file2</code></pre></div></div><p>注意如果使用-f选项则不会进行提示</p><p>-v会输出重命名的过程，当文件名中包含通配符时，这个选项会非常方便</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ mv -v file1 file2</code></pre></div></div><h2 id="30-cat"><a href="#30-cat" class="headerlink" title="30. cat"></a>30. cat</h2><p>你可以一次查看多个文件的内容，下面的命令会先打印file1的内容，然后打印file2的内容</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ cat file1 file2</code></pre></div></div><p>-n命令可以在每行的前面加上行号</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ cat -n /etc/logrotate.conf/var/log/btmp {missingok3        monthly4        create 0660 root utmp5        rotate 16 }</code></pre></div></div><h2 id="31-mount"><a href="#31-mount" class="headerlink" title="31. mount"></a>31. mount</h2><p>如果要挂载一个文件系统，需要先创建一个目录，然后将这个文件系统挂载到这个目录上</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code># mkdir /u01# mount /dev/sdb1 /u01</code></pre></div></div><p>也可以把它添加到fstab中进行自动挂载，这样任何时候系统重启的时候，文件系统都会被加载</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>/dev/sdb1 /u01 ext2 defaults 0 2</code></pre></div></div><h2 id="32-chmod"><a href="#32-chmod" class="headerlink" title="32. chmod"></a>32. chmod</h2><p>chmod用于改变文件和目录的权限</p><p>给指定文件的属主和属组所有权限(包括读、写、执行)</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ chmod ug+rwx file.txt</code></pre></div></div><p>删除指定文件的属组的所有权限</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ chmod g-rwx file.txt</code></pre></div></div><p>修改目录的权限，以及递归修改目录下面所有文件和子目录的权限</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ chmod -R ug+rwx file.txt</code></pre></div></div><p>更多示例：<a href="http://www.thegeekstuff.com/2010/06/chmod-command-examples/" target="_blank" rel="noopener">7 Chmod Command Examples for Beginners</a></p><h2 id="33-chown"><a href="#33-chown" class="headerlink" title="33. chown"></a>33. chown</h2><p>chown用于改变文件属主和属组</p><p>同时将某个文件的属主改为oracle，属组改为db</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ chown oracle:dba dbora.sh</code></pre></div></div><p>使用-R选项对目录和目录下的文件进行递归修改</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ chown -R oracle:dba /home/oracle</code></pre></div></div><h2 id="34-passwd"><a href="#34-passwd" class="headerlink" title="34. passwd"></a>34. passwd</h2><p>passwd用于在命令行修改密码，使用这个命令会要求你先输入旧密码，然后输入新密码</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ passwd</code></pre></div></div><p>超级用户可以用这个命令修改其他用户的密码，这个时候不需要输入用户的密码</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code># passwd USERNAME</code></pre></div></div><p>passwd还可以删除某个用户的密码，这个命令只有root用户才能操作，删除密码后，这个用户不需要输入密码就可以登录到系统</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code># passwd -d USERNAME</code></pre></div></div><h2 id="35-mkdir"><a href="#35-mkdir" class="headerlink" title="35. mkdir"></a>35. mkdir</h2><p>在home目录下创建一个名为temp的目录</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ mkdir ~/temp</code></pre></div></div><p>使用-p选项可以创建一个路径上所有不存在的目录</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ mkdir -p dir1/dir2/dir3/dir4/</code></pre></div></div><h2 id="36-ifconfig"><a href="#36-ifconfig" class="headerlink" title="36. ifconfig"></a>36. ifconfig</h2><p>ifconfig用于查看和配置Linux系统的网络接口</p><p>查看所有网络接口及其状态</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ ifconfig -a</code></pre></div></div><p>使用up和down命令启动或停止某个接口</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ ifconfig eth0 up$ ifconfig eth0 down</code></pre></div></div><p>更多示例：<a href="http://www.thegeekstuff.com/2009/03/ifconfig-7-examples-to-configure-network-interface/" target="_blank" rel="noopener">Ifconfig: 7 Examples To Configure Network Interface</a></p><h2 id="37-uname"><a href="#37-uname" class="headerlink" title="37. uname"></a>37. uname</h2><p>uname可以显示一些重要的系统信息，例如内核名称、主机名、内核版本号、处理器类型之类的信息</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ uname -aLinux john-laptop 2.6.32-24-generic #41-Ubuntu SMP Thu Aug 19 01:12:52 UTC 2010 i686 GNU/Linux</code></pre></div></div><h2 id="38-whereis"><a href="#38-whereis" class="headerlink" title="38. whereis"></a>38. whereis</h2><p>当你不知道某个命令的位置时可以使用whereis命令，下面使用whereis查找ls的位置</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ whereis lsls: /bin/ls /usr/share/man/man1/ls.1.gz /usr/share/man/man1p/ls.1p.gz</code></pre></div></div><p>当你想查找某个可执行程序的位置，但这个程序又不在whereis的默认目录下，你可以使用-B选项，并指定目录作为这个选项的参数。下面的命令在/tmp目录下查找lsmk命令</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ whereis -u -B /tmp -f lsmklsmk: /tmp/lsmk</code></pre></div></div><h2 id="39-whatis"><a href="#39-whatis" class="headerlink" title="39. whatis"></a>39. whatis</h2><p>wathis显示某个命令的描述信息</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ whatis lsls        (1)  - list directory contents$ whatis ifconfigifconfig (8)         - configure a network interface</code></pre></div></div><h2 id="40-locate"><a href="#40-locate" class="headerlink" title="40. locate"></a>40. locate</h2><p>locate命名可以显示某个指定文件（或一组文件）的路径，它会使用由updatedb创建的数据库</p><p>下面的命令会显示系统中所有包含crontab字符串的文件</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ locate crontab/etc/anacrontab/etc/crontab/usr/bin/crontab/usr/share/doc/cron/examples/crontab2english.pl.gz/usr/share/man/man1/crontab.1.gz/usr/share/man/man5/anacrontab.5.gz/usr/share/man/man5/crontab.5.gz/usr/share/vim/vim72/syntax/crontab.vim</code></pre></div></div><h2 id="41-man"><a href="#41-man" class="headerlink" title="41. man"></a>41. man</h2><p>显示某个命令的man页面</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ man crontab</code></pre></div></div><p>有些命令可能会有多个man页面，每个man页面对应一种命令类型</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ man SECTION-NUMBER commandname</code></pre></div></div><p>man页面一般可以分为8种命令类型</p><ol><li>用户命令</li><li>系统调用</li><li>c库函数</li><li>设备与网络接口</li><li>文件格式</li><li>游戏与屏保</li><li>环境、表、宏</li><li>系统管理员命令和后台运行命令</li></ol><p>例如，我们执行 <code>whatis crontab</code>，你可以看到 <code>crontab</code> 有两个命令类型1和5，所以我们可以通过下面的命令查看命令类型5的man页面</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ whatis crontabcrontab (1)          - maintain crontab files for individual users (V3)crontab (5)          - tables for driving cron$ man 5 crontab</code></pre></div></div><h2 id="42-tail"><a href="#42-tail" class="headerlink" title="42. tail"></a>42. tail</h2><p>tail命令默认显示文件最后的10行文本</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ tail filename.txt</code></pre></div></div><p>你可以使用-n选项指定要显示的行数</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ tail -n N filename.txt</code></pre></div></div><p>你也可以使用-f选项进行实时查看，这个命令执行后会等待，如果有新行添加到文件尾部，它会继续输出新的行，在查看日志时这个选项会非常有用。你可以通过CTRL-C终止命令的执行</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ tail -f log-file</code></pre></div></div><p>更多示例：<a href="http://www.thegeekstuff.com/2009/09/multitail-to-view-tail-f-output-of-multiple-log-files-in-one-terminal/" target="_blank" rel="noopener">3 Methods To View tail -f output of Multiple Log Files in One Terminal</a></p><h2 id="43-less"><a href="#43-less" class="headerlink" title="43. less"></a>43. less</h2><p>这个命名可以在不加载整个文件的前提下显示文件内容，在查看大型日志文件的时候这个命令会非常有用</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ less huge-log-file.log</code></pre></div></div><p>当你用less命令打开某个文件时，下面两个按键会给你带来很多帮助，他们用于向前和向后滚屏</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>CTRL+F – forward one windowCTRL+B – backward one window</code></pre></div></div><p>更多示例：<a href="http://www.thegeekstuff.com/2010/02/unix-less-command-10-tips-for-effective-navigation/" target="_blank" rel="noopener">Unix Less Command: 10 Tips for Effective Navigation</a></p><h2 id="44-su"><a href="#44-su" class="headerlink" title="44. su"></a>44. su</h2><p>su命令用于切换用户账号，超级用户使用这个命令可以切换到任何其他用户而不用输入密码</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ su - USERNAME</code></pre></div></div><p>用另外一个用户名执行一个命令下面的示例中用户john使用raj用户名执行ls命令，执行完后返回john的账号</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>[john@dev-server]$ su - raj -c 'ls'[john@dev-server]$</code></pre></div></div><p>用指定用户登录，并且使用指定的shell程序，而不用默认的</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ su -s 'SHELLNAME' USERNAME</code></pre></div></div><h2 id="45-mysql"><a href="#45-mysql" class="headerlink" title="45. mysql"></a>45. mysql</h2><p>mysql可能是Linux上使用最广泛的数据库，即使你没有在你的服务器上安装mysql，你也可以使用mysql客户端连接到远程的mysql服务器</p><p>连接一个远程数据库，需要输入密码</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ mysql -u root -p -h 192.168.1.2</code></pre></div></div><p>连接本地数据库</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ mysql -u root -p</code></pre></div></div><p>你也可以在命令行中输入数据库密码，只需要在-p后面加上密码作为参数，可以直接写在p后面而不用加空格</p><h2 id="46-yum"><a href="#46-yum" class="headerlink" title="46. yum"></a>46. yum</h2><p>使用yum安装apache</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ yum install httpd</code></pre></div></div><p>更新apache</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ yum update httpd</code></pre></div></div><p>卸载/删除apache</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ yum remove httpd</code></pre></div></div><h2 id="47-rpm"><a href="#47-rpm" class="headerlink" title="47. rpm"></a>47. rpm</h2><p>使用rpm安装apache</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code># rpm -ivh httpd-2.2.3-22.0.1.el5.i386.rpm</code></pre></div></div><p>更新apache</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code># rpm -uvh httpd-2.2.3-22.0.1.el5.i386.rpm</code></pre></div></div><p>卸载/删除apache</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code># rpm -ev httpd</code></pre></div></div><p>更多示例：<a href="http://www.thegeekstuff.com/2010/07/rpm-command-examples/" target="_blank" rel="noopener">RPM Command: 15 Examples to Install, Uninstall, Upgrade, Query RPM Packages</a></p><h2 id="48-ping"><a href="#48-ping" class="headerlink" title="48. ping"></a>48. ping</h2><p>ping一个远程主机，只发5个数据包</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ ping -c 5 gmail.com</code></pre></div></div><p>更多示例：<a href="http://www.thegeekstuff.com/2009/11/ping-tutorial-13-effective-ping-command-examples/" target="_blank" rel="noopener">Ping Tutorial: 15 Effective Ping Command Examples</a></p><h2 id="49-date"><a href="#49-date" class="headerlink" title="49. date"></a>49. date</h2><p>设置系统日期</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code># date -s "01/31/2010 23:59:53"</code></pre></div></div><p>当你修改了系统时间，你需要同步硬件时间和系统时间</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code># hwclock –systohc# hwclock --systohc –utc</code></pre></div></div><h2 id="50-wget"><a href="#50-wget" class="headerlink" title="50. wget"></a>50. wget</h2><p>使用wget从网上下载软件、音乐、视频</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ wget http://prdownloads.sourceforge.net/sourceforge/nagios/nagios-3.2.1.tar.gz</code></pre></div></div><p>下载文件并以指定的文件名保存文件</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ wget -O taglist.zip http://www.vim.org/scripts/download_script.php?src_id=7701</code></pre></div></div><p>更多示例：<a href="http://www.thegeekstuff.com/2009/09/the-ultimate-wget-download-guide-with-15-awesome-examples/" target="_blank" rel="noopener">The Ultimate Wget Download Guide With 15 Awesome Examples</a></p><div class="copy-right"><p>本文由 <a href="javascript:void(0);">王爵nice</a> 创作， 采用 <a href="https://creativecommons.org/licenses/by/4.0/deed.zh" target="_blank" rel="noopener">知识共享署名4.0</a> 国际许可协议进行许可。</p><p>本站文章除注明转载/出处外，均为本站原创或翻译，转载前请务必署名。</p></div></article></body></html>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 操作系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java8中的Stream，一行代码，让集合操作飞起来！</title>
      <link href="/2020/01/13/Java8%E4%B8%AD%E7%9A%84Stream%EF%BC%8C%E4%B8%80%E8%A1%8C%E4%BB%A3%E7%A0%81%EF%BC%8C%E8%AE%A9%E9%9B%86%E5%90%88%E6%93%8D%E4%BD%9C%E9%A3%9E%E8%B5%B7%E6%9D%A5%EF%BC%81/"/>
      <url>/2020/01/13/Java8%E4%B8%AD%E7%9A%84Stream%EF%BC%8C%E4%B8%80%E8%A1%8C%E4%BB%A3%E7%A0%81%EF%BC%8C%E8%AE%A9%E9%9B%86%E5%90%88%E6%93%8D%E4%BD%9C%E9%A3%9E%E8%B5%B7%E6%9D%A5%EF%BC%81/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>java8也出来好久了，接口默认方法，lambda表达式，函数式接口，Date API等特性还是有必要去了解一下。比如在项目中经常用到集合，遍历集合可以试下lambda表达式，经常还要对集合进行过滤和排序，Stream就派上用场了。用习惯了，不得不说真的很好用。</p><p>Stream作为java8的新特性，基于lambda表达式，是对集合对象功能的增强，它专注于对集合对象进行各种高效、便利的聚合操作或者大批量的数据操作，提高了编程效率和代码可读性。</p><p>Stream的原理：将要处理的元素看做一种流，流在管道中传输，并且可以在管道的节点上处理，包括过滤筛选、去重、排序、聚合等。元素流在管道中经过中间操作的处理，最后由最终操作得到前面处理的结果。</p><p>集合有两种方式生成流：</p><ul><li>stream() − 为集合创建串行流</li><li>parallelStream() - 为集合创建并行流</li></ul><p><a href="00A4764C88EB41819AAB9C696DCAF249" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="00A4764C88EB41819AAB9C696DCAF249" class="lazyload"></a></p><p>上图中是Stream类的类结构图，里面包含了大部分的中间和终止操作。</p><p>中间操作主要有以下方法（此类型方法返回的都是Stream）：map (mapToInt, flatMap 等)、 filter、 distinct、 sorted、 peek、 limit、 skip、 parallel、 sequential、 unordered</p><p>终止操作主要有以下方法：forEach、 forEachOrdered、 toArray、 reduce、 collect、 min、 max、 count、 anyMatch、 allMatch、 noneMatch、 findFirst、 findAny、 iterator</p><h2 id="举例说明"><a href="#举例说明" class="headerlink" title="举例说明"></a>举例说明</h2><p>首先为了说明Stream对对象集合的操作，新建一个Student类（学生类）,覆写了equals()和hashCode()方法</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span> </span>{}</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(Long id, String name, <span class="keyword">int</span> age, String address)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.address = address;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Student{"</span> +</span><br><span class="line">                <span class="string">"id="</span> + id +</span><br><span class="line">                <span class="string">", name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", age="</span> + age +</span><br><span class="line">                <span class="string">", address='"</span> + address + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">'}'</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span> == o) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="keyword">null</span> || getClass() != o.getClass()) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        Student student = (Student) o;</span><br><span class="line">        <span class="keyword">return</span> age == student.age &&</span><br><span class="line">                Objects.equals(id, student.id) &&</span><br><span class="line">                Objects.equals(name, student.name) &&</span><br><span class="line">                Objects.equals(address, student.address);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> Objects.hash(id, name, age, address);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><h3 id="filter（筛选）"><a href="#filter（筛选）" class="headerlink" title="filter（筛选）"></a>filter（筛选）</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String [] args)</span> </span>{</span><br><span class="line">    Student s1 = <span class="keyword">new</span> Student(<span class="number">1L</span>, <span class="string">"肖战"</span>, <span class="number">15</span>, <span class="string">"浙江"</span>);</span><br><span class="line">    Student s2 = <span class="keyword">new</span> Student(<span class="number">2L</span>, <span class="string">"王一博"</span>, <span class="number">15</span>, <span class="string">"湖北"</span>);</span><br><span class="line">    Student s3 = <span class="keyword">new</span> Student(<span class="number">3L</span>, <span class="string">"杨紫"</span>, <span class="number">17</span>, <span class="string">"北京"</span>);</span><br><span class="line">    Student s4 = <span class="keyword">new</span> Student(<span class="number">4L</span>, <span class="string">"李现"</span>, <span class="number">17</span>, <span class="string">"浙江"</span>);</span><br><span class="line">    List<student> students = <span class="keyword">new</span> ArrayList<>();</student></span><br><span class="line">    students.add(s1);</span><br><span class="line">    students.add(s2);</span><br><span class="line">    students.add(s3);</span><br><span class="line">    students.add(s4);</span><br><span class="line"></span><br><span class="line">    List<student> streamStudents = testFilter(students);</student></span><br><span class="line">    streamStudents.forEach(System.out::println);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 集合的筛选</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> students</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> List<student> <span class="title">testFilter</span><span class="params">(List<student> students)</student></span> </student></span>{</span><br><span class="line">    <span class="comment">//筛选年龄大于15岁的学生</span></span><br><span class="line"><span class="comment">//        return students.stream().filter(s -> s.getAge()>15).collect(Collectors.toList());</span></span><br><span class="line">    <span class="comment">//筛选住在浙江省的学生</span></span><br><span class="line">    <span class="keyword">return</span> students.stream().filter(s -><span class="string">"浙江"</span>.equals(s.getAddress())).collect(Collectors.toList());</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p>运行结果：<br><a href="064F89CEBBDC4437B44DD3125529A4DA" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="064F89CEBBDC4437B44DD3125529A4DA" class="lazyload"></a></p><p>这里我们创建了四个学生，经过filter的筛选，筛选出地址是浙江的学生集合。</p><h3 id="map-转换"><a href="#map-转换" class="headerlink" title="map(转换)"></a>map(转换)</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String [] args)</span> </span>{</span><br><span class="line">    Student s1 = <span class="keyword">new</span> Student(<span class="number">1L</span>, <span class="string">"肖战"</span>, <span class="number">15</span>, <span class="string">"浙江"</span>);</span><br><span class="line">    Student s2 = <span class="keyword">new</span> Student(<span class="number">2L</span>, <span class="string">"王一博"</span>, <span class="number">15</span>, <span class="string">"湖北"</span>);</span><br><span class="line">    Student s3 = <span class="keyword">new</span> Student(<span class="number">3L</span>, <span class="string">"杨紫"</span>, <span class="number">17</span>, <span class="string">"北京"</span>);</span><br><span class="line">    Student s4 = <span class="keyword">new</span> Student(<span class="number">4L</span>, <span class="string">"李现"</span>, <span class="number">17</span>, <span class="string">"浙江"</span>);</span><br><span class="line">    List<student> students = <span class="keyword">new</span> ArrayList<>();</student></span><br><span class="line">    students.add(s1);</span><br><span class="line">    students.add(s2);</span><br><span class="line">    students.add(s3);</span><br><span class="line">    students.add(s4);</span><br><span class="line"></span><br><span class="line">    testMap(students);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 集合转换</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> students</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testMap</span><span class="params">(List<student> students)</student></span> </span>{</span><br><span class="line">    <span class="comment">//在地址前面加上部分信息，只获取地址输出</span></span><br><span class="line">    List<string> addresses = students.stream().map(s -><span class="string">"住址:"</span>+s.getAddress()).collect(Collectors.toList());</string></span><br><span class="line">    addresses.forEach(a ->System.out.println(a));</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p>运行结果</p><p><a href="6D2F8F77F11549D1967417EB622A3D8A" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="6D2F8F77F11549D1967417EB622A3D8A" class="lazyload"></a></p><p>map就是将对应的元素按照给定的方法进行转换。</p><h3 id="distinct-去重"><a href="#distinct-去重" class="headerlink" title="distinct(去重)"></a>distinct(去重)</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String [] args) {</span><br><span class="line">  testDistinct1();</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 集合去重（基本类型）</span><br><span class="line"> */</span><br><span class="line">private static void testDistinct1() {</span><br><span class="line">    //简单字符串的去重</span><br><span class="line">    List<string> list = Arrays.asList("111","222","333","111","222");</string></span><br><span class="line">    list.stream().distinct().forEach(System.out::println);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p>运行结果：<br><a href="F06DD4734C914CD29A6E1A270DE26D6B" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="F06DD4734C914CD29A6E1A270DE26D6B" class="lazyload"></a></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String [] args) {</span><br><span class="line">  testDistinct2();</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 集合去重（引用对象）</span><br><span class="line"> */</span><br><span class="line">private static void testDistinct2() {</span><br><span class="line">    //引用对象的去重，引用对象要实现hashCode和equal方法，否则去重无效</span><br><span class="line">    Student s1 = new Student(1L, "肖战", 15, "浙江");</span><br><span class="line">    Student s2 = new Student(2L, "王一博", 15, "湖北");</span><br><span class="line">    Student s3 = new Student(3L, "杨紫", 17, "北京");</span><br><span class="line">    Student s4 = new Student(4L, "李现", 17, "浙江");</span><br><span class="line">    Student s5 = new Student(1L, "肖战", 15, "浙江");</span><br><span class="line">    List<student> students = new ArrayList<>();</student></span><br><span class="line">    students.add(s1);</span><br><span class="line">    students.add(s2);</span><br><span class="line">    students.add(s3);</span><br><span class="line">    students.add(s4);</span><br><span class="line">    students.add(s5);</span><br><span class="line">    students.stream().distinct().forEach(System.out::println);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p>运行结果：</p><p><a href="C11539ADDC1E430F8ED438AE06020BE2" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="C11539ADDC1E430F8ED438AE06020BE2" class="lazyload"></a></p><p>可以看出，两个重复的“肖战”同学进行了去重，这不仅因为使用了distinct()方法，而且因为Student对象重写了equals和hashCode()方法，否则去重是无效的。</p><h3 id="sorted-排序"><a href="#sorted-排序" class="headerlink" title="sorted(排序)"></a>sorted(排序)</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String [] args) {</span><br><span class="line">    testSort1();</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 集合排序（默认排序）</span><br><span class="line"> */</span><br><span class="line">private static void testSort1() {</span><br><span class="line">    List<string> list = Arrays.asList("333","222","111");</string></span><br><span class="line">    list.stream().sorted().forEach(System.out::println);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p>运行结果：</p><p><a href="9A7919666C0F47CE9E5BD3EB8E9290C0" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="9A7919666C0F47CE9E5BD3EB8E9290C0" class="lazyload"></a></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String [] args) {</span><br><span class="line">    testSort2();</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 集合排序（指定排序规则）</span><br><span class="line"> */</span><br><span class="line">private static void testSort2() {</span><br><span class="line">    Student s1 = new Student(1L, "肖战", 15, "浙江");</span><br><span class="line">    Student s2 = new Student(2L, "王一博", 15, "湖北");</span><br><span class="line">    Student s3 = new Student(3L, "杨紫", 17, "北京");</span><br><span class="line">    Student s4 = new Student(4L, "李现", 17, "浙江");</span><br><span class="line">    List<student> students = new ArrayList<>();</student></span><br><span class="line">    students.add(s1);</span><br><span class="line">    students.add(s2);</span><br><span class="line">    students.add(s3);</span><br><span class="line">    students.add(s4);</span><br><span class="line">    students.stream()</span><br><span class="line">            .sorted((stu1,stu2) ->Long.compare(stu2.getId(), stu1.getId()))</span><br><span class="line">            .sorted((stu1,stu2) -> Integer.compare(stu2.getAge(),stu1.getAge()))</span><br><span class="line">            .forEach(System.out::println);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p>运行结果：</p><p><a href="81C4A1F144444D94A87D790C4D5AD75D" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="81C4A1F144444D94A87D790C4D5AD75D" class="lazyload"></a></p><p>上面指定排序规则，先按照学生的id进行降序排序，再按照年龄进行降序排序</p><h3 id="limit（限制返回个数）"><a href="#limit（限制返回个数）" class="headerlink" title="limit（限制返回个数）"></a>limit（限制返回个数）</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String [] args) {</span><br><span class="line">    testLimit();</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 集合limit，返回前几个元素</span><br><span class="line"> */</span><br><span class="line">private static void testLimit() {</span><br><span class="line">    List<string> list = Arrays.asList("333","222","111");</string></span><br><span class="line">    list.stream().limit(2).forEach(System.out::println);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p>运行结果：</p><p><a href="19C0E0221FDE405D8E0ED0CCA3E6BF58" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="19C0E0221FDE405D8E0ED0CCA3E6BF58" class="lazyload"></a></p><h3 id="skip-删除元素"><a href="#skip-删除元素" class="headerlink" title="skip(删除元素)"></a>skip(删除元素)</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String [] args) {</span><br><span class="line">    testSkip();</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 集合skip，删除前n个元素</span><br><span class="line"> */</span><br><span class="line">private static void testSkip() {</span><br><span class="line">    List<string> list = Arrays.asList("333","222","111");</string></span><br><span class="line">    list.stream().skip(2).forEach(System.out::println);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p>运行结果：</p><p><a href="D06818C8704B4C80AEA807013CCBBA9F" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="D06818C8704B4C80AEA807013CCBBA9F" class="lazyload"></a></p><h3 id="reduce-聚合"><a href="#reduce-聚合" class="headerlink" title="reduce(聚合)"></a>reduce(聚合)</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String [] args) {</span><br><span class="line">    testReduce();</span><br><span class="line">}</span><br><span class="line">/**</span><br><span class="line"> * 集合reduce,将集合中每个元素聚合成一条数据</span><br><span class="line"> */</span><br><span class="line">private static void testReduce() {</span><br><span class="line">    List<string> list = Arrays.asList("欢","迎","你");</string></span><br><span class="line">    String appendStr = list.stream().reduce("北京",(a,b) -> a+b);</span><br><span class="line">    System.out.println(appendStr);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p>运行结果：</p><p><a href="A9E5293DA8754B658839A11CBB609BEF" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="A9E5293DA8754B658839A11CBB609BEF" class="lazyload"></a></p><h3 id="min-求最小值"><a href="#min-求最小值" class="headerlink" title="min(求最小值)"></a>min(求最小值)</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String [] args) {</span><br><span class="line">    testMin();</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 求集合中元素的最小值</span><br><span class="line"> */</span><br><span class="line">private static void testMin() {</span><br><span class="line">    Student s1 = new Student(1L, "肖战", 14, "浙江");</span><br><span class="line">    Student s2 = new Student(2L, "王一博", 15, "湖北");</span><br><span class="line">    Student s3 = new Student(3L, "杨紫", 17, "北京");</span><br><span class="line">    Student s4 = new Student(4L, "李现", 17, "浙江");</span><br><span class="line">    List<student> students = new ArrayList<>();</student></span><br><span class="line">    students.add(s1);</span><br><span class="line">    students.add(s2);</span><br><span class="line">    students.add(s3);</span><br><span class="line">    students.add(s4);</span><br><span class="line">    Student minS = students.stream().min((stu1,stu2) ->Integer.compare(stu1.getAge(),stu2.getAge())).get();</span><br><span class="line">    System.out.println(minS.toString());</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p>运行结果：</p><p><a href="D7E4271D589941F99438A5D5A63FF2D3" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="D7E4271D589941F99438A5D5A63FF2D3" class="lazyload"></a><br>上面是求所有学生中年龄最小的一个，max同理，求最大值。</p><h3 id="anyMatch-allMatch-noneMatch（匹配）"><a href="#anyMatch-allMatch-noneMatch（匹配）" class="headerlink" title="anyMatch/allMatch/noneMatch（匹配）"></a>anyMatch/allMatch/noneMatch（匹配）</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String [] args) {</span><br><span class="line">    testMatch();</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">private static void testMatch() {</span><br><span class="line">    Student s1 = new Student(1L, "肖战", 15, "浙江");</span><br><span class="line">    Student s2 = new Student(2L, "王一博", 15, "湖北");</span><br><span class="line">    Student s3 = new Student(3L, "杨紫", 17, "北京");</span><br><span class="line">    Student s4 = new Student(4L, "李现", 17, "浙江");</span><br><span class="line">    List<student> students = new ArrayList<>();</student></span><br><span class="line">    students.add(s1);</span><br><span class="line">    students.add(s2);</span><br><span class="line">    students.add(s3);</span><br><span class="line">    students.add(s4);</span><br><span class="line">    Boolean anyMatch = students.stream().anyMatch(s ->"湖北".equals(s.getAddress()));</span><br><span class="line">    if (anyMatch) {</span><br><span class="line">        System.out.println("有湖北人");</span><br><span class="line">    }</span><br><span class="line">    Boolean allMatch = students.stream().allMatch(s -> s.getAge()>=15);</span><br><span class="line">    if (allMatch) {</span><br><span class="line">        System.out.println("所有学生都满15周岁");</span><br><span class="line">    }</span><br><span class="line">    Boolean noneMatch = students.stream().noneMatch(s -> "杨洋".equals(s.getName()));</span><br><span class="line">    if (noneMatch) {</span><br><span class="line">        System.out.println("没有叫杨洋的同学");</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p>运行结果：</p><p><a href="B0478494832B4B2B8A4DAB6D063E4448" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="B0478494832B4B2B8A4DAB6D063E4448" class="lazyload"></a></p><p>anyMatch：Stream 中任意一个元素符合传入的 predicate，返回 true</p><p>allMatch：Stream 中全部元素符合传入的 predicate，返回 true</p><p>noneMatch：Stream 中没有一个元素符合传入的 predicate，返回 true</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>上面介绍了Stream常用的一些方法，虽然对集合的遍历和操作可以用以前常规的方式，但是当业务逻辑复杂的时候，你会发现代码量很多，可读性很差，明明一行代码解决的事情，你却写了好几行。试试lambda表达式，试试Stream，你会有不一样的体验。</p></body></html>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> lambda </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> lambda </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>理解注解中的@Inherited</title>
      <link href="/2019/07/03/%E7%90%86%E8%A7%A3%E6%B3%A8%E8%A7%A3%E4%B8%AD%E7%9A%84@Inherited/"/>
      <url>/2019/07/03/%E7%90%86%E8%A7%A3%E6%B3%A8%E8%A7%A3%E4%B8%AD%E7%9A%84@Inherited/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><h2 id="Inherited："><a href="#Inherited：" class="headerlink" title="@Inherited："></a>@Inherited：</h2><p>   @Inherited 元注解是一个标记注解，@Inherited阐述了某个被标注的类型是被继承的。<br>如果一个使用了@Inherited修饰的annotation类型被用于一个class，则这个annotation将被用于该class的子类。 </p><p><strong>注意</strong>：@Inherited annotation类型是被标注过的class的子类所继承。类并不从它所实现的接口继承annotation， 方法并不从它所重载的方法继承annotation。 </p><p>　　当@Inherited annotation类型标注的annotation的Retention是RetentionPolicy.RUNTIME，则反射API增强了这种继承性。 如果我们使用java.lang.reflect去查询一个@Inherited annotation类型的annotation时，反射代码检查将展开工作： 检查class和其父类，直到发现指定的annotation类型被发现，或者到达类继承结构的顶层。 </p><p>看下面的例子： </p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target</span>(ElementType.TYPE)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> ATable {</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">name</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="meta">@Target</span>(ElementType.TYPE)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> BTable {</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">name</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@ATable</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Super</span> </span>{</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> superx;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">int</span> supery;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Super</span><span class="params">()</span> </span>{</span><br><span class="line">}</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">superX</span><span class="params">()</span></span>{  </span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">    }  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">superY</span><span class="params">()</span></span>{  </span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">    }  </span><br><span class="line">    </span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@BTable</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Sub</span> <span class="keyword">extends</span> <span class="title">Super</span></span>{</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> subx;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">int</span> suby;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">Sub</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{  </span><br><span class="line">}  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Sub</span><span class="params">(<span class="keyword">int</span> i)</span></span>{  </span><br><span class="line">    }  </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">subX</span><span class="params">()</span></span>{  </span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">    }  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">subY</span><span class="params">()</span></span>{  </span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">    }  </span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestMain</span> </span>{</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line"></span><br><span class="line">Class<sub> clazz = Sub<span class="class">.<span class="keyword">class</span></span>;</sub></span><br><span class="line">    </span><br><span class="line">System.out.println(<span class="string">"============================Field==========================="</span>);  </span><br><span class="line">System.out.println(Arrays.toString(clazz.getFields()));</span><br><span class="line">        System.out.println(Arrays.toString(clazz.getDeclaredFields()));  <span class="comment">//all + 自身  </span></span><br><span class="line">        System.out.println(<span class="string">"============================Method==========================="</span>);</span><br><span class="line">        System.out.println(Arrays.toString(clazz.getMethods()));   <span class="comment">//public + 继承  </span></span><br><span class="line">        <span class="comment">//all + 自身  </span></span><br><span class="line">        System.out.println(Arrays.toString(clazz.getDeclaredMethods()));</span><br><span class="line">        System.out.println(<span class="string">"============================Constructor==========================="</span>);  </span><br><span class="line">        System.out.println(Arrays.toString(clazz.getConstructors()));  </span><br><span class="line">                System.out.println(Arrays.toString(clazz.getDeclaredConstructors()));  </span><br><span class="line">        System.out.println(<span class="string">"============================AnnotatedElement==========================="</span>);  </span><br><span class="line">        <span class="comment">//注解DBTable2是否存在于元素上  </span></span><br><span class="line">        System.out.println(clazz.isAnnotationPresent(BTable<span class="class">.<span class="keyword">class</span>))</span>;  </span><br><span class="line">        <span class="comment">//如果存在该元素的指定类型的注释DBTable2，则返回这些注释，否则返回 null。  </span></span><br><span class="line">        System.out.println(clazz.getAnnotation(BTable<span class="class">.<span class="keyword">class</span>))</span>;  </span><br><span class="line">        <span class="comment">//继承  </span></span><br><span class="line">        System.out.println(Arrays.toString(clazz.getAnnotations()));  </span><br><span class="line">        System.out.println(Arrays.toString(clazz.getDeclaredAnnotations()));  <span class="comment">////自身  </span></span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p>分析下这段代码，这里定义了两个annotion，其中ATable使用了@Inherited, BTable没有使用  @Inherited,类Super和类Sub分别使用了ATable和BTable这两个注解，并且Sub类 继承Super类。 </p><p>这段程序的运行结果如下： </p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">============================Field===========================</span><br><span class="line">[<span class="keyword">public</span> <span class="keyword">int</span> annotion.inherit.Sub.suby, <span class="keyword">public</span> <span class="keyword">int</span> annotion.inherit.Super.supery]</span><br><span class="line">[<span class="keyword">private</span> <span class="keyword">int</span> annotion.inherit.Sub.subx, <span class="keyword">public</span> <span class="keyword">int</span> annotion.inherit.Sub.suby]</span><br><span class="line">============================Method===========================</span><br><span class="line">[<span class="keyword">public</span> <span class="keyword">int</span> annotion.inherit.Sub.subY(), <span class="keyword">public</span> <span class="keyword">int</span> annotion.inherit.Super.superY(), <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> java.lang.Object.wait() <span class="keyword">throws</span> java.lang.InterruptedException, <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> java.lang.Object.wait(<span class="keyword">long</span>,<span class="keyword">int</span>) <span class="keyword">throws</span> java.lang.InterruptedException, <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">native</span> <span class="keyword">void</span> java.lang.Object.wait(<span class="keyword">long</span>) <span class="keyword">throws</span> java.lang.InterruptedException, <span class="keyword">public</span> <span class="keyword">boolean</span> java.lang.Object.equals(java.lang.Object), <span class="keyword">public</span> java.lang.String java.lang.Object.toString(), <span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">int</span> java.lang.Object.hashCode(), <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">native</span> java.lang.Class java.lang.Object.getClass(), <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">native</span> <span class="keyword">void</span> java.lang.Object.notify(), <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">native</span> <span class="keyword">void</span> java.lang.Object.notifyAll()]</span><br><span class="line">[<span class="keyword">private</span> <span class="keyword">int</span> annotion.inherit.Sub.subX(), <span class="keyword">public</span> <span class="keyword">int</span> annotion.inherit.Sub.subY()]</span><br><span class="line">============================Constructor===========================</span><br><span class="line">[<span class="keyword">public</span> annotion.inherit.Sub(<span class="keyword">int</span>)]</span><br><span class="line">[<span class="keyword">private</span> annotion.inherit.Sub(), <span class="keyword">public</span> annotion.inherit.Sub(<span class="keyword">int</span>)]</span><br><span class="line">============================AnnotatedElement===========================</span><br><span class="line"><span class="keyword">true</span></span><br><span class="line"><span class="meta">@annotion</span>.inherit.BTable(name=)</span><br><span class="line">[<span class="meta">@annotion</span>.inherit.ATable(name=), <span class="meta">@annotion</span>.inherit.BTable(name=)]</span><br><span class="line">[<span class="meta">@annotion</span>.inherit.BTable(name=)]</span><br></pre></td></tr></tbody></table></figure></div><p>getFields()获得某个类的所有的公共（public）的字段，包括父类。 </p><p>getDeclaredFields()获得某个类的所有申明的字段，即包括public、private和proteced，<br>但是不包括父类的申明字段。 同样类似的还有getConstructors()和getDeclaredConstructors()， getMethods()和getDeclaredMethods()。 </p><p>因此：Field的打印好理解，因为sub是super类的子类，会继承super的类<br>同样method和constructor的打印也是如此。 </p><p>clazz.getAnnotations()可以打印出当前类的注解和父类的注解<br>clazz.getDeclaredAnnotations()只会打印出当前类的注解 </p><p>如果注解ATable把@Inherit去掉。那么后面四行的输出结果为： </p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">true</span></span><br><span class="line"><span class="meta">@annotion</span>.inherit.BTable(name=)</span><br><span class="line">[<span class="meta">@annotion</span>.inherit.BTable(name=)]</span><br><span class="line">[<span class="meta">@annotion</span>.inherit.BTable(name=)]</span><br></pre></td></tr></tbody></table></figure></div><p>*<em>无法获取到@ATable的注解， 也就是说注解和普通类的区别是如果一个子类想获取到父类上的注解信息， 那么必须在父类上使用的注解上面 加上@Inherit关键字 *</em></p></body></html>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> 注解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 注解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何优雅使用Docker</title>
      <link href="/2018/09/25/%E5%A6%82%E4%BD%95%E4%BC%98%E9%9B%85%E4%BD%BF%E7%94%A8Docker/"/>
      <url>/2018/09/25/%E5%A6%82%E4%BD%95%E4%BC%98%E9%9B%85%E4%BD%BF%E7%94%A8Docker/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><h1 id="请收下这15个小技巧"><a href="#请收下这15个小技巧" class="headerlink" title="请收下这15个小技巧"></a>请收下这15个小技巧</h1><h2 id="Tip-1"><a href="#Tip-1" class="headerlink" title="Tip 1"></a><code>Tip 1</code></h2><p>获取最近运行容器的id 这是我们经常会用到的一个操作，按照官方示例，你可以这样做（环境ubuntu）：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ ID=$(docker run ubuntu echo hello world)</span><br><span class="line">hello world</span><br><span class="line">$ docker commit $ID helloworld</span><br><span class="line">fd08a884dc79</span><br></pre></td></tr></tbody></table></figure></div><p>这种方式在编写脚本的时候很有用，比如你想在脚本中批量获取id，然后进一步操作。但是这种方式要求你必须给ID赋值，如果是直接敲命令，这样做就不太方便了。 这时，你可以换一种方式：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ alias dl=’docker ps -l -q’</span><br><span class="line">$ docker run ubuntu echo hello world</span><br><span class="line">hello world</span><br><span class="line">$ dl</span><br><span class="line">1904cf045887</span><br><span class="line">$ docker commit `dl` helloworld</span><br><span class="line">fd08a884dc79</span><br></pre></td></tr></tbody></table></figure></div><p>docker ps -l -q命令将返回最近运行的容器的id，通过设置别名（alias），dl命令就是获取最近容器的id。这样，就无需再输入冗长的docker ps -l -q命令了。通过两个斜引号“，可以获取dl命令的值，也就是最近运行的容器的id。</p><h2 id="Tip-2"><a href="#Tip-2" class="headerlink" title="Tip 2"></a><code>Tip 2</code></h2><p>尽量在Dockerfile中指定要安装的软件，而不用Docker容器的shell直接安装软件。 说实话，我有时候也喜欢在shell中安装软件，也许你也一样，喜欢在shell中把所有软件安装都搞定。但是，搞来搞去，最后还是发现，你还是需要在Doockerfile中指定安装文件。在shell中安装软件，你要这样做：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ docker run -i -t ubuntu bash #登陆到docker容器</span><br><span class="line">root@db0c3967abf8:/#</span><br></pre></td></tr></tbody></table></figure></div><p>然后输入下面的命令来安装文件：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install postgresql</span><br></pre></td></tr></tbody></table></figure></div><p>然后再调用exit：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@db0c3978abf8:/# exit</span><br></pre></td></tr></tbody></table></figure></div><p>退出docker容器，再给docker commit命令传递一个复杂的JSON字符串来提交新的镜像：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker commit -run=”{“Cmd”:[“postgres”,”-too -many -opts”] }” `dl` postgres</span><br></pre></td></tr></tbody></table></figure></div><p>太麻烦了，不是吗？还是在Dockerfile中指定安装文件吧，只要两个步骤：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1.在一个小巧的Dockerfile中，指定当前操作的镜像为FROM命令的参数</span><br><span class="line">2.然后在Dockerfile中指定一些docker的命令，如CMD, ENTERPOINT, VOLUME等等来指定安装的软件</span><br></pre></td></tr></tbody></table></figure></div><h2 id="Tip-3"><a href="#Tip-3" class="headerlink" title="Tip 3"></a><code>Tip 3</code></h2><p>超-超-超级用户</p><p>你可能需要一直用超级用户来操作docker，就像早期示例里一直提示的：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 添加docker用户组</span><br><span class="line">$ sudo groupadd docker</span><br><span class="line"># 把自己加到docker用户组中</span><br><span class="line">$ sudo gpasswd -a myusername docker</span><br><span class="line"># 重启docker后台服务</span><br><span class="line">$ sudo service docker restart</span><br><span class="line"># 注销，然后再登陆</span><br><span class="line">$ exit</span><br></pre></td></tr></tbody></table></figure></div><p>Wow！连续三个sudo！三次化身“超级用户”，真可谓是“超-超-超级用户”啊！别担心，设置完毕，以后你就再也不用打那么多sudo了！</p><h2 id="Tip-4"><a href="#Tip-4" class="headerlink" title="Tip 4"></a><code>Tip 4</code></h2><p>清理垃圾</p><p>如果你想删除所有停止运行的容器，用这个命令：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker rm $(docker ps -a -q)</span><br></pre></td></tr></tbody></table></figure></div><p>顺便说一句，docker ps命令很慢，不知道为啥这么慢，按理说Go语言是很快的啊。docker ps -a -q命令列出所有容器的id，然后根据id删除容器。docker rm命令遇到正在运行的容器就会失效，所以这个命令完美的删除了所有没在运行的容器。</p><h2 id="Tip-5"><a href="#Tip-5" class="headerlink" title="Tip 5"></a><code>Tip 5</code></h2><p>docker inspect输出结果的解析利器：jq 要对docker inspect的输出结果进行过滤，一般情况下，用grep命令，你需要这样操作：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$docker inspect `dl` | grep IPAddress | cut -d '"' -f 4</span><br></pre></td></tr></tbody></table></figure></div><p>哦！看上去很复杂，用jq吧，专业解析docker inspect输出结果，具有更强的可读性，方便易用：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$docker inspect `dl` | jq -r '.[0].NetworkSettings.IPAddress'</span><br></pre></td></tr></tbody></table></figure></div><p>其中第一个’.’代表所有的结果。’[0]’代表数组的第一个元素。就像JavaScript访问一个JSON对象一样，简单方便。</p><h2 id="Tip-6"><a href="#Tip-6" class="headerlink" title="Tip 6"></a><code>Tip 6</code></h2><p>镜像有哪些环境变量？ 有时候，你需要知道自己创建的镜像有哪些环境变量。简单！只要这样：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker run ubuntu env</span><br></pre></td></tr></tbody></table></figure></div><p>输出结果如下：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">HOME=/</span><br><span class="line">PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin</span><br><span class="line">container=lxc</span><br><span class="line">HOSTNAME=5e1560b7f757</span><br></pre></td></tr></tbody></table></figure></div><p>调用env查看环境变量，对于后面要讲到的“链接”(-link)很有用，在连接两个容器时候需要用到这些环境变量，具体请看最后一个要点“链接”。</p><h2 id="Tip-7"><a href="#Tip-7" class="headerlink" title="Tip 7"></a><code>Tip 7</code></h2><p>RUN命令 vs CMD命令</p><p>Docker的新手用户比较容易混淆RUN和CMD这两个命令。 RUN命令在构建（Build）Docker时执行，这时CMD命令不执行。CMD命令在RUN命令执行时才执行。我们来理清关系，假设Dockerfile内容如下：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">FROM thelanddownunder</span><br><span class="line">MAINTAINER crocdundee</span><br></pre></td></tr></tbody></table></figure></div><p>我们要向系统中安装一些软件，那么：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># docker build将会执行下面的命令：</span><br><span class="line">RUN apt-get update</span><br><span class="line">RUN apt-get install softwares</span><br><span class="line"># dokcer run默认执行下面的命令：</span><br><span class="line">CMD [“softwares”]</span><br></pre></td></tr></tbody></table></figure></div><p>Build时执行RUN，RUN时执行CMD，也就是说，CMD才是镜像最终执行的命令。</p><h2 id="Tip-8"><a href="#Tip-8" class="headerlink" title="Tip 8"></a><code>Tip 8</code></h2><p>CMD命令 vs ENTRYPOINT命令</p><p>又是两条容易混淆的命令！具体细节我们就不说了，举个例子，假设一个容器的Dockerfile指定CMD命令，如下：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">FROM ubuntu</span><br><span class="line">CMD [“echo”]</span><br></pre></td></tr></tbody></table></figure></div><p>另一个容器的Dockerfile指定ENTRYPOINT命令，如下：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">FROM ubuntu</span><br><span class="line">ENTRYPOINT [“echo”]</span><br></pre></td></tr></tbody></table></figure></div><p>运行第一个容器：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run image1 echo hello</span><br></pre></td></tr></tbody></table></figure></div><p>得到的结果：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hello</span><br></pre></td></tr></tbody></table></figure></div><p>运行第二个容器：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run image2 echo hello</span><br></pre></td></tr></tbody></table></figure></div><p>得到的结果：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo hello</span><br></pre></td></tr></tbody></table></figure></div><p>看到不同了吧？实际上，CMD命令是可覆盖的，docker run后面输入的命令与CMD指定的命令匹配时，会把CMD指定的命令替换成docker run中带的命令。而ENTRYPOINT指定的命令只是一个“入口”，docker run后面的内容会全部传给这个“入口”，而不是进行命令的替换，所以得到的结果就是“echo hello”。</p><h2 id="Tip-9"><a href="#Tip-9" class="headerlink" title="Tip 9"></a><code>Tip 9</code></h2><p>Docker容器有自己的IP地址吗？ </p><p>刚接触Docker的人或许会有这样的疑问：Docker容器有自己的IP地址吗？Docker容器是一个进程？还是一个虚拟机？嗯…也许两者兼具？哈哈，其实，Docker容器确实有自己的IP，就像一个具有IP的进程。只要分别在主机和Docker容器中执行查看ip的命令就知道了。</p><p>查看主机的ip：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ip -4 -o addr show eth0</span><br></pre></td></tr></tbody></table></figure></div><p>得到结果：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2: eth0 inet 162.243.139.222/24</span><br></pre></td></tr></tbody></table></figure></div><p>查看Docker容器的ip：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker run ubuntu ip -r -o addr show eth0</span><br></pre></td></tr></tbody></table></figure></div><p>得到结果：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">149: eth0   inet 172.17.0.43/16</span><br></pre></td></tr></tbody></table></figure></div><p>两者并不相同，说明Docker容器有自己的ip。</p><h2 id="Tip-10"><a href="#Tip-10" class="headerlink" title="Tip 10"></a><code>Tip 10</code></h2><p>基于命令行的瘦客户端，使用UNIX Socket和Docker后台服务的REST接口进行通信。Docker默认是用UNIX socket通信的，一直到大概0.5、0.6的版本还是用端口来通信，但现在则改成UNIX socket，所以从外部无法控制Docker容器的内部细节。下面我们来搞点有趣的事情，从主机链接到docker的UNIX socket：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 像HTTP客户端一样连接到UNIX socket</span><br><span class="line">$ nc -U / /var/run/docker.sock</span><br></pre></td></tr></tbody></table></figure></div><p>连接成功后，输入：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET /images/json HTTP/1.1</span><br></pre></td></tr></tbody></table></figure></div><p>输入后连敲两个回车，第二个回车表示输入结束。然后，得到的结果应该是：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Content-Type: application/json</span><br><span class="line">Date: Tue, 05 Nov 2013 23:18:09 GMT</span><br><span class="line">Transfer-Encoding: chunked</span><br><span class="line">16aa</span><br><span class="line">[{“Repository”:”postgres”,”Tag”:”......</span><br></pre></td></tr></tbody></table></figure></div><p>有一天，我不小心把提交的名称打错了，名字开头打成”-xxx”（我把命令和选项的顺序搞混了），所以当我删除的时候出了问题，docker rm -xxx，会把-xxx当成参数而不是镜像的名称。所以我只得通过socket直接连到容器来调用REST Server把错误的东西删掉。</p><h2 id="Tip-11"><a href="#Tip-11" class="headerlink" title="Tip 11"></a><code>Tip 11</code></h2><p>把镜像的依赖关系绘制成图</p><p>docker images命令有一个很拉风的选项：-viz，可以把镜像的依赖关系绘制成图并通过管道符号保存到图片文件：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 生成一个依赖关系的图表</span><br><span class="line">$ docker images -viz | dot -T png -o docker.png</span><br></pre></td></tr></tbody></table></figure></div><p>这样，主机的当前路径下就生成了一张png图，然后，用python开启一个微型的HTTP服务器：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -m SimpleHTTPServer</span><br></pre></td></tr></tbody></table></figure></div><p>然后在别的机器上用浏览器打开：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://machinename:8000/docker.png</span><br></pre></td></tr></tbody></table></figure></div><p>OK，依赖关系一目了然！</p><p>（译者注：要使用dot命令，主机要安装graphviz包。另外，如果主机ip没有绑定域名，machinename换成主机的ip即可。）</p><h2 id="Tip-12"><a href="#Tip-12" class="headerlink" title="Tip 12"></a><code>Tip 12</code></h2><p>Docker把东西都存到哪里去了？ Docker实际上把所有东西都放到/var/lib/docker路径下了。切换成super用户，到/var/lib/docker下看看，你能学到很多有趣的东西。执行下面的命令：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ sudo su</span><br><span class="line"># cd /var/lib/docker</span><br><span class="line"># ls -F</span><br><span class="line">containers/ graph/ repositories volumes/</span><br></pre></td></tr></tbody></table></figure></div><p>可以看到不少目录，containers目录当然就是存放容器（container）了，graph目录存放镜像，文件层（file system layer）存放在graph/imageid/layer路径下，这样你就可以看看文件层里到底有哪些东西，利用这种层级结构可以清楚的看到文件层是如 何一层一层叠加起来的。</p><h2 id="Tip-13"><a href="#Tip-13" class="headerlink" title="Tip 13"></a><code>Tip 13</code></h2><p>Docker源代码：Go, Go, Go, Golang! Docker的源代码全部是用Go语言写的。Go是一门非常酷的语言。其实，不只是Docker，很多优秀的软件都是用Go写的。对我来说，Docker源文件中，有4个是我非常喜欢阅读的：</p><p>commands.go docker的命令行接口，是对REST API的一个轻量级封装。Docker团队不希望在命令中出现逻辑，因此commands.go只是向REST API发送指令，确保其较小的颗粒性。</p><p>api.go REST API的路由（接受commands.go中的请求，转发到server.go）</p><p>server.go 大部分REST API的实现</p><p>buildfile.go Dockerfile的解析器</p><p>有的伙计惊叹”Wow!Docker是怎么实现的？！我无法理解！”没关系，Docker是开源软件，去看它的源代码就可以了。如果你不太清楚Dockerfile中的命令是怎么回事，直接去看buildfile.go就明白了。</p><h2 id="Tip-14"><a href="#Tip-14" class="headerlink" title="Tip 14"></a><code>Tip 14</code></h2><p>运行几个Docker后台程序，再退出容器，会发生什么？ OK，倒数第二个要点。如果在Docker中运行几个后台程序，再退出Docker容器，会发生什么？答案是：不要这么做！因为这样做后台程序就全丢了。</p><p>Dockerfile中用RUN命令去开启一个后台程序，如：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">RUN pg_ctl start</span><br></pre></td></tr></tbody></table></figure></div><p>这样的话，RUN命令开启的后台程序就会丢失。调用容器的bash连到容器的shell：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker run -i -t postgresimage bash</span><br></pre></td></tr></tbody></table></figure></div><p>然后调用 ps aux查看进程，你会发现postgres的进程并没有跑起来。 RUN命令会影响文件系统。因此，不要再Dockerfile中用启动后台程序，要把后台程序启动成前台进程。或者，像一些高手提议的那样，写一个启动脚 本，在脚本中启动这些后台程序或进程。</p><h2 id="Tip-15"><a href="#Tip-15" class="headerlink" title="Tip 15"></a><code>Tip 15</code></h2><p>容器之间进行友好沟通：链接 </p><p>这是最拉风的功能！我把它留到最后压轴！这是0.6.5中最重要的新功能，我们前面已经提过两次了。运行一个容器，给它一个名称，在下面的例子中，我们通过-name参数给容器指定名称”loldb”：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker run -d -name loldb loldbimage</span><br></pre></td></tr></tbody></table></figure></div><p>再运行另一个容器，加上-link参数来连接到第一个容器（别名为loldb），并给第二个容器也指定一个别名（这里用的是cheez）：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker run -link /loldb:cheez otherimage env</span><br></pre></td></tr></tbody></table></figure></div><p>顺便得到cheez的环境变量：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">CHEEZ_PORT=tcp://172.17.0.8:6379</span><br><span class="line">CHEEZ_PORT_1337_TCP=tcp://172.17.0.8.6379</span><br><span class="line">CHEEZ_PORT_1337_TCP_ADDR=tcp://172.17.0.12</span><br><span class="line">CHEEZ_PORT_1337_TCP_PORT=6379</span><br><span class="line">CHEEZ_PORT_1337_TCP_PROTO=tcp</span><br></pre></td></tr></tbody></table></figure></div><p>这样，我们就在两个容器间建立起一个网络通道（bridge），基于此，我们可以建立一个类似rails的程序：一个容器可以访问数据库容器而不对外暴露其他接口。非常酷！数据库容器只需要知道第一个容器的别名（在本例中为cheez）和要打开的端口号。所以数据库容器也可以env命令来查看这个端口是否打开。</p></body></html>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>简单多线程基础</title>
      <link href="/2018/09/11/%E7%AE%80%E5%8D%95%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%9F%BA%E7%A1%80/"/>
      <url>/2018/09/11/%E7%AE%80%E5%8D%95%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><h1 id="简单多线程基础"><a href="#简单多线程基础" class="headerlink" title="简单多线程基础"></a>简单多线程基础</h1><p>主要内容：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">简述线程，程序、进程的基本概念。以及他们之间关系是什么？</span><br><span class="line"></span><br><span class="line">线程有哪些基本状态？这些状态是如何定义的?</span><br><span class="line"></span><br><span class="line">何为多线程？</span><br><span class="line"></span><br><span class="line">为什么多线程是必要的？</span><br><span class="line"></span><br><span class="line">使用多线程常见的三种方式</span><br><span class="line"></span><br><span class="line">线程的优先级</span><br><span class="line"></span><br><span class="line">Java多线程分类</span><br><span class="line"></span><br><span class="line">sleep()方法和wait()方法简单对比</span><br><span class="line"></span><br><span class="line">为什么我们调用start()方法时会执行run()方法，为什么我们不能直接调用run()方法？</span><br></pre></td></tr></tbody></table></figure></div><h2 id="1-简述线程，程序、进程的基本概念。以及他们之间关系是什么？"><a href="#1-简述线程，程序、进程的基本概念。以及他们之间关系是什么？" class="headerlink" title="1. 简述线程，程序、进程的基本概念。以及他们之间关系是什么？"></a>1. 简述线程，程序、进程的基本概念。以及他们之间关系是什么？</h2><p><strong>线程</strong>与进程相似，但线程是一个比进程更小的执行单位。一个进程在其执行的过程中可以产生多个线程。与进程不同的是同类的多个线程共享同一块内存空间和一组系统资源，所以系统在产生一个线程，或是在各个线程之间作切换工作时，负担要比进程小得多，也正因为如此，线程也被称为轻量级进程。</p><p><strong>程序</strong>是含有指令和数据的文件，被存储在磁盘或其他的数据存储设备中，也就是说程序是静态的代码。</p><p><strong>进程</strong>是程序的一次执行过程，是系统运行程序的基本单位，因此进程是动态的。系统运行一个程序即是一个进程从创建，运行到消亡的过程。简单来说，一个进程就是一个执行中的程序，它在计算机中一个指令接着一个指令地执行着，同时，每个进程还占有某些系统资源如CPU时间，内存空间，文件，文件，输入输出设备的使用权等等。换句话说，当程序在执行时，将会被操作系统载入内存中。</p><p><strong>线程</strong> 是 <strong>进程</strong> 划分成的更小的运行单位。线程和进程最大的不同在于基本上各进程是独立的，而各线程则不一定，因为同一进程中的线程极有可能会相互影响。从另一角度来说，进程属于操作系统的范畴，主要是同一段时间内，可以同时执行一个以上的程序，而线程则是在同一程序内几乎同时执行一个以上的程序段。</p><p><strong>线程上下文的切换比进程上下文切换要快很多</strong></p><p>进程切换时，涉及到当前进程的CPU环境的保存和新被调度运行进程的CPU环境的设置。</p><p>线程切换仅需要保存和设置少量的寄存器内容，不涉及存储管理方面的操作。</p><h2 id="2-线程有哪些基本状态？这些状态是如何定义的"><a href="#2-线程有哪些基本状态？这些状态是如何定义的" class="headerlink" title="2. 线程有哪些基本状态？这些状态是如何定义的?"></a>2. 线程有哪些基本状态？这些状态是如何定义的?</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">新建(new)：新创建了一个线程对象。</span><br><span class="line"></span><br><span class="line">可运行(runnable)：线程对象创建后，其他线程(比如main线程）调用了该对象的start()方法。该状态的线程位于可运行线程池中，等待被线程调度选中，获 取cpu的使用权。</span><br><span class="line"></span><br><span class="line">运行(running)：可运行状态(runnable)的线程获得了cpu时间片（timeslice），执行程序代码。</span><br><span class="line"></span><br><span class="line">阻塞(block)：阻塞状态是指线程因为某种原因放弃了cpu使用权，也即让出了cpu timeslice，暂时停止运行。直到线程进入可运行(runnable)状态，才有 机会再次获得cpu timeslice转到运行(running)状态。阻塞的情况分三种：</span><br><span class="line"></span><br><span class="line">    (一). 等待阻塞：运行(running)的线程执行o.wait()方法，JVM会把该线程放 入等待队列(waitting queue)中。</span><br><span class="line"></span><br><span class="line">    (二). 同步阻塞：运行(running)的线程在获取对象的同步锁时，若该同步 锁 被别的线程占用，则JVM会把该线程放入锁池(lock pool)中。</span><br><span class="line"></span><br><span class="line">    (三). 其他阻塞: 运行(running)的线程执行Thread.sleep(long ms)或t.join()方法，或者发出了I/O请求时，JVM会把该线程置为阻塞状态。当sleep()状态超时join()等待线程终止或者超时、或者I/O处理完毕时，线程重新转入可运行(runnable)状态。</span><br><span class="line"></span><br><span class="line">死亡(dead)：线程run()、main()方法执行结束，或者因异常退出了run()方法，则该线程结束生命周期。死亡的线程不可再次复生。</span><br></pre></td></tr></tbody></table></figure></div><p>备注： 可以用早起坐地铁来比喻这个过程（下面参考自牛客网某位同学的回答）：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">还没起床：sleeping</span><br><span class="line"></span><br><span class="line">起床收拾好了，随时可以坐地铁出发：Runnable</span><br><span class="line"></span><br><span class="line">等地铁来：Waiting</span><br><span class="line"></span><br><span class="line">地铁来了，但要排队上地铁：I/O阻塞</span><br><span class="line"></span><br><span class="line">上了地铁，发现暂时没座位：synchronized阻塞</span><br><span class="line"></span><br><span class="line">地铁上找到座位：Running</span><br><span class="line"></span><br><span class="line">到达目的地：Dead</span><br></pre></td></tr></tbody></table></figure></div><h2 id="3-何为多线程？"><a href="#3-何为多线程？" class="headerlink" title="3. 何为多线程？"></a>3. 何为多线程？</h2><p>多线程就是多个线程同时运行或交替运行。单核CPU的话是顺序执行，也就是交替运行。多核CPU的话，因为每个CPU有自己的运算器，所以在多个CPU中可以同时运行。</p><h2 id="4-为什么多线程是必要的？"><a href="#4-为什么多线程是必要的？" class="headerlink" title="4. 为什么多线程是必要的？"></a>4. 为什么多线程是必要的？</h2><ul><li><p>使用线程可以把占据长时间的程序中的任务放到后台去处理。</p></li><li><p>用户界面可以更加吸引人，这样比如用户点击了一个按钮去触发某些事件的处理，可以弹出一个进度条来显示处理的进度。</p></li><li><p>程序的运行速度可能加快。</p></li></ul><h1 id="5-使用多线程常见的三种方式"><a href="#5-使用多线程常见的三种方式" class="headerlink" title="5 使用多线程常见的三种方式"></a>5 使用多线程常见的三种方式</h1><h3 id="①继承Thread类"><a href="#①继承Thread类" class="headerlink" title="①继承Thread类"></a>①继承Thread类</h3><p>MyThread.java</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public class MyThread extends Thread {</span><br><span class="line">    @Override</span><br><span class="line">    public void run() {</span><br><span class="line">        super.run();</span><br><span class="line"></span><br><span class="line">        System.out.println("MyThread");</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p>Run.java</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public class Run {</span><br><span class="line">    public static void main(String[] args) {</span><br><span class="line">        MyThread mythread = new MyThread();</span><br><span class="line"></span><br><span class="line">        mythread.start();</span><br><span class="line"></span><br><span class="line">        System.out.println("运行结束");</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p>运行结果：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">MyThread</span><br><span class="line">运行结束</span><br></pre></td></tr></tbody></table></figure></div><p>从上面的运行结果可以看出：线程是一个子任务，CPU以不确定的方式，或者说是以随机的时间来调用线程中的run方法。</p><h3 id="②实现Runnable接口"><a href="#②实现Runnable接口" class="headerlink" title="②实现Runnable接口"></a>②实现Runnable接口</h3><p>推荐实现Runnable接口方式开发多线程，因为Java单继承但是可以实现多个接口。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public class MyRunnable implements Runnable {</span><br><span class="line">    @Override</span><br><span class="line">    public void run() {</span><br><span class="line">        System.out.println("MyRunnable");</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p>Run.java</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public class Run {</span><br><span class="line">    public static void main(String[] args) {</span><br><span class="line">        Runnable runnable = new MyRunnable();</span><br><span class="line"></span><br><span class="line">        Thread thread = new Thread(runnable);</span><br><span class="line"></span><br><span class="line">        thread.start();</span><br><span class="line"></span><br><span class="line">        System.out.println("运行结束！");</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p>运行结果：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">MyThread</span><br><span class="line">运行结束</span><br></pre></td></tr></tbody></table></figure></div><h3 id="③使用线程池"><a href="#③使用线程池" class="headerlink" title="③使用线程池"></a>③使用线程池</h3><p>在<strong>《阿里巴巴Java开发手册》</strong>“并发处理”这一章节，明确指出线程资源必须通过线程池提供，不允许在应用中自行显示创建线程。</p><p>为什么呢？</p><blockquote><p>使用线程池的好处是减少在创建和销毁线程上所消耗的时间以及系统资源开销，解决资源不足的问题。如果不使用线程池，有可能会造成系统创建大量同类线程而导致消耗完内存或者“过度切换”的问题。</p></blockquote><p>另外《阿里巴巴Java开发手册》中强制线程池不允许使用 Executors 去创建，而是通过 ThreadPoolExecutor 的方式，这样的处理方式让写的同学更加明确线程池的运行规则，规避资源耗尽的风险</p><blockquote><p>Executors 返回线程池对象的弊端如下：</p></blockquote><blockquote><p>FixedThreadPool 和 SingleThreadExecutor ： 允许请求的队列长度为 Integer.MAX_VALUE,可能堆积大量的请求，从而导致OOM。</p></blockquote><blockquote><p>CachedThreadPool 和 ScheduledThreadPool ： 允许创建的线程数量为 Integer.MAX_VALUE ，可能会创建大量线程，从而导致OOM。</p></blockquote><h2 id="6-线程的优先级"><a href="#6-线程的优先级" class="headerlink" title="6 线程的优先级"></a>6 线程的优先级</h2><p>每个线程都具有各自的优先级，<strong>线程的优先级可以在程序中表明该线程的重要性，如果有很多线程处于就绪状态，系统会根据优先级来决定首先使哪个线程进入运行状态。</strong>但这个并不意味着低<br>优先级的线程得不到运行，而只是它运行的几率比较小，如垃圾回收机制线程的优先级就比较低。所以很多垃圾得不到及时的回收处理。</p><p><strong>线程优先级具有继承特性。</strong> 比如A线程启动B线程，则B线程的优先级和A是一样的。</p><p><strong>线程优先级具有随机性。</strong> 也就是说线程优先级高的不一定每一次都先执行完。</p><p>Thread类中包含的成员变量代表了线程的某些优先级。如Thread.MINPRIORITY（常数1），Thread.NORMPRIORITY（常数5）,Thread.MAXPRIORITY（常数10）。其中每个线程的优先级都在Thread.MINPRIORITY（常数1） 到Thread.MAXPRIORITY（常数10） 之间，在默认情况下优先级都是Thread.NORMPRIORITY（常数5）。</p><p>学过操作系统这门课程的话，我们可以发现多线程优先级或多或少借鉴了操作系统对进程的管理。</p><h2 id="7-Java多线程分类"><a href="#7-Java多线程分类" class="headerlink" title="7 Java多线程分类"></a>7 Java多线程分类</h2><h3 id="用户线程"><a href="#用户线程" class="headerlink" title="用户线程"></a>用户线程</h3><p>运行在前台，执行具体的任务，如程序的主线程、连接网络的子线程等都是用户线程</p><h3 id="守护线程"><a href="#守护线程" class="headerlink" title="守护线程"></a>守护线程</h3><p>运行在后台，为其他前台线程服务.也可以说守护线程是JVM中非守护线程的 “佣人”。</p><ul><li><p>特点： 一旦所有用户线程都结束运行，守护线程会随JVM一起结束工作</p></li><li><p>应用： 数据库连接池中的检测线程，JVM虚拟机启动后的检测线程</p></li><li><p>最常见的守护线程： 垃圾回收线程</p></li></ul><h3 id="如何设置守护线程？"><a href="#如何设置守护线程？" class="headerlink" title="如何设置守护线程？"></a>如何设置守护线程？</h3><p>可以通过调用 Thead 类的 setDaemon(true) 方法设置当前的线程为守护线程>。</p><p>注意事项：</p><ul><li><p>1.setDaemon(true)必须在start（）方法前执行，否则会抛出IllegalThreadStateExceptio异常</p></li><li><p>2.在守护线程中产生的新线程也是守护线程</p></li><li><p>3.不是所有的任务都可以分配给守护线程来执行，比如读写操作或者计算逻辑</p></li></ul><h3 id="8-sleep-方法和wait-方法简单对比"><a href="#8-sleep-方法和wait-方法简单对比" class="headerlink" title="8 sleep()方法和wait()方法简单对比"></a>8 sleep()方法和wait()方法简单对比</h3><ul><li><p>两者最主要的区别在于：sleep方法没有释放锁，而wait方法释放了锁 。</p></li><li><p>两者都可以暂停线程的执行。</p></li><li><p>Wait通常被用于线程间交互/通信，sleep通常被用于暂停执行。</p></li><li><p>wait()方法被调用后，线程不会自动苏醒，需要别的线程调用同一个对象上的notify()或者nofifyAl()方法。sleep()方法执行完成后，线程会自动苏醒。</p></li></ul><h3 id="9-为什么我们调用start-方法时会执行run-方法，为什么我们不能直接调用run-方法？"><a href="#9-为什么我们调用start-方法时会执行run-方法，为什么我们不能直接调用run-方法？" class="headerlink" title="9 为什么我们调用start()方法时会执行run()方法，为什么我们不能直接调用run()方法？"></a>9 为什么我们调用start()方法时会执行run()方法，为什么我们不能直接调用run()方法？</h3><p>这是另一个非常经典的java多线程面试问题，而且在面试中会经常被问到。很简单，但是很多人都会答不上来！</p><p>new一个Thread，线程进入了新建状态;调用start()方法，会启动一个线程并使线程进入了就绪状态，当分配到时间片后就可以开始运行了。<br>start()会执行线程的相应准备工作，然后自动执行run()方法的内容，这是真正的多线程工作。 而直接执行run()方法，会把run方法当成一个mian线程下的普通方法去执行，并不会在某个线程中执行它，所以这并不是多线程工作。</p><p><strong>总结： 调用start方法方可启动线程并使线程进入就绪状态，而run方法只是thread的一个普通方法调用，还是在主线程里执行。</strong></p></body></html>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> 多线程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 多线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>简单多线程基础</title>
      <link href="/2018/09/11/%E5%8F%B2%E4%B8%8A%E6%9C%80%E5%85%A8%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%90%88%E9%9B%86/"/>
      <url>/2018/09/11/%E5%8F%B2%E4%B8%8A%E6%9C%80%E5%85%A8%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%90%88%E9%9B%86/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>正则表达式，新手见它的感觉就是“这都什么玩意，乱七八糟的，完全不知所云”，但学会它就会体验那种一行代码抵数十上百行，效率飞起的感觉，简直不要太爽。今天小肆先把我自己收藏的一些正则表达式写法分享给大家，当然想深入学习如何写正则表达式，可以去w3c看看教程。</p><h2 id="干货"><a href="#干货" class="headerlink" title="干货"></a>干货</h2><h3 id="一-校验数字"><a href="#一-校验数字" class="headerlink" title="一.校验数字"></a>一.校验数字</h3><ul><li>数字：^[0-9]*$</li><li>n位的数字：^\d{n}$</li><li>至少n位的数字：^\d{n,}$</li><li>m-n位的数字：^\d{m,n}$</li><li>零和非零开头的数字：^(0|[1-9][0-9]*)$</li><li>非零开头的最多带两位小数的数字：^([1-9][0-9]*)+(.[0-9]{1,2})?$</li><li>带1-2位小数的正数或负数：^(-)?\d+(.\d{1,2})?$</li><li>正数、负数、和小数：^(-|+)?\d+(.\d+)?$</li><li>有两位小数的正实数：^[0-9]+(.[0-9]{2})?$</li><li>有1~3位小数的正实数：^[0-9]+(.[0-9]{1,3})?$</li><li>非零的正整数：^[1-9]\d*$</li><li>非零的负整数：^-[1-9][]0-9”*$</li><li>非负整数：^\d+$</li><li>非正整数：^-[1-9]\d*|0$</li><li>非负浮点数：^\d+(.\d+)?$</li><li>非正浮点数：^((-\d+(.\d+)?)|(0+(.0+)?))$</li><li>正浮点数：^[1-9]d.d|0.d[1-9]d$</li><li>负浮点数：^-([1-9]\d<em>.\d</em>|0.\d<em>[1-9]\d</em>)$</li><li>浮点数：^(-?\d+)(.\d+)?$</li></ul><h3 id="二-效验字符"><a href="#二-效验字符" class="headerlink" title="二.效验字符"></a>二.效验字符</h3><ul><li>汉字：^[\u4e00-\u9fa5]{0,}$</li><li>英文和数字：^[A-Za-z0-9]+$</li><li>长度为3-20的所有字符：^.{3,20}$</li><li>由26个英文字母组成的字符串：^[A-Za-z]+$</li><li>由26个大写英文字母组成的字符串：^[A-Z]+$</li><li>由26个小写英文字母组成的字符串：^[a-z]+$</li><li>由数字和26个英文字母组成的字符串：^[A-Za-z0-9]+$</li><li>由数字、26个英文字母或者下划线组成的字符串：^\w+$</li><li>中文、英文、数字包括下划线：^[\u4E00-\u9FA5A-Za-z0-9_]+$</li><li>中文、英文、数字但不包括下划线等符号：^[\u4E00-\u9FA5A-Za-z0-9]+$</li><li>可以输入含有^%&’,;=?$"等字符：[^%&’,;=?$\x22]+</li><li>禁止输入含有<del>的字符：[^</del>\x22]+</li></ul><h3 id="三-特殊需求表达式"><a href="#三-特殊需求表达式" class="headerlink" title="三.特殊需求表达式"></a>三.特殊需求表达式</h3><ul><li>Email地址：^\w+([-+.]\w+)<em>@\w+([-.]\w+)*.\w+([-.]\w+)</em>$</li><li>手机号码：^(13[0-9]|14[5|7]|15[0|1|2|3|5|6|7|8|9]|18[0|1|2|3|5|6|7|8|9])\d{8}$(国内 13、15、18开头的手机号正则表达式,可根据目前国内收集号扩展前两位开头号码）</li><li>电话号码(“XXX-XXXXXXX”、”XXXX-XXXXXXXX”、”XXX-XXXXXXX”、”XXX-XXXXXXXX”、”XXXXXXX”和”XXXXXXXX)：^((\d{3,4}-)|\d{3.4}-)?\d{7,8}$</li><li>国内电话号码(0511-4405222、021-87888822)：\d{3}-\d{8}|\d{4}-\d{7}</li><li>身份证号(15位）：^[1-9]\d{7}((0\d)|(1[0-2]))(([0|1|2]\d)|3[0-1])\d{3}$</li><li>身份证号码(18位)：^[1-9]\d{5}[1-9]\d{3}((0\d)|(1[0-2]))(([0|1|2]\d)|3[0-1])\d{3}([0-9]|X)$</li><li>帐号是否合法(字母开头，允许5-16字节，允许字母数字下划线)：^[a-zA-Z][a-zA-Z0-9_]{4,15}$</li><li>密码(以字母开头，长度在6~18之间，只能包含字母、数字和下划线)：^[a-zA-Z]\w{5,17}$</li><li>强密码(必须包含大小写字母和数字的组合，不能使用特殊字符，长度在8-16之间)：^(?=.<em>\d)(?=.</em>[a-z])(?=.*[A-Z]).{8,16}$</li><li>日期格式：^\d{4}-\d{1,2}-\d{1,2}</li><li>一年的12个月(01～09和1～12)：^(0?[1-9]|1[0-2])$</li><li>一个月的31天(01～09和1～31)：^((0?[1-9])|((1|2)[0-9])|30|31)$</li><li>xml文件：^([a-zA-Z]+-?)+[a-zA-Z0-9]+\.[x|X][m|M][l|L]$</li><li>中文字符的正则表达式：[\u4e00-\u9fa5]</li><li>双字节字符：[^\x00-\xff] (包括汉字在内，可以用来计算字符串的长度(一个双字节字符长度计2，ASCII字符计1))</li><li>空白行的正则表达式：\n\s*\r (可以用来删除空白行)</li><li>首尾空白字符的正则表达式：^\s<em>|\s</em>$或(^\s<em>)|(\s</em>$) (可以用来删除行首行尾的空白字符(包括空格、制表符、换页符等等)，非常有用的表达式)</li><li>腾讯QQ号：[1-9][0-9]{4,11} (腾讯QQ号从10000开始)</li><li>中国邮政编码：[1-9]\d{5}(?!\d) (中国邮政编码为6位数字)</li><li>IP-v4地址：\b(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\b (提取IP地址时有用)</li><li>校验IP-v6地址：(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))</li><li>子网掩码：((?:(?:25[0-5]|2[0-4]\d|[01]?\d?\d)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d?\d))</li><li>校验日期:^(?:(?!0000)[0-9]{4}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1[0-9]|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[0-9]{2}(?:0[48]|[2468][048]|[13579][26])|(?:0[48]|[2468][048]|[13579][26])00)-02-29)$(“yyyy-mm-dd“ 格式的日期校验，已考虑平闰年。)</li><li>抽取注释：<!--(.*?)--></li><li>查找CSS属性:^\s<em>[a-zA-Z\-]+\s</em>[:]{1}\s[a-zA-Z0-9\s.#]+[;]{1}</li><li>提取页面超链接:(<a\s<em>(?!.*\brel=)[^>])(href=”https?:\/\/)((?!(?:(?:www\.)?’.implode(‘|(?:www\.)?’, $follow_list).’))[^”]+)”((?!.<em>\brel=)[^>]</em>)(?:[^>]*)></a\s<em></li><li>提取网页图片:\< <em>[img][^\\>]</em>[src] <em>= *[\“\‘]{0,1}([^\“\‘\ >]</em>)</li><li>提取网页颜色代码:^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$</li><li>文件扩展名效验:^([a-zA-Z]\:|\\)\\([^\\]+\\)<em>[^\/:</em>?”<>|]+\.txt(l)?$</li><li>判断IE版本：^.<em>MSIE <a href="?:\.[0-9]+">5-8</a>?(?!.*Trident\/[5-9]\.0).</em>$</li></ul><p>文章出处：<a href="https://segmentfault.com/a/1190000017834831" target="_blank" rel="noopener">https://segmentfault.com/a/1190000017834831</a></p></body></html>]]></content>
      
      
      <categories>
          
          <category> 正则表达式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 正则表达式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker 部署SpringBoot项目整合 Redis 镜像做访问计数Demo</title>
      <link href="/2018/09/03/Docker%20%E9%83%A8%E7%BD%B2SpringBoot%E9%A1%B9%E7%9B%AE%E6%95%B4%E5%90%88%20Redis%20%E9%95%9C%E5%83%8F%E5%81%9A%E8%AE%BF%E9%97%AE%E8%AE%A1%E6%95%B0Demo/"/>
      <url>/2018/09/03/Docker%20%E9%83%A8%E7%BD%B2SpringBoot%E9%A1%B9%E7%9B%AE%E6%95%B4%E5%90%88%20Redis%20%E9%95%9C%E5%83%8F%E5%81%9A%E8%AE%BF%E9%97%AE%E8%AE%A1%E6%95%B0Demo/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><h1 id="Docker-部署SpringBoot项目整合-Redis-镜像做访问计数Demo"><a href="#Docker-部署SpringBoot项目整合-Redis-镜像做访问计数Demo" class="headerlink" title="Docker 部署SpringBoot项目整合 Redis 镜像做访问计数Demo"></a>Docker 部署SpringBoot项目整合 Redis 镜像做访问计数Demo</h1><h3 id="最终效果如下"><a href="#最终效果如下" class="headerlink" title="最终效果如下"></a>最终效果如下</h3><p><a href="https://i.imgur.com/Ao8GSyX.gif" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.imgur.com/Ao8GSyX.gif" class="lazyload"></a></p><p>大概就几个步骤</p><ul><li>1.安装 Docker CE</li><li>2.运行 Redis 镜像</li><li>3.Java 环境准备</li><li>4.项目准备</li><li>5.编写 Dockerfile</li><li>6.发布项目</li><li>7.测试服务</li></ul><h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><ul><li>系统：Ubuntu 17.04 x64</li><li>Docker 17.12.0-ce</li><li>IP:45.32.31.101</li></ul><h1 id="一、安装-Docker-CE"><a href="#一、安装-Docker-CE" class="headerlink" title="一、安装 Docker CE"></a>一、安装 Docker CE</h1><p>国内<strong>不建议使用:“脚本进行安装”</strong>,会下载安装很慢,使用步骤 1 安装，看下面的链接：常规安装方式</p><h3 id="1-常规安装方式"><a href="#1-常规安装方式" class="headerlink" title="1.常规安装方式"></a>1.常规安装方式</h3><p><a href="http://www.ymq.io/2018/01/11/Docker-Install-docker-ce" target="_blank" rel="noopener">Ubuntu 17.04 x64 安装 Docker CE</a></p><h3 id="2-脚本进行安装"><a href="#2-脚本进行安装" class="headerlink" title="2.脚本进行安装"></a>2.脚本进行安装</h3><p>国内安装不建议使用脚本：</p><p>安装Docker CE</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">$ curl -fsSL get.docker.com -o get-docker.sh</span><br><span class="line">$ sudo sh get-docker.sh</span><br><span class="line"></span><br><span class="line"><output truncated></output></span><br><span class="line"></span><br><span class="line">If you would like to use Docker as a non-root user, you should now consider</span><br><span class="line">adding your user to the "docker" group with something like:</span><br><span class="line"></span><br><span class="line">  sudo usermod -aG docker your-user</span><br><span class="line"></span><br><span class="line">Remember that you will have to log out and back in for this to take effect!</span><br><span class="line"></span><br><span class="line">WARNING: Adding a user to the "docker" group will grant the ability to run</span><br><span class="line">         containers which can be used to obtain root privileges on the</span><br><span class="line">         docker host.</span><br><span class="line">         Refer to https://docs.docker.com/engine/security/security/#docker-daemon-attack-surface</span><br><span class="line">         for more information.</span><br></pre></td></tr></tbody></table></figure></div><p>验证Docker CE</p><p>通过运行hello-world 镜像 验证是否正确安装了Docker CE</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo docker run hello-world</span><br></pre></td></tr></tbody></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">root@souyunku:~# sudo docker images</span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">hello-world         latest              f2a91732366c        7 weeks ago         1.85kB</span><br></pre></td></tr></tbody></table></figure></div><h1 id="二、运行-Redis-镜像"><a href="#二、运行-Redis-镜像" class="headerlink" title="二、运行 Redis 镜像"></a>二、运行 Redis 镜像</h1><h3 id="1-运行镜像"><a href="#1-运行镜像" class="headerlink" title="1.运行镜像"></a>1.运行镜像</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker run --name redis-6379 -p 6379:6379 -d redis</span><br></pre></td></tr></tbody></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Unable to find image 'redis:latest' locally</span><br><span class="line">latest: Pulling from library/redis</span><br><span class="line">c4bb02b17bb4: Pull complete </span><br><span class="line">58638acf67c5: Pull complete </span><br><span class="line">f98d108cc38b: Pull complete </span><br><span class="line">83be14fccb07: Pull complete </span><br><span class="line">5d5f41793421: Pull complete </span><br><span class="line">ed89ff0d9eb2: Pull complete </span><br><span class="line">Digest: sha256:0e773022cd6572a5153e5013afced0f7191652d3cdf9b1c6785eb13f6b2974b1</span><br><span class="line">Status: Downloaded newer image for redis:latest</span><br><span class="line">2f1f20f672e386a61644e1c08232ea34bdfd6a0c244b55fa833fcfd6dd207288</span><br></pre></td></tr></tbody></table></figure></div><h3 id="2-检查镜像"><a href="#2-检查镜像" class="headerlink" title="2.检查镜像"></a>2.检查镜像</h3><p>查看镜像</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">root@souyunku:~# docker images redis</span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">redis               latest              1e70071f4af4        4 weeks ago         107MB</span><br></pre></td></tr></tbody></table></figure></div><p>查看镜像进程</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">root@souyunku:~# docker ps</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                    NAMES</span><br><span class="line">2f1f20f672e3        redis               "docker-entrypoint.s…"   14 seconds ago      Up 14 seconds       0.0.0.0:6379->6379/tcp   redis-6379</span><br></pre></td></tr></tbody></table></figure></div><p>查看容器进程</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">root@souyunku:~# docker container ps</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                    NAMES</span><br><span class="line">2f1f20f672e3        redis               "docker-entrypoint.s…"   7 minutes ago       Up 7 minutes        0.0.0.0:6379->6379/tcp   redis-6379</span><br></pre></td></tr></tbody></table></figure></div><h3 id="3-测试Redis服务"><a href="#3-测试Redis服务" class="headerlink" title="3.测试Redis服务"></a>3.测试Redis服务</h3><p>通过 redis-cli 连接Redis 服务，测试存储数据</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">root@souyunku:~# docker run -it --link redis-6379:redis --rm redis redis-cli -h redis -p 6379</span><br><span class="line">redis:6379> set count 1</span><br><span class="line">OK</span><br><span class="line">redis:6379> get count</span><br><span class="line">"1"</span><br><span class="line">redis:6379> exit</span><br><span class="line">root@souyunku:~#</span><br></pre></td></tr></tbody></table></figure></div><h1 id="三、Java-环境准备"><a href="#三、Java-环境准备" class="headerlink" title="三、Java 环境准备"></a>三、Java 环境准备</h1><p><strong>注意:阅读以下步骤！！！</strong></p><ul><li><p>1.Java 环境是为了，编译Github Maven SpringBoot 示例项目，准备</p></li><li><p>2.或者自己在本地编译好上传也行，那么以下Java 环境，安装:Jdk,Maven,Git,就可以不用配置</p></li></ul><h3 id="1-安装-Jdk"><a href="#1-安装-Jdk" class="headerlink" title="1.安装 Jdk"></a>1.安装 Jdk</h3><p>下载JDK 方式：1</p><p><a href="http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html" target="_blank" rel="noopener">下载Linux环境下的jdk1.8</a></p><p>下载JDK 方式：2</p><p>我在百度云盘分下的链接：YPSuperKey Broken<a href="http://pan.baidu.com/s/1jIFZF9s" target="_blank" rel="noopener">http://pan.baidu.com/s/1jIFZF9s</a> 密码：u4n4</p><p>下载JDK 方式：3</p><p>使用wget下载，</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ wget --no-cookies --no-check-certificate --header "Cookie: gpw_e24=http%3A%2F%2Fwww.oracle.com%2F; oraclelicense=accept-securebackup-cookie" "http://download.oracle.com/otn-pub/java/jdk/8u141-b15/336fa29ff2bb4ef291e347e091f7f4a7/jdk-8u141-linux-x64.tar.gz"</span><br></pre></td></tr></tbody></table></figure></div><p>注意，如果使用：下载JDK 方式：3</p><p>那么以下步骤的，jdk1.8.0_144替换成jdk1.8.0_141</p><p>开始安装</p><p>上传在 /opt 目录</p><p>解压</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ cd /opt</span><br><span class="line">$ tar zxvf jdk-8u144-linux-x64.tar.gz</span><br><span class="line">$ mv jdk1.8.0_144/ /lib/jvm</span><br></pre></td></tr></tbody></table></figure></div><p>配置环境变量</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ vi /etc/profile</span><br><span class="line">#jdk</span><br><span class="line">export JAVA_HOME=/lib/jvm</span><br><span class="line">export JRE_HOME=${JAVA_HOME}/jre   </span><br><span class="line">export CLASSPATH=.:${JAVA_HOME}/lib:${JRE_HOME}/lib   </span><br><span class="line">export PATH=${JAVA_HOME}/bin:$PATH</span><br></pre></td></tr></tbody></table></figure></div><p>使环境变量生效</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ source /etc/profile</span><br></pre></td></tr></tbody></table></figure></div><p>验证</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">root@souyunku:~# java -version</span><br><span class="line">java version "1.8.0_141"</span><br><span class="line">Java(TM) SE Runtime Environment (build 1.8.0_141-b15)</span><br><span class="line">Java HotSpot(TM) 64-Bit Server VM (build 25.141-b15, mixed mode)</span><br></pre></td></tr></tbody></table></figure></div><p>2.安装 Maven</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ apt-get install maven</span><br></pre></td></tr></tbody></table></figure></div><p>验证Maven</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">root@souyunku:~# mvn -v</span><br><span class="line">Apache Maven 3.3.9</span><br><span class="line">Maven home: /usr/share/maven</span><br><span class="line">Java version: 1.8.0_141, vendor: Oracle Corporation</span><br><span class="line">Java home: /lib/jvm/jre</span><br><span class="line">Default locale: en_US, platform encoding: UTF-8</span><br><span class="line">OS name: "linux", version: "4.10.0-35-generic", arch: "amd64", family: "unix"</span><br></pre></td></tr></tbody></table></figure></div><p>3.安装 Git</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ apt-get install git</span><br></pre></td></tr></tbody></table></figure></div><p>验证Git</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@souyunku:~# git --version</span><br><span class="line">git version 2.11.0</span><br></pre></td></tr></tbody></table></figure></div><h1 id="四、项目准备"><a href="#四、项目准备" class="headerlink" title="四、项目准备"></a>四、项目准备</h1><h3 id="1-编译项目"><a href="#1-编译项目" class="headerlink" title="1.编译项目"></a>1.编译项目</h3><p>1.自己在服务器Maven编译项目</p><p>使用 git 克隆项目</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git clone https://github.com/souyunku/other-projects.git</span><br></pre></td></tr></tbody></table></figure></div><p>使用 maven 编译项目</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cd other-projects/docker-spring-boot-demo/</span><br></pre></td></tr></tbody></table></figure></div><h3 id="2-修改项目"><a href="#2-修改项目" class="headerlink" title="2.修改项目"></a>2.修改项目</h3><p>修改 Redis 服务器地址spring.redis.host=45.32.44.217,为本地IP, 在运行 Redis 镜像时候 已经把 Redis 做成外网服务了0.0.0.0:6379->6379/tcp</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vi src/main/resources/application.properties</span><br></pre></td></tr></tbody></table></figure></div><h1 id="Redis服务器地址"><a href="#Redis服务器地址" class="headerlink" title="Redis服务器地址"></a>Redis服务器地址</h1><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">spring.redis.host=45.32.44.217</span><br></pre></td></tr></tbody></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ mvn package</span><br></pre></td></tr></tbody></table></figure></div><p>复制target/ 目录下的docker-spring-boot-demo-0.0.1-SNAPSHOT.jar项目到/opt 目录稍后会用到</p><p>$ cp target/docker-spring-boot-demo-0.0.1-SNAPSHOT.jar /opt/</p><h3 id="2-自己在本地Maven编译项目，然后上传到-opt-目录稍后会用到"><a href="#2-自己在本地Maven编译项目，然后上传到-opt-目录稍后会用到" class="headerlink" title="2.自己在本地Maven编译项目，然后上传到/opt 目录稍后会用到"></a>2.自己在本地Maven编译项目，然后上传到/opt 目录稍后会用到</h3><p>修改application.properties 的 Redis 服务器地址</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">other-projects/docker-spring-boot-demo/src/main/resources/application.properties</span><br></pre></td></tr></tbody></table></figure></div><h1 id="Redis服务器地址-1"><a href="#Redis服务器地址-1" class="headerlink" title="Redis服务器地址"></a>Redis服务器地址</h1><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">spring.redis.host=45.32.44.217</span><br></pre></td></tr></tbody></table></figure></div><h1 id="五、编写-Dockerfile"><a href="#五、编写-Dockerfile" class="headerlink" title="五、编写 Dockerfile"></a>五、编写 Dockerfile</h1><p>编写 Dockerfile 基于java:8镜像为基础</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ cd /opt/</span><br><span class="line">$ touch Dockerfile</span><br><span class="line">$ vi Dockerfile</span><br></pre></td></tr></tbody></table></figure></div><p>编辑内容个如下</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># 基于哪个镜像</span><br><span class="line">FROM java:8</span><br><span class="line"></span><br><span class="line"># 将本地文件夹挂载到当前容器</span><br><span class="line">VOLUME /tmp</span><br><span class="line"></span><br><span class="line"># 拷贝文件到容器，也可以直接写成ADD docker-spring-boot-demo-0.0.1-SNAPSHOT.jar /souyunku-app.jar</span><br><span class="line">ADD docker-spring-boot-demo-0.0.1-SNAPSHOT.jar souyunku-app.jar</span><br><span class="line">RUN bash -c 'touch /souyunku-app.jar'</span><br><span class="line"></span><br><span class="line"># 开放80端口</span><br><span class="line">EXPOSE 80</span><br><span class="line"></span><br><span class="line"># 配置容器启动后执行的命令</span><br><span class="line">ENTRYPOINT ["java","-Djava.security.egd=file:/dev/./urandom","-jar","/souyunku-app.jar"]</span><br></pre></td></tr></tbody></table></figure></div><h1 id="六、发布项目"><a href="#六、发布项目" class="headerlink" title="六、发布项目"></a>六、发布项目</h1><h3 id="1-编译镜像"><a href="#1-编译镜像" class="headerlink" title="1.编译镜像"></a>1.编译镜像</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cd /opt/</span><br><span class="line">$ docker build -t souyunku-app:v1 .</span><br></pre></td></tr></tbody></table></figure></div><p>看到如下信息，就证明你的Dockerfile写的没毛病，而且镜像也编译成功了</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">Sending build context to Docker daemon  18.72MB</span><br><span class="line">Step 1/6 : FROM java:8</span><br><span class="line">8: Pulling from library/java</span><br><span class="line">5040bd298390: Pull complete </span><br><span class="line">fce5728aad85: Pull complete </span><br><span class="line">76610ec20bf5: Pull complete </span><br><span class="line">60170fec2151: Pull complete </span><br><span class="line">e98f73de8f0d: Pull complete </span><br><span class="line">11f7af24ed9c: Pull complete </span><br><span class="line">49e2d6393f32: Pull complete </span><br><span class="line">bb9cdec9c7f3: Pull complete </span><br><span class="line">Digest: sha256:c1ff613e8ba25833d2e1940da0940c3824f03f802c449f3d1815a66b7f8c0e9d</span><br><span class="line">Status: Downloaded newer image for java:8</span><br><span class="line"> ---> d23bdf5b1b1b</span><br><span class="line">Step 2/6 : VOLUME /tmp</span><br><span class="line"> ---> Running in 0559a62b0cd5</span><br><span class="line">Removing intermediate container 0559a62b0cd5</span><br><span class="line"> ---> b1f3846913a4</span><br><span class="line">Step 3/6 : ADD docker-spring-boot-demo-0.0.1-SNAPSHOT.jar souyunku-app.jar</span><br><span class="line"> ---> 9f60dad5d2ac</span><br><span class="line">Step 4/6 : RUN bash -c 'touch /souyunku-app.jar'</span><br><span class="line"> ---> Running in 39d5c09ab614</span><br><span class="line">Removing intermediate container 39d5c09ab614</span><br><span class="line"> ---> 2b691adf7922</span><br><span class="line">Step 5/6 : EXPOSE 80</span><br><span class="line"> ---> Running in 11a577437a23</span><br><span class="line">Removing intermediate container 11a577437a23</span><br><span class="line"> ---> 78815d6fe6b2</span><br><span class="line">Step 6/6 : ENTRYPOINT ["java","-Djava.security.egd=file:/dev/./urandom","-jar","/souyunku-app.jar"]</span><br><span class="line"> ---> Running in eca10fed3d02</span><br><span class="line">Removing intermediate container eca10fed3d02</span><br><span class="line"> ---> 8ec4e85a0f05</span><br><span class="line">Successfully built 8ec4e85a0f05</span><br><span class="line">Successfully tagged souyunku-app:v1</span><br></pre></td></tr></tbody></table></figure></div><h3 id="2-查看镜像"><a href="#2-查看镜像" class="headerlink" title="2.查看镜像"></a>2.查看镜像</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">root@souyunku:/opt# docker images souyunku-app</span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">souyunku-app        v1                  8ec4e85a0f05        2 minutes ago       681MB</span><br></pre></td></tr></tbody></table></figure></div><h3 id="3-运行镜像"><a href="#3-运行镜像" class="headerlink" title="3.运行镜像"></a>3.运行镜像</h3><p>后台守护进程运行，然后把容器端口映射到，外网端口80</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@souyunku:/opt# docker run --name MySpringBoot -d -p 80:80 souyunku-app:v1</span><br><span class="line">e68d438603619e363883d4eae65d3918e1c3e00f867731207bccf06f5690dc64</span><br></pre></td></tr></tbody></table></figure></div><h3 id="4-查看进程"><a href="#4-查看进程" class="headerlink" title="4.查看进程"></a>4.查看进程</h3><p>查看容器进程，可以看到redis 在 6379端口，MySpringBoot 项目在 80端口</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">root@souyunku:/opt# docker container ps</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED              STATUS              PORTS                    NAMES</span><br><span class="line">e68d43860361        souyunku-app:v1     "java -Djava.securit…"   About a minute ago   Up About a minute   0.0.0.0:80->80/tcp       MySpringBoot</span><br><span class="line">0f9646171edd        redis               "docker-entrypoint.s…"   39 minutes ago       Up 39 minutes       0.0.0.0:6379->6379/tcp   redis-6379</span><br></pre></td></tr></tbody></table></figure></div><h1 id="七、测试服务"><a href="#七、测试服务" class="headerlink" title="七、测试服务"></a>七、测试服务</h1><p>浏览器访问：<a href="http://127.0.0.1/,当然我没有输入127.0.0.1" target="_blank" rel="noopener">http://127.0.0.1/,当然我没有输入127.0.0.1</a> 我是在服务器上直接做的，用的公网IP</p><p><a href="https://i.imgur.com/YEk6gyD.gif" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.imgur.com/YEk6gyD.gif" class="lazyload"></a></p><p>Docker Compose<br>Docker Compose 是 Docker 官方编排（Orchestration）项目之一，负责快速在集群中部署分布式应用。</p><p>一个使用Docker容器的应用，通常由多个容器组成。使用Docker Compose，不再需要使用shell脚本来启动容器。在配置文件中，所有的容器通过services来定义，然后使用docker-compose脚本来启动，停止和重启应用，和应用中的服务以及所有依赖服务的容器。</p><p>GitHub :<a href="https://github.com/souyunku/other-projects/tree/master/docker-spring-boot-demo" target="_blank" rel="noopener">docker-spring-boot-demo</a></p><p>Contact<br>作者：鹏磊<br>出处：<a href="http://www.ymq.io/2018/01/11/Docker-deploy-spring-boot-Integrate-redis" target="_blank" rel="noopener">http://www.ymq.io/2018/01/11/Docker-deploy-spring-boot-Integrate-redis</a></p></body></html>]]></content>
      
      
      <categories>
          
          <category> Spring Boot </category>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> Spring Boot </tag>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>为什么Java中1000==1000为false而100==100为true？</title>
      <link href="/2018/08/28/%E4%B8%BA%E4%BB%80%E4%B9%88Java%E4%B8%AD1000==1000%E4%B8%BAfalse%E8%80%8C100==100%E4%B8%BAtrue%EF%BC%9F/"/>
      <url>/2018/08/28/%E4%B8%BA%E4%BB%80%E4%B9%88Java%E4%B8%AD1000==1000%E4%B8%BAfalse%E8%80%8C100==100%E4%B8%BAtrue%EF%BC%9F/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><p>这是一个挺有意思的讨论话题。</p><p>如果你运行下面的代码</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Integer a = 1000, b = 1000;</span><br><span class="line">Integer c = 100, d = 100;</span><br><span class="line">System.out.println(a == b);//1   </span><br><span class="line">System.out.println(c == d);//2</span><br></pre></td></tr></tbody></table></figure></div><p>你会得到：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">false</span><br><span class="line">true</span><br></pre></td></tr></tbody></table></figure></div><p><strong>基本知识</strong>：我们知道，如果两个引用指向同一个对象，用==表示它们是相等的。如果两个引用指向不同的对象，用==表示它们是不相等的，即使它们的内容相同。</p><p>因此，后面一条语句也应该是false 。</p><p>这就是它有趣的地方了。如果你看去看 Integer.Java 类，你会发现有一个内部私有类，IntegerCache.java，它缓存了从-128到127之间的所有的整数对象。</p><p><strong>所以事情就成了，所有的小整数在内部缓存，然后当我们声明类似——</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Integer c = 100;</span><br></pre></td></tr></tbody></table></figure></div><p>的时候，它实际上在内部做的是：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Integer i = Integer.valueOf(100);</span><br></pre></td></tr></tbody></table></figure></div><p>现在，如果我们去看valueOf()方法，我们可以看到：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public static Integer valueOf(int i) {</span><br><span class="line">    if (i >= IntegerCache.low && i</span><br><span class="line">    return IntegerCache.cache[i + (-IntegerCache.low)];</span><br><span class="line">    return new Integer(i);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p>如果值的范围在-128到127之间，它就从高速缓存返回实例。<br>所以…</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Integer c = 100, d = 100;</span><br></pre></td></tr></tbody></table></figure></div><p>指向了同一个对象。</p><p>这就是为什么我们写：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(c == d);</span><br></pre></td></tr></tbody></table></figure></div><p>我们可以得到true。</p><p><strong>现在你可能会问，为什么这里需要缓存？</strong><br>合乎逻辑的理由是，在此范围内的“小”整数使用率比大整数要高，因此，使用相同的底层对象是有价值的，可以减少潜在的内存占用。</p><p>然而，通过反射API你会误用此功能。</p><p><strong>运行下面的代码，享受它的魅力吧</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) throws NoSuchFieldException, IllegalAccessException {</span><br><span class="line">    Class cache = Integer.class.getDeclaredClasses()[0]; //1 </span><br><span class="line">    Field myCache = cache.getDeclaredField("cache"); //2 </span><br><span class="line">    myCache.setAccessible(true);//3 </span><br><span class="line">    Integer[] newCache = (Integer[]) myCache.get(cache); //4 </span><br><span class="line">    newCache[132] = newCache[133]; //5 </span><br><span class="line">    int a = 2;</span><br><span class="line">    int b = a + a;</span><br><span class="line">    System.out.printf("%d + %d = %d", a, a, b); // </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div></body></html>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在Java中如何高效判断数组中是否包含某个元素</title>
      <link href="/2018/08/28/%E5%9C%A8Java%E4%B8%AD%E5%A6%82%E4%BD%95%E9%AB%98%E6%95%88%E5%88%A4%E6%96%AD%E6%95%B0%E7%BB%84%E4%B8%AD%E6%98%AF%E5%90%A6%E5%8C%85%E5%90%AB%E6%9F%90%E4%B8%AA%E5%85%83%E7%B4%A0/"/>
      <url>/2018/08/28/%E5%9C%A8Java%E4%B8%AD%E5%A6%82%E4%BD%95%E9%AB%98%E6%95%88%E5%88%A4%E6%96%AD%E6%95%B0%E7%BB%84%E4%B8%AD%E6%98%AF%E5%90%A6%E5%8C%85%E5%90%AB%E6%9F%90%E4%B8%AA%E5%85%83%E7%B4%A0/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><p>如何检查一个数组(无序)是否包含一个特定的值？这是一个在Java中经常用到的并且非常有用的操作。</p><p>同时，这个问题在Stack Overflow中也是一个非常热门的问题。在投票比较高的几个答案中给出了几种不同的方法，但是他们的时间复杂度也是各不相同的。本文将分析几种常见用法及其时间成本。</p><h3 id="使用List"><a href="#使用List" class="headerlink" title="使用List"></a>使用List</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">useList</span><span class="params">(String[] arr, String targetValue)</span> </span>{</span><br><span class="line">    <span class="keyword">return</span> Arrays.asList(arr).contains(targetValue);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><h3 id="使用Set"><a href="#使用Set" class="headerlink" title="使用Set"></a>使用Set</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">useSet</span><span class="params">(String[] arr, String targetValue)</span> </span>{</span><br><span class="line">    Set<string> set = <span class="keyword">new</span> HashSet<string>(Arrays.asList(arr));</string></string></span><br><span class="line">    <span class="keyword">return</span> set.contains(targetValue);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><h3 id="使用循环判断"><a href="#使用循环判断" class="headerlink" title="使用循环判断"></a>使用循环判断</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">useLoop</span><span class="params">(String[] arr, String targetValue)</span> </span>{</span><br><span class="line">    <span class="keyword">for</span>(String s: arr){</span><br><span class="line">        <span class="keyword">if</span>(s.equals(targetValue))</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p>使用Arrays.binarySearch()</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Arrays.binarySearch()方法只能用于有序数组！！！如果数组无序的话得到的结果就会很奇怪。</span><br></pre></td></tr></tbody></table></figure></div><p>查找有序数组中是否包含某个值的用法如下：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public static boolean useArraysBinarySearch(String[] arr, String targetValue) { </span><br><span class="line">    int a =  Arrays.binarySearch(arr, targetValue);</span><br><span class="line">    if(a > 0)</span><br><span class="line">        return true;</span><br><span class="line">    else</span><br><span class="line">        return false;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><h1 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h1><p>下面的代码可以大概的得出各种方法的时间成本。基本思想就是从数组中查找某个值，数组的大小分别是5、1k、10k。这种方法得到的结果可能并不精确，但是是最简单清晰的方式。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) {</span><br><span class="line">    String[] arr = new String[] {  "CD",  "BC", "EF", "DE", "AB"};</span><br><span class="line"></span><br><span class="line">    //use list</span><br><span class="line">    long startTime = System.nanoTime();</span><br><span class="line">    for (int i = 0; i < 100000; i++) {</span><br><span class="line">        useList(arr, "A");</span><br><span class="line">    }</span><br><span class="line">    long endTime = System.nanoTime();</span><br><span class="line">    long duration = endTime - startTime;</span><br><span class="line">    System.out.println("useList:  " + duration / 1000000);</span><br><span class="line"></span><br><span class="line">    //use set</span><br><span class="line">    startTime = System.nanoTime();</span><br><span class="line">    for (int i = 0; i < 100000; i++) {</span><br><span class="line">        useSet(arr, "A");</span><br><span class="line">    }</span><br><span class="line">    endTime = System.nanoTime();</span><br><span class="line">    duration = endTime - startTime;</span><br><span class="line">    System.out.println("useSet:  " + duration / 1000000);</span><br><span class="line"></span><br><span class="line">    //use loop</span><br><span class="line">    startTime = System.nanoTime();</span><br><span class="line">    for (int i = 0; i < 100000; i++) {</span><br><span class="line">        useLoop(arr, "A");</span><br><span class="line">    }</span><br><span class="line">    endTime = System.nanoTime();</span><br><span class="line">    duration = endTime - startTime;</span><br><span class="line">    System.out.println("useLoop:  " + duration / 1000000);</span><br><span class="line"></span><br><span class="line">    //use Arrays.binarySearch()</span><br><span class="line">    startTime = System.nanoTime();</span><br><span class="line">    for (int i = 0; i < 100000; i++) {</span><br><span class="line">        useArraysBinarySearch(arr, "A");</span><br><span class="line">    }</span><br><span class="line">    endTime = System.nanoTime();</span><br><span class="line">    duration = endTime - startTime;</span><br><span class="line">    System.out.println("useArrayBinary:  " + duration / 1000000);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p>运行结果：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">useList:  13useSet:  72useLoop:  5useArraysBinarySearch:  9</span><br></pre></td></tr></tbody></table></figure></div><h1 id="使用一个长度为1k的数组"><a href="#使用一个长度为1k的数组" class="headerlink" title="使用一个长度为1k的数组"></a>使用一个长度为1k的数组</h1><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String[] arr = new String[1000];Random s = new Random();for(int i=0; i< 1000; i++){</span><br><span class="line">    arr[i] = String.valueOf(s.nextInt());</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p>结果：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">useList:  112useSet:  2055useLoop:  99useArrayBinary:  12</span><br></pre></td></tr></tbody></table></figure></div><h1 id="使用一个长度为10k的数组"><a href="#使用一个长度为10k的数组" class="headerlink" title="使用一个长度为10k的数组"></a>使用一个长度为10k的数组</h1><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String[] arr = new String[10000];Random s = new Random();for(int i=0; i< 10000; i++){</span><br><span class="line">    arr[i] = String.valueOf(s.nextInt());</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p>结果：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">useList:  1590useSet:  23819useLoop:  1526useArrayBinary:  12</span><br></pre></td></tr></tbody></table></figure></div><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>显然，使用一个简单的循环方法比使用任何集合都更加高效。许多开发人员为了方便，都使用第一种方法，但是他的效率也相对较低。因为将数组压入Collection类型中，首先要将数组元素遍历一遍，然后再使用集合类做其他操作。</p><p>如果使用Arrays.binarySearch()方法，数组必须是已排序的。由于上面的数组并没有进行排序，所以该方法不可使用。</p><p>实际上，如果你需要借助数组或者集合类高效地检查数组中是否包含特定值，一个已排序的列表或树可以做到时间复杂度为O(log(n))，hashset可以达到O(1)。</p><p><strong>（英文原文结束，以下是译者注）</strong></p><h3 id="使用ArrayUtils"><a href="#使用ArrayUtils" class="headerlink" title="使用ArrayUtils"></a>使用ArrayUtils</h3><p>除了以上几种以外，Apache Commons类库中还提供了一个ArrayUtils类，可以使用其contains方法判断数组和值的关系。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public static boolean useArrayUtils(String[] arr, String targetValue) {</span><br><span class="line">    return ArrayUtils.contains(arr,targetValue);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p>同样使用以上几种长度的数组进行测试，得出的结果是该方法的效率介于使用集合和使用循环判断之间（有的时候结果甚至比使用循环要理想）。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">useList:  323useSet:  3028useLoop:  141useArrayBinary:  12useArrayUtils:  181-------useList:  3703useSet:  35183useLoop:  3218useArrayBinary:  14useArrayUtils:  3125</span><br></pre></td></tr></tbody></table></figure></div><p>其实，如果查看ArrayUtils.contains的源码可以发现，他判断一个元素是否包含在数组中其实也是使用循环判断的方式。</p><p>部分代码如下：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">if(array == null) {</span><br><span class="line">    return -1;</span><br><span class="line">} else {</span><br><span class="line">    if(startIndex < 0) {</span><br><span class="line">        startIndex = 0;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    int i;</span><br><span class="line">    if(objectToFind == null) {</span><br><span class="line">        for(i = startIndex; i < array.length; ++i) {</span><br><span class="line">            if(array[i] == null) {</span><br><span class="line">                return i;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    } else if(array.getClass().getComponentType().isInstance(objectToFind)) {</span><br><span class="line">        for(i = startIndex; i < array.length; ++i) {</span><br><span class="line">            if(objectToFind.equals(array[i])) {</span><br><span class="line">                return i;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    return -1;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p>所以，相比较之下，我更倾向于使用ArrayUtils工具类来进行一些合数祖相关的操作。毕竟他可以让我少写很多代码（因为自己写代码难免有Bug，毕竟apache提供的开源工具类库都是经过无数开发者考验过的），而且，效率上也并不低太多。</p></body></html>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker安装FastDFS，集成Spring Boot操作</title>
      <link href="/2018/08/26/Docker%E5%AE%89%E8%A3%85FastDFS%EF%BC%8C%E9%9B%86%E6%88%90Spring%20Boot%E6%93%8D%E4%BD%9C/"/>
      <url>/2018/08/26/Docker%E5%AE%89%E8%A3%85FastDFS%EF%BC%8C%E9%9B%86%E6%88%90Spring%20Boot%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><p>Docker安装FastDFS，集成Spring Boot操作</p><ol><li>获取镜像</li><li>运行tracker</li><li>运行storage</li></ol><a id="more"></a><h2 id="1-获取镜像"><a href="#1-获取镜像" class="headerlink" title="1. 获取镜像"></a>1. 获取镜像</h2><p>可以利用已有的FastDFS Docker镜像来运行FastDFS。</p><p>使用Centos 最好使用7.2的版本，不然可能会无法启动，或者缺少各种依赖。</p><p>获取镜像可以通过下载</p><pre><code>docker image pull delron/fastdfs</code></pre><p>也可是直接使用提供的镜像备份文件</p><pre><code>docker load -i 文件路径/fastdfs_docker.tar（提前打包好的）</code></pre><p>加载好镜像后，就可以开启运行FastDFS的tracker和storage了。</p><h2 id="2-运行tracker"><a href="#2-运行tracker" class="headerlink" title="2. 运行tracker"></a><a name="t1" style="outline-style: initial; outline-width: 0px; color: rgb(78, 161, 219); cursor: pointer; word-break: break-all;"></a>2. 运行tracker</h2><p>执行如下命令开启tracker 服务</p><pre><code>docker run -dti --network=host --name tracker -v /var/fdfs/tracker:/var/fdfs delron/fastdfs tracker</code></pre><ul><li>我们将fastDFS tracker运行目录映射到本机的 /var/fdfs/tracker目录中。</li></ul><p>执行如下命令查看tracker是否运行起来</p><pre><code>docker container ls</code></pre><p>如果想停止tracker服务，可以执行如下命令</p><pre><code>docker container stop tracker</code></pre><p>停止后，重新运行tracker，可以执行如下命令</p><pre><code>docker container start tracker</code></pre><h2 id="3-运行storage"><a href="#3-运行storage" class="headerlink" title="3. 运行storage"></a><a name="t2" style="outline-style: initial; outline-width: 0px; color: rgb(78, 161, 219); cursor: pointer; word-break: break-all;"></a>3. 运行storage</h2><p>执行如下命令开启storage服务</p><pre><code>docker run -dti --network=host --name storage -e TRACKER_SERVER=192.168.99.100:22122 -v /var/fdfs/storage:/var/fdfs delron/fastdfs storage</code></pre><ul><li>TRACKER_SERVER=本机的ip地址:22122 本机ip地址不要使用127.0.0.1</li><li>我们将fastDFS storage运行目录映射到本机的/var/fdfs/storage目录中</li></ul><p>执行如下命令查看storage是否运行起来</p><pre><code>docker container ls</code></pre><p>如果想停止storage服务，可以执行如下命令</p><pre><code>docker container stop storage</code></pre><p>停止后，重新运行storage，可以执行如下命令</p><pre><code>docker container start storage</code></pre><p><span style="outline-style: initial; outline-width: 0px; word-break: break-all; font-weight: 700;">注意：如果无法重新运行，可以删除<code>/var/fdfs/storage/data</code>目录下的<code>fdfs_storaged.pid</code> 文件，然后重新运行storage。</span></p><p><span style="outline-style: initial; outline-width: 0px; word-break: break-all; font-weight: 700;"><span style="letter-spacing: 0.2px;"><font color="#ff0000">警告：我此处使用的是win10安装的docker，如果你使用云服务器，记得在安全组开放22122和8888这两个端口，否则将代码将无法连接。</font></span></span></p><p><span style="outline-style: initial; outline-width: 0px; word-break: break-all; font-weight: 700;">项目地址：<a href="https://github.com/HWYWL/spring-boot-docker-fsatdfs" target="_blank" rel="noopener">https://github.com/HWYWL/spring-boot-docker-fsatdfs</a></span></p><p><span style="outline-style: initial; outline-width: 0px; word-break: break-all; font-weight: 700;">效果图：</span><a href="http://www.hwy.ac.cn/upload/2018/08/72qoojamq0iicr4lobc95ijmpo.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="http://www.hwy.ac.cn/upload/2018/08/72qoojamq0iicr4lobc95ijmpo.png" class="lazyload"></a></p></body></html>]]></content>
      
      
      <categories>
          
          <category> Spring Boot </category>
          
          <category> FastDFS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> Spring Boot </tag>
            
            <tag> FastDFS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Docker安装RabbitMQ</title>
      <link href="/2018/08/18/%E4%BD%BF%E7%94%A8Docker%E5%AE%89%E8%A3%85RabbitMQ/"/>
      <url>/2018/08/18/%E4%BD%BF%E7%94%A8Docker%E5%AE%89%E8%A3%85RabbitMQ/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><p>获取rabbit镜像：<br>docker pull rabbitmq:management</p><a id="more"></a><p>获取rabbit镜像：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">docker pull rabbitmq:management</span><br><span class="line"><span class="string">``</span><span class="string">`  </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">创建并运行容器：</span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>js</span><br><span class="line">docker run -d --hostname my-rabbit --name rabbit -p <span class="number">8080</span>:<span class="number">15672</span> rabbitmq:management  </span><br><span class="line">--hostname：指定容器主机名称  </span><br><span class="line">--name:指定容器名称  </span><br><span class="line">-p:将mq端口号映射到本地  </span><br><span class="line"></span><br><span class="line">或在运行时设置用户和密码</span><br><span class="line">docker run -d --hostname my-rabbit --name rabbit -e RABBITMQ_DEFAULT_USER=admin -e RABBITMQ_DEFAULT_PASS=admin -p <span class="number">15672</span>:<span class="number">15672</span> -p <span class="number">5672</span>:<span class="number">5672</span> -p <span class="number">25672</span>:<span class="number">25672</span> -p <span class="number">61613</span>:<span class="number">61613</span> -p <span class="number">1883</span>:<span class="number">1883</span> rabbitmq:management</span><br><span class="line"></span><br><span class="line"><span class="number">15672</span>：控制台端口号</span><br><span class="line"></span><br><span class="line"><span class="number">5672</span>：应用访问端口号</span><br><span class="line"><span class="string">``</span><span class="string">`  </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">查看rabbit运行状况：</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">![](https://images2017.cnblogs.com/blog/1081448/201710/1081448-20171027152847117-1098449262.png)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>js</span><br><span class="line">容器运行正常，使用http:<span class="comment">//192.168.99.100:15672访问RabbitMQ控制台</span></span><br></pre></td></tr></tbody></table></figure></div></body></html>]]></content>
      
      
      <categories>
          
          <category> 消息队列 </category>
          
          <category> RabbitMQ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> RabbitMQ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker容器名字冲突解决</title>
      <link href="/2018/08/07/Docker%E5%AE%B9%E5%99%A8%E5%90%8D%E5%AD%97%E5%86%B2%E7%AA%81%E8%A7%A3%E5%86%B3/"/>
      <url>/2018/08/07/Docker%E5%AE%B9%E5%99%A8%E5%90%8D%E5%AD%97%E5%86%B2%E7%AA%81%E8%A7%A3%E5%86%B3/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><p>Docker容器名字冲突解决</p><a id="more"></a><p>– Docker容器名字冲突解决</p><pre><code class="js">docker: <span class="built_in">Error</span> response <span class="keyword">from</span> daemon: Conflict. The container name <span class="string">"/tracker"</span> is already <span class="keyword">in</span> use by container <span class="string">"73b9fc481e0316195ab89d4c4faa38c5a1012a84ce859a65488e983e9b415255"</span>. You have to remove (or rename) that container to be able to reuse that name.See <span class="string">'docker run --help'</span>.</code></pre><p>以上是错误的提示，我们发现有一个名为tracker的容器冲突了，此时我们使用命令进行查看</p><pre><code class="js">docker ps</code></pre><p>如果容器存在直接使用一下命令停止、删除</p><pre><code class="js">docker stop iddocker rm id</code></pre><p>如果容器不存在使用以下命令查看,就会找到存在的镜像</p><pre><code class="js">docker ps -a</code></pre><p>此时你可以使用删除，或者把他重启，记得后面跟上id参数</p><pre><code class="js">docker restart & docker stop & docker start</code></pre><p>注意：因为存在数据卷的原因，所以以前的数据不会被删除，可以放心大胆的删除镜像！！！</p></body></html>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用docker安装kafka</title>
      <link href="/2018/08/07/%E4%BD%BF%E7%94%A8docker%E5%AE%89%E8%A3%85kafka/"/>
      <url>/2018/08/07/%E4%BD%BF%E7%94%A8docker%E5%AE%89%E8%A3%85kafka/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><ol><li>启动zookeeper容器</li><li>启动kafka容器</li><li>测试kafka</li><li>集群搭建</li><li>创建Replication为2，Partition为2的topic</li></ol><a id="more"></a><h3 id="1-启动zookeeper容器"><a href="#1-启动zookeeper容器" class="headerlink" title="1. 启动zookeeper容器"></a>1. 启动zookeeper容器</h3><pre><code>docker pull wurstmeister/zookeeperdocker run -d --name zookeeper -p 2181:2181 -t wurstmeister/zookeeper</code></pre><h3 id="2-启动kafka容器"><a href="#2-启动kafka容器" class="headerlink" title="2. 启动kafka容器"></a><a name="t1" style="outline-style: initial; outline-width: 0px; color: rgb(78, 161, 219); cursor: pointer; word-break: break-all;"></a>2. 启动kafka容器</h3><pre><code>docker pull wurstmeister/kafkadocker run  -d --name kafka -p 9092:9092 -e KAFKA_BROKER_ID=0 -e KAFKA_ZOOKEEPER_CONNECT=192.168.99.100:2181 -e KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://192.168.99.100:9092 -e KAFKA_LISTENERS=PLAINTEXT://0.0.0.0:9092 -t wurstmeister/kafka </code></pre><p>这里面主要设置了4个参数</p><pre><code>KAFKA_BROKER_ID=0               KAFKA_ZOOKEEPER_CONNECT=192.168.99.100:2181KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://192.168.99.100:9092KAFKA_LISTENERS=PLAINTEXT://0.0.0.0:9092</code></pre><p>中间两个参数的192.168.99.100改为宿主机器的IP地址，如果不这么设置，可能会导致在别的机器上访问不到kafka。</p><h3 id="3-测试kafka"><a href="#3-测试kafka" class="headerlink" title="3. 测试kafka"></a><a name="t2" style="outline-style: initial; outline-width: 0px; color: rgb(78, 161, 219); cursor: pointer; word-break: break-all;"></a>3. 测试kafka</h3><p>进入kafka容器的命令行</p><pre><code>docker exec -ti kafka /bin/bash</code></pre><p>进入kafka所在目录</p><pre><code>cd opt/kafka_2.11-2.0.0/</code></pre><h3 id="4-集群搭建"><a href="#4-集群搭建" class="headerlink" title="4. 集群搭建"></a><a name="t3" style="outline-style: initial; outline-width: 0px; color: rgb(78, 161, 219); cursor: pointer; word-break: break-all;"></a>4. 集群搭建</h3><p>使用docker命令可快速在同一台机器搭建多个kafka，只需要改变brokerId和端口</p><pre><code>docker run -d --name kafka1 \-p 9093:9093 \-e KAFKA_BROKER_ID=1 \-e KAFKA_ZOOKEEPER_CONNECT=192.168.99.100:2181 \-e KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://192.168.99.100:9093 \-e KAFKA_LISTENERS=PLAINTEXT://0.0.0.0:9093 -t wurstmeister/kafka</code></pre><h3 id="5-创建Replication为2，Partition为2的topic"><a href="#5-创建Replication为2，Partition为2的topic" class="headerlink" title="5. 创建Replication为2，Partition为2的topic"></a><a name="t4" style="outline-style: initial; outline-width: 0px; color: rgb(78, 161, 219); cursor: pointer; word-break: break-all;"></a>5. 创建Replication为2，Partition为2的topic</h3><p>在kafka容器中的opt/<span style="background-color: transparent; color: inherit; font-family: Menlo, Monaco, Consolas, " courier new", monospace; font-size: inherit; white-space: pre-wrap;">kafka_2.11-2.0.0</span>/目录下输入</p><pre><code>bin/kafka-topics.sh --create --zookeeper 192.168.99.100:2181 --replication-factor 2 --partitions 2 --topic partopic</code></pre><h3 id="6-查看topic的状态"><a href="#6-查看topic的状态" class="headerlink" title="6. 查看topic的状态"></a><a name="t5" style="outline-style: initial; outline-width: 0px; color: rgb(78, 161, 219); cursor: pointer; word-break: break-all;"></a>6. 查看topic的状态</h3><p>在kafka容器中的opt/<span style="background-color: transparent; color: inherit; font-family: Menlo, Monaco, Consolas, " courier new", monospace; font-size: inherit; white-space: pre-wrap;">kafka_2.11-2.0.0</span>/目录下输入</p><pre><code>bin/kafka-topics.sh --describe --zookeeper 192.168.99.100:2181 --topic partopic</code></pre><p>输出结果：</p><pre><code>Topic:partopic  PartitionCount:2    ReplicationFactor:2 Configs:    Topic: partopic Partition: 0    Leader: 0   Replicas: 0,1   Isr: 0,1    Topic: partopic Partition: 1    Leader: 0   Replicas: 1,0   Isr: 0,1</code></pre><p>显示每个分区的Leader机器为broker0，在broker0和1上具有备份，Isr代表存活的备份机器中存活的。<br>当停掉kafka1后，</p><pre><code>docker stop kafka1</code></pre><p>再查看topic状态，输出结果：</p><pre><code>Topic:partopic  PartitionCount:2    ReplicationFactor:2 Configs:    Topic: partopic Partition: 0    Leader: 0   Replicas: 0,1   Isr: 0    Topic: partopic Partition: 1    Leader: 0   Replicas: 1,0   Isr: 0</code></pre></body></html>]]></content>
      
      
      <categories>
          
          <category> 消息队列 </category>
          
          <category> kafka </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> kafka </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker nginx安装与配置挂载并实现负载均衡</title>
      <link href="/2018/07/27/Docker%20nginx%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE%E6%8C%82%E8%BD%BD%E5%B9%B6%E5%AE%9E%E7%8E%B0%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/"/>
      <url>/2018/07/27/Docker%20nginx%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE%E6%8C%82%E8%BD%BD%E5%B9%B6%E5%AE%9E%E7%8E%B0%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><p>在Docker下载Nginx镜像</p><p>docker pull nginx docker images</p><a id="more"></a><h3 id="Docker-nginx安装与配置挂载并实现负载均衡"><a href="#Docker-nginx安装与配置挂载并实现负载均衡" class="headerlink" title="Docker nginx安装与配置挂载并实现负载均衡"></a><strong><font color="#a5c6ce" style face="Arial Black">Docker nginx安装与配置挂载并实现负载均衡</font></strong></h3><ul><li><p><span style="outline-style: initial; outline-width: 0px; font-weight: 700; word-break: break-all;">在Docker下载Nginx镜像</span></p><p>docker pull nginx<br>docker images</p></li></ul><p><a href="https://img-blog.csdn.net/2018070213224659?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI2NjQxNzgx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" data-fancybox="group" data-caption="这里写图片描述" class="fancybox"><img alt="这里写图片描述" title="这里写图片描述" data-src="https://img-blog.csdn.net/2018070213224659?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI2NjQxNzgx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" class="lazyload"></a></p><ul><li><p><span style="outline-style: initial; outline-width: 0px; font-weight: 700; word-break: break-all;">创建挂载目录</span></p><p>mkdir -p /data/nginx/{conf,conf.d,html,logs}</p></li></ul><p><a href="https://img-blog.csdn.net/20180702132449202?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI2NjQxNzgx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" data-fancybox="group" data-caption="这里写图片描述" class="fancybox"><img alt="这里写图片描述" title="这里写图片描述" data-src="https://img-blog.csdn.net/20180702132449202?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI2NjQxNzgx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" class="lazyload"></a></p><ul><li><p><span style="outline-style: initial; outline-width: 0px; font-weight: 700; word-break: break-all;">编写nginx,conf配置文件，并放在文件夹中</span></p><h1 id="For-more-information-on-configuration-see"><a href="#For-more-information-on-configuration-see" class="headerlink" title="For more information on configuration, see:"></a>For more information on configuration, see:</h1><h1 id="Official-English-Documentation-http-nginx-org-en-docs"><a href="#Official-English-Documentation-http-nginx-org-en-docs" class="headerlink" title="* Official English Documentation: http://nginx.org/en/docs/"></a>* Official English Documentation: <a href="http://nginx.org/en/docs/" target="_blank" rel="noopener">http://nginx.org/en/docs/</a></h1><h1 id="Official-Russian-Documentation-http-nginx-org-ru-docs"><a href="#Official-Russian-Documentation-http-nginx-org-ru-docs" class="headerlink" title="* Official Russian Documentation: http://nginx.org/ru/docs/"></a>* Official Russian Documentation: <a href="http://nginx.org/ru/docs/" target="_blank" rel="noopener">http://nginx.org/ru/docs/</a></h1><p>user nginx;<br>worker_processes auto;<br>error_log /var/log/nginx/error.log;<br>pid /run/nginx.pid;</p><h1 id="Load-dynamic-modules-See-usr-share-nginx-README-dynamic"><a href="#Load-dynamic-modules-See-usr-share-nginx-README-dynamic" class="headerlink" title="Load dynamic modules. See /usr/share/nginx/README.dynamic."></a>Load dynamic modules. See /usr/share/nginx/README.dynamic.</h1><p>include /usr/share/nginx/modules/*.conf;</p><p>events {</p><pre><code>worker_connections 1024;</code></pre><p>}</p><p>http {</p><pre><code>log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '                  '$status $body_bytes_sent "$http_referer" '                  '"$http_user_agent" "$http_x_forwarded_for"';access_log  /var/log/nginx/access.log  main;sendfile            on;tcp_nopush          on;tcp_nodelay         on;keepalive_timeout   65;types_hash_max_size 2048;include             /etc/nginx/mime.types;default_type        application/octet-stream;# Load modular configuration files from the /etc/nginx/conf.d directory.# See http://nginx.org/en/docs/ngx_core_module.html#include# for more information.include /etc/nginx/conf.d/*.conf;server {    listen       80 default_server;    listen       [::]:80 default_server;    server_name  182.254.161.54;    root         /usr/share/nginx/html;    # Load configuration files for the default server block.    include /etc/nginx/default.d/*.conf;    location / {    proxy_pass http://pic;     }    error_page 404 /404.html;        location = /40x.html {    }    error_page 500 502 503 504 /50x.html;        location = /50x.html {    }}upstream pic{            server 182.254.161.54:8088 weight=5;            server 182.254.161.54:8089 weight=5;}</code></pre><p>}</p></li><li><p><span style="outline-style: initial; outline-width: 0px; font-weight: 700; word-break: break-all;">启动容器</span></p><p>docker run –name mynginx -d -p 82:80  -v /data/nginx/conf/nginx.conf:/etc/nginx/nginx.conf  -v /data/nginx/logs:/var/log/nginx -d docker.io/nginx</p></li><li><p><span style="outline-style: initial; outline-width: 0px; font-weight: 700; word-break: break-all;">查看启动的容器</span></p><p>docker ps </p></li></ul><p><a href="https://img-blog.csdn.net/20180702132832236?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI2NjQxNzgx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" data-fancybox="group" data-caption="这里写图片描述" class="fancybox"><img alt="这里写图片描述" title="这里写图片描述" data-src="https://img-blog.csdn.net/20180702132832236?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI2NjQxNzgx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" class="lazyload"></a></p><ul><li><span style="outline-style: initial; outline-width: 0px; font-weight: 700; word-break: break-all;">先前已经在Docker部署两个tomcat，一个是8088端口，另一个是8089端口，并进入两个容器里编写了简单的页面</span></li></ul><p><a href="https://img-blog.csdn.net/20180702133106139?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI2NjQxNzgx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" data-fancybox="group" data-caption="这里写图片描述" class="fancybox"><img alt="这里写图片描述" title="这里写图片描述" data-src="https://img-blog.csdn.net/20180702133106139?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI2NjQxNzgx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" class="lazyload"></a></p><p><span style="outline-style: initial; outline-width: 0px; font-weight: 700; word-break: break-all;">访问8088端口</span><br><a href="https://img-blog.csdn.net/20180702133728495?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI2NjQxNzgx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" data-fancybox="group" data-caption="这里写图片描述" class="fancybox"><img alt="这里写图片描述" title="这里写图片描述" data-src="https://img-blog.csdn.net/20180702133728495?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI2NjQxNzgx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" class="lazyload"></a></p><p><span style="outline-style: initial; outline-width: 0px; font-weight: 700; word-break: break-all;">访问8089端口</span><br><a href="https://img-blog.csdn.net/20180702133805719?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI2NjQxNzgx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" data-fancybox="group" data-caption="这里写图片描述" class="fancybox"><img alt="这里写图片描述" title="这里写图片描述" data-src="https://img-blog.csdn.net/20180702133805719?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI2NjQxNzgx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" class="lazyload"></a></p><ul><li><span style="outline-style: initial; outline-width: 0px; font-weight: 700; word-break: break-all;">现在通过Nginx访问两个tomcat的内容，实现负载均衡的功能，出于区别，更能体现负载均衡的功能，两个页面的内容不一样，但是访问路径都一样，只是通过Nginx反向代理去轮换访问</span></li></ul><p><a href="https://img-blog.csdn.net/20180702133452332?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI2NjQxNzgx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" data-fancybox="group" data-caption="这里写图片描述" class="fancybox"><img alt="这里写图片描述" title="这里写图片描述" data-src="https://img-blog.csdn.net/20180702133452332?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI2NjQxNzgx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" class="lazyload"></a></p><p><a href="https://img-blog.csdn.net/20180702133509870?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI2NjQxNzgx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" data-fancybox="group" data-caption="这里写图片描述" class="fancybox"><img alt="这里写图片描述" title="这里写图片描述" data-src="https://img-blog.csdn.net/20180702133509870?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI2NjQxNzgx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" class="lazyload"></a></p></body></html>]]></content>
      
      
      <categories>
          
          <category> Nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker 安装mysql5.7</title>
      <link href="/2018/07/27/Docker%20%E5%AE%89%E8%A3%85mysql5.7/"/>
      <url>/2018/07/27/Docker%20%E5%AE%89%E8%A3%85mysql5.7/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><p>1 安装</p><p>docker pull docker.io/mysql</p><a id="more"></a><p><font face="Arial Black" color="#73a5ad"><span style="font-size: 16px;"><strong>Docker 安装mysql5.7</strong></span></font>  </p><p>1 安装</p><p> docker pull docker.io/mysql  </p><pre><code>[root@iZuf6boi8ejfovwda7q1ynZ ~]# docker pull docker.io/mysqlUsing default tag: latestTrying to pull repository docker.io/library/mysql ... latest: Pulling from docker.io/library/mysqlf49cf87b52c1: Pull complete 78032de49d65: Pull complete 837546b20bc4: Pull complete 9b8316af6cc6: Pull complete 1056cf29b9f1: Pull complete 86f3913b029a: Pull complete 4cbbfc9aebab: Pull complete 8ffd0352f6a8: Pull complete 45d90f823f97: Pull complete ca2a791aeb35: Pull complete Digest: sha256:1f95a2ba07ea2ee2800ec8ce3b5370ed4754b0a71d9d11c0c35c934e9708dcf1</code></pre><p>2 启动<br>[root@iZuf6boi8ejfovwda7q1ynZ ~]# docker run –name mysql -p 3306:3306 -e MYSQL_ROOT_PASSWORD=123456 -d mysql<br>3c995c988a94ce38a5ade6dcce7cc9168b349051ec51dc5e8a11c8f210658c04</p><p>如果需要把数据存储在宿主机器 加参数-v</p><pre><code>[root@iZuf6boi8ejfovwda7q1ynZ home]# docker run --name mysql -p 3306:3306 -e MYSQL_ROOT_PASSWORD=123456 -v /home/mysql/data:/var/lib/mysql -v /home/mysql/my.cnf:/etc/mysql/my.cnf -d mysql/usr/bin/docker-current: Error response from daemon: Conflict. The name "/mysql" is already in use by container 3c995c988a94ce38a5ade6dcce7cc9168b349051ec51dc5e8a11c8f210658c04\. You have to remove (or rename) that container to be able to reuse that name..See '/usr/bin/docker-current run --help'.</code></pre><p><span style="color: rgb(51, 51, 51); font-family: -apple-system, " sf ui text", arial, "pingfang sc", "hiragino sans gb", "microsoft yahei", "wenquanyi micro hei", sans-serif, simhei, simsun;">有容器用了mysql这个名称，需要先停止，再删除镜像</span>  </p><pre><code>[root@iZuf6boi8ejfovwda7q1ynZ home]# docker psCONTAINER ID        IMAGE                               COMMAND                  CREATED             STATUS                  PORTS                                                             NAMES3c995c988a94        mysql                               "docker-entrypoint.sh"   8 hours ago         Up 8 hours              0.0.0.0:3306->3306/tcp                                            mysql[root@iZuf6boi8ejfovwda7q1ynZ home]# docker stop mysqlmysql[root@iZuf6boi8ejfovwda7q1ynZ home]# docker rm mysqlmysql</code></pre><p><span style="color: rgb(51, 51, 51); font-family: -apple-system, " sf ui text", arial, "pingfang sc", "hiragino sans gb", "microsoft yahei", "wenquanyi micro hei", sans-serif, simhei, simsun;">再次启动</span>  </p><pre><code>[root@iZuf6boi8ejfovwda7q1ynZ home]# docker run --name mysql -p 3306:3306 -e MYSQL_ROOT_PASSWORD=123456 -v /home/mysql/data:/var/lib/mysql -v /home/mysql/my.cnf:/etc/mysql/my.cnf -d mysqla086c00b114a744e5f3b9f64357aef15e46cc7face8dca0878be37e34e0eb240/usr/bin/docker-current: Error response from daemon: invalid header field value "oci runtime error: container_linux.go:247: starting container process caused \"process_linux.go:364: container init caused \\\"rootfs_linux.go:54: mounting \\\\\\\"/home/mysql/my.cnf\\\\\\\" to rootfs \\\\\\\"/var/lib/docker/devicemapper/mnt/54b2f88d4d6b504e68cdc8dc41e9bf229ecc739bbdce4e23b1253cec6ea62e1e/rootfs\\\\\\\" at \\\\\\\"/var/lib/docker/devicemapper/mnt/54b2f88d4d6b504e68cdc8dc41e9bf229ecc739bbdce4e23b1253cec6ea62e1e/rootfs/etc/mysql/mysql.cnf\\\\\\\" caused \\\\\\\"not a directory\\\\\\\"\\\"\"\n".[root@iZuf6boi8ejfovwda7q1ynZ home]# docker psCONTAINER ID        IMAGE                               COMMAND                  CREATED             STATUS                  PORTS                                                             NAMES[root@iZuf6boi8ejfovwda7q1ynZ home]# docker ps -aCONTAINER ID        IMAGE                               COMMAND                  CREATED             STATUS                    PORTS                                                             NAMESa086c00b114a        mysql                               "docker-entrypoint.sh"   38 seconds ago      Created                                                                                     mysql</code></pre><p><span style="color: rgb(51, 51, 51); font-family: -apple-system, " sf ui text", arial, "pingfang sc", "hiragino sans gb", "microsoft yahei", "wenquanyi micro hei", sans-serif, simhei, simsun;">再次启动发现，没有配置文件/home/mysql/my.cnf  但是容器还是创建成功了</span>  </p><pre><code>[root@iZuf6boi8ejfovwda7q1ynZ home]# docker rm mysqlmysql[root@iZuf6boi8ejfovwda7q1ynZ home]# docker ps -aCONTAINER ID        IMAGE                               COMMAND                  CREATED             STATUS                    PORTS                                                             NAMES[root@iZuf6boi8ejfovwda7q1ynZ home]# docker run --name mysql -p 3306:3306 -e MYSQL_ROOT_PASSWORD=123456 -v /home/mysql/data:/var/lib/mysql -d mysql825f0c86efe9fa16e909ac2444ae077a8c68667b3ae6760220971d6f2cda5f19[root@iZuf6boi8ejfovwda7q1ynZ home]# </code></pre><p><span style="color: rgb(51, 51, 51); font-family: -apple-system, " sf ui text", arial, "pingfang sc", "hiragino sans gb", "microsoft yahei", "wenquanyi micro hei", sans-serif, simhei, simsun;">所以还是需要删除镜像，重新启动，简单点把配置文件去掉就好了</span>  </p><p>3 进入容器<br>[root@iZuf6boi8ejfovwda7q1ynZ ~]# docker exec -it mysql  bash<br>root@3c995c988a94:/# mysql<br>ERROR 1045 (28000): Access denied for user ‘root’@’localhost’ (using password: NO)</p><p>4 进入客户端  </p><pre><code>[root@3c995c988a94:/# mysql -uroot -pEnter password: Welcome to the MySQL monitor.  Commands end with ; or \g.Your MySQL connection id is 4Server version: 5.7.20 MySQL Community Server (GPL)  Copyright (c) 2000, 2017, Oracle and/or its affiliates. All rights reserved.  Oracle is a registered trademark of Oracle Corporation and/or itsaffiliates. Other names may be trademarks of their respectiveowners.  Type 'help;' or '\h' for help. Type '\c' to clear the current input statement.  mysql> select version(); +-----------+| version() |+-----------+| 5.7.20    |+-----------+1 row in set (0.00 sec)</code></pre></body></html>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Excel表的读写</title>
      <link href="/2018/07/27/Centos7%E4%B8%8A%E5%AE%89%E8%A3%85docker/"/>
      <url>/2018/07/27/Centos7%E4%B8%8A%E5%AE%89%E8%A3%85docker/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><p>Docker从1.13版本之后采用时间线的方式作为版本号，分为社区版CE和企业版EE。 社区版是免费提供给个人开发者和小型团体使用的，企业版会提供额外的收费服务，比如经过官方测试认证过的基础设施、容器、插件等。</p><a id="more"></a><h2 id="Centos7上安装docker"><a href="#Centos7上安装docker" class="headerlink" title="Centos7上安装docker"></a><font color="#9cc6ef">Centos7上安装docker</font></h2><div id="cnblogs_post_body" class="blogpost-body" style="margin-bottom: 20px; word-break: break-word; font-family: Verdana, Geneva, Arial, Helvetica, sans-serif; font-size: 14.4px; background-color: rgb(238, 238, 238);"><p><span style="font-size: 16px;">Docker从1.13版本之后采用时间线的方式作为版本号，分为社区版CE和企业版EE。</span></p><p><span style="font-size: 16px;">社区版是免费提供给个人开发者和小型团体使用的，企业版会提供额外的收费服务，比如经过官方测试认证过的基础设施、容器、插件等。</span></p><p><span style="font-size: 16px;">社区版按照stable和edge两种方式发布，每个季度更新stable版本，如17.06，17.09；每个月份更新edge版本，如17.09，17.10。</span></p><h2 id="一、安装docker"><a href="#一、安装docker" class="headerlink" title="一、安装docker"></a>一、安装docker</h2><p>1、Docker 要求 CentOS 系统的内核版本高于 3.10 ，查看本页面的前提条件来验证你的CentOS 版本是否支持 Docker 。</p><p>通过 *<em>uname -r *</em>命令查看你当前的内核版本</p><div class="cnblogs_code" style="background-color: rgb(245, 245, 245); border: 1px solid rgb(204, 204, 204); padding: 5px; overflow: auto; margin: 5px 0px; font-family: " courier new" !important; font-size: 12px !important;"><pre style="margin-bottom: 0px; white-space: pre-wrap; font-family: " courier new" !important; font-size: 12px !important;"> $ <span style="color: rgb(0, 0, 255); font-size: 12px !important; line-height: 1.5 !important;">uname</span> -r</pre></div><p><span style="font-size: 16px;">2、使用 <code>root</code> 权限登录 Centos。确保 yum 包更新到最新。</span></p><div class="cnblogs_code" style="background-color: rgb(245, 245, 245); border: 1px solid rgb(204, 204, 204); padding: 5px; overflow: auto; margin: 5px 0px; font-family: " courier new" !important; font-size: 12px !important;"><pre style="margin-bottom: 0px; white-space: pre-wrap; font-family: " courier new" !important; font-size: 12px !important;">$ <span style="color: rgb(0, 0, 255); font-size: 12px !important; line-height: 1.5 !important;">sudo</span> <span style="color: rgb(0, 0, 255); font-size: 12px !important; line-height: 1.5 !important;">yum</span> update</pre></div><p><span style="font-size: 16px;">3、卸载旧版本(如果安装过旧版本的话)</span></p><div class="cnblogs_code" style="background-color: rgb(245, 245, 245); border: 1px solid rgb(204, 204, 204); padding: 5px; overflow: auto; margin: 5px 0px; font-family: " courier new" !important; font-size: 12px !important;"><pre style="margin-bottom: 0px; white-space: pre-wrap; font-family: " courier new" !important; font-size: 12px !important;">$ <span style="color: rgb(0, 0, 255); font-size: 12px !important; line-height: 1.5 !important;">sudo</span> <span style="color: rgb(0, 0, 255); font-size: 12px !important; line-height: 1.5 !important;">yum</span> <span style="color: rgb(0, 0, 0); font-size: 12px !important; line-height: 1.5 !important;">remove docker  docker</span>-<span style="color: rgb(0, 0, 0); font-size: 12px !important; line-height: 1.5 !important;">common docker</span>-<span style="color: rgb(0, 0, 0); font-size: 12px !important; line-height: 1.5 !important;">selinux docker</span>-engine</pre></div><p><span style="font-size: 16px;">4、安装需要的软件包， </span><span style="font-size: 16px;">yum-util 提供yum-config-manager功能，</span><span class="pln" style="font-size: 16px;"><span class="com">另外两个是devicemapper驱动依赖的</span></span></p><div class="cnblogs_code" style="background-color: rgb(245, 245, 245); border: 1px solid rgb(204, 204, 204); padding: 5px; overflow: auto; margin: 5px 0px; font-family: " courier new" !important; font-size: 12px !important;"><pre style="margin-bottom: 0px; white-space: pre-wrap; font-family: " courier new" !important; font-size: 12px !important;">$ <span style="color: rgb(0, 0, 255); font-size: 12px !important; line-height: 1.5 !important;">sudo</span> <span style="color: rgb(0, 0, 255); font-size: 12px !important; line-height: 1.5 !important;">yum</span> <span style="color: rgb(0, 0, 255); font-size: 12px !important; line-height: 1.5 !important;">install</span> -y <span style="color: rgb(0, 0, 255); font-size: 12px !important; line-height: 1.5 !important;">yum</span>-utils device-mapper-persistent-data lvm2</pre></div><p>5、设置yum源</p><div class="cnblogs_code" style="background-color: rgb(245, 245, 245); border: 1px solid rgb(204, 204, 204); padding: 5px; overflow: auto; margin: 5px 0px; font-family: " courier new" !important; font-size: 12px !important;"><pre style="margin-bottom: 0px; white-space: pre-wrap; font-family: " courier new" !important; font-size: 12px !important;"><span style="color: rgb(0, 0, 255); font-size: 12px !important; line-height: 1.5 !important;"><span style="color: rgb(0, 0, 0); font-size: 12px !important; line-height: 1.5 !important;">$</span> sudo</span> <span style="color: rgb(0, 0, 255); font-size: 12px !important; line-height: 1.5 !important;">yum</span>-config-manager --add-repo https:<span style="color: rgb(0, 128, 0); font-size: 12px !important; line-height: 1.5 !important;">//</span><span style="color: rgb(0, 128, 0); font-size: 12px !important; line-height: 1.5 !important;">download.docker.com/linux/centos/docker-ce.repo</span></pre></div><p> <a href="https://images2017.cnblogs.com/blog/1107037/201801/1107037-20180128094640209-1433322312.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://images2017.cnblogs.com/blog/1107037/201801/1107037-20180128094640209-1433322312.png" class="lazyload"></a></p><p>6、可以查看所有仓库中所有docker版本，并选择特定版本安装</p><div class="cnblogs_code" style="background-color: rgb(245, 245, 245); border: 1px solid rgb(204, 204, 204); padding: 5px; overflow: auto; margin: 5px 0px; font-family: " courier new" !important; font-size: 12px !important;"><pre style="margin-bottom: 0px; white-space: pre-wrap; font-family: " courier new" !important; font-size: 12px !important;">$ <span style="color: rgb(0, 0, 255); font-size: 12px !important; line-height: 1.5 !important;">yum</span> list docker-ce --showduplicates | <span style="color: rgb(0, 0, 255); font-size: 12px !important; line-height: 1.5 !important;">sort</span> -r</pre></div><p><a href="https://images2017.cnblogs.com/blog/1107037/201801/1107037-20180128095038600-772177322.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://images2017.cnblogs.com/blog/1107037/201801/1107037-20180128095038600-772177322.png" class="lazyload"></a></p><p>7、安装docker</p><div class="cnblogs_code" style="background-color: rgb(245, 245, 245); border: 1px solid rgb(204, 204, 204); padding: 5px; overflow: auto; margin: 5px 0px; font-family: " courier new" !important; font-size: 12px !important;"><pre style="margin-bottom: 0px; white-space: pre-wrap; font-family: " courier new" !important; font-size: 12px !important;">$ <span style="color: rgb(0, 0, 255); font-size: 12px !important; line-height: 1.5 !important;">sudo</span> <span style="color: rgb(0, 0, 255); font-size: 12px !important; line-height: 1.5 !important;">yum</span> <span style="color: rgb(0, 0, 255); font-size: 12px !important; line-height: 1.5 !important;">install</span> docker-ce  <span style="color: rgb(0, 128, 0); font-size: 12px !important; line-height: 1.5 !important;">#由于repo中默认只开启stable仓库，故这里安装的是最新稳定版17.12.0</span> <span style="color: rgb(0, 0, 0); font-size: 12px !important; line-height: 1.5 !important;">$</span> <span style="color: rgb(0, 0, 255); font-size: 12px !important; line-height: 1.5 !important;">sudo</span> <span style="color: rgb(0, 0, 255); font-size: 12px !important; line-height: 1.5 !important;">yum</span> <span style="color: rgb(0, 0, 255); font-size: 12px !important; line-height: 1.5 !important;">install</span> <fqpn>  <span style="color: rgb(0, 128, 0); font-size: 12px !important; line-height: 1.5 !important;"># 例如：sudo yum install docker-ce-17.12.0.ce</span></fqpn></pre></div><p> <a href="https://images2017.cnblogs.com/blog/1107037/201801/1107037-20180128103448287-493824081.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://images2017.cnblogs.com/blog/1107037/201801/1107037-20180128103448287-493824081.png" class="lazyload"></a></p><p><span style="font-size: 16px;">8、启动并加入开机启动</span></p><div class="cnblogs_code" style="background-color: rgb(245, 245, 245); border: 1px solid rgb(204, 204, 204); padding: 5px; overflow: auto; margin: 5px 0px; font-family: " courier new" !important; font-size: 12px !important;"><pre style="margin-bottom: 0px; white-space: pre-wrap; font-family: " courier new" !important; font-size: 12px !important;">$ <span style="color: rgb(0, 0, 255); font-size: 12px !important; line-height: 1.5 !important;">sudo</span> <span style="color: rgb(0, 0, 0); font-size: 12px !important; line-height: 1.5 !important;">systemctl start docker$</span> <span style="color: rgb(0, 0, 255); font-size: 12px !important; line-height: 1.5 !important;">sudo</span> systemctl enable docker</pre></div><p><span style="font-size: 16px;">9、验证安装是否成功(有client和service两部分表示docker安装启动都成功了)</span></p><div class="cnblogs_code" style="background-color: rgb(245, 245, 245); border: 1px solid rgb(204, 204, 204); padding: 5px; overflow: auto; margin: 5px 0px; font-family: " courier new" !important; font-size: 12px !important;"><pre style="margin-bottom: 0px; white-space: pre-wrap; font-family: " courier new" !important; font-size: 12px !important;">$ <span style="color: rgb(0, 0, 255); font-size: 12px !important; line-height: 1.5 !important;">docker</span> version</pre></div><p><a href="https://images2017.cnblogs.com/blog/1107037/201801/1107037-20180128104046600-1053107877.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://images2017.cnblogs.com/blog/1107037/201801/1107037-20180128104046600-1053107877.png" class="lazyload"></a></p><h2 id="二、问题"><a href="#二、问题" class="headerlink" title="二、问题"></a>二、问题</h2><p><span style="font-size: 16px;">1、因为之前已经安装过旧版本的docker，在安装的时候报错如下：</span></p><div class="cnblogs_code" style="background-color: rgb(245, 245, 245); border: 1px solid rgb(204, 204, 204); padding: 5px; overflow: auto; margin: 5px 0px; font-family: " courier new" !important; font-size: 12px !important;"><pre style="margin-bottom: 0px; white-space: pre-wrap; font-family: " courier new" !important; font-size: 12px !important;"><span style="color: rgb(0, 0, 0); font-size: 12px !important; line-height: 1.5 !important;">Transaction check error:</span> <span style="color: rgb(0, 0, 255); font-size: 12px !important; line-height: 1.5 !important;">file</span> /usr/bin/docker from <span style="color: rgb(0, 0, 255); font-size: 12px !important; line-height: 1.5 !important;">install</span> of docker-ce-<span style="color: rgb(128, 0, 128); font-size: 12px !important; line-height: 1.5 !important;">17.12</span>.<span style="color: rgb(128, 0, 128); font-size: 12px !important; line-height: 1.5 !important;">0</span>.ce-<span style="color: rgb(128, 0, 128); font-size: 12px !important; line-height: 1.5 !important;">1</span>.el7.centos.x86_64 conflicts with <span style="color: rgb(0, 0, 255); font-size: 12px !important; line-height: 1.5 !important;">file</span> from package <span style="font-size: 15px; color: rgb(255, 0, 0); line-height: 1.5 !important;">**docker-common-2:1.12.6-68.gitec8512b.el7.centos.x86_64**</span> <span style="color: rgb(0, 0, 255); font-size: 12px !important; line-height: 1.5 !important;">file</span> /usr/bin/docker-containerd from <span style="color: rgb(0, 0, 255); font-size: 12px !important; line-height: 1.5 !important;">install</span> of docker-ce-<span style="color: rgb(128, 0, 128); font-size: 12px !important; line-height: 1.5 !important;">17.12</span>.<span style="color: rgb(128, 0, 128); font-size: 12px !important; line-height: 1.5 !important;">0</span>.ce-<span style="color: rgb(128, 0, 128); font-size: 12px !important; line-height: 1.5 !important;">1</span>.el7.centos.x86_64 conflicts with <span style="color: rgb(0, 0, 255); font-size: 12px !important; line-height: 1.5 !important;">file</span> from package <span style="font-size: 15px; color: rgb(255, 0, 0); line-height: 1.5 !important;">**docker-common-2:1.12.6-68.gitec8512b.el7.centos.x86_64**</span> <span style="color: rgb(0, 0, 255); font-size: 12px !important; line-height: 1.5 !important;">file</span> /usr/bin/docker-containerd-shim from <span style="color: rgb(0, 0, 255); font-size: 12px !important; line-height: 1.5 !important;">install</span> of docker-ce-<span style="color: rgb(128, 0, 128); font-size: 12px !important; line-height: 1.5 !important;">17.12</span>.<span style="color: rgb(128, 0, 128); font-size: 12px !important; line-height: 1.5 !important;">0</span>.ce-<span style="color: rgb(128, 0, 128); font-size: 12px !important; line-height: 1.5 !important;">1</span>.el7.centos.x86_64 conflicts with <span style="color: rgb(0, 0, 255); font-size: 12px !important; line-height: 1.5 !important;">file</span> from package <span style="font-size: 15px; color: rgb(255, 0, 0); line-height: 1.5 !important;">**docker-common-2:1.12.6-68.gitec8512b.el7.centos.x86_64**</span> <span style="color: rgb(0, 0, 255); font-size: 12px !important; line-height: 1.5 !important;">file</span> /usr/bin/dockerd from <span style="color: rgb(0, 0, 255); font-size: 12px !important; line-height: 1.5 !important;">install</span> of docker-ce-<span style="color: rgb(128, 0, 128); font-size: 12px !important; line-height: 1.5 !important;">17.12</span>.<span style="color: rgb(128, 0, 128); font-size: 12px !important; line-height: 1.5 !important;">0</span>.ce-<span style="color: rgb(128, 0, 128); font-size: 12px !important; line-height: 1.5 !important;">1</span>.el7.centos.x86_64 conflicts with <span style="color: rgb(0, 0, 255); font-size: 12px !important; line-height: 1.5 !important;">file</span> from package **<span style="font-size: 15px; color: rgb(255, 0, 0); line-height: 1.5 !important;">docker-common-2:1.12.6-68.gitec8512b.el7.centos.x86_64</span>**</pre></div><p><span style="font-size: 16px;">2、卸载旧版本的包</span></p><div class="cnblogs_code" style="background-color: rgb(245, 245, 245); border: 1px solid rgb(204, 204, 204); padding: 5px; overflow: auto; margin: 5px 0px; font-family: " courier new" !important; font-size: 12px !important;"><pre style="margin-bottom: 0px; white-space: pre-wrap; font-family: " courier new" !important; font-size: 12px !important;">$ <span style="color: rgb(0, 0, 255); font-size: 12px !important; line-height: 1.5 !important;">sudo</span> <span style="color: rgb(0, 0, 255); font-size: 12px !important; line-height: 1.5 !important;">yum</span> erase docker-common-<span style="color: rgb(128, 0, 128); font-size: 12px !important; line-height: 1.5 !important;">2</span>:<span style="color: rgb(128, 0, 128); font-size: 12px !important; line-height: 1.5 !important;">1.12</span>.<span style="color: rgb(128, 0, 128); font-size: 12px !important; line-height: 1.5 !important;">6</span>-<span style="color: rgb(128, 0, 128); font-size: 12px !important; line-height: 1.5 !important;">68</span>.gitec8512b.el7.centos.x86_64</pre></div><p><a href="https://images2017.cnblogs.com/blog/1107037/201801/1107037-20180128103145287-536100760.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://images2017.cnblogs.com/blog/1107037/201801/1107037-20180128103145287-536100760.png" class="lazyload"></a></p><p><span style="font-size: 16px;">3、再次安装docker</span></p><div class="cnblogs_code" style="background-color: rgb(245, 245, 245); border: 1px solid rgb(204, 204, 204); padding: 5px; overflow: auto; margin: 5px 0px; font-family: " courier new" !important; font-size: 12px !important;"><pre style="margin-bottom: 0px; white-space: pre-wrap; font-family: " courier new" !important; font-size: 12px !important;">$ <span style="color: rgb(0, 0, 255); font-size: 12px !important; line-height: 1.5 !important;">sudo</span> <span style="color: rgb(0, 0, 255); font-size: 12px !important; line-height: 1.5 !important;">yum</span> <span style="color: rgb(0, 0, 255); font-size: 12px !important; line-height: 1.5 !important;">install</span> docker-ce</pre></div><div id="comment_body_3991824" class="blog_comment_body" style="word-wrap: break-word; overflow: hidden;">4、推荐一种删除docker的方法：  <div class="cnblogs_Highlighter sh-gutter"><div id="highlighter_844319" class="syntaxhighlighter  csharp" style="width: 1613px; margin: 1em 0px !important; position: relative !important; overflow: auto !important; font-size: 1em !important; background-color: rgb(255, 255, 255) !important;"><table border="0" cellpadding="0" cellspacing="0" style="width: 1613px; border-radius: 0px !important; background-image: none !important; background-position: initial !important; background-size: initial !important; background-repeat: initial !important; background-attachment: initial !important; background-origin: initial !important; background-clip: initial !important; border: 0px !important; bottom: auto !important; float: none !important; height: auto !important; left: auto !important; line-height: 1.1em !important; margin: 0px !important; outline-style: initial !important; outline-width: 0px !important; overflow: visible !important; padding: 0px !important; position: static !important; right: auto !important; top: auto !important; vertical-align: baseline !important; box-sizing: content-box !important; font-family: Consolas, " bitstream vera sans mono", "courier new", courier, monospace !important; font-size: 12px min-height: auto !important;"><tbody style="border-radius: 0px !important; background: none !important; border: 0px !important; bottom: auto !important; float: none !important; height: auto !important; left: auto !important; line-height: 1.1em !important; margin: 0px !important; outline-style: initial !important; outline-width: 0px !important; overflow: visible !important; padding: 0px !important; position: static !important; right: auto !important; top: auto !important; vertical-align: baseline !important; width: auto !important; box-sizing: content-box !important; font-size: 12px !important; min-height: auto !important;"><tr style="border-radius: 0px !important; background: none !important; border: 0px !important; bottom: auto !important; float: none !important; height: auto !important; left: auto !important; line-height: 1.1em !important; margin: 0px !important; outline-style: initial !important; outline-width: 0px !important; overflow: visible !important; padding: 0px !important; position: static !important; right: auto !important; top: auto !important; vertical-align: baseline !important; width: auto !important; box-sizing: content-box !important; font-size: 12px !important; min-height: auto !important;"><td class="gutter" style="border-radius: 0px !important; background: none !important; border: 0px !important; bottom: auto !important; float: none !important; height: auto !important; left: auto !important; line-height: 1.1em !important; margin: 0px !important; outline-style: initial !important; outline-width: 0px !important; overflow: visible !important; position: static !important; right: auto !important; top: auto !important; vertical-align: baseline !important; width: 35px !important; box-sizing: content-box !important; font-size: 12px !important; min-height: auto !important; color: rgb(175, 175, 175) !important;"><div class="line number1 index0 alt2" style="border-radius: 0px !important; background: none rgb(244, 244, 244) !important; border-width: 0px 2px 0px 0px !important; border-top-style: initial !important; border-right-style: solid !important; border-bottom-style: initial !important; border-left-style: initial !important; border-top-color: initial !important; border-right-color: rgb(108, 226, 108) !important; border-bottom-color: initial !important; border-left-color: initial !important; border-image: initial !important; bottom: auto !important; float: none !important; height: auto !important; left: auto !important; line-height: 1.8em !important; margin: 0px !important; outline-style: initial !important; outline-width: 0px !important; overflow: visible !important; padding: 0px 0.5em !important; position: static !important; right: auto !important; text-align: right !important; top: auto !important; vertical-align: baseline !important; width: auto !important; box-sizing: content-box !important; font-size: 12px !important; min-height: auto !important; white-space: nowrap !important;">1</div><div class="line number2 index1 alt1" style="border-radius: 0px !important; background-image: none !important; background-position: initial !important; background-size: initial !important; background-repeat: initial !important; background-attachment: initial !important; background-origin: initial !important; background-clip: initial !important; border-width: 0px 2px 0px 0px !important; border-top-style: initial !important; border-right-style: solid !important; border-bottom-style: initial !important; border-left-style: initial !important; border-top-color: initial !important; border-right-color: rgb(108, 226, 108) !important; border-bottom-color: initial !important; border-left-color: initial !important; border-image: initial !important; bottom: auto !important; float: none !important; height: auto !important; left: auto !important; line-height: 1.8em !important; margin: 0px !important; outline-style: initial !important; outline-width: 0px !important; overflow: visible !important; padding: 0px 0.5em !important; position: static !important; right: auto !important; text-align: right !important; top: auto !important; vertical-align: baseline !important; width: auto !important; box-sizing: content-box !important; font-size: 12px !important; min-height: auto !important; white-space: nowrap !important;">2</div><div class="line number3 index2 alt2" style="border-radius: 0px !important; background: none rgb(244, 244, 244) !important; border-width: 0px 2px 0px 0px !important; border-top-style: initial !important; border-right-style: solid !important; border-bottom-style: initial !important; border-left-style: initial !important; border-top-color: initial !important; border-right-color: rgb(108, 226, 108) !important; border-bottom-color: initial !important; border-left-color: initial !important; border-image: initial !important; bottom: auto !important; float: none !important; height: auto !important; left: auto !important; line-height: 1.8em !important; margin: 0px !important; outline-style: initial !important; outline-width: 0px !important; overflow: visible !important; padding: 0px 0.5em !important; position: static !important; right: auto !important; text-align: right !important; top: auto !important; vertical-align: baseline !important; width: auto !important; box-sizing: content-box !important; font-size: 12px !important; min-height: auto !important; white-space: nowrap !important;">3</div><div class="line number4 index3 alt1" style="border-radius: 0px !important; background-image: none !important; background-position: initial !important; background-size: initial !important; background-repeat: initial !important; background-attachment: initial !important; background-origin: initial !important; background-clip: initial !important; border-width: 0px 2px 0px 0px !important; border-top-style: initial !important; border-right-style: solid !important; border-bottom-style: initial !important; border-left-style: initial !important; border-top-color: initial !important; border-right-color: rgb(108, 226, 108) !important; border-bottom-color: initial !important; border-left-color: initial !important; border-image: initial !important; bottom: auto !important; float: none !important; height: auto !important; left: auto !important; line-height: 1.8em !important; margin: 0px !important; outline-style: initial !important; outline-width: 0px !important; overflow: visible !important; padding: 0px 0.5em !important; position: static !important; right: auto !important; text-align: right !important; top: auto !important; vertical-align: baseline !important; width: auto !important; box-sizing: content-box !important; font-size: 12px !important; min-height: auto !important; white-space: nowrap !important;">4</div></td><td class="code" style="border-radius: 0px !important; background: none !important; border: 0px !important; bottom: auto !important; float: none !important; height: auto !important; left: auto !important; line-height: 1.1em !important; margin: 0px !important; outline-style: initial !important; outline-width: 0px !important; overflow: visible !important; position: static !important; right: auto !important; top: auto !important; vertical-align: baseline !important; width: auto !important; box-sizing: content-box !important; font-size: 12px !important; min-height: auto !important;"><div class="container" style="border-radius: 0px !important; background: none !important; border: 0px !important; bottom: auto !important; float: none !important; height: auto !important; left: auto !important; line-height: 1.1em !important; margin: 0px !important; outline-style: initial !important; outline-width: 0px !important; overflow: visible !important; padding: 0px !important; position: relative !important; right: auto !important; top: auto !important; vertical-align: baseline !important; box-sizing: content-box !important; font-size: 12px !important; min-height: auto !important;"><div class="line number1 index0 alt2" style="border-radius: 0px !important; background: none rgb(244, 244, 244) !important; border: 0px !important; bottom: auto !important; float: none !important; height: auto !important; left: auto !important; line-height: 1.8em !important; margin: 0px !important; outline-style: initial !important; outline-width: 0px !important; overflow: visible !important; padding: 0px 1em !important; position: static !important; right: auto !important; top: auto !important; vertical-align: baseline !important; width: auto !important; box-sizing: content-box !important; font-size: 12px !important; min-height: auto !important; white-space: nowrap !important;">`yum remove docker docker-common docker-selinux docker-engine -y`</div><div class="line number2 index1 alt1" style="border-radius: 0px !important; background-image: none !important; background-position: initial !important; background-size: initial !important; background-repeat: initial !important; background-attachment: initial !important; background-origin: initial !important; background-clip: initial !important; border: 0px !important; bottom: auto !important; float: none !important; height: auto !important; left: auto !important; line-height: 1.8em !important; margin: 0px !important; outline-style: initial !important; outline-width: 0px !important; overflow: visible !important; padding: 0px 1em !important; position: static !important; right: auto !important; top: auto !important; vertical-align: baseline !important; width: auto !important; box-sizing: content-box !important; font-size: 12px !important; min-height: auto !important; white-space: nowrap !important;">`/etc/systemd -name ``'*docker*'` `-exec rm -f {} ;`</div><div class="line number3 index2 alt2" style="border-radius: 0px !important; background: none rgb(244, 244, 244) !important; border: 0px !important; bottom: auto !important; float: none !important; height: auto !important; left: auto !important; line-height: 1.8em !important; margin: 0px !important; outline-style: initial !important; outline-width: 0px !important; overflow: visible !important; padding: 0px 1em !important; position: static !important; right: auto !important; top: auto !important; vertical-align: baseline !important; width: auto !important; box-sizing: content-box !important; font-size: 12px !important; min-height: auto !important; white-space: nowrap !important;">`find /etc/systemd -name ``'*docker*'` `-exec rm -f {} \;`</div><div class="line number4 index3 alt1" style="border-radius: 0px !important; background-image: none !important; background-position: initial !important; background-size: initial !important; background-repeat: initial !important; background-attachment: initial !important; background-origin: initial !important; background-clip: initial !important; border: 0px !important; bottom: auto !important; float: none !important; height: auto !important; left: auto !important; line-height: 1.8em !important; margin: 0px !important; outline-style: initial !important; outline-width: 0px !important; overflow: visible !important; padding: 0px 1em !important; position: static !important; right: auto !important; top: auto !important; vertical-align: baseline !important; width: auto !important; box-sizing: content-box !important; font-size: 12px !important; min-height: auto !important; white-space: nowrap !important;">`find /lib/systemd -name ``'*docker*'` `-exec rm -f {} \;`</div></div></td></tr></tbody></table></div></div></div></div></body></html>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
