<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Linux常用但我记不住的命令</title>
      <link href="/2020/02/26/Linux%E5%B8%B8%E7%94%A8%E4%BD%86%E6%88%91%E8%AE%B0%E4%B8%8D%E4%BD%8F%E7%9A%84%E5%91%BD%E4%BB%A4/"/>
      <url>/2020/02/26/Linux%E5%B8%B8%E7%94%A8%E4%BD%86%E6%88%91%E8%AE%B0%E4%B8%8D%E4%BD%8F%E7%9A%84%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><p>Linux如何查看端口</p><p>1、lsof -i:端口号 用于查看某一端口的占用情况，比如查看8000端口使用情况，lsof -i:8000</p><a id="more"></a><p>Linux如何查看端口</p><p>1、lsof -i:端口号 用于查看某一端口的占用情况，比如查看8000端口使用情况，lsof -i:8000</p><div class="cnblogs_code" style="margin: 5px 0px; padding: 5px; background-color: rgb(245, 245, 245); border: 1px solid rgb(204, 204, 204); overflow: auto; font-family: " courier new" !important; font-size: 12px !important;">  <pre style="margin-bottom: 0px; padding: 0px; white-space: pre-wrap; font-family: " courier new" !important; font-size: 12px !important;"># lsof -i:<span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">8000</span> <span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(0, 0, 0);">COMMAND   PID USER   FD   TYPE  DEVICE SIZE</span>/<span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(0, 0, 0);">OFF NODE NAME  lwfs</span> <span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">22065</span> root    <span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">6u</span>  IPv4 <span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">4395053</span>      0t0  TCP *:irdmi (LISTEN)</pre></div><p>可以看到8000端口已经被轻量级文件系统转发服务lwfs占用</p><p>2、netstat -tunlp |grep 端口号，用于查看指定的端口号的进程情况，如查看8000端口的情况，netstat -tunlp |grep 8000</p><div class="cnblogs_code" style="margin: 5px 0px; padding: 5px; background-color: rgb(245, 245, 245); border: 1px solid rgb(204, 204, 204); overflow: auto; font-family: " courier new" !important; font-size: 12px !important;">  <div class="cnblogs_code_toolbar" style="margin: 5px 0px 0px; padding: 0px;"><span class="cnblogs_code_copy" style="margin: 0px; padding: 0px 5px 0px 0px; line-height: 1.8;"><a title="复制代码" style="margin: 0px; padding: 0px; color: rgb(0, 0, 0); border: none !important; background-color: rgb(245, 245, 245) !important;">![复制代码](https://common.cnblogs.com/images/copycode.gif)</a></span></div><pre style="margin-bottom: 0px; padding: 0px; white-space: pre-wrap; font-family: " courier new" !important; font-size: 12px !important;"># netstat -<span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(0, 0, 0);">tunlp Active Internet connections (only servers)Proto Recv</span>-Q Send-Q Local Address               Foreign Address             State       PID/<span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(0, 0, 0);">Program name   tcp</span> <span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">0</span>      <span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">0</span> <span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">0.0</span>.<span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">0.0</span>:<span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">111</span>                 <span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">0.0</span>.<span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">0.0</span>:*                   LISTEN      <span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">4814</span>/<span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(0, 0, 0);">rpcbind        tcp</span> <span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">0</span>      <span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">0</span> <span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">0.0</span>.<span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">0.0</span>:<span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">5908</span>                <span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">0.0</span>.<span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">0.0</span>:*                   LISTEN      <span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">25492</span>/qemu-<span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(0, 0, 0);">kvm      tcp</span> <span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">0</span>      <span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">0</span> <span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">0.0</span>.<span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">0.0</span>:<span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">6996</span>                <span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">0.0</span>.<span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">0.0</span>:*                   LISTEN      <span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">22065</span>/<span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(0, 0, 0);">lwfs          tcp</span> <span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">0</span>      <span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">0</span> <span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">192.168</span>.<span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">122.1</span>:<span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">53</span>            <span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">0.0</span>.<span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">0.0</span>:*                   LISTEN      <span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">38296</span>/<span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(0, 0, 0);">dnsmasq       tcp</span> <span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">0</span>      <span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">0</span> <span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">0.0</span>.<span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">0.0</span>:<span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">22</span>                  <span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">0.0</span>.<span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">0.0</span>:*                   LISTEN      <span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">5278</span>/<span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(0, 0, 0);">sshd           tcp</span> <span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">0</span>      <span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">0</span> <span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">127.0</span>.<span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">0.1</span>:<span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">631</span>               <span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">0.0</span>.<span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">0.0</span>:*                   LISTEN      <span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">5013</span>/<span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(0, 0, 0);">cupsd          tcp</span> <span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">0</span>      <span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">0</span> <span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">127.0</span>.<span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">0.1</span>:<span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">25</span>                <span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">0.0</span>.<span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">0.0</span>:*                   LISTEN      <span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">5962</span>/<span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(0, 0, 0);">master         tcp</span> <span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">0</span>      <span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">0</span> <span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">0.0</span>.<span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">0.0</span>:<span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">8666</span>                <span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">0.0</span>.<span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">0.0</span>:*                   LISTEN      <span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">44868</span>/<span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(0, 0, 0);">lwfs          tcp</span> <span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">0</span>      <span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">0</span> <span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">0.0</span>.<span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">0.0</span>:<span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">8000</span>                <span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">0.0</span>.<span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">0.0</span>:*                   LISTEN      <span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">22065</span>/lwfs        </pre><div class="cnblogs_code_toolbar" style="margin: 5px 0px 0px; padding: 0px;"><span class="cnblogs_code_copy" style="margin: 0px; padding: 0px 5px 0px 0px; line-height: 1.8;"><a title="复制代码" style="margin: 0px; padding: 0px; color: rgb(0, 0, 0); border: none !important; background-color: rgb(245, 245, 245) !important;">![复制代码](https://common.cnblogs.com/images/copycode.gif)</a></span></div></div><div class="cnblogs_code" style="margin: 5px 0px; padding: 5px; background-color: rgb(245, 245, 245); border: 1px solid rgb(204, 204, 204); overflow: auto; font-family: " courier new" !important; font-size: 12px !important;">  <pre style="margin-bottom: 0px; padding: 0px; white-space: pre-wrap; font-family: " courier new" !important; font-size: 12px !important;"># netstat -tunlp | <span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(0, 0, 255);">grep</span> <span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">8000</span> <span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(0, 0, 0);">tcp</span> <span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">0</span>      <span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">0</span> <span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">0.0</span>.<span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">0.0</span>:<span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">8000</span>                <span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">0.0</span>.<span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">0.0</span>:*                   LISTEN      <span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">22065</span>/lwfs          </pre></div><p>说明一下几个参数的含义：</p><div class="cnblogs_code" style="margin: 5px 0px; padding: 5px; background-color: rgb(245, 245, 245); border: 1px solid rgb(204, 204, 204); overflow: auto; font-family: " courier new" !important; font-size: 12px !important;">  <div class="cnblogs_code_toolbar" style="margin: 5px 0px 0px; padding: 0px;"><span class="cnblogs_code_copy" style="margin: 0px; padding: 0px 5px 0px 0px; line-height: 1.8;"><a title="复制代码" style="margin: 0px; padding: 0px; color: rgb(0, 0, 0); border: none !important; background-color: rgb(245, 245, 245) !important;">![复制代码](https://common.cnblogs.com/images/copycode.gif)</a></span></div><pre style="margin-bottom: 0px; padding: 0px; white-space: pre-wrap; font-family: " courier new" !important; font-size: 12px !important;"> <span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(255, 0, 0);">-t (tcp) 仅显示tcp相关选项                                 -u (udp)仅显示udp相关选项                                 -n 拒绝显示别名，能显示数字的全部转化为数字                                 -l 仅列出在Listen(监听)的服务状态                                 -</span><span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(0, 0, 0);"><span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(255, 0, 0);">p 显示建立相关链接的程序名</span></span> </pre><div class="cnblogs_code_toolbar" style="margin: 5px 0px 0px; padding: 0px;"><span class="cnblogs_code_copy" style="margin: 0px; padding: 0px 5px 0px 0px; line-height: 1.8;"><a title="复制代码" style="margin: 0px; padding: 0px; color: rgb(0, 0, 0); border: none !important; background-color: rgb(245, 245, 245) !important;">![复制代码](https://common.cnblogs.com/images/copycode.gif)</a></span></div></div><p>后台启动一个jar：</p><div class="cnblogs_code" style="margin: 5px 0px; padding: 5px; background-color: rgb(245, 245, 245); border: 1px solid rgb(204, 204, 204); overflow: auto; font-family: " courier new" !important; font-size: 12px !important;">  <pre style="padding: 0px; margin-bottom: 0px; line-height: 1.42857; white-space: pre-wrap; font-family: " courier new" !important; font-size: 12px !important;">nohup java -jar xxx.jar &    </pre></div><p><span style="font-family: " helvetica neue", helvetica, "pingfang sc", "hiragino sans gb", "microsoft yahei", "noto cjk "wenquanyi micro hei", arial, sans-serif; font-size: 13px;">tail 命令可用于查看文件的内容，有一个常用的参数</span> <span class="marked" style="border: 0px; margin: 0px; padding: 0.2em; background-color: rgb(236, 234, 230); border-radius: 3px; font-weight: bold; font-family: SFMono-Regular, Consolas, " liberation mono", menlo, courier, monospace; font-size: 13px;">-f</span> <span style="font-family: " helvetica neue", helvetica, "pingfang sc", "hiragino sans gb", "microsoft yahei", "noto cjk "wenquanyi micro hei", arial, sans-serif; font-size: 13px;">常用于查阅正在改变的日志文件。</span></p><div class="cnblogs_code" style="margin: 5px 0px; padding: 5px; background-color: rgb(245, 245, 245); border: 1px solid rgb(204, 204, 204); overflow: auto; font-family: " courier new" !important; font-size: 12px !important;">  <pre style="padding: 0px; margin-bottom: 0px; line-height: 1.42857; white-space: pre-wrap; font-family: " courier new" !important; font-size: 12px !important;">  **命令格式：**  <pre class="prettyprint prettyprinted" style="border-left-width: 4px; border-color: rgb(221, 221, 221); margin: 15px auto; padding: 10px 15px; font-variant-numeric: normal; font-variant-east-asian: normal; font-stretch: normal; font-size: 12px; line-height: 20px; font-family: Menlo, Monaco, Consolas, " andale mono", "lucida console", "courier new", monospace; white-space: pre-wrap; background: url(" images codecolorer_bg.gif") center top rgb(251, 251, 251);"><span class="pln" style="border: 0px; margin: 0px; padding: 0px; color: rgb(0, 0, 0);">tail</span> <span class="pun" style="border: 0px; margin: 0px; padding: 0px; color: rgb(102, 102, 0);">[参数]</span> <span class="pln" style="border: 0px; margin: 0px; padding: 0px; color: rgb(0, 0, 0);"></span> <span class="pun" style="border: 0px; margin: 0px; padding: 0px; color: rgb(102, 102, 0);">[文件]</span> <span class="pln" style="border: 0px; margin: 0px; padding: 0px; color: rgb(0, 0, 0);"></span> </pre><p></p></pre></div><p><strong>参数：</strong></p><div class="cnblogs_code" style="margin: 5px 0px; padding: 5px; background-color: rgb(245, 245, 245); border: 1px solid rgb(204, 204, 204); overflow: auto; font-family: " courier new" !important; font-size: 12px !important;">  <pre style="padding: 0px; margin-bottom: 0px; line-height: 1.42857; white-space: pre-wrap; font-family: " courier new" !important; font-size: 12px !important;">   _-f 循环读取_   -q 不显示处理信息   _-v 显示详细的处理信息_   -c<数目> 显示的字节数   _-n<行数> 显示行数_   --pid=PID 与-f合用,表示在进程ID,PID死掉之后结束.   _-q, --quiet, --silent 从不输出给出文件名的首部_   -s, --sleep-interval=S 与-f合用,表示在每次反复的间隔休眠S秒  </pre></div><p><strong>实例</strong></p><p>要显示 notes.log 文件的最后 10 行，请输入以下命令：</p><pre class="prettyprint prettyprinted" style="border-left-width: 4px; border-color: rgb(221, 221, 221); margin: 15px auto; padding: 10px 15px; font-variant-numeric: normal; font-variant-east-asian: normal; font-stretch: normal; font-size: 12px; line-height: 20px; font-family: Menlo, Monaco, Consolas, " andale mono", "lucida console", "courier new", monospace; white-space: pre-wrap; background: url(" images codecolorer_bg.gif") center top rgb(251, 251, 251);"><span class="pln" style="border: 0px; margin: 0px; padding: 0px; color: rgb(0, 0, 0);">tail notes</span><span class="pun" style="border: 0px; margin: 0px; padding: 0px; color: rgb(102, 102, 0);">.</span><span class="pln" style="border: 0px; margin: 0px; padding: 0px; color: rgb(0, 0, 0);">log</span></pre><p>要跟踪名为 notes.log 的文件的增长情况，请输入以下命令：</p><pre class="prettyprint prettyprinted" style="border-left-width: 4px; border-color: rgb(221, 221, 221); margin: 15px auto; padding: 10px 15px; font-variant-numeric: normal; font-variant-east-asian: normal; font-stretch: normal; font-size: 12px; line-height: 20px; font-family: Menlo, Monaco, Consolas, " andale mono", "lucida console", "courier new", monospace; white-space: pre-wrap; background: url(" images codecolorer_bg.gif") center top rgb(251, 251, 251);"><span class="pln" style="border: 0px; margin: 0px; padding: 0px; color: rgb(0, 0, 0);">tail</span> <span class="pun" style="border: 0px; margin: 0px; padding: 0px; color: rgb(102, 102, 0);">-</span><span class="pln" style="border: 0px; margin: 0px; padding: 0px; color: rgb(0, 0, 0);">f notes</span><span class="pun" style="border: 0px; margin: 0px; padding: 0px; color: rgb(102, 102, 0);">.</span><span class="pln" style="border: 0px; margin: 0px; padding: 0px; color: rgb(0, 0, 0);">log</span></pre><p>此命令显示 notes.log 文件的最后 10 行。当将某些行添加至 notes.log 文件时，tail 命令会继续显示这些行。 显示一直继续，直到您按下（Ctrl-C）组合键停止显示。</p><p>vmstat - 虚拟内存统计</p><p>vmstat 命令报告有关进程、内存、分页、块 IO、中断和 CPU 活动等信息。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># vmstat 3</span><br></pre></td></tr></tbody></table></figure></div><p>输出示例：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">procs -----------memory---------- ---swap-- -----io---- --system-- -----cpu------</span><br><span class="line"> r b swpd free buff cache si so bi bo in cs us sy id wa st</span><br><span class="line"> 0 0 0 2540988 522188 5130400 0 0 2 32 4 2 4 1 96 0 0</span><br><span class="line"> 1 0 0 2540988 522188 5130400 0 0 0 720 1199 665 1 0 99 0 0</span><br><span class="line"> 0 0 0 2540956 522188 5130400 0 0 0 0 1151 1569 4 1 95 0 0</span><br><span class="line"> 0 0 0 2540956 522188 5130500 0 0 0 6 1117 439 1 0 99 0 0</span><br><span class="line"> 0 0 0 2540940 522188 5130512 0 0 0 536 1189 932 1 0 98 0 0</span><br><span class="line"> 0 0 0 2538444 522188 5130588 0 0 0 0 1187 1417 4 1 96 0 0</span><br><span class="line"> 0 0 0 2490060 522188 5130640 0 0 0 18 1253 1123 5 1 94 0 0</span><br></pre></td></tr></tbody></table></figure></div><p>2.找出占用内存资源最多的前 10 个进程</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -auxf | sort -nr -k 4 | head -10</span><br></pre></td></tr></tbody></table></figure></div><p>3.找出占用 CPU 资源最多的前 10 个进程</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -auxf | sort -nr -k 3 | head -10</span><br></pre></td></tr></tbody></table></figure></div><h3 id="常用私活"><a href="#常用私活" class="headerlink" title="常用私活"></a>常用私活</h3><p>查找文件<strong>all-server.log</strong>中含<strong>deviceId</strong>有的内容并显示出来</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find -type f -name 'all-server.log'|xargs grep "deviceId"</span><br></pre></td></tr></tbody></table></figure></div><p>统计<strong>aaa</strong>在文件<strong>all-server.log</strong>出现的次数</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat all-server.log |grep "aaa"|wc -l</span><br></pre></td></tr></tbody></table></figure></div></body></html>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 操作系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>写代码怎能不会这些Linux命令</title>
      <link href="/2020/02/26/%E5%86%99%E4%BB%A3%E7%A0%81%E6%80%8E%E8%83%BD%E4%B8%8D%E4%BC%9A%E8%BF%99%E4%BA%9BLinux%E5%91%BD%E4%BB%A4/"/>
      <url>/2020/02/26/%E5%86%99%E4%BB%A3%E7%A0%81%E6%80%8E%E8%83%BD%E4%B8%8D%E4%BC%9A%E8%BF%99%E4%BA%9BLinux%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><p> 这篇文章翻译自 <a href="http://www.thegeekstuff.com/2010/11/50-linux-commands" target="_blank" rel="noopener">http://www.thegeekstuff.com/2010/11/50-linux-commands</a> 这些都是一些很常用的命令，这篇文章中每个命令都有一些简单的示例说明它的用法， 对于想学习Unix/Linux的人，这些命令基本上都是需要掌握的。</p><a id="more"></a><article class="markdown-body"><blockquote><p>这篇文章翻译自 <a href="http://www.thegeekstuff.com/2010/11/50-linux-commands/" target="_blank" rel="noopener">http://www.thegeekstuff.com/2010/11/50-linux-commands</a> 这些都是一些很常用的命令，这篇文章中每个命令都有一些简单的示例说明它的用法， 对于想学习Unix/Linux的人，这些命令基本上都是需要掌握的。</p></blockquote><p>同时我也做了一张简易版的图例：</p><p><a href="https://i.loli.net/2017/08/22/599b9b3ca5bb7.png" target="_blank" rel="noopener"><img alt="Linux命令表" title="Linux命令表" data-src="https://i.loli.net/2017/08/22/599b9b3ca5bb7.png" class="lazyload"></a></p><h2 id="1-tar"><a href="#1-tar" class="headerlink" title="1. tar"></a>1. tar</h2><p>创建一个新的tar文件</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ tar cvf archive_name.tar dirname/</code></pre></div></div><p>解压tar文件</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ tar xvf archive_name.tar</code></pre></div></div><p>查看tar文件</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ tar tvf archive_name.tar</code></pre></div></div><p>更多示例：<a href="http://www.thegeekstuff.com/2010/04/unix-tar-command-examples/" target="_blank" rel="noopener">The Ultimate Tar Command Tutorial with 10 Practical Examples</a></p><h2 id="2-grep"><a href="#2-grep" class="headerlink" title="2. grep"></a>2. grep</h2><p>在文件中查找字符串(不区分大小写)</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ grep -i "the" demo_file</code></pre></div></div><p>输出成功匹配的行，以及该行之后的三行</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ grep -A 3 -i "example" demo_text</code></pre></div></div><p>在一个文件夹中递归查询包含指定字符串的文件</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ grep -r "ramesh" *</code></pre></div></div><p>更多示例：<a href="http://www.thegeekstuff.com/2009/03/15-practical-unix-grep-command-examples/" target="_blank" rel="noopener">Get a Grip on the Grep! – 15 Practical Grep Command Examples</a></p><h2 id="3-find"><a href="#3-find" class="headerlink" title="3. find"></a>3. find</h2><p>查找指定文件名的文件(不区分大小写)</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ find -iname "MyProgram.c"</code></pre></div></div><p>对找到的文件执行某个命令</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ find -iname "MyProgram.c" -exec md5sum {} \;</code></pre></div></div><p>查找home目录下的所有空文件</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ find ~ -empty</code></pre></div></div><p>更多示例：<a href="http://www.thegeekstuff.com/2009/03/15-practical-linux-find-command-examples/" target="_blank" rel="noopener">Mommy, I found it! — 15 Practical Linux Find Command Examples</a></p><h2 id="4-ssh"><a href="#4-ssh" class="headerlink" title="4. ssh"></a>4. ssh</h2><p>登录到远程主机</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ ssh -l jsmith remotehost.example.com</code></pre></div></div><p>调试ssh客户端</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ ssh -v -l jsmith remotehost.example.com</code></pre></div></div><p>显示ssh客户端版本</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ ssh -V</code></pre></div></div><p>更多示例：<a href="http://www.thegeekstuff.com/2008/05/5-basic-linux-ssh-client-commands/" target="_blank" rel="noopener">5 Basic Linux SSH Client Commands</a></p><h2 id="5-sed"><a href="#5-sed" class="headerlink" title="5. sed"></a>5. sed</h2><p>当你将Dos系统中的文件复制到Unix/Linux后，这个文件每行都会以\r\n结尾，sed可以轻易将其转换为Unix格式的文件，使用\n结尾的文件</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ sed 's/.$//' filename</code></pre></div></div><p>反转文件内容并输出</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ sed -n '1!G; h; p' filename</code></pre></div></div><p>为非空行添加行号</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ sed '/./=' thegeekstuff.txt | sed 'N; s/\n/ /'</code></pre></div></div><p>更多示例：<a href="http://www.thegeekstuff.com/2009/10/unix-sed-tutorial-advanced-sed-substitution-examples/" target="_blank" rel="noopener">Advanced Sed Substitution Examples</a></p><h2 id="6-awk"><a href="#6-awk" class="headerlink" title="6. awk"></a>6. awk</h2><p>删除重复行</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ awk '!($0 in array) { array[$0]; print}' temp</code></pre></div></div><p>打印/etc/passwd中所有包含同样的uid和gid的行</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ awk -F ':' '$3=$4' /etc/passwd</code></pre></div></div><p>打印文件中的指定部分的字段</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ awk '{print $2,$5;}' employee.txt</code></pre></div></div><p>更多示例：<a href="http://www.thegeekstuff.com/2010/01/8-powerful-awk-built-in-variables-fs-ofs-rs-ors-nr-nf-filename-fnr/" target="_blank" rel="noopener">8 Powerful Awk Built-in Variables – FS, OFS, RS, ORS, NR, NF, FILENAME, FNR</a></p><h2 id="7-vim"><a href="#7-vim" class="headerlink" title="7. vim"></a>7. vim</h2><p>打开文件并跳到第10行</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ vim +10 filename.txt</code></pre></div></div><p>打开文件跳到第一个匹配的行</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ vim +/search-term filename.txt</code></pre></div></div><p>以只读模式打开文件</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ vim -R /etc/passwd</code></pre></div></div><p>更多示例：<a href="http://www.thegeekstuff.com/2009/01/vi-and-vim-macro-tutorial-how-to-record-and-play/" target="_blank" rel="noopener">How To Record and Play in Vim Editor</a></p><h2 id="8-diff"><a href="#8-diff" class="headerlink" title="8. diff"></a>8. diff</h2><p>比较的时候忽略空白符</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ diff -w name_list.txt name_list_new.txt</code></pre></div></div><h2 id="9-sort"><a href="#9-sort" class="headerlink" title="9. sort"></a>9. sort</h2><p>以升序对文件内容排序</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ sort names.txt</code></pre></div></div><p>以降序对文件内容排序</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ sort -r names.txt</code></pre></div></div><p>以第三个字段对/etc/passwd的内容排序</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ sort -t: -k 3n /etc/passwd | more</code></pre></div></div><h2 id="10-export"><a href="#10-export" class="headerlink" title="10. export"></a>10. export</h2><p>输出跟字符串oracle匹配的环境变量</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ export | grep ORCALEdeclare -x ORACLE_BASE="/u01/app/oracle"declare -x ORACLE_HOME="/u01/app/oracle/product/10.2.0"declare -x ORACLE_SID="med"declare -x ORACLE_TERM="xterm"</code></pre></div></div><p>设置全局环境变量</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ export ORACLE_HOME=/u01/app/oracle/product/10.2.0</code></pre></div></div><h2 id="11-xargs"><a href="#11-xargs" class="headerlink" title="11. xargs"></a>11. xargs</h2><p>将所有图片文件拷贝到外部驱动器</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ ls *.jpg | xargs -n1 -i cp {} /external-hard-drive/directory</code></pre></div></div><p>将系统中所有jpd文件压缩打包</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ find / -name *.jpg -type f -print | xargs tar -cvzf images.tar.gz</code></pre></div></div><p>下载文件中列出的所有url对应的页面</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ cat url-list.txt | xargs wget –c</code></pre></div></div><h2 id="12-ls"><a href="#12-ls" class="headerlink" title="12. ls"></a>12. ls</h2><p>以易读的方式显示文件大小(显示为MB,GB…)</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ ls -lh-rw-r----- 1 ramesh team-dev 8.9M Jun 12 15:27 arch-linux.txt.gz</code></pre></div></div><p>以最后修改时间升序列出文件</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ ls -ltr</code></pre></div></div><p>在文件名后面显示文件类型</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ ls -F</code></pre></div></div><p>更多示例：<a href="http://www.thegeekstuff.com/2009/07/linux-ls-command-examples/" target="_blank" rel="noopener">Unix LS Command: 15 Practical Examples</a></p><h2 id="13-pwd"><a href="#13-pwd" class="headerlink" title="13. pwd"></a>13. pwd</h2><p>输出当前工作目录</p><h2 id="14-cd"><a href="#14-cd" class="headerlink" title="14. cd"></a>14. cd</h2><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>cd -可以在最近工作的两个目录间切换</code></pre></div></div><p>使用 <strong>shopt -s cdspell</strong> 可以设置自动对 cd 命令进行拼写检查</p><p>更多示例：<a href="http://www.thegeekstuff.com/2008/10/6-awesome-linux-cd-command-hacks-productivity-tip3-for-geeks/" target="_blank" rel="noopener">6 Awesome Linux cd command Hacks</a></p><h2 id="15-gzip"><a href="#15-gzip" class="headerlink" title="15. gzip"></a>15. gzip</h2><p>创建一个 <code>*.gz</code> 的压缩文件</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ gzip test.txt</code></pre></div></div><p>解压 <code>*.gz</code> 文件</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ gzip -d test.txt.gz</code></pre></div></div><p>显示压缩的比率</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ gzip -l *.gz     compressed        uncompressed  ratio uncompressed_name          23709               97975  75.8% asp-patch-rpms.txt</code></pre></div></div><h2 id="16-bzip2"><a href="#16-bzip2" class="headerlink" title="16. bzip2"></a>16. bzip2</h2><p>创建 <code>*.bz2</code> 压缩文件</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ bzip2 test.txt</code></pre></div></div><p>解压 <code>*.bz2</code> 文件</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>bzip2 -d test.txt.bz2</code></pre></div></div><p>更多示例：<a href="http://www.thegeekstuff.com/2010/10/bzcommand-examples/" target="_blank" rel="noopener">BZ is Eazy! bzip2, bzgrep, bzcmp, bzdiff, bzcat, bzless, bzmore examples</a></p><h2 id="17-uzip"><a href="#17-uzip" class="headerlink" title="17. uzip"></a>17. uzip</h2><p>解压 <code>*.zip</code> 文件</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ unzip test.zip</code></pre></div></div><p>查看 <code>*.zip</code> 文件的内容</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ unzip -l jasper.zipArchive:  jasper.zipLength     Date   Time    Name--------    ----   ----    ----40995  11-30-98 23:50   META-INF/MANIFEST.MF32169  08-25-98 21:07   classes_15964  08-25-98 21:07   classes_names10542  08-25-98 21:07   classes_ncomp</code></pre></div></div><h2 id="18-shutdown"><a href="#18-shutdown" class="headerlink" title="18. shutdown"></a>18. shutdown</h2><p>关闭系统并立即关机</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ shutdown -h now</code></pre></div></div><p>10分钟后关机</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ shutdown -h +10</code></pre></div></div><p>重启</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ shutdown -r now</code></pre></div></div><p>重启期间强制进行系统检查</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ shutdown -Fr now</code></pre></div></div><h2 id="19-ftp"><a href="#19-ftp" class="headerlink" title="19. ftp"></a>19. ftp</h2><p>ftp命令和sftp命令的用法基本相似连接ftp服务器并下载多个文件</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ ftp IP/hostnameftp> mget *.html</code></pre></div></div><p>显示远程主机上文件列表</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>ftp> mls *.html -/ftptest/features.html/ftptest/index.html/ftptest/othertools.html/ftptest/samplereport.html/ftptest/usage.html</code></pre></div></div><p>更多示例：<a href="http://www.thegeekstuff.com/2010/06/ftp-sftp-tutorial/" target="_blank" rel="noopener">FTP and SFTP Beginners Guide with 10 Examples</a></p><h2 id="20-crontab"><a href="#20-crontab" class="headerlink" title="20. crontab"></a>20. crontab</h2><p>查看某个用户的 <code>crontab</code> 入口</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ crontab -u john -l</code></pre></div></div><p>设置一个每十分钟执行一次的计划任务</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>*/10 * * * * /home/ramesh/check-disk-space</code></pre></div></div><p>更多示例：<a href="http://www.thegeekstuff.com/2009/06/15-practical-crontab-examples/" target="_blank" rel="noopener">Linux Crontab: 15 Awesome Cron Job Examples</a></p><h2 id="21-service"><a href="#21-service" class="headerlink" title="21. service"></a>21. service</h2><p>service 命令用于运行 System V init 脚本，这些脚本一般位于/etc/init.d文件下，这个命令可以直接运行这个文件夹里面的脚本，而不用加上路径</p><p>查看服务状态</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ service ssh status</code></pre></div></div><p>查看所有服务状态</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ service --status-all</code></pre></div></div><p>重启服务</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ service ssh restart</code></pre></div></div><h2 id="22-ps"><a href="#22-ps" class="headerlink" title="22. ps"></a>22. ps</h2><p>ps命令用于显示正在运行中的进程的信息，ps命令有很多选项，这里只列出了几个</p><p>查看当前正在运行的所有进程</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ ps -ef | more</code></pre></div></div><p>以树状结构显示当前正在运行的进程，H选项表示显示进程的层次结构</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ ps -efH | more</code></pre></div></div><h2 id="23-free"><a href="#23-free" class="headerlink" title="23. free"></a>23. free</h2><p>这个命令用于显示系统当前内存的使用情况，包括已用内存、可用内存和交换内存的情况</p><p>默认情况下free会以字节为单位输出内存的使用量</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ free             total       used       free     shared    buffers     cachedMem:       3566408    1580220    1986188          0     203988     902960-/+ buffers/cache:     473272    3093136Swap:      4000176          0    4000176</code></pre></div></div><p>如果你想以其他单位输出内存的使用量，需要加一个选项，-g为GB，-m为MB，-k为KB，-b为字节</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ free -g             total       used       free     shared    buffers     cachedMem:             3          1          1          0          0          0-/+ buffers/cache:          0          2Swap:            3          0          3</code></pre></div></div><p>如果你想查看所有内存的汇总，请使用-t选项，使用这个选项会在输出中加一个汇总行</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>ramesh@ramesh-laptop:~$ free -t             total       used       free     shared    buffers     cachedMem:       3566408    1592148    1974260          0     204260     912556-/+ buffers/cache:     475332    3091076Swap:      4000176          0    4000176Total:     7566584    1592148    5974436</code></pre></div></div><h2 id="24-top"><a href="#24-top" class="headerlink" title="24. top"></a>24. top</h2><p>top命令会显示当前系统中占用资源最多的一些进程（默认以CPU占用率排序）如果你想改变排序方式，可以在结果列表中点击O（大写字母O）会显示所有可用于排序的列，这个时候你就可以选择你想排序的列</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>Current Sort Field:  P  for window 1:DefSelect sort field via field letter, type any other key to return  a: PID        = Process Id              v: nDRT       = Dirty Pages count  d: UID        = User Id                 y: WCHAN      = Sleeping in Function  e: USER       = User Name               z: Flags      = Task Flags  ........</code></pre></div></div><p>如果只想显示某个特定用户的进程，可以使用-u选项</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ top -u oracle</code></pre></div></div><p>更多示例：<a href="http://www.thegeekstuff.com/2010/01/15-practical-unix-linux-top-command-examples/" target="_blank" rel="noopener">Can You Top This? 15 Practical Linux Top Command Examples</a></p><h2 id="25-df"><a href="#25-df" class="headerlink" title="25. df"></a>25. df</h2><p>显示文件系统的磁盘使用情况，默认情况下df -k 将以字节为单位输出磁盘的使用量</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ df -kFilesystem           1K-blocks      Used Available Use% Mounted on/dev/sda1             29530400   3233104  24797232  12% //dev/sda2            120367992  50171596  64082060  44% /home</code></pre></div></div><p>使用 <code>-h</code> 选项可以以更符合阅读习惯的方式显示磁盘使用量</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ df -hFilesystem                  Size   Used  Avail Capacity  iused      ifree %iused  Mounted on/dev/disk0s2               232Gi   84Gi  148Gi    37% 21998562   38864868   36%   /devfs                      187Ki  187Ki    0Bi   100%      648          0  100%   /devmap -hosts                   0Bi    0Bi    0Bi   100%        0          0  100%   /netmap auto_home                0Bi    0Bi    0Bi   100%        0          0  100%   /home/dev/disk0s4               466Gi   45Gi  421Gi    10%   112774  440997174    0%   /Volumes/BOOTCAMP//app@izenesoft.cn/public  2.7Ti  1.3Ti  1.4Ti    48%        0 18446744073709551615    0%   /Volumes/public</code></pre></div></div><p>使用 <code>-T</code> 选项显示文件系统类型</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ df -TFilesystem    Type   1K-blocks      Used Available Use% Mounted on/dev/sda1     ext4    29530400   3233120  24797216  12% //dev/sda2     ext4   120367992  50171596  64082060  44% /home</code></pre></div></div><h2 id="26-kill"><a href="#26-kill" class="headerlink" title="26. kill"></a>26. kill</h2><p>kill 用于终止一个进程。一般我们会先用ps -ef查找某个进程得到它的进程号，然后再使用kill -9 进程号终止该进程。你还可以使用killall、pkill、xkill来终止进程</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ ps -ef | grep vimramesh    7243  7222  9 22:43 pts/2    00:00:00 vim$ kill -9 7243</code></pre></div></div><p>更多示例：<a href="http://www.thegeekstuff.com/2009/12/4-ways-to-kill-a-process-kill-killall-pkill-xkill/" target="_blank" rel="noopener">4 Ways to Kill a Process – kill, killall, pkill, xkill</a></p><h2 id="27-rm"><a href="#27-rm" class="headerlink" title="27. rm"></a>27. rm</h2><p>删除文件前先确认</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ rm -i filename.txt</code></pre></div></div><p>在文件名中使用shell的元字符会非常有用。删除文件前先打印文件名并进行确认</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ rm -i file*</code></pre></div></div><p>递归删除文件夹下所有文件，并删除该文件夹</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ rm -r example</code></pre></div></div><h2 id="28-cp"><a href="#28-cp" class="headerlink" title="28. cp"></a>28. cp</h2><p>拷贝文件1到文件2，并保持文件的权限、属主和时间戳</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ cp -p file1 file2</code></pre></div></div><p>拷贝file1到file2，如果file2存在会提示是否覆盖</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ cp -i file1 file2</code></pre></div></div><h2 id="29-mv"><a href="#29-mv" class="headerlink" title="29. mv"></a>29. mv</h2><p>将文件名file1重命名为file2，如果file2存在则提示是否覆盖</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ mv -i file1 file2</code></pre></div></div><p>注意如果使用-f选项则不会进行提示</p><p>-v会输出重命名的过程，当文件名中包含通配符时，这个选项会非常方便</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ mv -v file1 file2</code></pre></div></div><h2 id="30-cat"><a href="#30-cat" class="headerlink" title="30. cat"></a>30. cat</h2><p>你可以一次查看多个文件的内容，下面的命令会先打印file1的内容，然后打印file2的内容</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ cat file1 file2</code></pre></div></div><p>-n命令可以在每行的前面加上行号</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ cat -n /etc/logrotate.conf/var/log/btmp {missingok3        monthly4        create 0660 root utmp5        rotate 16 }</code></pre></div></div><h2 id="31-mount"><a href="#31-mount" class="headerlink" title="31. mount"></a>31. mount</h2><p>如果要挂载一个文件系统，需要先创建一个目录，然后将这个文件系统挂载到这个目录上</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code># mkdir /u01# mount /dev/sdb1 /u01</code></pre></div></div><p>也可以把它添加到fstab中进行自动挂载，这样任何时候系统重启的时候，文件系统都会被加载</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>/dev/sdb1 /u01 ext2 defaults 0 2</code></pre></div></div><h2 id="32-chmod"><a href="#32-chmod" class="headerlink" title="32. chmod"></a>32. chmod</h2><p>chmod用于改变文件和目录的权限</p><p>给指定文件的属主和属组所有权限(包括读、写、执行)</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ chmod ug+rwx file.txt</code></pre></div></div><p>删除指定文件的属组的所有权限</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ chmod g-rwx file.txt</code></pre></div></div><p>修改目录的权限，以及递归修改目录下面所有文件和子目录的权限</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ chmod -R ug+rwx file.txt</code></pre></div></div><p>更多示例：<a href="http://www.thegeekstuff.com/2010/06/chmod-command-examples/" target="_blank" rel="noopener">7 Chmod Command Examples for Beginners</a></p><h2 id="33-chown"><a href="#33-chown" class="headerlink" title="33. chown"></a>33. chown</h2><p>chown用于改变文件属主和属组</p><p>同时将某个文件的属主改为oracle，属组改为db</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ chown oracle:dba dbora.sh</code></pre></div></div><p>使用-R选项对目录和目录下的文件进行递归修改</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ chown -R oracle:dba /home/oracle</code></pre></div></div><h2 id="34-passwd"><a href="#34-passwd" class="headerlink" title="34. passwd"></a>34. passwd</h2><p>passwd用于在命令行修改密码，使用这个命令会要求你先输入旧密码，然后输入新密码</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ passwd</code></pre></div></div><p>超级用户可以用这个命令修改其他用户的密码，这个时候不需要输入用户的密码</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code># passwd USERNAME</code></pre></div></div><p>passwd还可以删除某个用户的密码，这个命令只有root用户才能操作，删除密码后，这个用户不需要输入密码就可以登录到系统</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code># passwd -d USERNAME</code></pre></div></div><h2 id="35-mkdir"><a href="#35-mkdir" class="headerlink" title="35. mkdir"></a>35. mkdir</h2><p>在home目录下创建一个名为temp的目录</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ mkdir ~/temp</code></pre></div></div><p>使用-p选项可以创建一个路径上所有不存在的目录</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ mkdir -p dir1/dir2/dir3/dir4/</code></pre></div></div><h2 id="36-ifconfig"><a href="#36-ifconfig" class="headerlink" title="36. ifconfig"></a>36. ifconfig</h2><p>ifconfig用于查看和配置Linux系统的网络接口</p><p>查看所有网络接口及其状态</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ ifconfig -a</code></pre></div></div><p>使用up和down命令启动或停止某个接口</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ ifconfig eth0 up$ ifconfig eth0 down</code></pre></div></div><p>更多示例：<a href="http://www.thegeekstuff.com/2009/03/ifconfig-7-examples-to-configure-network-interface/" target="_blank" rel="noopener">Ifconfig: 7 Examples To Configure Network Interface</a></p><h2 id="37-uname"><a href="#37-uname" class="headerlink" title="37. uname"></a>37. uname</h2><p>uname可以显示一些重要的系统信息，例如内核名称、主机名、内核版本号、处理器类型之类的信息</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ uname -aLinux john-laptop 2.6.32-24-generic #41-Ubuntu SMP Thu Aug 19 01:12:52 UTC 2010 i686 GNU/Linux</code></pre></div></div><h2 id="38-whereis"><a href="#38-whereis" class="headerlink" title="38. whereis"></a>38. whereis</h2><p>当你不知道某个命令的位置时可以使用whereis命令，下面使用whereis查找ls的位置</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ whereis lsls: /bin/ls /usr/share/man/man1/ls.1.gz /usr/share/man/man1p/ls.1p.gz</code></pre></div></div><p>当你想查找某个可执行程序的位置，但这个程序又不在whereis的默认目录下，你可以使用-B选项，并指定目录作为这个选项的参数。下面的命令在/tmp目录下查找lsmk命令</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ whereis -u -B /tmp -f lsmklsmk: /tmp/lsmk</code></pre></div></div><h2 id="39-whatis"><a href="#39-whatis" class="headerlink" title="39. whatis"></a>39. whatis</h2><p>wathis显示某个命令的描述信息</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ whatis lsls        (1)  - list directory contents$ whatis ifconfigifconfig (8)         - configure a network interface</code></pre></div></div><h2 id="40-locate"><a href="#40-locate" class="headerlink" title="40. locate"></a>40. locate</h2><p>locate命名可以显示某个指定文件（或一组文件）的路径，它会使用由updatedb创建的数据库</p><p>下面的命令会显示系统中所有包含crontab字符串的文件</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ locate crontab/etc/anacrontab/etc/crontab/usr/bin/crontab/usr/share/doc/cron/examples/crontab2english.pl.gz/usr/share/man/man1/crontab.1.gz/usr/share/man/man5/anacrontab.5.gz/usr/share/man/man5/crontab.5.gz/usr/share/vim/vim72/syntax/crontab.vim</code></pre></div></div><h2 id="41-man"><a href="#41-man" class="headerlink" title="41. man"></a>41. man</h2><p>显示某个命令的man页面</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ man crontab</code></pre></div></div><p>有些命令可能会有多个man页面，每个man页面对应一种命令类型</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ man SECTION-NUMBER commandname</code></pre></div></div><p>man页面一般可以分为8种命令类型</p><ol><li>用户命令</li><li>系统调用</li><li>c库函数</li><li>设备与网络接口</li><li>文件格式</li><li>游戏与屏保</li><li>环境、表、宏</li><li>系统管理员命令和后台运行命令</li></ol><p>例如，我们执行 <code>whatis crontab</code>，你可以看到 <code>crontab</code> 有两个命令类型1和5，所以我们可以通过下面的命令查看命令类型5的man页面</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ whatis crontabcrontab (1)          - maintain crontab files for individual users (V3)crontab (5)          - tables for driving cron$ man 5 crontab</code></pre></div></div><h2 id="42-tail"><a href="#42-tail" class="headerlink" title="42. tail"></a>42. tail</h2><p>tail命令默认显示文件最后的10行文本</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ tail filename.txt</code></pre></div></div><p>你可以使用-n选项指定要显示的行数</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ tail -n N filename.txt</code></pre></div></div><p>你也可以使用-f选项进行实时查看，这个命令执行后会等待，如果有新行添加到文件尾部，它会继续输出新的行，在查看日志时这个选项会非常有用。你可以通过CTRL-C终止命令的执行</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ tail -f log-file</code></pre></div></div><p>更多示例：<a href="http://www.thegeekstuff.com/2009/09/multitail-to-view-tail-f-output-of-multiple-log-files-in-one-terminal/" target="_blank" rel="noopener">3 Methods To View tail -f output of Multiple Log Files in One Terminal</a></p><h2 id="43-less"><a href="#43-less" class="headerlink" title="43. less"></a>43. less</h2><p>这个命名可以在不加载整个文件的前提下显示文件内容，在查看大型日志文件的时候这个命令会非常有用</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ less huge-log-file.log</code></pre></div></div><p>当你用less命令打开某个文件时，下面两个按键会给你带来很多帮助，他们用于向前和向后滚屏</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>CTRL+F – forward one windowCTRL+B – backward one window</code></pre></div></div><p>更多示例：<a href="http://www.thegeekstuff.com/2010/02/unix-less-command-10-tips-for-effective-navigation/" target="_blank" rel="noopener">Unix Less Command: 10 Tips for Effective Navigation</a></p><h2 id="44-su"><a href="#44-su" class="headerlink" title="44. su"></a>44. su</h2><p>su命令用于切换用户账号，超级用户使用这个命令可以切换到任何其他用户而不用输入密码</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ su - USERNAME</code></pre></div></div><p>用另外一个用户名执行一个命令下面的示例中用户john使用raj用户名执行ls命令，执行完后返回john的账号</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>[john@dev-server]$ su - raj -c 'ls'[john@dev-server]$</code></pre></div></div><p>用指定用户登录，并且使用指定的shell程序，而不用默认的</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ su -s 'SHELLNAME' USERNAME</code></pre></div></div><h2 id="45-mysql"><a href="#45-mysql" class="headerlink" title="45. mysql"></a>45. mysql</h2><p>mysql可能是Linux上使用最广泛的数据库，即使你没有在你的服务器上安装mysql，你也可以使用mysql客户端连接到远程的mysql服务器</p><p>连接一个远程数据库，需要输入密码</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ mysql -u root -p -h 192.168.1.2</code></pre></div></div><p>连接本地数据库</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ mysql -u root -p</code></pre></div></div><p>你也可以在命令行中输入数据库密码，只需要在-p后面加上密码作为参数，可以直接写在p后面而不用加空格</p><h2 id="46-yum"><a href="#46-yum" class="headerlink" title="46. yum"></a>46. yum</h2><p>使用yum安装apache</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ yum install httpd</code></pre></div></div><p>更新apache</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ yum update httpd</code></pre></div></div><p>卸载/删除apache</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ yum remove httpd</code></pre></div></div><h2 id="47-rpm"><a href="#47-rpm" class="headerlink" title="47. rpm"></a>47. rpm</h2><p>使用rpm安装apache</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code># rpm -ivh httpd-2.2.3-22.0.1.el5.i386.rpm</code></pre></div></div><p>更新apache</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code># rpm -uvh httpd-2.2.3-22.0.1.el5.i386.rpm</code></pre></div></div><p>卸载/删除apache</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code># rpm -ev httpd</code></pre></div></div><p>更多示例：<a href="http://www.thegeekstuff.com/2010/07/rpm-command-examples/" target="_blank" rel="noopener">RPM Command: 15 Examples to Install, Uninstall, Upgrade, Query RPM Packages</a></p><h2 id="48-ping"><a href="#48-ping" class="headerlink" title="48. ping"></a>48. ping</h2><p>ping一个远程主机，只发5个数据包</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ ping -c 5 gmail.com</code></pre></div></div><p>更多示例：<a href="http://www.thegeekstuff.com/2009/11/ping-tutorial-13-effective-ping-command-examples/" target="_blank" rel="noopener">Ping Tutorial: 15 Effective Ping Command Examples</a></p><h2 id="49-date"><a href="#49-date" class="headerlink" title="49. date"></a>49. date</h2><p>设置系统日期</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code># date -s "01/31/2010 23:59:53"</code></pre></div></div><p>当你修改了系统时间，你需要同步硬件时间和系统时间</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code># hwclock –systohc# hwclock --systohc –utc</code></pre></div></div><h2 id="50-wget"><a href="#50-wget" class="headerlink" title="50. wget"></a>50. wget</h2><p>使用wget从网上下载软件、音乐、视频</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ wget http://prdownloads.sourceforge.net/sourceforge/nagios/nagios-3.2.1.tar.gz</code></pre></div></div><p>下载文件并以指定的文件名保存文件</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ wget -O taglist.zip http://www.vim.org/scripts/download_script.php?src_id=7701</code></pre></div></div><p>更多示例：<a href="http://www.thegeekstuff.com/2009/09/the-ultimate-wget-download-guide-with-15-awesome-examples/" target="_blank" rel="noopener">The Ultimate Wget Download Guide With 15 Awesome Examples</a></p><div class="copy-right"><p>本文由 <a href="javascript:void(0);">王爵nice</a> 创作， 采用 <a href="https://creativecommons.org/licenses/by/4.0/deed.zh" target="_blank" rel="noopener">知识共享署名4.0</a> 国际许可协议进行许可。</p><p>本站文章除注明转载/出处外，均为本站原创或翻译，转载前请务必署名。</p></div></article></body></html>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 操作系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu18.04修改swap分区大小</title>
      <link href="/2020/02/26/Ubuntu18-04%E4%BF%AE%E6%94%B9swap%E5%88%86%E5%8C%BA%E5%A4%A7%E5%B0%8F/"/>
      <url>/2020/02/26/Ubuntu18-04%E4%BF%AE%E6%94%B9swap%E5%88%86%E5%8C%BA%E5%A4%A7%E5%B0%8F/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><p> 这篇文章翻译自 <a href="http://www.thegeekstuff.com/2010/11/50-linux-commands" target="_blank" rel="noopener">http://www.thegeekstuff.com/2010/11/50-linux-commands</a> 这些都是一些很常用的命令，这篇文章中每个命令都有一些简单的示例说明它的用法， 对于想学习Unix/Linux的人，这些命令基本上都是需要掌握的。</p><a id="more"></a><article class="markdown-body"><blockquote><p>这篇文章翻译自 <a href="http://www.thegeekstuff.com/2010/11/50-linux-commands/" target="_blank" rel="noopener">http://www.thegeekstuff.com/2010/11/50-linux-commands</a> 这些都是一些很常用的命令，这篇文章中每个命令都有一些简单的示例说明它的用法， 对于想学习Unix/Linux的人，这些命令基本上都是需要掌握的。</p></blockquote><p>同时我也做了一张简易版的图例：</p><p><a href="https://i.loli.net/2017/08/22/599b9b3ca5bb7.png" target="_blank" rel="noopener"><img alt="Linux命令表" title="Linux命令表" data-src="https://i.loli.net/2017/08/22/599b9b3ca5bb7.png" class="lazyload"></a></p><h2 id="1-tar"><a href="#1-tar" class="headerlink" title="1. tar"></a>1. tar</h2><p>创建一个新的tar文件</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ tar cvf archive_name.tar dirname/</code></pre></div></div><p>解压tar文件</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ tar xvf archive_name.tar</code></pre></div></div><p>查看tar文件</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ tar tvf archive_name.tar</code></pre></div></div><p>更多示例：<a href="http://www.thegeekstuff.com/2010/04/unix-tar-command-examples/" target="_blank" rel="noopener">The Ultimate Tar Command Tutorial with 10 Practical Examples</a></p><h2 id="2-grep"><a href="#2-grep" class="headerlink" title="2. grep"></a>2. grep</h2><p>在文件中查找字符串(不区分大小写)</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ grep -i "the" demo_file</code></pre></div></div><p>输出成功匹配的行，以及该行之后的三行</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ grep -A 3 -i "example" demo_text</code></pre></div></div><p>在一个文件夹中递归查询包含指定字符串的文件</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ grep -r "ramesh" *</code></pre></div></div><p>更多示例：<a href="http://www.thegeekstuff.com/2009/03/15-practical-unix-grep-command-examples/" target="_blank" rel="noopener">Get a Grip on the Grep! – 15 Practical Grep Command Examples</a></p><h2 id="3-find"><a href="#3-find" class="headerlink" title="3. find"></a>3. find</h2><p>查找指定文件名的文件(不区分大小写)</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ find -iname "MyProgram.c"</code></pre></div></div><p>对找到的文件执行某个命令</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ find -iname "MyProgram.c" -exec md5sum {} \;</code></pre></div></div><p>查找home目录下的所有空文件</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ find ~ -empty</code></pre></div></div><p>更多示例：<a href="http://www.thegeekstuff.com/2009/03/15-practical-linux-find-command-examples/" target="_blank" rel="noopener">Mommy, I found it! — 15 Practical Linux Find Command Examples</a></p><h2 id="4-ssh"><a href="#4-ssh" class="headerlink" title="4. ssh"></a>4. ssh</h2><p>登录到远程主机</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ ssh -l jsmith remotehost.example.com</code></pre></div></div><p>调试ssh客户端</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ ssh -v -l jsmith remotehost.example.com</code></pre></div></div><p>显示ssh客户端版本</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ ssh -V</code></pre></div></div><p>更多示例：<a href="http://www.thegeekstuff.com/2008/05/5-basic-linux-ssh-client-commands/" target="_blank" rel="noopener">5 Basic Linux SSH Client Commands</a></p><h2 id="5-sed"><a href="#5-sed" class="headerlink" title="5. sed"></a>5. sed</h2><p>当你将Dos系统中的文件复制到Unix/Linux后，这个文件每行都会以\r\n结尾，sed可以轻易将其转换为Unix格式的文件，使用\n结尾的文件</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ sed 's/.$//' filename</code></pre></div></div><p>反转文件内容并输出</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ sed -n '1!G; h; p' filename</code></pre></div></div><p>为非空行添加行号</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ sed '/./=' thegeekstuff.txt | sed 'N; s/\n/ /'</code></pre></div></div><p>更多示例：<a href="http://www.thegeekstuff.com/2009/10/unix-sed-tutorial-advanced-sed-substitution-examples/" target="_blank" rel="noopener">Advanced Sed Substitution Examples</a></p><h2 id="6-awk"><a href="#6-awk" class="headerlink" title="6. awk"></a>6. awk</h2><p>删除重复行</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ awk '!($0 in array) { array[$0]; print}' temp</code></pre></div></div><p>打印/etc/passwd中所有包含同样的uid和gid的行</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ awk -F ':' '$3=$4' /etc/passwd</code></pre></div></div><p>打印文件中的指定部分的字段</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ awk '{print $2,$5;}' employee.txt</code></pre></div></div><p>更多示例：<a href="http://www.thegeekstuff.com/2010/01/8-powerful-awk-built-in-variables-fs-ofs-rs-ors-nr-nf-filename-fnr/" target="_blank" rel="noopener">8 Powerful Awk Built-in Variables – FS, OFS, RS, ORS, NR, NF, FILENAME, FNR</a></p><h2 id="7-vim"><a href="#7-vim" class="headerlink" title="7. vim"></a>7. vim</h2><p>打开文件并跳到第10行</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ vim +10 filename.txt</code></pre></div></div><p>打开文件跳到第一个匹配的行</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ vim +/search-term filename.txt</code></pre></div></div><p>以只读模式打开文件</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ vim -R /etc/passwd</code></pre></div></div><p>更多示例：<a href="http://www.thegeekstuff.com/2009/01/vi-and-vim-macro-tutorial-how-to-record-and-play/" target="_blank" rel="noopener">How To Record and Play in Vim Editor</a></p><h2 id="8-diff"><a href="#8-diff" class="headerlink" title="8. diff"></a>8. diff</h2><p>比较的时候忽略空白符</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ diff -w name_list.txt name_list_new.txt</code></pre></div></div><h2 id="9-sort"><a href="#9-sort" class="headerlink" title="9. sort"></a>9. sort</h2><p>以升序对文件内容排序</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ sort names.txt</code></pre></div></div><p>以降序对文件内容排序</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ sort -r names.txt</code></pre></div></div><p>以第三个字段对/etc/passwd的内容排序</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ sort -t: -k 3n /etc/passwd | more</code></pre></div></div><h2 id="10-export"><a href="#10-export" class="headerlink" title="10. export"></a>10. export</h2><p>输出跟字符串oracle匹配的环境变量</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ export | grep ORCALEdeclare -x ORACLE_BASE="/u01/app/oracle"declare -x ORACLE_HOME="/u01/app/oracle/product/10.2.0"declare -x ORACLE_SID="med"declare -x ORACLE_TERM="xterm"</code></pre></div></div><p>设置全局环境变量</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ export ORACLE_HOME=/u01/app/oracle/product/10.2.0</code></pre></div></div><h2 id="11-xargs"><a href="#11-xargs" class="headerlink" title="11. xargs"></a>11. xargs</h2><p>将所有图片文件拷贝到外部驱动器</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ ls *.jpg | xargs -n1 -i cp {} /external-hard-drive/directory</code></pre></div></div><p>将系统中所有jpd文件压缩打包</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ find / -name *.jpg -type f -print | xargs tar -cvzf images.tar.gz</code></pre></div></div><p>下载文件中列出的所有url对应的页面</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ cat url-list.txt | xargs wget –c</code></pre></div></div><h2 id="12-ls"><a href="#12-ls" class="headerlink" title="12. ls"></a>12. ls</h2><p>以易读的方式显示文件大小(显示为MB,GB…)</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ ls -lh-rw-r----- 1 ramesh team-dev 8.9M Jun 12 15:27 arch-linux.txt.gz</code></pre></div></div><p>以最后修改时间升序列出文件</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ ls -ltr</code></pre></div></div><p>在文件名后面显示文件类型</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ ls -F</code></pre></div></div><p>更多示例：<a href="http://www.thegeekstuff.com/2009/07/linux-ls-command-examples/" target="_blank" rel="noopener">Unix LS Command: 15 Practical Examples</a></p><h2 id="13-pwd"><a href="#13-pwd" class="headerlink" title="13. pwd"></a>13. pwd</h2><p>输出当前工作目录</p><h2 id="14-cd"><a href="#14-cd" class="headerlink" title="14. cd"></a>14. cd</h2><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>cd -可以在最近工作的两个目录间切换</code></pre></div></div><p>使用 <strong>shopt -s cdspell</strong> 可以设置自动对 cd 命令进行拼写检查</p><p>更多示例：<a href="http://www.thegeekstuff.com/2008/10/6-awesome-linux-cd-command-hacks-productivity-tip3-for-geeks/" target="_blank" rel="noopener">6 Awesome Linux cd command Hacks</a></p><h2 id="15-gzip"><a href="#15-gzip" class="headerlink" title="15. gzip"></a>15. gzip</h2><p>创建一个 <code>*.gz</code> 的压缩文件</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ gzip test.txt</code></pre></div></div><p>解压 <code>*.gz</code> 文件</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ gzip -d test.txt.gz</code></pre></div></div><p>显示压缩的比率</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ gzip -l *.gz     compressed        uncompressed  ratio uncompressed_name          23709               97975  75.8% asp-patch-rpms.txt</code></pre></div></div><h2 id="16-bzip2"><a href="#16-bzip2" class="headerlink" title="16. bzip2"></a>16. bzip2</h2><p>创建 <code>*.bz2</code> 压缩文件</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ bzip2 test.txt</code></pre></div></div><p>解压 <code>*.bz2</code> 文件</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>bzip2 -d test.txt.bz2</code></pre></div></div><p>更多示例：<a href="http://www.thegeekstuff.com/2010/10/bzcommand-examples/" target="_blank" rel="noopener">BZ is Eazy! bzip2, bzgrep, bzcmp, bzdiff, bzcat, bzless, bzmore examples</a></p><h2 id="17-uzip"><a href="#17-uzip" class="headerlink" title="17. uzip"></a>17. uzip</h2><p>解压 <code>*.zip</code> 文件</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ unzip test.zip</code></pre></div></div><p>查看 <code>*.zip</code> 文件的内容</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ unzip -l jasper.zipArchive:  jasper.zipLength     Date   Time    Name--------    ----   ----    ----40995  11-30-98 23:50   META-INF/MANIFEST.MF32169  08-25-98 21:07   classes_15964  08-25-98 21:07   classes_names10542  08-25-98 21:07   classes_ncomp</code></pre></div></div><h2 id="18-shutdown"><a href="#18-shutdown" class="headerlink" title="18. shutdown"></a>18. shutdown</h2><p>关闭系统并立即关机</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ shutdown -h now</code></pre></div></div><p>10分钟后关机</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ shutdown -h +10</code></pre></div></div><p>重启</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ shutdown -r now</code></pre></div></div><p>重启期间强制进行系统检查</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ shutdown -Fr now</code></pre></div></div><h2 id="19-ftp"><a href="#19-ftp" class="headerlink" title="19. ftp"></a>19. ftp</h2><p>ftp命令和sftp命令的用法基本相似连接ftp服务器并下载多个文件</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ ftp IP/hostnameftp> mget *.html</code></pre></div></div><p>显示远程主机上文件列表</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>ftp> mls *.html -/ftptest/features.html/ftptest/index.html/ftptest/othertools.html/ftptest/samplereport.html/ftptest/usage.html</code></pre></div></div><p>更多示例：<a href="http://www.thegeekstuff.com/2010/06/ftp-sftp-tutorial/" target="_blank" rel="noopener">FTP and SFTP Beginners Guide with 10 Examples</a></p><h2 id="20-crontab"><a href="#20-crontab" class="headerlink" title="20. crontab"></a>20. crontab</h2><p>查看某个用户的 <code>crontab</code> 入口</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ crontab -u john -l</code></pre></div></div><p>设置一个每十分钟执行一次的计划任务</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>*/10 * * * * /home/ramesh/check-disk-space</code></pre></div></div><p>更多示例：<a href="http://www.thegeekstuff.com/2009/06/15-practical-crontab-examples/" target="_blank" rel="noopener">Linux Crontab: 15 Awesome Cron Job Examples</a></p><h2 id="21-service"><a href="#21-service" class="headerlink" title="21. service"></a>21. service</h2><p>service 命令用于运行 System V init 脚本，这些脚本一般位于/etc/init.d文件下，这个命令可以直接运行这个文件夹里面的脚本，而不用加上路径</p><p>查看服务状态</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ service ssh status</code></pre></div></div><p>查看所有服务状态</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ service --status-all</code></pre></div></div><p>重启服务</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ service ssh restart</code></pre></div></div><h2 id="22-ps"><a href="#22-ps" class="headerlink" title="22. ps"></a>22. ps</h2><p>ps命令用于显示正在运行中的进程的信息，ps命令有很多选项，这里只列出了几个</p><p>查看当前正在运行的所有进程</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ ps -ef | more</code></pre></div></div><p>以树状结构显示当前正在运行的进程，H选项表示显示进程的层次结构</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ ps -efH | more</code></pre></div></div><h2 id="23-free"><a href="#23-free" class="headerlink" title="23. free"></a>23. free</h2><p>这个命令用于显示系统当前内存的使用情况，包括已用内存、可用内存和交换内存的情况</p><p>默认情况下free会以字节为单位输出内存的使用量</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ free             total       used       free     shared    buffers     cachedMem:       3566408    1580220    1986188          0     203988     902960-/+ buffers/cache:     473272    3093136Swap:      4000176          0    4000176</code></pre></div></div><p>如果你想以其他单位输出内存的使用量，需要加一个选项，-g为GB，-m为MB，-k为KB，-b为字节</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ free -g             total       used       free     shared    buffers     cachedMem:             3          1          1          0          0          0-/+ buffers/cache:          0          2Swap:            3          0          3</code></pre></div></div><p>如果你想查看所有内存的汇总，请使用-t选项，使用这个选项会在输出中加一个汇总行</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>ramesh@ramesh-laptop:~$ free -t             total       used       free     shared    buffers     cachedMem:       3566408    1592148    1974260          0     204260     912556-/+ buffers/cache:     475332    3091076Swap:      4000176          0    4000176Total:     7566584    1592148    5974436</code></pre></div></div><h2 id="24-top"><a href="#24-top" class="headerlink" title="24. top"></a>24. top</h2><p>top命令会显示当前系统中占用资源最多的一些进程（默认以CPU占用率排序）如果你想改变排序方式，可以在结果列表中点击O（大写字母O）会显示所有可用于排序的列，这个时候你就可以选择你想排序的列</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>Current Sort Field:  P  for window 1:DefSelect sort field via field letter, type any other key to return  a: PID        = Process Id              v: nDRT       = Dirty Pages count  d: UID        = User Id                 y: WCHAN      = Sleeping in Function  e: USER       = User Name               z: Flags      = Task Flags  ........</code></pre></div></div><p>如果只想显示某个特定用户的进程，可以使用-u选项</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ top -u oracle</code></pre></div></div><p>更多示例：<a href="http://www.thegeekstuff.com/2010/01/15-practical-unix-linux-top-command-examples/" target="_blank" rel="noopener">Can You Top This? 15 Practical Linux Top Command Examples</a></p><h2 id="25-df"><a href="#25-df" class="headerlink" title="25. df"></a>25. df</h2><p>显示文件系统的磁盘使用情况，默认情况下df -k 将以字节为单位输出磁盘的使用量</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ df -kFilesystem           1K-blocks      Used Available Use% Mounted on/dev/sda1             29530400   3233104  24797232  12% //dev/sda2            120367992  50171596  64082060  44% /home</code></pre></div></div><p>使用 <code>-h</code> 选项可以以更符合阅读习惯的方式显示磁盘使用量</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ df -hFilesystem                  Size   Used  Avail Capacity  iused      ifree %iused  Mounted on/dev/disk0s2               232Gi   84Gi  148Gi    37% 21998562   38864868   36%   /devfs                      187Ki  187Ki    0Bi   100%      648          0  100%   /devmap -hosts                   0Bi    0Bi    0Bi   100%        0          0  100%   /netmap auto_home                0Bi    0Bi    0Bi   100%        0          0  100%   /home/dev/disk0s4               466Gi   45Gi  421Gi    10%   112774  440997174    0%   /Volumes/BOOTCAMP//app@izenesoft.cn/public  2.7Ti  1.3Ti  1.4Ti    48%        0 18446744073709551615    0%   /Volumes/public</code></pre></div></div><p>使用 <code>-T</code> 选项显示文件系统类型</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ df -TFilesystem    Type   1K-blocks      Used Available Use% Mounted on/dev/sda1     ext4    29530400   3233120  24797216  12% //dev/sda2     ext4   120367992  50171596  64082060  44% /home</code></pre></div></div><h2 id="26-kill"><a href="#26-kill" class="headerlink" title="26. kill"></a>26. kill</h2><p>kill 用于终止一个进程。一般我们会先用ps -ef查找某个进程得到它的进程号，然后再使用kill -9 进程号终止该进程。你还可以使用killall、pkill、xkill来终止进程</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ ps -ef | grep vimramesh    7243  7222  9 22:43 pts/2    00:00:00 vim$ kill -9 7243</code></pre></div></div><p>更多示例：<a href="http://www.thegeekstuff.com/2009/12/4-ways-to-kill-a-process-kill-killall-pkill-xkill/" target="_blank" rel="noopener">4 Ways to Kill a Process – kill, killall, pkill, xkill</a></p><h2 id="27-rm"><a href="#27-rm" class="headerlink" title="27. rm"></a>27. rm</h2><p>删除文件前先确认</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ rm -i filename.txt</code></pre></div></div><p>在文件名中使用shell的元字符会非常有用。删除文件前先打印文件名并进行确认</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ rm -i file*</code></pre></div></div><p>递归删除文件夹下所有文件，并删除该文件夹</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ rm -r example</code></pre></div></div><h2 id="28-cp"><a href="#28-cp" class="headerlink" title="28. cp"></a>28. cp</h2><p>拷贝文件1到文件2，并保持文件的权限、属主和时间戳</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ cp -p file1 file2</code></pre></div></div><p>拷贝file1到file2，如果file2存在会提示是否覆盖</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ cp -i file1 file2</code></pre></div></div><h2 id="29-mv"><a href="#29-mv" class="headerlink" title="29. mv"></a>29. mv</h2><p>将文件名file1重命名为file2，如果file2存在则提示是否覆盖</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ mv -i file1 file2</code></pre></div></div><p>注意如果使用-f选项则不会进行提示</p><p>-v会输出重命名的过程，当文件名中包含通配符时，这个选项会非常方便</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ mv -v file1 file2</code></pre></div></div><h2 id="30-cat"><a href="#30-cat" class="headerlink" title="30. cat"></a>30. cat</h2><p>你可以一次查看多个文件的内容，下面的命令会先打印file1的内容，然后打印file2的内容</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ cat file1 file2</code></pre></div></div><p>-n命令可以在每行的前面加上行号</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ cat -n /etc/logrotate.conf/var/log/btmp {missingok3        monthly4        create 0660 root utmp5        rotate 16 }</code></pre></div></div><h2 id="31-mount"><a href="#31-mount" class="headerlink" title="31. mount"></a>31. mount</h2><p>如果要挂载一个文件系统，需要先创建一个目录，然后将这个文件系统挂载到这个目录上</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code># mkdir /u01# mount /dev/sdb1 /u01</code></pre></div></div><p>也可以把它添加到fstab中进行自动挂载，这样任何时候系统重启的时候，文件系统都会被加载</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>/dev/sdb1 /u01 ext2 defaults 0 2</code></pre></div></div><h2 id="32-chmod"><a href="#32-chmod" class="headerlink" title="32. chmod"></a>32. chmod</h2><p>chmod用于改变文件和目录的权限</p><p>给指定文件的属主和属组所有权限(包括读、写、执行)</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ chmod ug+rwx file.txt</code></pre></div></div><p>删除指定文件的属组的所有权限</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ chmod g-rwx file.txt</code></pre></div></div><p>修改目录的权限，以及递归修改目录下面所有文件和子目录的权限</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ chmod -R ug+rwx file.txt</code></pre></div></div><p>更多示例：<a href="http://www.thegeekstuff.com/2010/06/chmod-command-examples/" target="_blank" rel="noopener">7 Chmod Command Examples for Beginners</a></p><h2 id="33-chown"><a href="#33-chown" class="headerlink" title="33. chown"></a>33. chown</h2><p>chown用于改变文件属主和属组</p><p>同时将某个文件的属主改为oracle，属组改为db</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ chown oracle:dba dbora.sh</code></pre></div></div><p>使用-R选项对目录和目录下的文件进行递归修改</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ chown -R oracle:dba /home/oracle</code></pre></div></div><h2 id="34-passwd"><a href="#34-passwd" class="headerlink" title="34. passwd"></a>34. passwd</h2><p>passwd用于在命令行修改密码，使用这个命令会要求你先输入旧密码，然后输入新密码</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ passwd</code></pre></div></div><p>超级用户可以用这个命令修改其他用户的密码，这个时候不需要输入用户的密码</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code># passwd USERNAME</code></pre></div></div><p>passwd还可以删除某个用户的密码，这个命令只有root用户才能操作，删除密码后，这个用户不需要输入密码就可以登录到系统</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code># passwd -d USERNAME</code></pre></div></div><h2 id="35-mkdir"><a href="#35-mkdir" class="headerlink" title="35. mkdir"></a>35. mkdir</h2><p>在home目录下创建一个名为temp的目录</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ mkdir ~/temp</code></pre></div></div><p>使用-p选项可以创建一个路径上所有不存在的目录</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ mkdir -p dir1/dir2/dir3/dir4/</code></pre></div></div><h2 id="36-ifconfig"><a href="#36-ifconfig" class="headerlink" title="36. ifconfig"></a>36. ifconfig</h2><p>ifconfig用于查看和配置Linux系统的网络接口</p><p>查看所有网络接口及其状态</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ ifconfig -a</code></pre></div></div><p>使用up和down命令启动或停止某个接口</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ ifconfig eth0 up$ ifconfig eth0 down</code></pre></div></div><p>更多示例：<a href="http://www.thegeekstuff.com/2009/03/ifconfig-7-examples-to-configure-network-interface/" target="_blank" rel="noopener">Ifconfig: 7 Examples To Configure Network Interface</a></p><h2 id="37-uname"><a href="#37-uname" class="headerlink" title="37. uname"></a>37. uname</h2><p>uname可以显示一些重要的系统信息，例如内核名称、主机名、内核版本号、处理器类型之类的信息</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ uname -aLinux john-laptop 2.6.32-24-generic #41-Ubuntu SMP Thu Aug 19 01:12:52 UTC 2010 i686 GNU/Linux</code></pre></div></div><h2 id="38-whereis"><a href="#38-whereis" class="headerlink" title="38. whereis"></a>38. whereis</h2><p>当你不知道某个命令的位置时可以使用whereis命令，下面使用whereis查找ls的位置</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ whereis lsls: /bin/ls /usr/share/man/man1/ls.1.gz /usr/share/man/man1p/ls.1p.gz</code></pre></div></div><p>当你想查找某个可执行程序的位置，但这个程序又不在whereis的默认目录下，你可以使用-B选项，并指定目录作为这个选项的参数。下面的命令在/tmp目录下查找lsmk命令</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ whereis -u -B /tmp -f lsmklsmk: /tmp/lsmk</code></pre></div></div><h2 id="39-whatis"><a href="#39-whatis" class="headerlink" title="39. whatis"></a>39. whatis</h2><p>wathis显示某个命令的描述信息</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ whatis lsls        (1)  - list directory contents$ whatis ifconfigifconfig (8)         - configure a network interface</code></pre></div></div><h2 id="40-locate"><a href="#40-locate" class="headerlink" title="40. locate"></a>40. locate</h2><p>locate命名可以显示某个指定文件（或一组文件）的路径，它会使用由updatedb创建的数据库</p><p>下面的命令会显示系统中所有包含crontab字符串的文件</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ locate crontab/etc/anacrontab/etc/crontab/usr/bin/crontab/usr/share/doc/cron/examples/crontab2english.pl.gz/usr/share/man/man1/crontab.1.gz/usr/share/man/man5/anacrontab.5.gz/usr/share/man/man5/crontab.5.gz/usr/share/vim/vim72/syntax/crontab.vim</code></pre></div></div><h2 id="41-man"><a href="#41-man" class="headerlink" title="41. man"></a>41. man</h2><p>显示某个命令的man页面</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ man crontab</code></pre></div></div><p>有些命令可能会有多个man页面，每个man页面对应一种命令类型</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ man SECTION-NUMBER commandname</code></pre></div></div><p>man页面一般可以分为8种命令类型</p><ol><li>用户命令</li><li>系统调用</li><li>c库函数</li><li>设备与网络接口</li><li>文件格式</li><li>游戏与屏保</li><li>环境、表、宏</li><li>系统管理员命令和后台运行命令</li></ol><p>例如，我们执行 <code>whatis crontab</code>，你可以看到 <code>crontab</code> 有两个命令类型1和5，所以我们可以通过下面的命令查看命令类型5的man页面</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ whatis crontabcrontab (1)          - maintain crontab files for individual users (V3)crontab (5)          - tables for driving cron$ man 5 crontab</code></pre></div></div><h2 id="42-tail"><a href="#42-tail" class="headerlink" title="42. tail"></a>42. tail</h2><p>tail命令默认显示文件最后的10行文本</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ tail filename.txt</code></pre></div></div><p>你可以使用-n选项指定要显示的行数</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ tail -n N filename.txt</code></pre></div></div><p>你也可以使用-f选项进行实时查看，这个命令执行后会等待，如果有新行添加到文件尾部，它会继续输出新的行，在查看日志时这个选项会非常有用。你可以通过CTRL-C终止命令的执行</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ tail -f log-file</code></pre></div></div><p>更多示例：<a href="http://www.thegeekstuff.com/2009/09/multitail-to-view-tail-f-output-of-multiple-log-files-in-one-terminal/" target="_blank" rel="noopener">3 Methods To View tail -f output of Multiple Log Files in One Terminal</a></p><h2 id="43-less"><a href="#43-less" class="headerlink" title="43. less"></a>43. less</h2><p>这个命名可以在不加载整个文件的前提下显示文件内容，在查看大型日志文件的时候这个命令会非常有用</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ less huge-log-file.log</code></pre></div></div><p>当你用less命令打开某个文件时，下面两个按键会给你带来很多帮助，他们用于向前和向后滚屏</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>CTRL+F – forward one windowCTRL+B – backward one window</code></pre></div></div><p>更多示例：<a href="http://www.thegeekstuff.com/2010/02/unix-less-command-10-tips-for-effective-navigation/" target="_blank" rel="noopener">Unix Less Command: 10 Tips for Effective Navigation</a></p><h2 id="44-su"><a href="#44-su" class="headerlink" title="44. su"></a>44. su</h2><p>su命令用于切换用户账号，超级用户使用这个命令可以切换到任何其他用户而不用输入密码</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ su - USERNAME</code></pre></div></div><p>用另外一个用户名执行一个命令下面的示例中用户john使用raj用户名执行ls命令，执行完后返回john的账号</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>[john@dev-server]$ su - raj -c 'ls'[john@dev-server]$</code></pre></div></div><p>用指定用户登录，并且使用指定的shell程序，而不用默认的</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ su -s 'SHELLNAME' USERNAME</code></pre></div></div><h2 id="45-mysql"><a href="#45-mysql" class="headerlink" title="45. mysql"></a>45. mysql</h2><p>mysql可能是Linux上使用最广泛的数据库，即使你没有在你的服务器上安装mysql，你也可以使用mysql客户端连接到远程的mysql服务器</p><p>连接一个远程数据库，需要输入密码</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ mysql -u root -p -h 192.168.1.2</code></pre></div></div><p>连接本地数据库</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ mysql -u root -p</code></pre></div></div><p>你也可以在命令行中输入数据库密码，只需要在-p后面加上密码作为参数，可以直接写在p后面而不用加空格</p><h2 id="46-yum"><a href="#46-yum" class="headerlink" title="46. yum"></a>46. yum</h2><p>使用yum安装apache</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ yum install httpd</code></pre></div></div><p>更新apache</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ yum update httpd</code></pre></div></div><p>卸载/删除apache</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ yum remove httpd</code></pre></div></div><h2 id="47-rpm"><a href="#47-rpm" class="headerlink" title="47. rpm"></a>47. rpm</h2><p>使用rpm安装apache</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code># rpm -ivh httpd-2.2.3-22.0.1.el5.i386.rpm</code></pre></div></div><p>更新apache</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code># rpm -uvh httpd-2.2.3-22.0.1.el5.i386.rpm</code></pre></div></div><p>卸载/删除apache</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code># rpm -ev httpd</code></pre></div></div><p>更多示例：<a href="http://www.thegeekstuff.com/2010/07/rpm-command-examples/" target="_blank" rel="noopener">RPM Command: 15 Examples to Install, Uninstall, Upgrade, Query RPM Packages</a></p><h2 id="48-ping"><a href="#48-ping" class="headerlink" title="48. ping"></a>48. ping</h2><p>ping一个远程主机，只发5个数据包</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ ping -c 5 gmail.com</code></pre></div></div><p>更多示例：<a href="http://www.thegeekstuff.com/2009/11/ping-tutorial-13-effective-ping-command-examples/" target="_blank" rel="noopener">Ping Tutorial: 15 Effective Ping Command Examples</a></p><h2 id="49-date"><a href="#49-date" class="headerlink" title="49. date"></a>49. date</h2><p>设置系统日期</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code># date -s "01/31/2010 23:59:53"</code></pre></div></div><p>当你修改了系统时间，你需要同步硬件时间和系统时间</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code># hwclock –systohc# hwclock --systohc –utc</code></pre></div></div><h2 id="50-wget"><a href="#50-wget" class="headerlink" title="50. wget"></a>50. wget</h2><p>使用wget从网上下载软件、音乐、视频</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ wget http://prdownloads.sourceforge.net/sourceforge/nagios/nagios-3.2.1.tar.gz</code></pre></div></div><p>下载文件并以指定的文件名保存文件</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ wget -O taglist.zip http://www.vim.org/scripts/download_script.php?src_id=7701</code></pre></div></div><p>更多示例：<a href="http://www.thegeekstuff.com/2009/09/the-ultimate-wget-download-guide-with-15-awesome-examples/" target="_blank" rel="noopener">The Ultimate Wget Download Guide With 15 Awesome Examples</a></p><div class="copy-right"><p>本文由 <a href="javascript:void(0);">王爵nice</a> 创作， 采用 <a href="https://creativecommons.org/licenses/by/4.0/deed.zh" target="_blank" rel="noopener">知识共享署名4.0</a> 国际许可协议进行许可。</p><p>本站文章除注明转载/出处外，均为本站原创或翻译，转载前请务必署名。</p></div></article></body></html>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 操作系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java8中的Stream，一行代码，让集合操作飞起来！</title>
      <link href="/2020/01/13/Java8%E4%B8%AD%E7%9A%84Stream%EF%BC%8C%E4%B8%80%E8%A1%8C%E4%BB%A3%E7%A0%81%EF%BC%8C%E8%AE%A9%E9%9B%86%E5%90%88%E6%93%8D%E4%BD%9C%E9%A3%9E%E8%B5%B7%E6%9D%A5%EF%BC%81/"/>
      <url>/2020/01/13/Java8%E4%B8%AD%E7%9A%84Stream%EF%BC%8C%E4%B8%80%E8%A1%8C%E4%BB%A3%E7%A0%81%EF%BC%8C%E8%AE%A9%E9%9B%86%E5%90%88%E6%93%8D%E4%BD%9C%E9%A3%9E%E8%B5%B7%E6%9D%A5%EF%BC%81/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>java8也出来好久了，接口默认方法，lambda表达式，函数式接口，Date API等特性还是有必要去了解一下。比如在项目中经常用到集合，遍历集合可以试下lambda表达式，经常还要对集合进行过滤和排序，Stream就派上用场了。用习惯了，不得不说真的很好用。</p><p>Stream作为java8的新特性，基于lambda表达式，是对集合对象功能的增强，它专注于对集合对象进行各种高效、便利的聚合操作或者大批量的数据操作，提高了编程效率和代码可读性。</p><p>Stream的原理：将要处理的元素看做一种流，流在管道中传输，并且可以在管道的节点上处理，包括过滤筛选、去重、排序、聚合等。元素流在管道中经过中间操作的处理，最后由最终操作得到前面处理的结果。</p><p>集合有两种方式生成流：</p><ul><li>stream() − 为集合创建串行流</li><li>parallelStream() - 为集合创建并行流</li></ul><p><a href="00A4764C88EB41819AAB9C696DCAF249" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="00A4764C88EB41819AAB9C696DCAF249" class="lazyload"></a></p><p>上图中是Stream类的类结构图，里面包含了大部分的中间和终止操作。</p><p>中间操作主要有以下方法（此类型方法返回的都是Stream）：map (mapToInt, flatMap 等)、 filter、 distinct、 sorted、 peek、 limit、 skip、 parallel、 sequential、 unordered</p><p>终止操作主要有以下方法：forEach、 forEachOrdered、 toArray、 reduce、 collect、 min、 max、 count、 anyMatch、 allMatch、 noneMatch、 findFirst、 findAny、 iterator</p><h2 id="举例说明"><a href="#举例说明" class="headerlink" title="举例说明"></a>举例说明</h2><p>首先为了说明Stream对对象集合的操作，新建一个Student类（学生类）,覆写了equals()和hashCode()方法</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span> </span>{}</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(Long id, String name, <span class="keyword">int</span> age, String address)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.address = address;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Student{"</span> +</span><br><span class="line">                <span class="string">"id="</span> + id +</span><br><span class="line">                <span class="string">", name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", age="</span> + age +</span><br><span class="line">                <span class="string">", address='"</span> + address + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">'}'</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span> == o) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="keyword">null</span> || getClass() != o.getClass()) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        Student student = (Student) o;</span><br><span class="line">        <span class="keyword">return</span> age == student.age &&</span><br><span class="line">                Objects.equals(id, student.id) &&</span><br><span class="line">                Objects.equals(name, student.name) &&</span><br><span class="line">                Objects.equals(address, student.address);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> Objects.hash(id, name, age, address);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><h3 id="filter（筛选）"><a href="#filter（筛选）" class="headerlink" title="filter（筛选）"></a>filter（筛选）</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String [] args)</span> </span>{</span><br><span class="line">    Student s1 = <span class="keyword">new</span> Student(<span class="number">1L</span>, <span class="string">"肖战"</span>, <span class="number">15</span>, <span class="string">"浙江"</span>);</span><br><span class="line">    Student s2 = <span class="keyword">new</span> Student(<span class="number">2L</span>, <span class="string">"王一博"</span>, <span class="number">15</span>, <span class="string">"湖北"</span>);</span><br><span class="line">    Student s3 = <span class="keyword">new</span> Student(<span class="number">3L</span>, <span class="string">"杨紫"</span>, <span class="number">17</span>, <span class="string">"北京"</span>);</span><br><span class="line">    Student s4 = <span class="keyword">new</span> Student(<span class="number">4L</span>, <span class="string">"李现"</span>, <span class="number">17</span>, <span class="string">"浙江"</span>);</span><br><span class="line">    List<student> students = <span class="keyword">new</span> ArrayList<>();</student></span><br><span class="line">    students.add(s1);</span><br><span class="line">    students.add(s2);</span><br><span class="line">    students.add(s3);</span><br><span class="line">    students.add(s4);</span><br><span class="line"></span><br><span class="line">    List<student> streamStudents = testFilter(students);</student></span><br><span class="line">    streamStudents.forEach(System.out::println);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 集合的筛选</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> students</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> List<student> <span class="title">testFilter</span><span class="params">(List<student> students)</student></span> </student></span>{</span><br><span class="line">    <span class="comment">//筛选年龄大于15岁的学生</span></span><br><span class="line"><span class="comment">//        return students.stream().filter(s -> s.getAge()>15).collect(Collectors.toList());</span></span><br><span class="line">    <span class="comment">//筛选住在浙江省的学生</span></span><br><span class="line">    <span class="keyword">return</span> students.stream().filter(s -><span class="string">"浙江"</span>.equals(s.getAddress())).collect(Collectors.toList());</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p>运行结果：<br><a href="064F89CEBBDC4437B44DD3125529A4DA" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="064F89CEBBDC4437B44DD3125529A4DA" class="lazyload"></a></p><p>这里我们创建了四个学生，经过filter的筛选，筛选出地址是浙江的学生集合。</p><h3 id="map-转换"><a href="#map-转换" class="headerlink" title="map(转换)"></a>map(转换)</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String [] args)</span> </span>{</span><br><span class="line">    Student s1 = <span class="keyword">new</span> Student(<span class="number">1L</span>, <span class="string">"肖战"</span>, <span class="number">15</span>, <span class="string">"浙江"</span>);</span><br><span class="line">    Student s2 = <span class="keyword">new</span> Student(<span class="number">2L</span>, <span class="string">"王一博"</span>, <span class="number">15</span>, <span class="string">"湖北"</span>);</span><br><span class="line">    Student s3 = <span class="keyword">new</span> Student(<span class="number">3L</span>, <span class="string">"杨紫"</span>, <span class="number">17</span>, <span class="string">"北京"</span>);</span><br><span class="line">    Student s4 = <span class="keyword">new</span> Student(<span class="number">4L</span>, <span class="string">"李现"</span>, <span class="number">17</span>, <span class="string">"浙江"</span>);</span><br><span class="line">    List<student> students = <span class="keyword">new</span> ArrayList<>();</student></span><br><span class="line">    students.add(s1);</span><br><span class="line">    students.add(s2);</span><br><span class="line">    students.add(s3);</span><br><span class="line">    students.add(s4);</span><br><span class="line"></span><br><span class="line">    testMap(students);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 集合转换</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> students</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testMap</span><span class="params">(List<student> students)</student></span> </span>{</span><br><span class="line">    <span class="comment">//在地址前面加上部分信息，只获取地址输出</span></span><br><span class="line">    List<string> addresses = students.stream().map(s -><span class="string">"住址:"</span>+s.getAddress()).collect(Collectors.toList());</string></span><br><span class="line">    addresses.forEach(a ->System.out.println(a));</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p>运行结果</p><p><a href="6D2F8F77F11549D1967417EB622A3D8A" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="6D2F8F77F11549D1967417EB622A3D8A" class="lazyload"></a></p><p>map就是将对应的元素按照给定的方法进行转换。</p><h3 id="distinct-去重"><a href="#distinct-去重" class="headerlink" title="distinct(去重)"></a>distinct(去重)</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String [] args) {</span><br><span class="line">  testDistinct1();</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 集合去重（基本类型）</span><br><span class="line"> */</span><br><span class="line">private static void testDistinct1() {</span><br><span class="line">    //简单字符串的去重</span><br><span class="line">    List<string> list = Arrays.asList("111","222","333","111","222");</string></span><br><span class="line">    list.stream().distinct().forEach(System.out::println);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p>运行结果：<br><a href="F06DD4734C914CD29A6E1A270DE26D6B" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="F06DD4734C914CD29A6E1A270DE26D6B" class="lazyload"></a></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String [] args) {</span><br><span class="line">  testDistinct2();</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 集合去重（引用对象）</span><br><span class="line"> */</span><br><span class="line">private static void testDistinct2() {</span><br><span class="line">    //引用对象的去重，引用对象要实现hashCode和equal方法，否则去重无效</span><br><span class="line">    Student s1 = new Student(1L, "肖战", 15, "浙江");</span><br><span class="line">    Student s2 = new Student(2L, "王一博", 15, "湖北");</span><br><span class="line">    Student s3 = new Student(3L, "杨紫", 17, "北京");</span><br><span class="line">    Student s4 = new Student(4L, "李现", 17, "浙江");</span><br><span class="line">    Student s5 = new Student(1L, "肖战", 15, "浙江");</span><br><span class="line">    List<student> students = new ArrayList<>();</student></span><br><span class="line">    students.add(s1);</span><br><span class="line">    students.add(s2);</span><br><span class="line">    students.add(s3);</span><br><span class="line">    students.add(s4);</span><br><span class="line">    students.add(s5);</span><br><span class="line">    students.stream().distinct().forEach(System.out::println);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p>运行结果：</p><p><a href="C11539ADDC1E430F8ED438AE06020BE2" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="C11539ADDC1E430F8ED438AE06020BE2" class="lazyload"></a></p><p>可以看出，两个重复的“肖战”同学进行了去重，这不仅因为使用了distinct()方法，而且因为Student对象重写了equals和hashCode()方法，否则去重是无效的。</p><h3 id="sorted-排序"><a href="#sorted-排序" class="headerlink" title="sorted(排序)"></a>sorted(排序)</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String [] args) {</span><br><span class="line">    testSort1();</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 集合排序（默认排序）</span><br><span class="line"> */</span><br><span class="line">private static void testSort1() {</span><br><span class="line">    List<string> list = Arrays.asList("333","222","111");</string></span><br><span class="line">    list.stream().sorted().forEach(System.out::println);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p>运行结果：</p><p><a href="9A7919666C0F47CE9E5BD3EB8E9290C0" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="9A7919666C0F47CE9E5BD3EB8E9290C0" class="lazyload"></a></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String [] args) {</span><br><span class="line">    testSort2();</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 集合排序（指定排序规则）</span><br><span class="line"> */</span><br><span class="line">private static void testSort2() {</span><br><span class="line">    Student s1 = new Student(1L, "肖战", 15, "浙江");</span><br><span class="line">    Student s2 = new Student(2L, "王一博", 15, "湖北");</span><br><span class="line">    Student s3 = new Student(3L, "杨紫", 17, "北京");</span><br><span class="line">    Student s4 = new Student(4L, "李现", 17, "浙江");</span><br><span class="line">    List<student> students = new ArrayList<>();</student></span><br><span class="line">    students.add(s1);</span><br><span class="line">    students.add(s2);</span><br><span class="line">    students.add(s3);</span><br><span class="line">    students.add(s4);</span><br><span class="line">    students.stream()</span><br><span class="line">            .sorted((stu1,stu2) ->Long.compare(stu2.getId(), stu1.getId()))</span><br><span class="line">            .sorted((stu1,stu2) -> Integer.compare(stu2.getAge(),stu1.getAge()))</span><br><span class="line">            .forEach(System.out::println);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p>运行结果：</p><p><a href="81C4A1F144444D94A87D790C4D5AD75D" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="81C4A1F144444D94A87D790C4D5AD75D" class="lazyload"></a></p><p>上面指定排序规则，先按照学生的id进行降序排序，再按照年龄进行降序排序</p><h3 id="limit（限制返回个数）"><a href="#limit（限制返回个数）" class="headerlink" title="limit（限制返回个数）"></a>limit（限制返回个数）</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String [] args) {</span><br><span class="line">    testLimit();</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 集合limit，返回前几个元素</span><br><span class="line"> */</span><br><span class="line">private static void testLimit() {</span><br><span class="line">    List<string> list = Arrays.asList("333","222","111");</string></span><br><span class="line">    list.stream().limit(2).forEach(System.out::println);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p>运行结果：</p><p><a href="19C0E0221FDE405D8E0ED0CCA3E6BF58" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="19C0E0221FDE405D8E0ED0CCA3E6BF58" class="lazyload"></a></p><h3 id="skip-删除元素"><a href="#skip-删除元素" class="headerlink" title="skip(删除元素)"></a>skip(删除元素)</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String [] args) {</span><br><span class="line">    testSkip();</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 集合skip，删除前n个元素</span><br><span class="line"> */</span><br><span class="line">private static void testSkip() {</span><br><span class="line">    List<string> list = Arrays.asList("333","222","111");</string></span><br><span class="line">    list.stream().skip(2).forEach(System.out::println);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p>运行结果：</p><p><a href="D06818C8704B4C80AEA807013CCBBA9F" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="D06818C8704B4C80AEA807013CCBBA9F" class="lazyload"></a></p><h3 id="reduce-聚合"><a href="#reduce-聚合" class="headerlink" title="reduce(聚合)"></a>reduce(聚合)</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String [] args) {</span><br><span class="line">    testReduce();</span><br><span class="line">}</span><br><span class="line">/**</span><br><span class="line"> * 集合reduce,将集合中每个元素聚合成一条数据</span><br><span class="line"> */</span><br><span class="line">private static void testReduce() {</span><br><span class="line">    List<string> list = Arrays.asList("欢","迎","你");</string></span><br><span class="line">    String appendStr = list.stream().reduce("北京",(a,b) -> a+b);</span><br><span class="line">    System.out.println(appendStr);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p>运行结果：</p><p><a href="A9E5293DA8754B658839A11CBB609BEF" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="A9E5293DA8754B658839A11CBB609BEF" class="lazyload"></a></p><h3 id="min-求最小值"><a href="#min-求最小值" class="headerlink" title="min(求最小值)"></a>min(求最小值)</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String [] args) {</span><br><span class="line">    testMin();</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 求集合中元素的最小值</span><br><span class="line"> */</span><br><span class="line">private static void testMin() {</span><br><span class="line">    Student s1 = new Student(1L, "肖战", 14, "浙江");</span><br><span class="line">    Student s2 = new Student(2L, "王一博", 15, "湖北");</span><br><span class="line">    Student s3 = new Student(3L, "杨紫", 17, "北京");</span><br><span class="line">    Student s4 = new Student(4L, "李现", 17, "浙江");</span><br><span class="line">    List<student> students = new ArrayList<>();</student></span><br><span class="line">    students.add(s1);</span><br><span class="line">    students.add(s2);</span><br><span class="line">    students.add(s3);</span><br><span class="line">    students.add(s4);</span><br><span class="line">    Student minS = students.stream().min((stu1,stu2) ->Integer.compare(stu1.getAge(),stu2.getAge())).get();</span><br><span class="line">    System.out.println(minS.toString());</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p>运行结果：</p><p><a href="D7E4271D589941F99438A5D5A63FF2D3" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="D7E4271D589941F99438A5D5A63FF2D3" class="lazyload"></a><br>上面是求所有学生中年龄最小的一个，max同理，求最大值。</p><h3 id="anyMatch-allMatch-noneMatch（匹配）"><a href="#anyMatch-allMatch-noneMatch（匹配）" class="headerlink" title="anyMatch/allMatch/noneMatch（匹配）"></a>anyMatch/allMatch/noneMatch（匹配）</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String [] args) {</span><br><span class="line">    testMatch();</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">private static void testMatch() {</span><br><span class="line">    Student s1 = new Student(1L, "肖战", 15, "浙江");</span><br><span class="line">    Student s2 = new Student(2L, "王一博", 15, "湖北");</span><br><span class="line">    Student s3 = new Student(3L, "杨紫", 17, "北京");</span><br><span class="line">    Student s4 = new Student(4L, "李现", 17, "浙江");</span><br><span class="line">    List<student> students = new ArrayList<>();</student></span><br><span class="line">    students.add(s1);</span><br><span class="line">    students.add(s2);</span><br><span class="line">    students.add(s3);</span><br><span class="line">    students.add(s4);</span><br><span class="line">    Boolean anyMatch = students.stream().anyMatch(s ->"湖北".equals(s.getAddress()));</span><br><span class="line">    if (anyMatch) {</span><br><span class="line">        System.out.println("有湖北人");</span><br><span class="line">    }</span><br><span class="line">    Boolean allMatch = students.stream().allMatch(s -> s.getAge()>=15);</span><br><span class="line">    if (allMatch) {</span><br><span class="line">        System.out.println("所有学生都满15周岁");</span><br><span class="line">    }</span><br><span class="line">    Boolean noneMatch = students.stream().noneMatch(s -> "杨洋".equals(s.getName()));</span><br><span class="line">    if (noneMatch) {</span><br><span class="line">        System.out.println("没有叫杨洋的同学");</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p>运行结果：</p><p><a href="B0478494832B4B2B8A4DAB6D063E4448" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="B0478494832B4B2B8A4DAB6D063E4448" class="lazyload"></a></p><p>anyMatch：Stream 中任意一个元素符合传入的 predicate，返回 true</p><p>allMatch：Stream 中全部元素符合传入的 predicate，返回 true</p><p>noneMatch：Stream 中没有一个元素符合传入的 predicate，返回 true</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>上面介绍了Stream常用的一些方法，虽然对集合的遍历和操作可以用以前常规的方式，但是当业务逻辑复杂的时候，你会发现代码量很多，可读性很差，明明一行代码解决的事情，你却写了好几行。试试lambda表达式，试试Stream，你会有不一样的体验。</p></body></html>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> lambda </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> lambda </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Scala面向对象编程之对象</title>
      <link href="/2019/09/27/Scala%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%E4%B9%8B%E5%AF%B9%E8%B1%A1/"/>
      <url>/2019/09/27/Scala%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%E4%B9%8B%E5%AF%B9%E8%B1%A1/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><h2 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h2><h3 id="Scala中的object"><a href="#Scala中的object" class="headerlink" title="Scala中的object"></a>Scala中的object</h3><p>object 相当于 class 的单个实例，通常在里面放一些静态的 field 或者 method；</p><p>在Scala中没有静态方法和静态字段，但是可以使用object这个语法结构来达到同样的目的。</p><p>object作用：</p><ul><li>存放工具方法和常量</li><li>高效共享单个不可变的实例</li><li>单例模式</li></ul><p>举例说明：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yi.clasz</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Session</span> </span>{}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">SessionFactory</span></span>{</span><br><span class="line">  <span class="comment">//该部分相当于java中的静态块</span></span><br><span class="line">  <span class="keyword">val</span> session = <span class="keyword">new</span> <span class="type">Session</span>()</span><br><span class="line"></span><br><span class="line">  <span class="comment">//在object中的方法相当于java中的静态方法</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">getSession</span></span>(): <span class="type">Session</span> ={</span><br><span class="line">    session</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">SessionDemo</span></span>{</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = {</span><br><span class="line">    <span class="comment">//单例对象，不需要new，用【单例对象名称.方法】调用对象中的方法</span></span><br><span class="line">    <span class="keyword">val</span> session1 = <span class="type">SessionFactory</span>.getSession()</span><br><span class="line">    <span class="keyword">val</span> session2 = <span class="type">SessionFactory</span>.getSession()</span><br><span class="line">    </span><br><span class="line">    println(session1)</span><br><span class="line">    println(session2)</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p><strong>结果</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">com.yi.clasz.Session@2be94b0f</span><br><span class="line">com.yi.clasz.Session@2be94b0f</span><br></pre></td></tr></tbody></table></figure></div><h3 id="Scala中的伴生对象"><a href="#Scala中的伴生对象" class="headerlink" title="Scala中的伴生对象"></a>Scala中的伴生对象</h3><p>如果有一个class文件，还有一个与class同名的object文件，那么就称这个object是class的伴生对象，class是object的伴生类。</p><ul><li>伴生类和伴生对象必须存放在一个.scala文件中；</li><li>伴生类和伴生对象的最大特点是，可以相互访问；</li></ul><p>举例说明：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yi.clasz</span><br><span class="line"></span><br><span class="line"><span class="comment">// 伴生类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dao</span> </span>{</span><br><span class="line">  <span class="keyword">val</span> id = <span class="number">1</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">var</span> name = <span class="string">"旺财"</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">printName</span></span>(): <span class="type">Unit</span> = {</span><br><span class="line">    <span class="comment">// 在Dao类中可以访问伴生类对象的的私有属性</span></span><br><span class="line">    println(<span class="type">Dao</span>.<span class="type">COUSTANT</span> + name)</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 伴生对象</span></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Dao</span> </span>{</span><br><span class="line">  <span class="comment">// 伴生对象中的私有属性</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">val</span> <span class="type">COUSTANT</span> = <span class="string">"汪汪汪。。。"</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = {</span><br><span class="line">    <span class="keyword">val</span> p = <span class="keyword">new</span> <span class="type">Dao</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 访问伴生类的私有属性</span></span><br><span class="line">    p.name = <span class="string">"大旺财"</span></span><br><span class="line">    p.printName()</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p><strong>结果</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">汪汪汪。。。大旺财</span><br></pre></td></tr></tbody></table></figure></div><h3 id="Scala中的apply方法"><a href="#Scala中的apply方法" class="headerlink" title="Scala中的apply方法"></a>Scala中的apply方法</h3><ul><li>object 中非常重要的一个特殊方法，就是apply方法；</li><li>apply方法通常是在伴生对象中实现的，其目的是，通过伴生类的构造函数功能，来实现伴生对象的构造函数功能；</li><li>通常我们会在类的伴生对象中定义apply方法，当遇到类名(参数1,…参数n)时apply方法会被调用；//ctrl+n</li><li>在创建伴生对象或伴生类的对象时，通常不会使用new class/class() 的方式，而是直接使用 class()，隐式的调用伴生对象的 apply 方法，这样会让对象创建的更加简洁；</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通过伴生类的构造函数功能，来实现伴生对象的构造函数功能</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">ApplyApp</span> </span>{</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = {</span><br><span class="line">    <span class="keyword">val</span> ap = <span class="keyword">new</span> <span class="type">ApplyTest</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (_ <- <span class="number">1.</span>to(<span class="number">10</span>)){</span><br><span class="line">      <span class="type">ApplyTest</span>.incr1()</span><br><span class="line">      ap.incr2()</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    println(<span class="type">ApplyTest</span>.count1)</span><br><span class="line">    println(ap.count2)</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * class是object的伴生类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">ApplyTest</span> </span>{</span><br><span class="line">  <span class="keyword">var</span> count1 = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">incr1</span></span>(): <span class="type">Unit</span> ={</span><br><span class="line">    count1 += <span class="number">1</span></span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * object是class的伴生对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ApplyTest</span></span>{</span><br><span class="line">  <span class="keyword">var</span> count2 = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">incr2</span></span>(): <span class="type">Unit</span> ={</span><br><span class="line">    count2 += <span class="number">1</span></span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p><strong>结果</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">10</span><br><span class="line">10</span><br></pre></td></tr></tbody></table></figure></div></body></html>]]></content>
      
      
      <categories>
          
          <category> Scala </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Scala </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Scala面向对象编程之继承</title>
      <link href="/2019/09/27/Scala%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%E4%B9%8B%E7%BB%A7%E6%89%BF/"/>
      <url>/2019/09/27/Scala%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%E4%B9%8B%E7%BB%A7%E6%89%BF/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><h2 id="Scala面向对象编程之继承"><a href="#Scala面向对象编程之继承" class="headerlink" title="Scala面向对象编程之继承"></a>Scala面向对象编程之继承</h2><h2 id="Scala中继承-extends-的概念"><a href="#Scala中继承-extends-的概念" class="headerlink" title="Scala中继承(extends)的概念"></a>Scala中继承(extends)的概念</h2><ul><li>Scala 中，让子类继承父类，与 Java 一样，也是使用 extends 关键字；</li><li>继承就代表，子类可继承父类的 field 和 method，然后子类还可以在自己的内部实现父类没有的，子类特有的 field 和method，使用继承可以有效复用代码；</li><li>子类可以覆盖父类的 field 和 method，但是如果父类用 final 修饰，或者 field 和 method 用 final 修饰，则该类是无法被继承的，或者 field 和 method 是无法被覆盖的。</li><li>rivate 修饰的 field 和 method 不可以被子类继承，只能在类的内部使用；</li><li>field 必须要被定义成 val 的形式才能被继承，并且还要使用 override 关键字。 因为 var 修饰的 field 是可变的，在子类中可直接引用被赋值，不需要被继承；即 val 修饰的才允许被继承，var 修饰的只允许被引用。继承就是改变、覆盖的意思。</li><li>Java 中的访问控制权限，同样适用于 Scala</li></ul><table><thead><tr><th>header 1</th><th>header 2</th></tr></thead><tbody><tr><td>row 1 col 1</td><td>row 1 col 2</td></tr><tr><td>row 2 col 1</td><td>row 2 col 2</td></tr></tbody></table><table><thead><tr><th>关键字</th><th>类内部</th><th>本包</th><th>子类</th><th>外部包</th></tr></thead><tbody><tr><td>public</td><td>√</td><td>√</td><td>√</td><td>√</td></tr><tr><td>protected</td><td>√</td><td>√</td><td>√</td><td>×</td></tr><tr><td>default</td><td>√</td><td>√</td><td>×</td><td>×</td></tr><tr><td>private</td><td>√</td><td>×</td><td>×</td><td>×</td></tr></tbody></table><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yi.clasz</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>{</span><br><span class="line">  <span class="keyword">val</span> name=<span class="string">"super"</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">getName=this</span>.<span class="title">name</span></span></span><br><span class="line"><span class="function">}</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">class</span> <span class="title">Student</span> <span class="title">extends</span> <span class="title">Person</span> </span>{</span><br><span class="line">  <span class="comment">//继承加上关键字</span></span><br><span class="line">  <span class="keyword">override</span></span><br><span class="line">  <span class="keyword">val</span> name=<span class="string">"sub"</span></span><br><span class="line">  <span class="comment">//子类可以定义自己的field和method</span></span><br><span class="line">  <span class="keyword">val</span> score=<span class="string">"A"</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">getScore=this</span>.<span class="title">score</span></span></span><br><span class="line"><span class="function">}</span></span><br></pre></td></tr></tbody></table></figure></div><h3 id="Scala中override-和-super-关键字"><a href="#Scala中override-和-super-关键字" class="headerlink" title="Scala中override 和 super 关键字"></a>Scala中override 和 super 关键字</h3><ul><li>Scala中，如果子类要覆盖父类中的一个非抽象方法，必须要使用 override 关键字；子类可以覆盖父类的 val 修饰的field，只要在子类中使用 override 关键字即可。</li><li>override 关键字可以帮助开发者尽早的发现代码中的错误，比如， override 修饰的父类方法的方法名拼写错误。</li><li>此外，在子类覆盖父类方法后，如果在子类中要调用父类中被覆盖的方法，则必须要使用 super 关键字，显示的指出要调用的父类方法。</li></ul><p>举例说明：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>{</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">val</span> name=<span class="string">"校花"</span></span><br><span class="line">  <span class="keyword">val</span> age = <span class="number">18</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">getName=this</span>.<span class="title">name</span></span></span><br><span class="line"><span class="function">}</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">class</span> <span class="title">Student</span> <span class="title">extends</span> <span class="title">Person</span> </span>{</span><br><span class="line">  <span class="comment">// 子类可以定义自己的field和method</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">val</span> score = <span class="string">"A"</span></span><br><span class="line">  <span class="comment">//继承加上关键字,覆盖父类</span></span><br><span class="line">  <span class="keyword">override</span></span><br><span class="line">  <span class="keyword">val</span> age=<span class="number">19</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">getScore=this</span>.<span class="title">score</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">  <span class="title">//</span> <span class="title">覆盖父类非抽象方法，必须要使用override关键字</span></span></span><br><span class="line"><span class="function">  <span class="title">//</span> <span class="title">同时调用父类的方法，使用super关键字</span></span></span><br><span class="line"><span class="function">  <span class="title">override</span> <span class="title">def</span> <span class="title">getName</span></span>: <span class="type">String</span> = <span class="string">"你的名字："</span> + <span class="keyword">super</span>.getName</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><h3 id="Scala中isInstanceOf-和-asInstanceOf"><a href="#Scala中isInstanceOf-和-asInstanceOf" class="headerlink" title="Scala中isInstanceOf 和 asInstanceOf"></a>Scala中isInstanceOf 和 asInstanceOf</h3><p>如果实例化了子类的对象，但是将其赋予了父类类型的变量，在后续的过程中，又需要将父类类型的变量转换为子类类型的变量，应该如何做？</p><ul><li>首先，需要使用 isInstanceOf 判断对象是否为指定类的对象，如果是的话，则可以使用 asInstanceOf 将对象转换为指定类型；</li><li>注意： p.isInstanceOf[XX] 判断 p 是否为 XX 对象的实例；p.asInstanceOf[XX] 把 p 转换成 XX 对象的实例</li><li>注意：如果没有用 isInstanceOf 先判断对象是否为指定类的实例，就直接用 asInstanceOf 转换，则可能会抛出异常；</li><li>注意：如果对象是 null，则 isInstanceOf 一定返回 false， asInstanceOf 一定返回 null；</li><li>Scala与Java类型检查和转换</li></ul><table><thead><tr><th>Scala</th><th>Java</th></tr></thead><tbody><tr><td>obj.isInstanceOf[C]</td><td>obj instanceof C</td></tr><tr><td>obj.asInstanceOf[C]</td><td>(C)obj</td></tr><tr><td>classOf[C]</td><td>C.class</td></tr></tbody></table><p>举例说明：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yi.clasz</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Persion3</span> </span>{}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student3</span> <span class="keyword">extends</span> <span class="title">Persion3</span></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">object</span> <span class="title">Student3</span> </span>{</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = {</span><br><span class="line">    <span class="keyword">val</span> p: <span class="type">Persion3</span> = <span class="keyword">new</span> <span class="type">Student3</span></span><br><span class="line">    <span class="keyword">var</span> s: <span class="type">Persion3</span> = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果对象是null，则isInstanceOf一定返回false</span></span><br><span class="line">    println(s.isInstanceOf[<span class="type">Student3</span>])</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断 p 是否为Student3对象实例</span></span><br><span class="line">    <span class="keyword">if</span> (p.isInstanceOf[<span class="type">Student3</span>]) {</span><br><span class="line">      <span class="comment">// 把p转换为Student3对象实例</span></span><br><span class="line">      s = p.asInstanceOf[<span class="type">Student3</span>]</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    println(s.isInstanceOf[<span class="type">Student3</span>])</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p><strong>结果</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">false</span><br><span class="line">true</span><br></pre></td></tr></tbody></table></figure></div><h3 id="Scala中getClass-和-classOf"><a href="#Scala中getClass-和-classOf" class="headerlink" title="Scala中getClass 和 classOf"></a>Scala中getClass 和 classOf</h3><ul><li>sInstanceOf 只能判断出对象是否为指定类以及其子类的对象，而不能精确的判断出，对象就是指定类的对象；</li><li>如果要求精确地判断出对象就是指定类的对象，那么就只能使用 getClass 和 classOf 了；</li><li>p.getClass 可以精确地获取对象的类，classOf[XX] 可以精确的获取类，然后使用 == 操作符即可判断；</li></ul><p>举例说明：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yi.clasz</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person4</span> </span>{}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student4</span> <span class="keyword">extends</span> <span class="title">Person4</span> </span>{}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Student4</span> </span>{</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = {</span><br><span class="line">    <span class="keyword">val</span> p: <span class="type">Person4</span> = <span class="keyword">new</span> <span class="type">Student4</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//判断p是否为Student4类的实例</span></span><br><span class="line">    println(p.isInstanceOf[<span class="type">Person4</span>])</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断p的类型是否为Persion4类</span></span><br><span class="line">    println(p.getClass == classOf[<span class="type">Person4</span>])</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断p的类型是否为Student4类</span></span><br><span class="line">    println(p.getClass == classOf[<span class="type">Student4</span>])</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p><strong>结果</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">true</span><br><span class="line">false</span><br><span class="line">true</span><br></pre></td></tr></tbody></table></figure></div><h3 id="Scala中使用模式匹配进行类型判断"><a href="#Scala中使用模式匹配进行类型判断" class="headerlink" title="Scala中使用模式匹配进行类型判断"></a>Scala中使用模式匹配进行类型判断</h3><ul><li>在实际的开发中，比如 spark 源码中，大量的地方使用了模式匹配的语法进行类型的判断，这种方式更加地简洁明了，而且代码的可维护性和可扩展性也非常高；</li><li>使用模式匹配，功能性上来说，与 isInstanceOf 的作用一样，主要判断是否为该类或其子类的对象即可，不是精准判断。如果想要精准的判断使用getClass 和 classOf来判断</li><li>等同于 Java 中的 switch case 语法；</li></ul><p>举例说明：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">package com.yi.clasz</span><br><span class="line"></span><br><span class="line">class Persion5 {}</span><br><span class="line"></span><br><span class="line">class Student5 extends Persion5</span><br><span class="line"></span><br><span class="line">object Student5 {</span><br><span class="line">  def main(args: Array[String]): Unit = {</span><br><span class="line">    val p: Student5 = new Student5</span><br><span class="line"></span><br><span class="line">    p match {</span><br><span class="line">      // 匹配是否为Person5类或其子类对象</span><br><span class="line">      case _: Persion5 => println("This id a Person5")</span><br><span class="line">      // 匹配剩余情况</span><br><span class="line">      case _ => println("Unknown type!")</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p><strong>结果</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">This id a Person5</span><br></pre></td></tr></tbody></table></figure></div><h3 id="Scala中protected"><a href="#Scala中protected" class="headerlink" title="Scala中protected"></a>Scala中protected</h3><ul><li>跟 Java 一样，Scala 中同样可使用 protected 关键字来修饰 field 和 method。在子类中，可直接访问父类的 field 和 method，而不需要使用 super 关键字；</li><li>还可以使用 protected[this] 关键字， 访问权限的保护范围：只允许在当前子类中访问父类的 field 和 method，不允许通过其他子类对象访问父类的 field 和 method。</li></ul><p>举例说明：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">package com.yi.clasz</span><br><span class="line"></span><br><span class="line">class Person6 {</span><br><span class="line">  protected var name:String = "美女"</span><br><span class="line"></span><br><span class="line">  protected[this] var hobby:String = "game"</span><br><span class="line"></span><br><span class="line">  protected def sayBye = println("嘿嘿嘿。。。")</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">class Student6 extends Person6{</span><br><span class="line">  // 父类使用protected关键字来修饰 field可以直接访问</span><br><span class="line">  def satHello = println("嘿嘿嘿 " + name)</span><br><span class="line"></span><br><span class="line">  // 父类使用protected关键字来修饰method可以直接访问</span><br><span class="line">  def sayByeBye = sayBye</span><br><span class="line"></span><br><span class="line">  def makeFiends(s:Student6)={</span><br><span class="line">    println("My hobby is" + hobby)</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">object Student6{</span><br><span class="line">  def main(args: Array[String]): Unit = {</span><br><span class="line">    val s:Student6 = new Student6</span><br><span class="line"></span><br><span class="line">    s.satHello</span><br><span class="line">    s.sayByeBye</span><br><span class="line">    s.makeFiends(s)</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p><strong>结果</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">嘿嘿嘿 美女</span><br><span class="line">嘿嘿嘿。。。</span><br><span class="line">My hobby is 你懂得</span><br></pre></td></tr></tbody></table></figure></div><h3 id="Scala中调用父类的constructor"><a href="#Scala中调用父类的constructor" class="headerlink" title="Scala中调用父类的constructor"></a>Scala中调用父类的constructor</h3><ul><li>cala中，每个类都可以有一个主constructor和任意多个辅助constructor，而且每个辅助constructor的第一行都必须调用其他辅助constructor或者主constructor代码；因此子类的辅助constructor是一定不可能直接调用父类的constructor的；</li><li>只能在子类的主constructor中调用父类的constructor。</li><li>如果父类的构造函数已经定义过的 field，比如name和age，子类再使用时，就不要用 val 或 var 来修饰了，否则会被认为，子类要覆盖父类的field，且要求一定要使用 override 关键字。</li></ul><p>举例说明：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">package com.yi.clasz</span><br><span class="line"></span><br><span class="line">class Person7(val name:String, val age:Int) {</span><br><span class="line">  var score: Double = 3.0</span><br><span class="line">  var address:String = "北京"</span><br><span class="line">  </span><br><span class="line">  def this(name:String, score:Double)={</span><br><span class="line">    // 每个辅助的constructor的第一行都必须调用其他的辅助constructor或者主constructor代码</span><br><span class="line">    </span><br><span class="line">    // 主constructor代码</span><br><span class="line">    this(name, 18)</span><br><span class="line">    this.score = score</span><br><span class="line">  }</span><br><span class="line">  </span><br><span class="line">  // 辅助constructor</span><br><span class="line">  def this(name:String, address:String)={</span><br><span class="line">    this(name, 100.0)</span><br><span class="line">    this.address = address</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">class Student7(name:String,score:Double) extends Person7(name, score)</span><br></pre></td></tr></tbody></table></figure></div></body></html>]]></content>
      
      
      <categories>
          
          <category> Scala </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Scala </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>类</title>
      <link href="/2019/09/26/%E7%B1%BB/"/>
      <url>/2019/09/26/%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><h2 id="类"><a href="#类" class="headerlink" title="类"></a>类</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 在Scala中，类并不用声明为public类型的。</span></span><br><span class="line"><span class="comment">* Scala源文件中可以包含多个类，所有这些类都具有共有可见性。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>{</span><br><span class="line">  <span class="comment">//用val修饰的变量是可读属性，有getter但没有setter（相当与Java中用final修饰的变量）</span></span><br><span class="line">  <span class="keyword">val</span> id=<span class="string">"9527"</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//用var修饰的变量都既有getter，又有setter</span></span><br><span class="line">  <span class="keyword">var</span> age:<span class="type">Int</span>=<span class="number">18</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//类私有字段，只能在类的内部使用或者伴生对象中访问</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">var</span> name : <span class="type">String</span> = <span class="string">"唐伯虎"</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//类私有字段，访问权限更加严格的，该字段在当前类中被访问</span></span><br><span class="line">  <span class="comment">//在伴生对象里面也不可以访问</span></span><br><span class="line">  <span class="keyword">private</span>[<span class="keyword">this</span>] <span class="keyword">var</span> pet = <span class="string">"小强"</span></span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//伴生对象（这个名字和类名相同，叫伴生对象）</span></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Person</span></span>{</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = {</span><br><span class="line">    <span class="keyword">val</span> p=<span class="keyword">new</span> <span class="type">Person</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//如果是下面的修改，发现下面有红线，说明val类型的不支持重新赋值，但是可以获取到值</span></span><br><span class="line">    <span class="comment">//p.id = "123"</span></span><br><span class="line">    println(p.id)</span><br><span class="line">    <span class="comment">//打印age</span></span><br><span class="line">    println(p.age)</span><br><span class="line">    <span class="comment">//打印name,伴生对象中可以在访问private变量</span></span><br><span class="line">    println(p.name)</span><br><span class="line">    <span class="comment">//由于pet字段用private[this]修饰，伴生对象中访问不到pet变量</span></span><br><span class="line">    <span class="comment">//p.pet(访问不到)</span></span><br><span class="line"></span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><h3 id="构造器"><a href="#构造器" class="headerlink" title="构造器"></a>构造器</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">class People() {</span><br><span class="line">  // 定义属性 _ 是占位符</span><br><span class="line">  var name: String = _</span><br><span class="line">  var age: Int = _</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  // 附属构造器</span><br><span class="line">  def this(name: String, age: Int){</span><br><span class="line">    // 第一步必须调用主构造器</span><br><span class="line">    this()</span><br><span class="line"></span><br><span class="line">    // 执行附属构造器</span><br><span class="line">    this.age = age</span><br><span class="line">    this.name = name</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  // 定义方法</span><br><span class="line"></span><br><span class="line">  def eat(): Unit ={</span><br><span class="line">    println(age + " 岁的 " + name + " 在吃饭！！！")</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">object People{</span><br><span class="line">  def main(args: Array[String]): Unit = {</span><br><span class="line">    val people = new People("张三", 18)</span><br><span class="line">    people.eat()</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p><strong>结果</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">18 岁的 张三 在吃饭！！！</span><br></pre></td></tr></tbody></table></figure></div></body></html>]]></content>
      
      
      <categories>
          
          <category> Scala </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Scala </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>集合 List、Set、Map</title>
      <link href="/2019/09/26/%E9%9B%86%E5%90%88%20List%E3%80%81Set%E3%80%81Map/"/>
      <url>/2019/09/26/%E9%9B%86%E5%90%88%20List%E3%80%81Set%E3%80%81Map/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><h2 id="List"><a href="#List" class="headerlink" title="List"></a>List</h2><p>在Scala中列表要么为空（Nil表示空列表），要么是一个head元素加上一个tail列表。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">ListApp</span> </span>{</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = {</span><br><span class="line">    <span class="keyword">val</span> list1 = <span class="type">List</span>(<span class="string">"Hello"</span>, <span class="string">"Scala"</span>, <span class="string">"Hadoop"</span>)</span><br><span class="line">    println(list1)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> list2 = <span class="string">"Spark"</span> :: <span class="string">"Storm"</span> :: <span class="string">"Kylin"</span> :: <span class="string">"Scala"</span> :: <span class="type">Nil</span></span><br><span class="line">    println(list2)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> list3 = scala.collection.mutable.<span class="type">ListBuffer</span>[<span class="type">String</span>]()</span><br><span class="line">    <span class="comment">// 判断list是否为空</span></span><br><span class="line">    <span class="keyword">if</span> (list3.isEmpty){</span><br><span class="line">      println(<span class="string">"我是空"</span>)</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    list3 ++= list1</span><br><span class="line">    list3 += <span class="string">"Hadoop"</span></span><br><span class="line">    println(list3 + <span class="string">" 长度："</span> + list3.size)</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p><strong>结果</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">List(Hello, Scala, Hadoop)</span><br><span class="line">List(Spark, Storm, Kylin, Scala)</span><br><span class="line">我是空</span><br><span class="line">ListBuffer(Hello, Scala, Hadoop, Hadoop) 长度：4</span><br></pre></td></tr></tbody></table></figure></div><h2 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h2><p>Set代表一个没有重复元素的集合；将重复元素加入Set是没有用的，而且 Set 是不保证插入顺序的，即 Set 中的元素是乱序的。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">SetApp</span> </span>{</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = {</span><br><span class="line">    <span class="keyword">var</span> set1 = <span class="type">Set</span>(<span class="number">2</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">-1</span>, <span class="number">0</span>)</span><br><span class="line">    set1 += <span class="number">9</span></span><br><span class="line"></span><br><span class="line">    println(set1)</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p><strong>结果</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HashSet(0, 5, 1, 9, 2, -1)</span><br></pre></td></tr></tbody></table></figure></div><h2 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">MapApp</span> </span>{</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = {</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构建映射</span></span><br><span class="line">    <span class="keyword">var</span> scores1 = <span class="type">Map</span>(<span class="string">"NO1"</span> -> <span class="string">"校花"</span>, <span class="string">"NO2"</span> -> <span class="string">"美女"</span>, <span class="string">"NO3"</span> -> <span class="string">"女神"</span>)</span><br><span class="line">    <span class="keyword">val</span> scores2 = <span class="type">Map</span>((<span class="string">"NO1"</span> -> <span class="string">"校花"</span>), (<span class="string">"NO2"</span> -> <span class="string">"美女"</span>), (<span class="string">"NO3"</span> -> <span class="string">"女神"</span>))</span><br><span class="line">    scores1 +=(<span class="string">"NO4"</span> -> <span class="string">"萝莉"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取映射的指</span></span><br><span class="line">    println(scores1(<span class="string">"NO2"</span>))</span><br><span class="line">    println(scores2.getOrElse(<span class="string">"NO3"</span>, <span class="string">"不在榜单中"</span>))</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p><strong>结果</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">美女</span><br><span class="line">女神</span><br></pre></td></tr></tbody></table></figure></div></body></html>]]></content>
      
      
      <categories>
          
          <category> Scala </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Scala </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>元组</title>
      <link href="/2019/09/26/%E5%85%83%E7%BB%84/"/>
      <url>/2019/09/26/%E5%85%83%E7%BB%84/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><h2 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h2><p>映射是K/V对偶的集合，对偶是元组的最简单形式，元组可以装着多个不同类型的值。</p><h3 id="创建元组"><a href="#创建元组" class="headerlink" title="创建元组"></a>创建元组</h3><ol><li>元组是不同类型的值的聚集；对偶是最简单的元组。</li><li>元组表示通过将不同的值用小括号括起来，即表示元组。</li></ol><p><strong>创建元组格式：</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">val tuple=(元素,元素...)</span><br></pre></td></tr></tbody></table></figure></div><p><strong>例程：</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 元组</span><br><span class="line"> */</span><br><span class="line">object TupleApp {</span><br><span class="line">  def main(args: Array[String]): Unit = {</span><br><span class="line">    val tup = ("Hadoop", 3.1415, 12, Map("NO1" -> "美女"), Array("Hello", "Scala", "Hadoop", "Spark", "Storm"))</span><br><span class="line"></span><br><span class="line">    println(tup._1)</span><br><span class="line">    println(tup._4.getOrElse("NO2", "不在映射中"))</span><br><span class="line">    println(tup._5.mkString(","))</span><br><span class="line"></span><br><span class="line">    // 拉链操作</span><br><span class="line">    val names = Array("校花", "美女", "女神")</span><br><span class="line">    val scores1 = Array(18, 19, 17)</span><br><span class="line">    val scores2 = Array(18, 19)</span><br><span class="line"></span><br><span class="line">    var map1 = names.zip(scores1)</span><br><span class="line"></span><br><span class="line">    // 对“校花”数组后面的元素进行填充，填充数据不够使用 18 填充</span><br><span class="line">    var map2 = names.zipAll(scores2, "校花", 18)</span><br><span class="line"></span><br><span class="line">    println(map1.mkString)</span><br><span class="line">    println(map2.mkString)</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p><strong>结果：</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Hadoop</span><br><span class="line">不在映射中</span><br><span class="line">Hello,Scala,Hadoop,Spark,Storm</span><br><span class="line">(校花,18)(美女,19)(女神,17)</span><br><span class="line">(校花,18)(美女,19)(女神,18)</span><br></pre></td></tr></tbody></table></figure></div></body></html>]]></content>
      
      
      <categories>
          
          <category> Scala </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Scala </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>映射</title>
      <link href="/2019/09/26/%E6%98%A0%E5%B0%84/"/>
      <url>/2019/09/26/%E6%98%A0%E5%B0%84/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><h2 id="映射"><a href="#映射" class="headerlink" title="映射"></a>映射</h2><p>在Scala中，把哈希表这种数据结构叫做映射。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 构建映射</span></span><br><span class="line"><span class="keyword">var</span> scores1 = <span class="type">Map</span>(<span class="string">"NO1"</span> -> <span class="string">"校花"</span>, <span class="string">"NO2"</span> -> <span class="string">"美女"</span>, <span class="string">"NO3"</span> -> <span class="string">"女神"</span>)</span><br><span class="line"><span class="keyword">val</span> scores2 = <span class="type">Map</span>((<span class="string">"NO1"</span> -> <span class="string">"校花"</span>), (<span class="string">"NO2"</span> -> <span class="string">"美女"</span>), (<span class="string">"NO3"</span> -> <span class="string">"女神"</span>))</span><br><span class="line">scores1 +=(<span class="string">"NO4"</span> -> <span class="string">"萝莉"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取映射的指</span></span><br><span class="line">println(scores1(<span class="string">"NO2"</span>))</span><br><span class="line">println(scores2.getOrElse(<span class="string">"NO4"</span>, <span class="string">"不在榜单中"</span>))</span><br></pre></td></tr></tbody></table></figure></div><p><strong>结果</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">美女</span><br><span class="line">不在榜单中</span><br></pre></td></tr></tbody></table></figure></div><p><strong>注意</strong>：通常我们在创建一个集合是会用val这个关键字修饰一个变量（相当于java中的final），那么就意味着该变量的引用不可变，该引用中的内容是不是可变，取决于这个引用指向的集合的类型</p></body></html>]]></content>
      
      
      <categories>
          
          <category> Scala </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Scala </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数组</title>
      <link href="/2019/09/26/%E6%95%B0%E7%BB%84/"/>
      <url>/2019/09/26/%E6%95%B0%E7%BB%84/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">（1）定长数组定义格式：</span><br><span class="line"> val arr=new Array[T](数组长度)</span><br><span class="line"></span><br><span class="line">（2）变长数组定义格式：</span><br><span class="line"> val arr = ArrayBuffer[T]()</span><br></pre></td></tr></tbody></table></figure></div><p>注意需要导包：import scala.collection.mutable.ArrayBuffer</p><h3 id="例程"><a href="#例程" class="headerlink" title="例程"></a>例程</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">ArrayApp</span> </span>{</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = {</span><br><span class="line">    <span class="comment">// 数组声明</span></span><br><span class="line">    <span class="keyword">val</span> arr = <span class="keyword">new</span> <span class="type">Array</span>[<span class="type">String</span>](<span class="number">5</span>)</span><br><span class="line">    arr(<span class="number">1</span>) = <span class="string">"HAHA"</span></span><br><span class="line">    println(arr.mkString(<span class="string">","</span>))</span><br><span class="line">    println(<span class="string">"**********************************************************"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化赋值</span></span><br><span class="line">    <span class="keyword">val</span> arr2 = <span class="type">Array</span>(<span class="string">"Hello"</span>, <span class="string">"Scala"</span>, <span class="string">"Hadoop"</span>, <span class="string">"Spark"</span>, <span class="string">"Storm"</span>)</span><br><span class="line">    <span class="keyword">for</span> (elem <- arr2) {</span><br><span class="line">      println(elem)</span><br><span class="line">    }</span><br><span class="line">    println(<span class="string">"**********************************************************"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 反序输出（增强for）</span></span><br><span class="line">    <span class="keyword">for</span> (elem <- arr2.reverse) {</span><br><span class="line">      println(elem)</span><br><span class="line">    }</span><br><span class="line">    println(<span class="string">"**********************************************************"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 可变长度数组</span></span><br><span class="line">    <span class="keyword">var</span> arr3 = scala.collection.mutable.<span class="type">ArrayBuffer</span>[<span class="type">String</span>]()</span><br><span class="line">    arr3.++=(arr2)</span><br><span class="line">    arr3 += <span class="string">"你好"</span></span><br><span class="line">    println(arr3.mkString(<span class="string">","</span>))</span><br><span class="line">    println(<span class="string">"**********************************************************"</span>)</span><br><span class="line">    arr3.remove(<span class="number">2</span>)</span><br><span class="line">    println(arr3.mkString(<span class="string">","</span>))</span><br><span class="line">    println(<span class="string">"**********************************************************"</span>)</span><br><span class="line">    arr3.trimEnd(<span class="number">4</span>)</span><br><span class="line">    println(arr3.mkString(<span class="string">","</span>))</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p><strong>结果</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">null,HAHA,null,null,null</span><br><span class="line">**********************************************************</span><br><span class="line">Hello</span><br><span class="line">Scala</span><br><span class="line">Hadoop</span><br><span class="line">Spark</span><br><span class="line">Storm</span><br><span class="line">**********************************************************</span><br><span class="line">Storm</span><br><span class="line">Spark</span><br><span class="line">Hadoop</span><br><span class="line">Scala</span><br><span class="line">Hello</span><br><span class="line">**********************************************************</span><br><span class="line">Hello,Scala,Hadoop,Spark,Storm,你好</span><br><span class="line">**********************************************************</span><br><span class="line">Hello,Scala,Spark,Storm,你好</span><br><span class="line">**********************************************************</span><br><span class="line">Hello</span><br></pre></td></tr></tbody></table></figure></div><p>yield关键字将原始的数组进行转换会产生一个新的数组，原始的数组不变</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// yield关键字将原始的数组进行转换会产生一个新的数组，原始的数组不变</span></span><br><span class="line"><span class="keyword">val</span> arr4 = <span class="type">Array</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将偶数取出乘以10，再生成一个新的数组</span></span><br><span class="line"><span class="keyword">val</span>  res = <span class="keyword">for</span>(e <- arr4 <span class="keyword">if</span> e % <span class="number">2</span> == <span class="number">0</span>) <span class="keyword">yield</span> e * <span class="number">10</span></span><br><span class="line">println(res.mkString(<span class="string">","</span>))</span><br><span class="line">println(<span class="string">"**********************************************************"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// filter过滤器，接收返回值为booblean的函数</span></span><br><span class="line"><span class="comment">// map 相当于将数组中的每一个元素取出来，应用传进来的函数</span></span><br><span class="line"><span class="keyword">val</span> resPlus = arr4.filter(_ % <span class="number">2</span> == <span class="number">0</span>).map(_ * <span class="number">10</span>)</span><br><span class="line">println(resPlus.mkString(<span class="string">","</span>))</span><br></pre></td></tr></tbody></table></figure></div><p><strong>结果</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">20,40,60,80</span><br><span class="line">**********************************************************</span><br><span class="line">20,40,60,80</span><br></pre></td></tr></tbody></table></figure></div><h3 id="数组常用算法"><a href="#数组常用算法" class="headerlink" title="数组常用算法"></a>数组常用算法</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> arr5 = <span class="type">Array</span>(<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">-5</span>, <span class="number">6</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 求和</span></span><br><span class="line">println(arr5.sum)</span><br><span class="line"><span class="comment">// 求最大值</span></span><br><span class="line">println(arr5.max)</span><br><span class="line"><span class="comment">// 求最小值</span></span><br><span class="line">println(arr5.min)</span><br><span class="line"><span class="comment">// 排序</span></span><br><span class="line">println(arr5.sorted.mkString(<span class="string">","</span>))</span><br></pre></td></tr></tbody></table></figure></div><p><strong>结果</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">35</span><br><span class="line">9</span><br><span class="line">-5</span><br><span class="line">-5,1,2,3,4,6,7,8,9</span><br></pre></td></tr></tbody></table></figure></div></body></html>]]></content>
      
      
      <categories>
          
          <category> Scala </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Scala </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>定义方法和函数</title>
      <link href="/2019/09/26/%E5%AE%9A%E4%B9%89%E6%96%B9%E6%B3%95%E5%92%8C%E5%87%BD%E6%95%B0/"/>
      <url>/2019/09/26/%E5%AE%9A%E4%B9%89%E6%96%B9%E6%B3%95%E5%92%8C%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><p>Scala中的+ - * / %等操作符的作用与Java一样，位操作符 & | ^ >> <<也一样。只是有一点特别的：这些操作符实际上是方法。</p><p>例如：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a + b</span><br><span class="line">是如下方法调用的简写：</span><br><span class="line">a.+(b)</span><br><span class="line">a 方法 b可以写成 a.方法(b)</span><br></pre></td></tr></tbody></table></figure></div><h3 id="定义方法"><a href="#定义方法" class="headerlink" title="定义方法"></a>定义方法</h3><p><a href="A974B5609AC14D67A000F519938B556E" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="A974B5609AC14D67A000F519938B556E" class="lazyload"></a></p><p><a href="948BF87436B04567B6832256D13BC8B0" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="948BF87436B04567B6832256D13BC8B0" class="lazyload"></a></p><p>方法的返回值类型可以不写，编译器可以自动推断出来，但是<strong>对于递归函数，必须指定返回类型。</strong></p><p><a href="65171CF7C46B4035B6ABEF2B5C1D8C05" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="65171CF7C46B4035B6ABEF2B5C1D8C05" class="lazyload"></a></p><h3 id="定义函数"><a href="#定义函数" class="headerlink" title="定义函数"></a>定义函数</h3><p><a href="90C23650CC79424AAF6AB9A969A547D2" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="90C23650CC79424AAF6AB9A969A547D2" class="lazyload"></a></p><h3 id="方法和函数的区别"><a href="#方法和函数的区别" class="headerlink" title="方法和函数的区别"></a>方法和函数的区别</h3><p>在函数式编程语言中，函数是“头等公民”，它可以像任何其他数据类型一样被传递和操作，函数是一个对象，继承自FuctionN。N代表函数创建是有多少个参数。</p><p>函数对象有apply、curried(柯里化)、toString、tupled(元组)这些方法。而方法不具有这些特性。</p><p>如果想把方法转换成一个函数，可以用方法名跟上下划线的方式。</p><p>案例：首先定义一个方法，再定义一个函数，然后将函数传递到方法里面<br><a href="F3F7FAAED87E4FC8B5AB441D335E70EE" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="F3F7FAAED87E4FC8B5AB441D335E70EE" class="lazyload"></a></p><h3 id="方法代码"><a href="#方法代码" class="headerlink" title="方法代码"></a>方法代码</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">FunctionApp</span> </span>{</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = {</span><br><span class="line">    sayHello(<span class="string">"小明"</span>)</span><br><span class="line"></span><br><span class="line">    println(add(<span class="number">1</span>, <span class="number">2</span>))</span><br><span class="line"></span><br><span class="line">    defaultValue(<span class="literal">null</span>)</span><br><span class="line"></span><br><span class="line">    variableParameter(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 无返回值</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * @param name</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">sayHello</span></span>(name: <span class="type">String</span>): <span class="type">Unit</span> = {</span><br><span class="line">    println(<span class="string">"Hello "</span> + name)</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 最后一个执行的结果就是返回值，不需要return</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * @param x 参数一</span></span><br><span class="line"><span class="comment">   * @param y 参数二</span></span><br><span class="line"><span class="comment">   * @return 相加结果</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">add</span></span>(x: <span class="type">Int</span>, y: <span class="type">Int</span>): <span class="type">Int</span> = {</span><br><span class="line">    x + y</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 默认参数</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * @param name 参数，有一个默认值</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">defaultValue</span></span>(name: <span class="type">String</span> = <span class="string">"李四"</span>): <span class="type">Unit</span> = {</span><br><span class="line">    println(<span class="string">"你好 "</span> + name)</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 可变参数函数</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * @param num 可变参数(类型必须相同)</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">variableParameter</span></span>(num: <span class="type">Int</span>*) {</span><br><span class="line">    <span class="keyword">var</span> count: <span class="type">Int</span> = <span class="number">0</span></span><br><span class="line">    num.foreach(e => {</span><br><span class="line">      count += e</span><br><span class="line">    })</span><br><span class="line"></span><br><span class="line">    println(<span class="string">"总和："</span> + count)</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div></body></html>]]></content>
      
      
      <categories>
          
          <category> Scala </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Scala </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Scala基础</title>
      <link href="/2019/09/25/Scala%E5%9F%BA%E7%A1%80/"/>
      <url>/2019/09/25/Scala%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><h3 id="声明变量"><a href="#声明变量" class="headerlink" title="声明变量"></a>声明变量</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Hello</span> </span>{</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = {</span><br><span class="line">    println(<span class="string">"Hello Scala"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用val定义的变量值是不可变的，相当于Java里面final修饰的变量</span></span><br><span class="line">    <span class="keyword">val</span> i = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用var定义的变量是可变的，在Scala中鼓励使用val</span></span><br><span class="line">    <span class="keyword">var</span> s = <span class="string">"Hello Scala"</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Scala编译器会自动推断变量的类型，必要的时候可以指定类型</span></span><br><span class="line">    <span class="keyword">val</span> str: <span class="type">String</span> = <span class="string">"Hello Spark"</span></span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><h3 id="常用类型"><a href="#常用类型" class="headerlink" title="常用类型"></a>常用类型</h3><p>Scala和Java一样，有7种数值类型Byte、Char、Short、Int、Long、Float、Double类型和1个Boolean类型。</p><h3 id="条件表达式"><a href="#条件表达式" class="headerlink" title="条件表达式"></a>条件表达式</h3><p>Scala的条件表达式比较简洁，定义变量时加上if else判断条件。例如：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 条件表达式</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* @param num1 参数一</span></span><br><span class="line"><span class="comment">* @param num2 参数二</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">conditionalExpression</span></span>(num1: <span class="type">Int</span>, num2: <span class="type">Int</span>): <span class="type">Unit</span> = {</span><br><span class="line">    <span class="comment">// 条件表达式</span></span><br><span class="line">    <span class="keyword">if</span> (num1 > num2) {</span><br><span class="line">      println(num1 + <span class="string">" > "</span> + num2)</span><br><span class="line">    } <span class="keyword">else</span> <span class="keyword">if</span> (num1 == num2) {</span><br><span class="line">      println(num1 + <span class="string">" = "</span> + num2)</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">      println(num1 + <span class="string">" < "</span> + num2)</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><h3 id="块表达式"><a href="#块表达式" class="headerlink" title="块表达式"></a>块表达式</h3><p>定义变量时用 {} 包含一系列表达式，其中块的最后一个表达式的值就是块的值。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">lump</span> </span>(): <span class="type">Unit</span> ={</span><br><span class="line">    <span class="keyword">val</span> a = <span class="number">10</span></span><br><span class="line">    <span class="keyword">val</span> b = <span class="number">20</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 块表达式</span></span><br><span class="line">    <span class="keyword">val</span> result = {</span><br><span class="line">    <span class="comment">// 块中最后一个表达式的值,既是快表达式的返回值</span></span><br><span class="line">      a + b</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    println(result)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><h3 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h3><p>在scala中有好几种循环，其中for循环和while循环用的比较多</p><p><strong>for循环：</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * foreach循环表达式</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @param num1 参数一</span></span><br><span class="line"><span class="comment"> * @param num2 参数二</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foreachExpression</span></span>(num1: <span class="type">Int</span>, num2: <span class="type">Int</span>): <span class="type">Unit</span> = {</span><br><span class="line">  <span class="keyword">val</span> arr: <span class="type">Range</span> = num1.until(num2)</span><br><span class="line">  arr.foreach(e => {</span><br><span class="line">    print(e + <span class="string">" "</span>)</span><br><span class="line">  })</span><br><span class="line">  println()</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * for循环表达式</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @param num1 参数一</span></span><br><span class="line"><span class="comment"> * @param num2 参数二</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">forExpression</span></span>(num1: <span class="type">Int</span>, num2: <span class="type">Int</span>): <span class="type">Unit</span> = {</span><br><span class="line">  <span class="keyword">val</span> arr: <span class="type">Range</span> = num1.until(num2)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (a <- arr <span class="keyword">if</span> a % <span class="number">2</span> == <span class="number">0</span>) {</span><br><span class="line">    println(<span class="string">"质数: "</span> + a)</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p><strong>while循环：</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * while循环表达式</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">whileExpression</span></span>(): <span class="type">Unit</span> = {</span><br><span class="line">  <span class="keyword">var</span> count = <span class="number">10</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (count > <span class="number">0</span>) {</span><br><span class="line">    print(count + <span class="string">" "</span>)</span><br><span class="line">    count -= <span class="number">1</span></span><br><span class="line">  }</span><br><span class="line">  println()</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * do-while循环表达式</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dowhileExpression</span></span>(): <span class="type">Unit</span> = {</span><br><span class="line">  <span class="keyword">var</span> count = <span class="number">10</span></span><br><span class="line"></span><br><span class="line">  do {</span><br><span class="line">    print(count + <span class="string">" "</span>)</span><br><span class="line">    count -= <span class="number">1</span></span><br><span class="line">  } <span class="keyword">while</span> (count > <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">  println()</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p><strong>其他循环：</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * to循环表达式</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @param num1 参数一</span></span><br><span class="line"><span class="comment"> * @param num2 参数二</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">toExpression</span></span>(num1: <span class="type">Int</span>, num2: <span class="type">Int</span>): <span class="type">Unit</span> = {</span><br><span class="line">  <span class="keyword">val</span> arr: <span class="type">Inclusive</span> = num1.to(num2)</span><br><span class="line">  println(arr.toList)</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * range循环表达式</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @param num1 参数一</span></span><br><span class="line"><span class="comment"> * @param num2 参数二</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rangeExpression</span></span>(num1: <span class="type">Int</span>, num2: <span class="type">Int</span>): <span class="type">Unit</span> = {</span><br><span class="line">  <span class="keyword">val</span> arr: <span class="type">Range</span> = <span class="type">Range</span>(num1, num2)</span><br><span class="line">  println(arr.toList)</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * until循环表达式</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @param num1 参数一</span></span><br><span class="line"><span class="comment"> * @param num2 参数二</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">untilExpression</span></span>(num1: <span class="type">Int</span>, num2: <span class="type">Int</span>): <span class="type">Unit</span> = {</span><br><span class="line">  <span class="keyword">val</span> arr: <span class="type">Range</span> = num1.until(num2)</span><br><span class="line">  println(arr.toList)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p><strong>break 终止循环</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * break 终止循环</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">breakExpression</span></span>(num1: <span class="type">Int</span>, num2: <span class="type">Int</span>): <span class="type">Unit</span> = {</span><br><span class="line">  <span class="keyword">val</span> arr: <span class="type">Inclusive</span> = num1.to(num2)</span><br><span class="line">  <span class="keyword">val</span> loop = <span class="keyword">new</span> <span class="type">Breaks</span>;</span><br><span class="line"></span><br><span class="line">  loop.breakable {</span><br><span class="line">    <span class="keyword">for</span> (a <- arr) {</span><br><span class="line">      print(a + <span class="string">" "</span>)</span><br><span class="line">      <span class="keyword">if</span> (a == <span class="number">5</span>) {</span><br><span class="line">        <span class="comment">// 终止循环</span></span><br><span class="line">        loop.<span class="keyword">break</span>()</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  println()</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div></body></html>]]></content>
      
      
      <categories>
          
          <category> Scala </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Scala </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux安装Scala编译器</title>
      <link href="/2019/09/25/Linux%E5%AE%89%E8%A3%85Scala%E7%BC%96%E8%AF%91%E5%99%A8/"/>
      <url>/2019/09/25/Linux%E5%AE%89%E8%A3%85Scala%E7%BC%96%E8%AF%91%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><ul><li>下载Scala地址<a href="https://www.scala-lang.org/download/2.11.8.html" target="_blank" rel="noopener">https://www.scala-lang.org/download/2.11.8.html</a></li><li>解压Scala到指定目录<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf scala-2.11.8.tgz -C /usr/java</span><br></pre></td></tr></tbody></table></figure></div></li><li>配置环境变量，将scala加入到PATH中<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/profile</span><br><span class="line">export JAVA_HOME=/usr/java/jdk1.8</span><br><span class="line">export PATH=$PATH:$JAVA_HOME/bin:/usr/java/scala-2.11.8/bin</span><br></pre></td></tr></tbody></table></figure></div></li></ul></body></html>]]></content>
      
      
      <categories>
          
          <category> Scala </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Scala </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一分钟实现内网穿透（ngrok服务器搭建）</title>
      <link href="/2019/08/28/%E4%B8%80%E5%88%86%E9%92%9F%E5%AE%9E%E7%8E%B0%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%EF%BC%88ngrok%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA%EF%BC%89/"/>
      <url>/2019/08/28/%E4%B8%80%E5%88%86%E9%92%9F%E5%AE%9E%E7%8E%B0%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%EF%BC%88ngrok%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><p>简单来说内网穿透的目的是：让外网能访问你本地的应用，例如在外网打开你本地<a href="http://127.0.0.1指向的Web站点。" target="_blank" rel="noopener">http://127.0.0.1指向的Web站点。</a></p><p>最近公司的花生壳到期了，要续费，发现价格一直在涨，都是5年以上的老用户，旗舰版都没有实现内网完全穿透，打算自己动手替换这个服务，中间走了不少的弯路，这里记录一些文字为大家提供参考。</p><p>随着开发与运行移动互联网的应用越来越多对打通内外网的需要也更加迫切，如微信开发、IOS与Android开发等。</p><p>虽然租用VPS、ECS等服务器可以解决很多问题但高性能的外网服务器价格非常贵还有数据安全问题，我选择的是公网服务器仅做代理与轻量应用，复杂的应用部署到内网服务器再穿透访问。</p><h1 id="一、内网穿透概要"><a href="#一、内网穿透概要" class="headerlink" title="一、内网穿透概要"></a>一、内网穿透概要</h1><p>为了理解内网穿透我们先来了解几个概念：</p><h3 id="1-1、IP地址"><a href="#1-1、IP地址" class="headerlink" title="1.1、IP地址"></a>1.1、IP地址</h3><p><strong>网络中唯一定位一台设备的逻辑地址</strong>，类似我们的电话号码</p><p>在互联网中我们访问一个网站或使用一个网络服务最终都需要通过IP定位到每一台主机，如访问baidu网站：<br><a href="8664A94F41774DC99906C452E415CCB2" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="8664A94F41774DC99906C452E415CCB2" class="lazyload"></a></p><p>其中119.75.213.61就是一个公网的IP地址，他最终指向了一台服务器。</p><p>IP地址是IP协议提供的一种统一的地址格式，它为互联网上的每一个网络和每一台主机分配一个逻辑地址，以此来屏蔽物理地址的差异。</p><p>内网IP可以同时出现在多个不同的局域网络中，如A公司的U1用户获得了192.168.0.5，B公司的U3用户也可以获得192.168.0.5；但公网IP是唯一的，因为我们只有一个Internet。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//局域网可使用的网段（私网地址段）有三大段：</span><br><span class="line">10.0.0.0~10.255.255.255（A类）</span><br><span class="line">172.16.0.0~172.31.255.255（B类）</span><br><span class="line">192.168.0.0~192.168.255.255（C类）</span><br></pre></td></tr></tbody></table></figure></div><h3 id="1-2、域名"><a href="#1-2、域名" class="headerlink" title="1.2、域名"></a>1.2、域名</h3><p><strong>域名是IP的别名，便于记忆，域名最终通过DNS解析成IP地址。</strong><br><a href="3E6ACF5E2C4D41F4940ACED7AFB22B47" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="3E6ACF5E2C4D41F4940ACED7AFB22B47" class="lazyload"></a></p><p>IP V4是一个32位的数字，IP V6有128位，要记住一串毫无意义的数字非常困难，域名解决了这个问题。</p><p>如<a href="http://www.zhangguo.com.cn就是一个域名，cn表示地区，com表示商业机构，zhangguo是公司名称，www是主机名" target="_blank" rel="noopener">www.zhangguo.com.cn就是一个域名，cn表示地区，com表示商业机构，zhangguo是公司名称，www是主机名</a></p><p><a href="9D1A55DD04844185AC7E5452B5D33E06" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="9D1A55DD04844185AC7E5452B5D33E06" class="lazyload"></a></p><p>DNS查询过程如下，最终将域名变成IP地址</p><p><a href="A6376FD5CBA5458DA96E89B782C3A46B" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="A6376FD5CBA5458DA96E89B782C3A46B" class="lazyload"></a></p><h3 id="1-3、NAT"><a href="#1-3、NAT" class="headerlink" title="1.3、NAT"></a>1.3、NAT</h3><p><strong>NAT（Network Address Translation）即网络地址转换，NAT能将其本地地址转换成全球IP地址。</strong></p><p>内网的一些主机本来已经分配到了本地IP地址（如局域网DHCP分配的IP），但现在又想和因特网上的主机通信（并不需要加密）时，可使用NAT方法。</p><p>通过使用少量的公有IP 地址代表较多的私有IP 地址的方式，将有助于减缓可用的IP地址空间的枯竭。</p><p>NAT不仅能解决了lP地址不足与共享上网的问题，而且还能够有效地避免来自网络外部的攻击，隐藏并保护网络内部的计算机。</p><p>多路由器可完成NAT功能。</p><p>NAT的实现方式：</p><p><strong>静态转换</strong>：是指将内部网络的私有IP地址转换为公有IP地址，IP地址对是一对一。</p><p><strong>动态转换</strong>：是指将内部网络的私有IP地址转换为公用IP地址时，IP地址是不确定的，是随机的。</p><p><strong>端口多路复用（Port address Translation,PAT)</strong>：内部网络的所有主机均可共享一个合法外部IP地址实现对Internet的访问，从而可以最大限度地节约IP地址资源。同时又可隐藏网络内部的所有主机，有效避免来自internet的攻击。因此，目前网络中应用最多的就是端口多路复用方式。</p><p><strong>应用程序级网关技术（Application Level Gateway）ALG</strong>：传统的NAT技术只对IP层和传输层头部进行转换处理，ALG它能对这些应用程序在通信时所包含的地址信息也进行相应的NAT转换。</p><p><a href="2900DB8519DA4E409ACFE364F0A978FA" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="2900DB8519DA4E409ACFE364F0A978FA" class="lazyload"></a></p><p><a href="2732EDAFFCA54EEF9BCFC61277E051F5" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="2732EDAFFCA54EEF9BCFC61277E051F5" class="lazyload"></a></p><h3 id="1-4、Proxy"><a href="#1-4、Proxy" class="headerlink" title="1.4、Proxy"></a>1.4、Proxy</h3><p>Proxy即代理，被广泛应用于计算机领域，主要分为正向代理与反向代理：</p><h3 id="1-4-1、正向代理"><a href="#1-4-1、正向代理" class="headerlink" title="1.4.1、正向代理"></a>1.4.1、正向代理</h3><p>比如X花店代A,B,C,D,E五位男生向Candy女生送匿名的生日鲜花，这里的X花店就是5位顾客的代理，花店代理的是客户，隐藏的是客户。这就是我们常说的代理。</p><p><strong>正向代理隐藏了真实的请求客户端</strong>。服务端不知道真实的客户端是谁，客户端请求的服务都被代理服务器代替来请求，某些科学上网工具扮演的就是典型的正向代理角色。用浏览器访问<a href="http://www.google.com时被墙了，于是你可以在国外搭建一台代理服务器，让代理帮我去请求google.com，代理把请求返回的相应结构再返回给我。" target="_blank" rel="noopener">http://www.google.com时被墙了，于是你可以在国外搭建一台代理服务器，让代理帮我去请求google.com，代理把请求返回的相应结构再返回给我。</a></p><p><a href="68B6D7FE9B274D80921C7818B07A6368" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="68B6D7FE9B274D80921C7818B07A6368" class="lazyload"></a></p><p>当多个客户端访问服务器时服务器不知道真正访问自己的客户端是那一台。正向代理中,proxy和client同属一个LAN,对server透明;</p><p><a href="EA650A1BACF649A99ACCE08E979B031C" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="EA650A1BACF649A99ACCE08E979B031C" class="lazyload"></a></p><h3 id="1-4-2、反向代理"><a href="#1-4-2、反向代理" class="headerlink" title="1.4.2、反向代理"></a>1.4.2、反向代理</h3><p>拨打10086客服电话，接线员可能有很多个，调度器会智能的分配一个接线员与你通话。这里的调度器就是一个代理，只不过他代理的是接线员，客户端不能确定真正与自己通话的人，隐藏与保护的是目标对象。</p><p><strong>反向代理隐藏了真实的服务端</strong>，当我们请求 ww.baidu.com 的时候，就像拨打10086一样，背后可能有成千上万台服务器为我们服务，但具体是哪一台，你不知道，也不需要知道，你只需要知道反向代理服务器是谁就好了，ww.baidu.com 就是我们的反向代理服务器，反向代理服务器会帮我们把请求转发到真实的服务器那里去。Nginx就是性能非常好的反向代理服务器，用来做负载均衡。</p><p><a href="42F044A8FCFF4F958D1360040B858017" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="42F044A8FCFF4F958D1360040B858017" class="lazyload"></a></p><p>反向代理中,proxy和server同属一个LAN,对client透明。</p><p><a href="9EB94628908B4E058157079856FF19D4" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="9EB94628908B4E058157079856FF19D4" class="lazyload"></a></p><p><a href="https://www.zhihu.com/question/24723688" target="_blank" rel="noopener">了解更多关于代理内容请点击这里。</a></p><h3 id="1-5、DDNS"><a href="#1-5、DDNS" class="headerlink" title="1.5、DDNS"></a>1.5、DDNS</h3><p>DDNS即动态域名解析，是<strong>将用户的动态IP地址映射到一个固定的域名解析服务上</strong>，用户每次连接网络的时候，客户端程序就会通过信息传递把该主机的动态IP地址传送给位于服务商主机上的服务器程序，服务程序负责提供DNS服务并实现动态域名解析。就是说DDNS捕获用户每次变化的IP地址，然后将其与域名相对应，这样域名就可以始终解析到非固定IP的服务器上，互联网用户通过本地的域名服务器获得网站域名的IP地址，从而可以访问网站的服务。</p><h3 id="1-6、为什么需要内网穿透"><a href="#1-6、为什么需要内网穿透" class="headerlink" title="1.6、为什么需要内网穿透"></a>1.6、为什么需要内网穿透</h3><p><strong>当内网中的主机没有静态IP地址要被外网稳定访问时可以使用内网穿透</strong></p><p>在互联网中唯一定位一台主机的方法是通过公网的IP地址，但固定IP是一种非常稀缺的资源，不可能给每个公司都分配一个，且许多中小公司不愿意为高昂的费用买单，多数公司直接或间接的拨号上网，电信部门会给接入网络的用户分配IP地址，以前上网用户少的时候基本分配的都是临时的静态IP地址，租约过了之后可能会更换成另一个IP地址，这样外网访问就不稳定，因为内网的静态IP地址一直变化，为了解决这个问题可以使用动态域名解析的办法变换域名指向的静态IP地址。但是现在越来越多的上网用户使得临时分配的静态IP地址也不够用了，电信部门开始分配一些虚拟的静态IP地址，这些IP是公网不能直接访问的，如以125开头的一些IP地址，以前单纯的动态域名解析就不好用了。</p><h3 id="1-7、内网穿透的定义与障碍"><a href="#1-7、内网穿透的定义与障碍" class="headerlink" title="1.7、内网穿透的定义与障碍"></a>1.7、内网穿透的定义与障碍</h3><p><strong>简单来说实现不同局域网内的主机之间通过互联网进行通信的技术叫内网穿透。</strong></p><p><strong>障碍一</strong>：位于局域网内的主机有两套 IP 地址，一套是局域网内的 IP 地址，通常是动态分配的，仅供局域网内的主机间通信使用；一套是经过网关转换后的外网 IP 地址，用于与外网程序进行通信。</p><p><a href="69A07B79D4664CD6855F990F0C909E06" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="69A07B79D4664CD6855F990F0C909E06" class="lazyload"></a></p><p><strong>障碍二</strong>：位于不同局域网内的两台主机，即使是知道了对方的 IP 地址和端口号，“一厢情愿”地将数据包发送过去，对方也是接收不到的。</p><p>因为出于安全起见，除非是主机主动向对方发出了连接请求（这时会在该主机的数据结构中留下一条记录），否则，当主机接收到数据包时，如果在其数据结构中查询不到对应的记录，那些不请自来的数据包将会被丢弃。</p><p><a href="827A49D0A8554955AD7545F87F9C00C5" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="827A49D0A8554955AD7545F87F9C00C5" class="lazyload"></a></p><p><strong>解决办法：要想解决以上两大障碍，我们需要借助一台具有公网 IP 的服务器进行桥接。</strong></p><h1 id="二、常见的内网穿透产品"><a href="#二、常见的内网穿透产品" class="headerlink" title="二、常见的内网穿透产品"></a>二、常见的内网穿透产品</h1><h3 id="2-1、花生壳"><a href="#2-1、花生壳" class="headerlink" title="2.1、花生壳"></a>2.1、花生壳</h3><p>花生壳既是内网穿透软件、内网映射软件,也是端口映射软件。规模最大，较正规，完善。</p><p>收费高，使用简单</p><p>官网：<a href="http://www.oray.com/" target="_blank" rel="noopener">http://www.oray.com/</a></p><p><a href="5B96B046290A43D8863388092F3372FF" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="5B96B046290A43D8863388092F3372FF" class="lazyload"></a></p><h3 id="2-2、Nat123"><a href="#2-2、Nat123" class="headerlink" title="2.2、Nat123"></a>2.2、Nat123</h3><p>nat123是内网端口映射与动态域名解析软件，在内网启动映射后，可在外网访问连接内网网站等应用。整个网站我都没有找到客服电话，网友发了一些反面的评价</p><p>收费，使用简单</p><p>官网：<a href="http://www.nat123.com" target="_blank" rel="noopener">http://www.nat123.com</a></p><p><a href="4B0F818B2E3F4E62972B350D4314602F" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="4B0F818B2E3F4E62972B350D4314602F" class="lazyload"></a></p><p>###2.3、NATAPP<br>NATAPP基于ngrok的国内内网穿透服务，免费版会强制更换域名，临时用一下可以</p><p>收费，使用简单</p><p>官网：<a href="https://natapp.cn/" target="_blank" rel="noopener">https://natapp.cn/</a></p><p><a href="44E177A4213040C694C0D0A1B2BC8457" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="44E177A4213040C694C0D0A1B2BC8457" class="lazyload"></a></p><h3 id="2-4、frp与其它"><a href="#2-4、frp与其它" class="headerlink" title="2.4、frp与其它"></a>2.4、frp与其它</h3><p>frp 是一个高性能的反向代理应用，可以帮助您轻松地进行内网穿透，对外网提供服务，支持 tcp, http, https 等协议类型，并且 web 服务支持根据域名进行路由转发。</p><p>开源免费</p><p>使用相对复杂，需要代理服务器支持</p><p>官网：<a href="https://github.com/fatedier/frp" target="_blank" rel="noopener">https://github.com/fatedier/frp</a></p><p>文档：查看帮助文档，简书示例</p><p>利用处于内网或防火墙后的机器，对外网环境提供 http 或 https 服务。</p><p>对于 http, https 服务支持基于域名的虚拟主机，支持自定义域名绑定，使多个域名可以共用一个80端口。</p><p>利用处于内网或防火墙后的机器，对外网环境提供 tcp 和 udp 服务，例如在家里通过 ssh 访问处于公司内网环境内的主机。</p><p><a href="0B56DA9B6F234F9994895B56DCA3731B" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="0B56DA9B6F234F9994895B56DCA3731B" class="lazyload"></a></p><p>因为frp 仍然处于前期开发阶段，未经充分测试与验证，不推荐用于生产环境，所有我选择了ngrok，资料比较多。</p><p>还有如圣剑内网通、ngrok（开源免费）、<a href="https://post.smzdm.com/p/564494/" target="_blank" rel="noopener">更多办法</a></p><h1 id="三、ngrok"><a href="#三、ngrok" class="headerlink" title="三、ngrok"></a>三、ngrok</h1><p>ngrok是一个反向代理，通过在公共的端点和本地运行的Web服务器之间建立一个安全的通道。ngrok可捕获和分析所有通道上的流量，便于后期分析与响应。</p><p>开源免费</p><p>官网：<a href="https://ngrok.com/" target="_blank" rel="noopener">https://ngrok.com/</a></p><p>源码：<a href="https://github.com/inconshreveable/ngrok" target="_blank" rel="noopener">https://github.com/inconshreveable/ngrok</a></p><p><a href="E968976674174F4FA0CFB4B00BFDF2C3" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="E968976674174F4FA0CFB4B00BFDF2C3" class="lazyload"></a></p><p>ngrok1.x开源，ngrok2.x不开源</p><p>ngrok使用go语言开发，源代码分为客户端与服务器端。</p><p>国内免费服务器：<a href="http://ngrok.ciqiuwl.cn/，更多免费服务器请大家挖掘，资源共享，我随时更新：）" target="_blank" rel="noopener">http://ngrok.ciqiuwl.cn/，更多免费服务器请大家挖掘，资源共享，我随时更新：）</a></p><p>如果有服务器，仅客户端的使用是不复杂的，以上面的免费服务器为示例完成内网穿透</p><p>现在假定我的本地已成功部署了一个网站，访问地址为127.0.0.1，想内网穿透后被公网上的用户访问，一般步骤如下：</p><p><strong>步骤1、下载windows版本的客户端，解压。一般在为你提供代理服务器的网站上找你要下载的客户端</strong>：</p><p><a href="3A2C462626574DBAB583D9E268EB75B7" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="3A2C462626574DBAB583D9E268EB75B7" class="lazyload"></a></p><p><strong>步骤2、在命令（cmd）行下进入到ngrok客户端目录下</strong></p><p><a href="7E69F7DFF2D24E01B550D4DD87E4CEDA" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="7E69F7DFF2D24E01B550D4DD87E4CEDA" class="lazyload"></a></p><p><strong>步骤3、执行 ngrok -config=ngrok.cfg -subdomain xxx 80 //(xxx 是你自定义的域名前缀)，建议批处理</strong></p><p><a href="9685F6FB19094A9BA68AEC600E271C6F" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="9685F6FB19094A9BA68AEC600E271C6F" class="lazyload"></a></p><p>如果连接成功，会提示如下信息：</p><p><a href="07351B0A640041CA91D262D0753AF557" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="07351B0A640041CA91D262D0753AF557" class="lazyload"></a></p><p><strong>这一步如果你认为太麻烦，可以直接运行目录下的start.bat批处理文件就不用进DOS环境了。运行start.bat直接跳过2，3步</strong></p><p><strong>步骤4、如果开启成功 你就可以使用 xxx.ngrok.xiaomiqiu.cn 来访问你本机的 127.0.0.1:80 的服务了，当然你必须确定的是你本机的Web是可以正常访问的。</strong></p><p><a href="655B1027C1C64EA69D7084952CB263A0" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="655B1027C1C64EA69D7084952CB263A0" class="lazyload"></a></p><p>注意：</p><p>如果你自己有顶级域名，想通过自己的域名来访问本机的项目，那么先将自己的顶级域名解析到120.25.161.137(域名需要已备案哦，80端口必须备案)，然后执行 ngrok -config=ngrok.cfg -hostname xxx.xxx.xxx 80 //(xxx.xxx.xxx是你自定义的顶级域名)</p><h1 id="四、ubuntu下生成ngrok服务器主程序"><a href="#四、ubuntu下生成ngrok服务器主程序" class="headerlink" title="四、ubuntu下生成ngrok服务器主程序"></a>四、ubuntu下生成ngrok服务器主程序</h1><h3 id="4-1、步骤与先决条件"><a href="#4-1、步骤与先决条件" class="headerlink" title="4.1、步骤与先决条件"></a>4.1、步骤与先决条件</h3><p>如果你只是临时穿透或调试用，到第三步基本就可以了，但如果想作为稳定的商业服务，用别人的服务器还是受制于人，这里我们准备搭建自己的ngrok服务器。大致的步骤如下：</p><p><a href="962FF6F12F72406884DD234CB2A7BC46" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="962FF6F12F72406884DD234CB2A7BC46" class="lazyload"></a></p><p>ngrok服务器可以是多种平台，如windows、Linux（CentOS、Debian、Ubuntu等）、Mac OS等。</p><p><strong>编译源代码生成应用强烈建议大家使用linux环境，windows肯定可以成功，但非常麻烦，我在windows操作系统上兜了一个大圈圈。</strong></p><p><strong>先决条件</strong>：</p><p>a)、您有一台公网上的服务器，如阿里云的ECS</p><p>b)、您有一个域名，最好ICP备案成功，不然80端口没有办法使用，不过像微信开发是不使用80端口的，可以用nginx代理转换。</p><h3 id="4-2、安装ubuntu操作系统"><a href="#4-2、安装ubuntu操作系统" class="headerlink" title="4.2、安装ubuntu操作系统"></a>4.2、安装ubuntu操作系统</h3><p>在linux环境下编译ngrok的源代码比windows下 方便很多，这里我们选择使用ubuntu，获得ubuntu的方法有如下几种：</p><p>1）、全新安装ubuntu系统</p><p>2）、申请VPS服务器， 阿里云、腾讯云、华为云、百度云、新浪云等，仅编译一下这种方法不错</p><p>3）、在虚拟机中安装ubuntu系统</p><p>综合考虑我选择了在虚拟机中安装ubuntu操作系统</p><p><a href="E2AB70E76091449BAE331FE9C37392CF" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="E2AB70E76091449BAE331FE9C37392CF" class="lazyload"></a></p><h3 id="4-2-1、安装VMware虚拟机"><a href="#4-2-1、安装VMware虚拟机" class="headerlink" title="4.2.1、安装VMware虚拟机"></a>4.2.1、安装VMware虚拟机</h3><p>VMware Workstation是一款功能强大的虚拟机软件，在不影响本机操作系统的情况下，用户可以在虚拟机中同时运行不同版本的操作系统，用于开发、测试以及部署工作。</p><p>VMware Workstation 12 pro下载：VMware-workstation-full-12.1.0-3272444.exe</p><p>序列号：5A02H-AU243-TZJ49-GTC7K-3C61N（商业应用请购买正式版权，这里仅为学习使用）</p><p>1）、双击VMware Workstation 12安装文件，或者右键管理员身份打开，提示是否允许更改，点击是；</p><p>2）、打开VMware安装向导，点击下一步；</p><p><a href="5D1DDC4380914E949ED507F3F975746E" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="5D1DDC4380914E949ED507F3F975746E" class="lazyload"></a></p><p>3）、VMware Workstation 12激活步骤：</p><ul><li>　　方法一、首次开启直接输入上文密钥，即可激活；</li><li>　　方法二、首次开启选择试用，进入试用后按一下步骤激活：</li></ul><p>　　a、打开虚拟机主界面，点击“帮助”—“输入许可证密钥”；<br>　　<br><a href="0DBAE0E80B3A44B3BEA056A3E912E893" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="0DBAE0E80B3A44B3BEA056A3E912E893" class="lazyload"></a></p><p>b、在密钥输入框输入永久许可证密钥5A02H-AU243-TZJ49-GTC7K-3C61N，确定；<a href="http://www.mamicode.com/info-detail-1509515.html" target="_blank" rel="noopener">更多</a></p><h3 id="4-2-2、安装ubuntu到虚拟机"><a href="#4-2-2、安装ubuntu到虚拟机" class="headerlink" title="4.2.2、安装ubuntu到虚拟机"></a>4.2.2、安装ubuntu到虚拟机</h3><p>1)、下载ubuntu操作系统镜像</p><p>下载地址：<a href="https://www.ubuntu.com/download/desktop" target="_blank" rel="noopener">https://www.ubuntu.com/download/desktop</a></p><p>这里我下载的是ubuntu-16.04.3-desktop-amd64.iso</p><p><a href="752C59929F2F4478A49D794CDDD0F85F" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="752C59929F2F4478A49D794CDDD0F85F" class="lazyload"></a></p><p>2)、在VMware中安装ubuntu</p><p>打开VMware点击“创建新的虚拟机”</p><p><a href="4EEFA54B30624B5A8A0E7DA78615CC33" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="4EEFA54B30624B5A8A0E7DA78615CC33" class="lazyload"></a></p><p>向导选择自定义</p><p><a href="D6A423A2F49A48EC800E5208F289171B" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="D6A423A2F49A48EC800E5208F289171B" class="lazyload"></a></p><p>然后下一步再下一步，直到这里，稍后再安装系统</p><p><a href="B18AED600BC74E7EA71A0FFEDD7A7C2C" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="B18AED600BC74E7EA71A0FFEDD7A7C2C" class="lazyload"></a></p><p>后面设置处理器和内存的，电脑配置好的可以试试，否则采用默认的，博主这里是采用默认的，然后下一，直到这里，选择将虚拟机存储为单个磁盘：</p><p><a href="5C6A9F1634C74BFBA75C5505D8606B22" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="5C6A9F1634C74BFBA75C5505D8606B22" class="lazyload"></a></p><p>个人建议至少20G硬盘空间，内存建议给1.5G，当然也要看电脑本身的配置，1G的内存跑起来比较卡。</p><p>其它的步骤比较简单，更多细节可以参考这里，《<a href="http://blog.csdn.net/u013142781/article/details/50529030" target="_blank" rel="noopener">VMware Ubuntu安装详细过程</a>》。</p><h3 id="4-2-3、配置ubuntu系统"><a href="#4-2-3、配置ubuntu系统" class="headerlink" title="4.2.3、配置ubuntu系统"></a>4.2.3、配置ubuntu系统</h3><p>当ubuntu系统安装成功后，在虚拟机中可以启动ubuntu系统，启动后的系统如下：</p><p><a href="5255A726ABB64A549CFAB8762302F3A8" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="5255A726ABB64A549CFAB8762302F3A8" class="lazyload"></a></p><p>ubuntu系统的使用还是有许多内容的，这里需要设置的内容如下：</p><p>a)、设置上网</p><p>就是在ubuntu中可以访问外网，可以使用多种形式</p><p><a href="DBA023A822174FB0A6FA077452F7A904" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="DBA023A822174FB0A6FA077452F7A904" class="lazyload"></a></p><p>b)、设置语言</p><p>可以选择使用中文版的ubuntu语言环境</p><p><a href="B45A03098DF24217AEF6F47D535AC43A" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="B45A03098DF24217AEF6F47D535AC43A" class="lazyload"></a></p><p>c)、设置屏幕分辨率</p><p>如果不设置默认的屏幕比较小</p><p><a href="9316E79558094B0DBCCC7AF5C7AFD4C6" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="9316E79558094B0DBCCC7AF5C7AFD4C6" class="lazyload"></a></p><p>d)、设置以root超级管理员的身份登录</p><p>许多操作要求管理身份</p><p><a href="1F474D045AD5422C89E31D64FBB04ECE" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="1F474D045AD5422C89E31D64FBB04ECE" class="lazyload"></a></p><p>e)、安装VMware Tools工具</p><p>只有在VMware虚拟机中安装好了VMware Tools，才能实现主机与虚拟机之间的文件共享，同时可支持自由拖拽的功能，鼠标也可在虚拟机与主机之间自由移动（不用再按ctrl+alt），且虚拟机屏幕也可实现全屏化。<br>VMware Tools是VMware虚拟机中自带的一种增强工具，相当于VirtualBox中的增强功能（Sun VirtualBox Guest Additions），是VMware提供的增强虚拟显卡和硬盘性能、以及同步虚拟机与主机时钟的驱动程序。</p><p><a href="A9292B0AAFC545A8BF228E7D427D925A" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="A9292B0AAFC545A8BF228E7D427D925A" class="lazyload"></a></p><p>注意如果这里是灰色的需要您将linux.iso镜像加载到虚拟光驱中，一般在VM的安装目录下有，如果没有您需要自行下载。</p><p>说明：ubuntu的使用不是本文的重点，相关操作请大家自行查找。</p><h3 id="4-3、生成ngrok服务器与客户端应用程序"><a href="#4-3、生成ngrok服务器与客户端应用程序" class="headerlink" title="4.3、生成ngrok服务器与客户端应用程序"></a>4.3、生成ngrok服务器与客户端应用程序</h3><p><strong>4.3.1. 导出源代码</strong><br>ngrok的源代码托管在github上，可以先在ubuntu下安装git再将ngrok的源代码克隆到本地。</p><p><a href="F46F4B31CEDC4F9E856A0E3001EF335C" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="F46F4B31CEDC4F9E856A0E3001EF335C" class="lazyload"></a></p><p>其实也可以直接下载到本地后解压，这里使用命令行完成。</p><p>启动ubuntu，开打命令行（终端），如下所示：</p><p><a href="043040F649504CD3833B7C37E6B28A15" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="043040F649504CD3833B7C37E6B28A15" class="lazyload"></a></p><p>以root身份执行如下命令：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mkdir ngrok #创建名称为ngrok的目录</span><br><span class="line"></span><br><span class="line">apt-get update #更新包管理器</span><br><span class="line"></span><br><span class="line">apt-get install git  #安装git</span><br><span class="line"></span><br><span class="line">git clone https://github.com/inconshreveable/ngrok.git ngrok2 #将ngrok源代码克隆回本地</span><br></pre></td></tr></tbody></table></figure></div><p>成功执行后如下所示：</p><p><a href="80A794FED4194D09983E837F856EB4A1" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="80A794FED4194D09983E837F856EB4A1" class="lazyload"></a></p><p>导出成功后的源代码：</p><p><a href="7290BDE28DF946168DF88D47F93DA344" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="7290BDE28DF946168DF88D47F93DA344" class="lazyload"></a></p><p>PS. 直接在服务器上下载的话实在太慢，可以先在本地下载好，然后用ftp放到服务器上去直接用，如果安装了VMware tools直接拖进去就可以了。</p><h3 id="4-3-2-安装Go语言开发环境"><a href="#4-3-2-安装Go语言开发环境" class="headerlink" title="4.3.2. 安装Go语言开发环境"></a>4.3.2. 安装Go语言开发环境</h3><p>直接在命令模式下执行如下指令：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install golang #安装go语言</span><br></pre></td></tr></tbody></table></figure></div><p>执行结果如下：</p><p><a href="76E39DDD873F45C6A03421E8681F5EC1" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="76E39DDD873F45C6A03421E8681F5EC1" class="lazyload"></a></p><h3 id="4-3-3-更改ngrok域名"><a href="#4-3-3-更改ngrok域名" class="headerlink" title="4.3.3. 更改ngrok域名"></a>4.3.3. 更改ngrok域名</h3><p>在自己的域名管理中添加解析A记录，如下所示：</p><p><a href="A79F311B536C48EDB3153E1462DC1743" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="A79F311B536C48EDB3153E1462DC1743" class="lazyload"></a></p><p>将*.ngrok与ngrok都指向您的主机IP。</p><p>默认的域名是ngrok自己的，要替换成您自己的域名</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export GOPATH=/usr/local/ngrok/  #设置环境变量，Go语言的安装位置</span><br><span class="line">export NGROK_DOMAIN="ngrok.yourdomain.com"  #设置环境变量，ngrok域名</span><br></pre></td></tr></tbody></table></figure></div><p>PS. ngrok名称可以任意，推荐名称为ngrok或者tunnel </p><h3 id="4-3-4-为域名生成证书"><a href="#4-3-4-为域名生成证书" class="headerlink" title="4.3.4. 为域名生成证书"></a>4.3.4. 为域名生成证书</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">openssl genrsa -out rootCA.key 2048</span><br><span class="line">openssl req -x509 -new -nodes -key rootCA.key -subj "/CN=$NGROK_DOMAIN" -days 5000 -out rootCA.pem</span><br><span class="line">openssl genrsa -out server.key 2048</span><br><span class="line">openssl req -new -key server.key -subj "/CN=$NGROK_DOMAIN" -out server.csr</span><br><span class="line">openssl x509 -req -in server.csr -CA rootCA.pem -CAkey rootCA.key -CAcreateserial -out server.crt -days 5000</span><br></pre></td></tr></tbody></table></figure></div><p>生成后的结果如下：</p><p><a href="A927F6A6069F4EF486F1B7B623FA87C8" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="A927F6A6069F4EF486F1B7B623FA87C8" class="lazyload"></a></p><p>证书如下：</p><p><a href="CD9D906ADA7F472788EC35C10E58D13C" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="CD9D906ADA7F472788EC35C10E58D13C" class="lazyload"></a></p><h3 id="4-3-5-拷贝证书到指定位置"><a href="#4-3-5-拷贝证书到指定位置" class="headerlink" title="4.3.5. 拷贝证书到指定位置"></a>4.3.5. 拷贝证书到指定位置</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cp rootCA.pem assets/client/tls/ngrokroot.crt  #复制rootCA.pem到assets/client/tls/并更名为ngrokroot.crt</span><br><span class="line">cp server.crt assets/server/tls/snakeoil.crt #复制server.crt到assets/server/tls/并更名为snakeoil.crt</span><br><span class="line">cp server.key assets/server/tls/snakeoil.key #复制server.key到assets/server/tls/并更名为snakeoil.key</span><br></pre></td></tr></tbody></table></figure></div><p>运行结果：</p><p><a href="7DB5BD0F5DC7441A8758163E2BEAE9D4" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="7DB5BD0F5DC7441A8758163E2BEAE9D4" class="lazyload"></a></p><h3 id="4-3-6-编译"><a href="#4-3-6-编译" class="headerlink" title="4.3.6. 编译"></a>4.3.6. 编译</h3><p> 由于go语言的特性，在编译时直接生成机器码，所以在运行过程中并不需要go的环境（非托管应用）。在ngrok目录下，运行一下命令分别生成对应的客户端与服务端。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#win服务端</span><br><span class="line">GOOS=windows GOARCH=386 make release-server </span><br><span class="line">#win客户端</span><br><span class="line">GOOS=windows GOARCH=386 make release-client</span><br><span class="line">#linux服务端</span><br><span class="line">GOOS=linux GOARCH=386 make release-server</span><br><span class="line">#linux客户端</span><br><span class="line">GOOS=linux GOARCH=386 make release-client</span><br></pre></td></tr></tbody></table></figure></div><p>生成完成后，在工作目录的bin文件夹下，产生对应的文件。以编译windows平台为例，会产生“ngrok.exe”与“ngrokd.exe”这两个文件，前者客户端，后者需要运行在公网服务器上。</p><p>因为项目中引用了一些外部资源，生成会耗费一些时间，对网络也有一定的要求，太慢会中短，命令执行下如：</p><p><a href="852E47DFAED64958918332181FF8BD32" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="852E47DFAED64958918332181FF8BD32" class="lazyload"></a></p><p>生成结果：</p><p><a href="9625496141394A5CBE2CB7C7352793DB" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="9625496141394A5CBE2CB7C7352793DB" class="lazyload"></a></p><p>这里我还生成了两个运行在windows服务器与客户端的应用：</p><p><a href="0CDDE2E58BE14672958D63057DB36AFC" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="0CDDE2E58BE14672958D63057DB36AFC" class="lazyload"></a></p><p>ngrok.exe是客户端，ngrokd.exe是服务端，下面是比较连续的操作结果。</p><p><a href="0768FC08675D42D1BF3F5ACDC572DB18" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="0768FC08675D42D1BF3F5ACDC572DB18" class="lazyload"></a></p><p><a href="E3C2971EA9C645F791F77F82AD75023F" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="E3C2971EA9C645F791F77F82AD75023F" class="lazyload"></a></p><h1 id="五、部署服务器端主程序"><a href="#五、部署服务器端主程序" class="headerlink" title="五、部署服务器端主程序"></a>五、部署服务器端主程序</h1><h3 id="5-1、部署到Windows-Server服务器"><a href="#5-1、部署到Windows-Server服务器" class="headerlink" title="5.1、部署到Windows Server服务器"></a>5.1、部署到Windows Server服务器</h3><p>将生成的ngrokd.exe文件复制到windows服务器中，当然如果要部署到linux中也是没有问题的。</p><p>这里我将ngrokd.exe放在c:\grokeServer目录下：</p><p><a href="D6AF149E6E96414B99EBBBB0809DBDF6" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="D6AF149E6E96414B99EBBBB0809DBDF6" class="lazyload"></a></p><p>为了方便，我编写了一个批处理文件：ngrokserver2.bat</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ngrokd.exe -tlsKey="snakeoil.key" -tlsCrt="snakeoil.crt" -domain="ngrok.你的域名.com" -httpAddr=":801" -httpsAddr=":802"</span><br></pre></td></tr></tbody></table></figure></div><p>点击批处理运行结果如下：</p><p><a href="E511D596E9BA4C55BD999E63EBE01BF2" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="E511D596E9BA4C55BD999E63EBE01BF2" class="lazyload"></a></p><p>绑定的域名换成自己的域名，http使用801端口，https使用802端口，供客户端连接的管道端口设置为4443端口，必须前面的域名相同。</p><p>为了安全许多服务器会将端口屏蔽，我使用的是ECS服务器，默认801，802都是关闭的，需要手动开启，在阿里云的后台添加开放的端口就可了：</p><p><a href="0E85CEFC8ABB4AAC9DCC0FBC7D687BB7" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="0E85CEFC8ABB4AAC9DCC0FBC7D687BB7" class="lazyload"></a></p><h3 id="5-2、一键部署ngrok服务器（CentOS、Debian、Ubuntu）"><a href="#5-2、一键部署ngrok服务器（CentOS、Debian、Ubuntu）" class="headerlink" title="5.2、一键部署ngrok服务器（CentOS、Debian、Ubuntu）"></a>5.2、一键部署ngrok服务器（CentOS、Debian、Ubuntu）</h3><p>如果编译生成ngrok的源代码生成应用太麻烦，你可以选择网友写的工具，支持一键部署到安装平台：CentOS、Debian、Ubuntu。</p><p><a href="https://github.com/clangcn/ngrok-one-key-install" target="_blank" rel="noopener">https://github.com/clangcn/ngrok-one-key-install</a></p><h3 id="六、部署ngrok客户端"><a href="#六、部署ngrok客户端" class="headerlink" title="六、部署ngrok客户端"></a>六、部署ngrok客户端</h3><p>这里的客户端就是您的web应用程序所运行的主机，将ubuntu生成的ngrok.exe客户端应用复制到您的系统中：</p><p><a href="34E8DA7BF67A4AA0B329B39F379A86C9" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="34E8DA7BF67A4AA0B329B39F379A86C9" class="lazyload"></a></p><p>添加配置文件ngrok.cfg:</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">server_addr: "ngrok.你的域名.com:4443"</span><br><span class="line">trust_host_root_certs: false</span><br></pre></td></tr></tbody></table></figure></div><p> 添加批处理start.bat，如果只运行一次直接在命令行下输入命令也是一样的效果，内容如下：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ngrok.exe -subdomain kyt -config=ngrok.cfg 8987</span><br></pre></td></tr></tbody></table></figure></div><p>其中8987为端口号，运行成功的结果如下所示： </p><p><a href="A4489CA0156C4DF7A64510A39BE3EF59" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="A4489CA0156C4DF7A64510A39BE3EF59" class="lazyload"></a></p><p>看到这个界面时说明已成功了。</p><h1 id="七、启动客户端并测试"><a href="#七、启动客户端并测试" class="headerlink" title="七、启动客户端并测试"></a>七、启动客户端并测试</h1><p>打开浏览器，输入您映射后的域名就可以穿透内网访问您的web服务器了。</p><p><a href="4EA074CBDAE0428FA977F246F098EDDB" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="4EA074CBDAE0428FA977F246F098EDDB" class="lazyload"></a></p><h1 id="八、总结"><a href="#八、总结" class="headerlink" title="八、总结"></a>八、总结</h1><p>一开始选择错了平台，在windows花了不少时间，在ubuntu下顺利完成。</p><p>无论是客户端还是服务器端最好都做成服务，更方便与稳定。</p><p>由于服务器上同时运行着IIS，故服务端Ngrok启动时无法使用80端口，所以在上面，我使用了801作为Ngrok服务器的http端口，使用IIS的代理功能可以解决这个问题，点击这里。当然也可以使用nginx将80转换成其它端口。</p><p>许多内容都参考了网友的文章。</p><p><strong>如果服务器搭建好了，只运行客户端穿透内网一分钟够了(手动狗头)。</strong></p><p>欢迎您提供更加好的解决方案，欢迎您提供更多的免费代理服务器，我随时更新，谢谢！</p></body></html>]]></content>
      
      
      <categories>
          
          <category> 文件系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 文件系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>理解注解中的@Inherited</title>
      <link href="/2019/07/03/%E7%90%86%E8%A7%A3%E6%B3%A8%E8%A7%A3%E4%B8%AD%E7%9A%84@Inherited/"/>
      <url>/2019/07/03/%E7%90%86%E8%A7%A3%E6%B3%A8%E8%A7%A3%E4%B8%AD%E7%9A%84@Inherited/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><h2 id="Inherited："><a href="#Inherited：" class="headerlink" title="@Inherited："></a>@Inherited：</h2><p>   @Inherited 元注解是一个标记注解，@Inherited阐述了某个被标注的类型是被继承的。<br>如果一个使用了@Inherited修饰的annotation类型被用于一个class，则这个annotation将被用于该class的子类。 </p><p><strong>注意</strong>：@Inherited annotation类型是被标注过的class的子类所继承。类并不从它所实现的接口继承annotation， 方法并不从它所重载的方法继承annotation。 </p><p>　　当@Inherited annotation类型标注的annotation的Retention是RetentionPolicy.RUNTIME，则反射API增强了这种继承性。 如果我们使用java.lang.reflect去查询一个@Inherited annotation类型的annotation时，反射代码检查将展开工作： 检查class和其父类，直到发现指定的annotation类型被发现，或者到达类继承结构的顶层。 </p><p>看下面的例子： </p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target</span>(ElementType.TYPE)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> ATable {</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">name</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="meta">@Target</span>(ElementType.TYPE)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> BTable {</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">name</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@ATable</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Super</span> </span>{</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> superx;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">int</span> supery;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Super</span><span class="params">()</span> </span>{</span><br><span class="line">}</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">superX</span><span class="params">()</span></span>{  </span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">    }  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">superY</span><span class="params">()</span></span>{  </span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">    }  </span><br><span class="line">    </span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@BTable</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Sub</span> <span class="keyword">extends</span> <span class="title">Super</span></span>{</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> subx;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">int</span> suby;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">Sub</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{  </span><br><span class="line">}  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Sub</span><span class="params">(<span class="keyword">int</span> i)</span></span>{  </span><br><span class="line">    }  </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">subX</span><span class="params">()</span></span>{  </span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">    }  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">subY</span><span class="params">()</span></span>{  </span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">    }  </span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestMain</span> </span>{</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line"></span><br><span class="line">Class<sub> clazz = Sub<span class="class">.<span class="keyword">class</span></span>;</sub></span><br><span class="line">    </span><br><span class="line">System.out.println(<span class="string">"============================Field==========================="</span>);  </span><br><span class="line">System.out.println(Arrays.toString(clazz.getFields()));</span><br><span class="line">        System.out.println(Arrays.toString(clazz.getDeclaredFields()));  <span class="comment">//all + 自身  </span></span><br><span class="line">        System.out.println(<span class="string">"============================Method==========================="</span>);</span><br><span class="line">        System.out.println(Arrays.toString(clazz.getMethods()));   <span class="comment">//public + 继承  </span></span><br><span class="line">        <span class="comment">//all + 自身  </span></span><br><span class="line">        System.out.println(Arrays.toString(clazz.getDeclaredMethods()));</span><br><span class="line">        System.out.println(<span class="string">"============================Constructor==========================="</span>);  </span><br><span class="line">        System.out.println(Arrays.toString(clazz.getConstructors()));  </span><br><span class="line">                System.out.println(Arrays.toString(clazz.getDeclaredConstructors()));  </span><br><span class="line">        System.out.println(<span class="string">"============================AnnotatedElement==========================="</span>);  </span><br><span class="line">        <span class="comment">//注解DBTable2是否存在于元素上  </span></span><br><span class="line">        System.out.println(clazz.isAnnotationPresent(BTable<span class="class">.<span class="keyword">class</span>))</span>;  </span><br><span class="line">        <span class="comment">//如果存在该元素的指定类型的注释DBTable2，则返回这些注释，否则返回 null。  </span></span><br><span class="line">        System.out.println(clazz.getAnnotation(BTable<span class="class">.<span class="keyword">class</span>))</span>;  </span><br><span class="line">        <span class="comment">//继承  </span></span><br><span class="line">        System.out.println(Arrays.toString(clazz.getAnnotations()));  </span><br><span class="line">        System.out.println(Arrays.toString(clazz.getDeclaredAnnotations()));  <span class="comment">////自身  </span></span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p>分析下这段代码，这里定义了两个annotion，其中ATable使用了@Inherited, BTable没有使用  @Inherited,类Super和类Sub分别使用了ATable和BTable这两个注解，并且Sub类 继承Super类。 </p><p>这段程序的运行结果如下： </p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">============================Field===========================</span><br><span class="line">[<span class="keyword">public</span> <span class="keyword">int</span> annotion.inherit.Sub.suby, <span class="keyword">public</span> <span class="keyword">int</span> annotion.inherit.Super.supery]</span><br><span class="line">[<span class="keyword">private</span> <span class="keyword">int</span> annotion.inherit.Sub.subx, <span class="keyword">public</span> <span class="keyword">int</span> annotion.inherit.Sub.suby]</span><br><span class="line">============================Method===========================</span><br><span class="line">[<span class="keyword">public</span> <span class="keyword">int</span> annotion.inherit.Sub.subY(), <span class="keyword">public</span> <span class="keyword">int</span> annotion.inherit.Super.superY(), <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> java.lang.Object.wait() <span class="keyword">throws</span> java.lang.InterruptedException, <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> java.lang.Object.wait(<span class="keyword">long</span>,<span class="keyword">int</span>) <span class="keyword">throws</span> java.lang.InterruptedException, <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">native</span> <span class="keyword">void</span> java.lang.Object.wait(<span class="keyword">long</span>) <span class="keyword">throws</span> java.lang.InterruptedException, <span class="keyword">public</span> <span class="keyword">boolean</span> java.lang.Object.equals(java.lang.Object), <span class="keyword">public</span> java.lang.String java.lang.Object.toString(), <span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">int</span> java.lang.Object.hashCode(), <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">native</span> java.lang.Class java.lang.Object.getClass(), <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">native</span> <span class="keyword">void</span> java.lang.Object.notify(), <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">native</span> <span class="keyword">void</span> java.lang.Object.notifyAll()]</span><br><span class="line">[<span class="keyword">private</span> <span class="keyword">int</span> annotion.inherit.Sub.subX(), <span class="keyword">public</span> <span class="keyword">int</span> annotion.inherit.Sub.subY()]</span><br><span class="line">============================Constructor===========================</span><br><span class="line">[<span class="keyword">public</span> annotion.inherit.Sub(<span class="keyword">int</span>)]</span><br><span class="line">[<span class="keyword">private</span> annotion.inherit.Sub(), <span class="keyword">public</span> annotion.inherit.Sub(<span class="keyword">int</span>)]</span><br><span class="line">============================AnnotatedElement===========================</span><br><span class="line"><span class="keyword">true</span></span><br><span class="line"><span class="meta">@annotion</span>.inherit.BTable(name=)</span><br><span class="line">[<span class="meta">@annotion</span>.inherit.ATable(name=), <span class="meta">@annotion</span>.inherit.BTable(name=)]</span><br><span class="line">[<span class="meta">@annotion</span>.inherit.BTable(name=)]</span><br></pre></td></tr></tbody></table></figure></div><p>getFields()获得某个类的所有的公共（public）的字段，包括父类。 </p><p>getDeclaredFields()获得某个类的所有申明的字段，即包括public、private和proteced，<br>但是不包括父类的申明字段。 同样类似的还有getConstructors()和getDeclaredConstructors()， getMethods()和getDeclaredMethods()。 </p><p>因此：Field的打印好理解，因为sub是super类的子类，会继承super的类<br>同样method和constructor的打印也是如此。 </p><p>clazz.getAnnotations()可以打印出当前类的注解和父类的注解<br>clazz.getDeclaredAnnotations()只会打印出当前类的注解 </p><p>如果注解ATable把@Inherit去掉。那么后面四行的输出结果为： </p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">true</span></span><br><span class="line"><span class="meta">@annotion</span>.inherit.BTable(name=)</span><br><span class="line">[<span class="meta">@annotion</span>.inherit.BTable(name=)]</span><br><span class="line">[<span class="meta">@annotion</span>.inherit.BTable(name=)]</span><br></pre></td></tr></tbody></table></figure></div><p>*<em>无法获取到@ATable的注解， 也就是说注解和普通类的区别是如果一个子类想获取到父类上的注解信息， 那么必须在父类上使用的注解上面 加上@Inherit关键字 *</em></p></body></html>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> 注解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 注解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx+Center OS 7.2 开机启动设置</title>
      <link href="/2019/05/16/Nginx+Center%20OS%207.2%20%E5%BC%80%E6%9C%BA%E5%90%AF%E5%8A%A8%E8%AE%BE%E7%BD%AE/"/>
      <url>/2019/05/16/Nginx+Center%20OS%207.2%20%E5%BC%80%E6%9C%BA%E5%90%AF%E5%8A%A8%E8%AE%BE%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><p>centos 7以上是用Systemd进行系统初始化的，Systemd 是 Linux 系统中最新的初始化系统（init），它主要的设计目标是克服 sysvinit 固有的缺点，提高系统的启动速度。关于Systemd的详情介绍在<a href="www.yourlink.com">这里</a>。</p><p>Systemd服务文件以.service结尾，比如现在要建立nginx为开机启动，如果用yum install命令安装的，yum命令会自动创建nginx.service文件，直接用命令：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemcel enable nginx.service</span><br></pre></td></tr></tbody></table></figure></div><p>设置开机启动即可。</p><p>在这里我是用源码编译安装的，所以要手动创建nginx.service服务文件。<br>开机没有登陆情况下就能运行的程序，存在系统服务（system）里，即：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/lib/systemd/system/</span><br></pre></td></tr></tbody></table></figure></div><h3 id="在系统服务目录里创建nginx-service文件"><a href="#在系统服务目录里创建nginx-service文件" class="headerlink" title="在系统服务目录里创建nginx.service文件"></a>在系统服务目录里创建nginx.service文件</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /lib/systemd/system/nginx.service</span><br></pre></td></tr></tbody></table></figure></div><p>内容如下:</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=nginx</span><br><span class="line">After=network.target</span><br><span class="line">  </span><br><span class="line">[Service]</span><br><span class="line">Type=forking</span><br><span class="line">ExecStart=/usr/local/nginx/sbin/nginx</span><br><span class="line">ExecReload=/usr/local/nginx/sbin/nginx -s reload</span><br><span class="line">ExecStop=/usr/local/nginx/sbin/nginx -s quit</span><br><span class="line">PrivateTmp=true</span><br><span class="line">  </span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></tbody></table></figure></div><ul><li>[Unit]:服务的说明</li><li>Description:描述服务</li><li>After:描述服务类别</li><li>[Service]服务运行参数的设置</li><li>Type=forking是后台运行的形式</li><li>ExecStart为服务的具体运行命令</li><li>ExecReload为重启命令</li><li>ExecStop为停止命令</li><li>PrivateTmp=True表示给服务分配独立的临时空间</li></ul><p>注意：[Service]的启动、重启、停止命令全部要求使用绝对路径<br>[Install]运行级别下服务安装的相关设置，可设置为多用户，即系统运行级别为3</p><p>保存退出。</p><h3 id="设置开机启动"><a href="#设置开机启动" class="headerlink" title="设置开机启动"></a>设置开机启动</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl enable nginx.service</span><br></pre></td></tr></tbody></table></figure></div><h3 id="其他命令"><a href="#其他命令" class="headerlink" title="其他命令"></a>其他命令</h3><p>启动nginx服务</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start nginx.service</span><br></pre></td></tr></tbody></table></figure></div><p>设置开机自启动</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl enable nginx.service</span><br></pre></td></tr></tbody></table></figure></div><p>停止开机自启动</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl disable nginx.service</span><br></pre></td></tr></tbody></table></figure></div><p>查看服务当前状态</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl status nginx.service</span><br></pre></td></tr></tbody></table></figure></div><p>重新启动服务</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart nginx.service</span><br></pre></td></tr></tbody></table></figure></div><p>查看所有已启动的服务</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl list-units --type=service</span><br></pre></td></tr></tbody></table></figure></div><h3 id="Systemd-命令和-sysvinit-命令的对照表"><a href="#Systemd-命令和-sysvinit-命令的对照表" class="headerlink" title="Systemd 命令和 sysvinit 命令的对照表"></a>Systemd 命令和 sysvinit 命令的对照表</h3><p><a href="https://i.loli.net/2019/05/16/5cdd17a24c56278117.png" data-fancybox="group" data-caption="alt" class="fancybox"><img alt="alt" title="alt" data-src="https://i.loli.net/2019/05/16/5cdd17a24c56278117.png" class="lazyload"></a></p><h3 id="Sysvinit-运行级别和-systemd-目标的对应表"><a href="#Sysvinit-运行级别和-systemd-目标的对应表" class="headerlink" title="Sysvinit 运行级别和 systemd 目标的对应表"></a>Sysvinit 运行级别和 systemd 目标的对应表</h3><p><a href="https://i.loli.net/2019/05/16/5cdd17b62eaf678001.png" data-fancybox="group" data-caption="alt" class="fancybox"><img alt="alt" title="alt" data-src="https://i.loli.net/2019/05/16/5cdd17b62eaf678001.png" class="lazyload"></a></p></body></html>]]></content>
      
      
      <categories>
          
          <category> Nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nginx之proxy_pass指令完全拆解</title>
      <link href="/2019/02/18/nginx%E4%B9%8Bproxy_pass%E6%8C%87%E4%BB%A4%E5%AE%8C%E5%85%A8%E6%8B%86%E8%A7%A3/"/>
      <url>/2019/02/18/nginx%E4%B9%8Bproxy_pass%E6%8C%87%E4%BB%A4%E5%AE%8C%E5%85%A8%E6%8B%86%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><h3 id="一、proxy-pass的nginx官方指南"><a href="#一、proxy-pass的nginx官方指南" class="headerlink" title="一、proxy_pass的nginx官方指南"></a>一、proxy_pass的nginx官方指南</h3><p>nginx中有两个模块都有proxy_pass指令。</p><ul><li><p>ngx_http_proxy_module的proxy_pass：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">语法: proxy_pass URL;</span><br><span class="line">场景: location, if in location, limit_except</span><br><span class="line">说明: 设置后端代理服务器的协议(protocol)和地址(address),以及location中可以匹配的一个可选的URI。协议可以是"http"或"https"。地址可以是一个域名或ip地址和端口，或者一个 unix-domain socket 路径。  </span><br><span class="line">详见官方文档: http://nginx.org/en/docs/http/ngx_http_proxy_module.html#proxy_pass</span><br><span class="line">URI的匹配，本文第四部分重点讨论。</span><br></pre></td></tr></tbody></table></figure></div></li><li><p>ngx_stream_proxy_module的proxy_pass：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">语法: proxy_pass address;</span><br><span class="line">场景: server</span><br><span class="line">说明: 设置后端代理服务器的地址。这个地址(address)可以是一个域名或ip地址和端口，或者一个 unix-domain socket路径。  </span><br><span class="line">详见官方文档: http://nginx.org/en/docs/stream/ngx_stream_proxy_module.html#proxy_pass</span><br></pre></td></tr></tbody></table></figure></div></li></ul><h3 id="二、两个proxy-pass的关系和区别"><a href="#二、两个proxy-pass的关系和区别" class="headerlink" title="二、两个proxy_pass的关系和区别"></a>二、两个proxy_pass的关系和区别</h3><p>在两个模块中，两个proxy_pass都是用来做后端代理的指令。<br><strong>ngx_stream_proxy_module</strong>模块的proxy_pass指令只能在server段使用使用, 只需要提供域名或ip地址和端口。可以理解为端口转发，可以是tcp端口，也可以是udp端口。</p><p><strong>ngx_http_proxy_module</strong>模块的proxy_pass指令需要在location段，location中的if段，limit_except段中使用，处理需要提供域名或ip地址和端口外，还需要提供协议，如”http”或”https”，还有一个可选的uri可以配置。</p><h3 id="三、proxy-pass的具体用法"><a href="#三、proxy-pass的具体用法" class="headerlink" title="三、proxy_pass的具体用法"></a>三、proxy_pass的具体用法</h3><p>ngx_stream_proxy_module模块的proxy_pass指令</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">nginx</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight nginx"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> {</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">127.0.0.1:12345</span>;</span><br><span class="line">    <span class="attribute">proxy_pass</span> <span class="number">127.0.0.1:8080</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="section">server</span> {</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">12345</span>;</span><br><span class="line">    <span class="attribute">proxy_connect_timeout</span> <span class="number">1s</span>;</span><br><span class="line">    <span class="attribute">proxy_timeout</span> <span class="number">1m</span>;</span><br><span class="line">    <span class="attribute">proxy_pass</span> example.com:<span class="number">12345</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="section">server</span> {</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">53</span> udp;</span><br><span class="line">    <span class="attribute">proxy_responses</span> <span class="number">1</span>;</span><br><span class="line">    <span class="attribute">proxy_timeout</span> <span class="number">20s</span>;</span><br><span class="line">    <span class="attribute">proxy_pass</span> dns.example.com:<span class="number">53</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="section">server</span> {</span><br><span class="line">    <span class="attribute">listen</span> [::<span class="number">1</span>]:<span class="number">12345</span>;</span><br><span class="line">    <span class="attribute">proxy_pass</span> unix:/tmp/stream.socket;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p>ngx_http_proxy_module模块的proxy_pass指令</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">nginx</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight nginx"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> {</span><br><span class="line">    <span class="attribute">listen</span>      <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span> www.test.com;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 正常代理，不修改后端url的</span></span><br><span class="line">    <span class="attribute">location</span> /some/path/ {</span><br><span class="line">        <span class="attribute">proxy_pass</span> http://127.0.0.1;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 修改后端url地址的代理（本例后端地址中，最后带了一个斜线)</span></span><br><span class="line">    <span class="attribute">location</span> /testb {</span><br><span class="line">        <span class="attribute">proxy_pass</span> http://www.other.com:8801/;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 使用 if in location</span></span><br><span class="line">    <span class="attribute">location</span> /google {</span><br><span class="line">        <span class="attribute">if</span> ( <span class="variable">$geoip_country_code</span> <span class="regexp">~ (RU|CN)</span> ) {</span><br><span class="line">            <span class="attribute">proxy_pass</span> http://www.google.hk;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="attribute">location</span> /yongfu/ {</span><br><span class="line">        <span class="comment"># 没有匹配 limit_except 的，代理到 unix:/tmp/backend.socket:/uri/</span></span><br><span class="line">        proxy_pass http://unix:/tmp/backend.socket:/uri/;;</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 匹配到请求方法为: PUT or DELETE, 代理到9080</span></span><br><span class="line">        <span class="attribute">limit_except</span> PUT DELETE {</span><br><span class="line">            <span class="attribute">proxy_pass</span> http://127.0.0.1:9080;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><h3 id="四、proxy-pass后，后端服务器的url-request-uri-情况分析"><a href="#四、proxy-pass后，后端服务器的url-request-uri-情况分析" class="headerlink" title="四、proxy_pass后，后端服务器的url(request_uri)情况分析"></a>四、proxy_pass后，后端服务器的url(request_uri)情况分析</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">nginx</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight nginx"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> {</span><br><span class="line">    <span class="attribute">listen</span>      <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span> www.test.com;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 情形A</span></span><br><span class="line">    <span class="comment"># 访问 http://www.test.com/testa/aaaa</span></span><br><span class="line">    <span class="comment"># 后端的request_uri为: /testa/aaaa</span></span><br><span class="line">    <span class="attribute">location</span><span class="regexp"> ^~</span> /testa/ {</span><br><span class="line">        <span class="attribute">proxy_pass</span> http://127.0.0.1:8801;</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 情形B</span></span><br><span class="line">    <span class="comment"># 访问 http://www.test.com/testb/bbbb</span></span><br><span class="line">    <span class="comment"># 后端的request_uri为: /bbbb</span></span><br><span class="line">    <span class="attribute">location</span><span class="regexp"> ^~</span> /testb/ {</span><br><span class="line">        <span class="attribute">proxy_pass</span> http://127.0.0.1:8801/;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 情形C</span></span><br><span class="line">    <span class="comment"># 下面这段location是正确的</span></span><br><span class="line">    <span class="attribute">location</span> <span class="regexp">~ /testc</span> {</span><br><span class="line">        <span class="attribute">proxy_pass</span> http://127.0.0.1:8801;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 情形D</span></span><br><span class="line">    <span class="comment"># 下面这段location是错误的</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment"># nginx -t 时，会报如下错误: </span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment"># nginx: [emerg] "proxy_pass" cannot have URI part in location given by regular </span></span><br><span class="line">    <span class="comment"># expression, or inside named location, or inside "if" statement, or inside </span></span><br><span class="line">    <span class="comment"># "limit_except" block in /opt/app/nginx/conf/vhost/test.conf:17</span></span><br><span class="line">    <span class="comment"># </span></span><br><span class="line">    <span class="comment"># 当location为正则表达式时，proxy_pass 不能包含URI部分。本例中包含了"/"</span></span><br><span class="line">    <span class="attribute">location</span> <span class="regexp">~ /testd</span> {</span><br><span class="line">        <span class="attribute">proxy_pass</span> http://127.0.0.1:8801/;   <span class="comment"># 记住，location为正则表达式时，不能这样写！！！</span></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 情形E</span></span><br><span class="line">    <span class="comment"># 访问 http://www.test.com/ccc/bbbb</span></span><br><span class="line">    <span class="comment"># 后端的request_uri为: /aaa/ccc/bbbb</span></span><br><span class="line">    <span class="attribute">location</span> /ccc/ {</span><br><span class="line">        <span class="attribute">proxy_pass</span> http://127.0.0.1:8801/aaa<span class="variable">$request_uri</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 情形F</span></span><br><span class="line">    <span class="comment"># 访问 http://www.test.com/namea/ddd</span></span><br><span class="line">    <span class="comment"># 后端的request_uri为: /yongfu?namea=ddd</span></span><br><span class="line">    <span class="attribute">location</span> /namea/ {</span><br><span class="line">        <span class="attribute">rewrite</span>    /namea/([^/]+) /yongfu?namea=<span class="variable">$1</span> <span class="literal">break</span>;</span><br><span class="line">        <span class="attribute">proxy_pass</span> http://127.0.0.1:8801;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 情形G</span></span><br><span class="line">    <span class="comment"># 访问 http://www.test.com/nameb/eee</span></span><br><span class="line">    <span class="comment"># 后端的request_uri为: /yongfu?nameb=eee</span></span><br><span class="line">    <span class="attribute">location</span> /nameb/ {</span><br><span class="line">        <span class="attribute">rewrite</span>    /nameb/([^/]+) /yongfu?nameb=<span class="variable">$1</span> <span class="literal">break</span>;</span><br><span class="line">        <span class="attribute">proxy_pass</span> http://127.0.0.1:8801/;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="attribute">access_log</span> /data/logs/www/www.test.com.log;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="section">server</span> {</span><br><span class="line">    <span class="attribute">listen</span>      <span class="number">8801</span>;</span><br><span class="line">    <span class="attribute">server_name</span> www.test.com;</span><br><span class="line">    </span><br><span class="line">    <span class="attribute">root</span>        /data/www/test;</span><br><span class="line">    <span class="attribute">index</span>       index.php index.html;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">rewrite</span><span class="regexp"> ^(.*)$</span> /test.php?u=<span class="variable">$1</span> <span class="literal">last</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">location</span> <span class="regexp">~ \.php$</span> {</span><br><span class="line">        <span class="attribute">try_files</span> <span class="variable">$uri</span> =<span class="number">404</span>;</span><br><span class="line">        <span class="attribute">fastcgi_pass</span> unix:/tmp/php-cgi.sock;</span><br><span class="line">        <span class="attribute">fastcgi_index</span> index.php;</span><br><span class="line">        <span class="attribute">include</span> fastcgi.conf;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="attribute">access_log</span> /data/logs/www/www.test.com.<span class="number">8801</span>.log;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><ul><li>情形A和情形B进行对比，可以知道proxy_pass后带一个URI,可以是斜杠(/)也可以是其他uri，对后端request_uri变量的影响。</li><li>情形D说明，当location为正则表达式时，proxy_pass不能包含URI部分。</li><li>情形E通过变量($request_uri, 也可以是其他变量)，对后端的request_uri进行改写。</li><li>情形F和情形G通过rewrite配合break标志,对url进行改写，并改写后端的request_uri。需要注意，proxy_pass地址的URI部分在情形G中无效，不管如何设置，都会被忽略。</li></ul></body></html>]]></content>
      
      
      <categories>
          
          <category> Nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nginx之proxy_pass代理后端https请求完全拆解</title>
      <link href="/2019/02/18/nginx%E4%B9%8Bproxy_pass%E4%BB%A3%E7%90%86%E5%90%8E%E7%AB%AFhttps%E8%AF%B7%E6%B1%82%E5%AE%8C%E5%85%A8%E6%8B%86%E8%A7%A3/"/>
      <url>/2019/02/18/nginx%E4%B9%8Bproxy_pass%E4%BB%A3%E7%90%86%E5%90%8E%E7%AB%AFhttps%E8%AF%B7%E6%B1%82%E5%AE%8C%E5%85%A8%E6%8B%86%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本文解释了怎么对nginx和后端服务器组或代理服务器进行加密http通信。</p><h3 id="获取SSL服务端证书"><a href="#获取SSL服务端证书" class="headerlink" title="获取SSL服务端证书"></a>获取SSL服务端证书</h3><p>你可以从一个可信证书颁发机构(CA)购买一个服务器证书, 或者你可以使用openssl库创建一个内部CA， 并给自己颁发证书。这个服务器端证书和私钥需要部署在后端的每一个服务器上。</p><h3 id="获取SSL客户端证书"><a href="#获取SSL客户端证书" class="headerlink" title="获取SSL客户端证书"></a>获取SSL客户端证书</h3><p>nignx使用一个SSL客户端证书来对后端服务器组来标识自己。这个客户端证书必须是被一个可信CA签名的，并且和相匹配的私钥一起部署在nginx中。<br>你还需要在后端服务器上配置好所有的来源SSL连接都需要客户端证书，并信任这个CA颁发的nginx客户端证书。 然后当nginx连接后端时，将提供客户端证书，并且后端将会接收这个连接。</p><h3 id="配置nginx"><a href="#配置nginx" class="headerlink" title="配置nginx"></a>配置nginx</h3><p>首先，改变相应URL到支持SSL连接的后端服务器组。在nginx的配置文件中，指明proxy_pass指令在代理服务器或后端服务器组中使用”https”协议:</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">nginx</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight nginx"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">location</span> /upstream {</span><br><span class="line">    <span class="attribute">proxy_pass</span> https://backend.example.com;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p>增加客户端证书和私钥，用于验证nginx和每个后端服务器。使用proxy_ssl_certificate 和 proxy_ssl_certificate_key指令:</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">nginx</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight nginx"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">location</span> /upstream {  </span><br><span class="line">    <span class="attribute">proxy_pass</span>                https://backend.example.com;  </span><br><span class="line">    <span class="attribute">proxy_ssl_certificate</span>     /etc/nginx/client.pem;  </span><br><span class="line">    <span class="attribute">proxy_ssl_certificate_key</span> /etc/nginx/client.key  </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p>如果你在后端服务器使用了自签名证书或者使用了自建CA，你需要配置proxy_ssl_trusted_certificate. 这个文件必须是PEM格式的。另外还可以配置proxy_ssl_verify和proxy_ssl_verfiy_depth指令， 用来验证安全证书：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">nginx</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight nginx"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">location</span> /upstream {</span><br><span class="line">    ...</span><br><span class="line">    <span class="attribute">proxy_ssl_trusted_certificate</span> /etc/nginx/trusted_ca_cert.crt;</span><br><span class="line">    <span class="attribute">proxy_ssl_verify</span>       <span class="literal">on</span>;</span><br><span class="line">    <span class="attribute">proxy_ssl_verify_depth</span> <span class="number">2</span>;</span><br><span class="line">    ...</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p>每一个新的SSL连接都需要在服务端和客户端进行一个完整的SSL握手过程，这非常耗费CPU计算资源。为了是nignx代理预先协商连接参数，使用一种简略的握手过程，增加proxy_ssl_session_reuse指令配置:</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">nginx</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight nginx"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">location</span> /upstream {</span><br><span class="line">    ...</span><br><span class="line">    <span class="attribute">proxy_ssl_session_reuse</span> <span class="literal">on</span>;</span><br><span class="line">    ...</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p>可选的，你也可以配置使用的SSL协议和SSL秘钥算法:</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">nginx</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight nginx"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">location</span> /upstream {</span><br><span class="line">        ...</span><br><span class="line">        <span class="attribute">proxy_ssl_protocols</span> TLSv1 TLSv1.<span class="number">1</span> TLSv1.<span class="number">2</span>;</span><br><span class="line">        <span class="attribute">proxy_ssl_ciphers</span>   HIGH:!aNULL:!MD5;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><h3 id="配置后端服务器"><a href="#配置后端服务器" class="headerlink" title="配置后端服务器"></a>配置后端服务器</h3><p>每一个后端服务器都必须配置成接受https连接。每一个后端服务器需要使用ssl_certificate和ssl_certificate_key指令来指定服务器证书和私钥的文件路径:</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">nginx</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight nginx"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> {</span><br><span class="line">    <span class="attribute">listen</span>              <span class="number">443</span> ssl;</span><br><span class="line">    <span class="attribute">server_name</span>         backend1.example.com;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">ssl_certificate</span>     /etc/ssl/certs/server.crt;</span><br><span class="line">    <span class="attribute">ssl_certificate_key</span> /etc/ssl/certs/server.key;</span><br><span class="line">    ...</span><br><span class="line">    <span class="attribute">location</span> /yourapp {</span><br><span class="line">        <span class="attribute">proxy_pass</span> http://url_to_app.com;</span><br><span class="line">        ...</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p>使用ssl_client_certificat指令来设定客户端证书的文件路径:</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">nginx</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight nginx"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> {</span><br><span class="line">    ...</span><br><span class="line">    <span class="attribute">ssl_client_certificate</span> /etc/ssl/certs/ca.crt;</span><br><span class="line">    <span class="attribute">ssl_verify_client</span>      <span class="literal">off</span>;</span><br><span class="line">    ...</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><h3 id="完整示例"><a href="#完整示例" class="headerlink" title="完整示例"></a>完整示例</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">nginx</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight nginx"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">http</span> {</span><br><span class="line">    ...</span><br><span class="line">    <span class="attribute">upstream</span> backend.example.com {</span><br><span class="line">        <span class="attribute">server</span> backend1.example.com:<span class="number">443</span>;</span><br><span class="line">        <span class="attribute">server</span> backend2.example.com:<span class="number">443</span>;</span><br><span class="line">   }</span><br><span class="line"></span><br><span class="line">    <span class="section">server</span> {</span><br><span class="line">        <span class="attribute">listen</span>      <span class="number">80</span>;</span><br><span class="line">        <span class="attribute">server_name</span> www.example.com;</span><br><span class="line">        ...</span><br><span class="line"></span><br><span class="line">        <span class="attribute">location</span> /upstream {</span><br><span class="line">            <span class="attribute">proxy_pass</span>                    https://backend.example.com;</span><br><span class="line">            <span class="attribute">proxy_ssl_certificate</span>         /etc/nginx/client.pem;</span><br><span class="line">            <span class="attribute">proxy_ssl_certificate_key</span>     /etc/nginx/client.key</span><br><span class="line">            proxy_ssl_protocols           TLSv1 TLSv1.<span class="number">1</span> TLSv1.<span class="number">2</span>;</span><br><span class="line">            <span class="attribute">proxy_ssl_ciphers</span>             HIGH:!aNULL:!MD5;</span><br><span class="line">            <span class="attribute">proxy_ssl_trusted_certificate</span> /etc/nginx/trusted_ca_cert.crt;</span><br><span class="line"></span><br><span class="line">            <span class="attribute">proxy_ssl_verify</span>        <span class="literal">on</span>;</span><br><span class="line">            <span class="attribute">proxy_ssl_verify_depth</span>  <span class="number">2</span>;</span><br><span class="line">            <span class="attribute">proxy_ssl_session_reuse</span> <span class="literal">on</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="section">server</span> {</span><br><span class="line">        <span class="attribute">listen</span>      <span class="number">443</span> ssl;</span><br><span class="line">        <span class="attribute">server_name</span> backend1.example.com;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">ssl_certificate</span>        /etc/ssl/certs/server.crt;</span><br><span class="line">        <span class="attribute">ssl_certificate_key</span>    /etc/ssl/certs/server.key;</span><br><span class="line">        <span class="attribute">ssl_client_certificate</span> /etc/ssl/certs/ca.crt;</span><br><span class="line">        <span class="attribute">ssl_verify_client</span>      <span class="literal">off</span>;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">location</span> /yourapp {</span><br><span class="line">            <span class="attribute">proxy_pass</span> http://url_to_app.com;</span><br><span class="line">        ...</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">    <span class="section">server</span> {</span><br><span class="line">        <span class="attribute">listen</span>      <span class="number">443</span> ssl;</span><br><span class="line">        <span class="attribute">server_name</span> backend2.example.com;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">ssl_certificate</span>        /etc/ssl/certs/server.crt;</span><br><span class="line">        <span class="attribute">ssl_certificate_key</span>    /etc/ssl/certs/server.key;</span><br><span class="line">        <span class="attribute">ssl_client_certificate</span> /etc/ssl/certs/ca.crt;</span><br><span class="line">        <span class="attribute">ssl_verify_client</span>      <span class="literal">off</span>;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">location</span> /yourapp {</span><br><span class="line">            <span class="attribute">proxy_pass</span> http://url_to_app.com;</span><br><span class="line">        ...</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p>在这个示例中， proxy_pass指令设置使用了”https”协议，所以nginx转发到后端服务器的流量是安全的。</p><p>当一个安全的连接第一次从nginx转发到后端服务器，将会实施一次完整的握手过程。</p><ul><li>proxy_ssl_certificate指令设置了后端服务器需要的PEM格式证书的文件位置。</li><li>proxy_ssl_certificate_key指令设置了证书的私钥位置。proxy_ssl_protocols和</li><li>proxy_ssl_ciphers指令控制使用的协议和秘钥算法。</li></ul><p>因为proxy_ssl_session_reuse指令配置，当下一次nginx转发一个连接到后端服务器时，会话参数会被重复使用，从而更快的建立安全连接。</p><p><strong>proxy_ssl_trusted_certificate</strong>指令设置的那个可信CA证书文件是用来验证后端服务器的证书。</p><p><strong>proxy_ssl_verify_depth</strong>指令指定了证书链检查的深度。proxy_ssl_verify指令验证证书的有效性。</p></body></html>]]></content>
      
      
      <categories>
          
          <category> Nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>go-fastdfs 小巧灵活的文件系统</title>
      <link href="/2019/01/29/go-fastdfs%20%E5%B0%8F%E5%B7%A7%E7%81%B5%E6%B4%BB%E7%9A%84%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/"/>
      <url>/2019/01/29/go-fastdfs%20%E5%B0%8F%E5%B7%A7%E7%81%B5%E6%B4%BB%E7%9A%84%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><h1 id="spring-boot-go-fastdfs"><a href="#spring-boot-go-fastdfs" class="headerlink" title="spring-boot-go-fastdfs"></a>spring-boot-go-fastdfs</h1><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>go-fastdfs是一个基于go语言开发的开源文件系统，go-fastdfs（类fastdfs）在运维管理等方面优于fastdfs，更人性化。<br>执行程序：<a href="https://github.com/sjqzhang/go-fastdfs/releases" target="_blank" rel="noopener">https://github.com/sjqzhang/go-fastdfs/releases</a><br>源码：<a href="https://github.com/sjqzhang/go-fastdfs" target="_blank" rel="noopener">https://github.com/sjqzhang/go-fastdfs</a></p><h3 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h3><ul><li>支持curl命令上传</li><li>支持浏览器上传</li><li>支持HTTP下载</li><li>支持多机自动同步</li><li>类fastdfs</li><li>高性能 （使用leveldb作为kv库）</li><li>高可靠（设计极其简单，使用成熟组件）</li><li>无中心设计</li></ul><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ul><li>无依赖(单一文件）</li><li>自动同步</li><li>失败自动修复</li><li>按天分目录方便维护</li><li>支持不同的场景</li><li>文件自动去重</li><li>支持目录自定义</li><li>支持保留原文件名</li><li>支持自动生成唯一文件名</li><li>支持浏览器上传</li><li>支持查看集群文件信息</li><li>支持集群监控邮件告警</li><li>支持token下载　token=md5(file_md5+timestamp)</li><li>运维简单，只有一个角色（不像fastdfs有三个角色Tracker Server,Storage Server,Client），配置自动生成</li><li>每个节点对等（简化运维）</li><li>所有节点都可以同时读写</li></ul><h3 id="启动文件服务器"><a href="#启动文件服务器" class="headerlink" title="启动文件服务器"></a>启动文件服务器</h3><blockquote><p>linux：./fileserver<br>windows：双击fileserver.exe</p></blockquote><p>具体代码实现请看源码，比较简单，但问价那系统也存在一些问题，比如说没有删除的功能这一点就显得优点蛋疼了。</p><p>上传结果：<br><a href="https://i.imgur.com/HLYNp1I.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.imgur.com/HLYNp1I.png" class="lazyload"></a></p><p>源码地址：<a href="https://github.com/HWYWL/spring-boot-2.x-examples/tree/master/spring-boot-go-fastdfs" target="_blank" rel="noopener">源码</a></p><h3 id="问题建议"><a href="#问题建议" class="headerlink" title="问题建议"></a>问题建议</h3><ul><li>联系我的邮箱：<a href="mailto:ilovey_hwy@163.com">ilovey_hwy@163.com</a></li><li>我的博客：<a href="https://www.hwy.ac.cn" target="_blank" rel="noopener">https://www.hwy.ac.cn</a></li><li>GitHub：<a href="https://github.com/HWYWL" target="_blank" rel="noopener">https://github.com/HWYWL</a></li></ul></body></html>]]></content>
      
      
      <categories>
          
          <category> 文件系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 文件系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>69 个经典 Spring 面试题和答案</title>
      <link href="/2019/01/27/69%20%E4%B8%AA%E7%BB%8F%E5%85%B8%20Spring%20%E9%9D%A2%E8%AF%95%E9%A2%98%E5%92%8C%E7%AD%94%E6%A1%88/"/>
      <url>/2019/01/27/69%20%E4%B8%AA%E7%BB%8F%E5%85%B8%20Spring%20%E9%9D%A2%E8%AF%95%E9%A2%98%E5%92%8C%E7%AD%94%E6%A1%88/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><h3 id="1-什么是spring"><a href="#1-什么是spring" class="headerlink" title="1. 什么是spring?"></a>1. 什么是spring?</h3><p>Spring 是个java企业级应用的开源开发框架。Spring主要用来开发Java应用，但是有些扩展是针对构建J2EE平台的web应用。Spring 框架目标是简化Java企业级应用开发，并通过POJO为基础的编程模型促进良好的编程习惯。</p><h3 id="2-使用Spring框架的好处是什么？"><a href="#2-使用Spring框架的好处是什么？" class="headerlink" title="2. 使用Spring框架的好处是什么？"></a>2. 使用Spring框架的好处是什么？</h3><ul><li>轻量：Spring 是轻量的，基本的版本大约2MB</li><li>控制反转：Spring通过控制反转实现了松散耦合，对象们给出它们的依赖，而不是创建或查找依赖的对象们</li><li>面向切面的编程(AOP)：Spring支持面向切面的编程，并且把应用业务逻辑和系统服务分开</li><li>容器：Spring 包含并管理应用中对象的生命周期和配置</li><li>MVC框架：Spring的WEB框架是个精心设计的框架，是Web框架的一个很好的替代品</li><li>事务管理：Spring 提供一个持续的事务管理接口，可以扩展到上至本地事务下至全局事务（JTA）</li><li>异常处理：Spring 提供方便的API把具体技术相关的异常（比如由JDBC，Hibernate or JDO抛出的）转化为一致的unchecked 异常</li></ul><h3 id="3-Spring由哪些模块组成？"><a href="#3-Spring由哪些模块组成？" class="headerlink" title="3.  Spring由哪些模块组成？"></a>3.  Spring由哪些模块组成？</h3><p>以下是Spring 框架的基本模块：</p><ul><li>Core module</li><li>Bean module</li><li>Context module</li><li>Expression Language module</li><li>JDBC module</li><li>ORM module</li><li>OXM module</li><li>Java Messaging Service(JMS) module</li><li>Transaction module</li><li>Web module</li><li>Web-Servlet module</li><li>Web-Struts module</li><li>Web-Portlet module</li></ul><h3 id="4-核心容器（应用上下文-模块"><a href="#4-核心容器（应用上下文-模块" class="headerlink" title="4. 核心容器（应用上下文) 模块"></a>4. 核心容器（应用上下文) 模块</h3><p>这是基本的Spring模块，提供spring 框架的基础功能，BeanFactory 是 任何以spring为基础的应用的核心。Spring 框架建立在此模块之上，它使Spring成为一个容器。</p><h3 id="5-BeanFactory-–-BeanFactory-实现举例"><a href="#5-BeanFactory-–-BeanFactory-实现举例" class="headerlink" title="5. BeanFactory – BeanFactory 实现举例"></a>5. BeanFactory – BeanFactory 实现举例</h3><p>Bean 工厂是工厂模式的一个实现，提供了控制反转功能，用来把应用的配置和依赖从正真的应用代码中分离。<br>最常用的BeanFactory 实现是XmlBeanFactory 类。</p><h3 id="6-XMLBeanFactory"><a href="#6-XMLBeanFactory" class="headerlink" title="6. XMLBeanFactory"></a>6. XMLBeanFactory</h3><p>最常用的就是org.springframework.beans.factory.xml.XmlBeanFactory ，它根据XML文件中的定义加载beans。该容器从XML 文件读取配置元数据并用它去创建一个完全配置的系统或应用。</p><h3 id="7-解释AOP模块"><a href="#7-解释AOP模块" class="headerlink" title="7. 解释AOP模块"></a>7. 解释AOP模块</h3><p>AOP模块用于发给我们的Spring应用做面向切面的开发， 很多支持由AOP联盟提供，这样就确保了Spring和其他AOP框架的共通性。这个模块将元数据编程引入Spring。</p><h3 id="8-解释JDBC抽象和DAO模块"><a href="#8-解释JDBC抽象和DAO模块" class="headerlink" title="8. 解释JDBC抽象和DAO模块"></a>8. 解释JDBC抽象和DAO模块</h3><p>通过使用JDBC抽象和DAO模块，保证数据库代码的简洁，并能避免数据库资源错误关闭导致的问题，它在各种不同的数据库的错误信息之上，提供了一个统一的异常访问层。它还利用Spring的AOP 模块给Spring应用中的对象提供事务管理服务。</p><h3 id="9-解释对象-关系映射集成模块"><a href="#9-解释对象-关系映射集成模块" class="headerlink" title="9. 解释对象/关系映射集成模块"></a>9. 解释对象/关系映射集成模块</h3><p>Spring 通过提供ORM模块，支持我们在直接JDBC之上使用一个对象/关系映射映射(ORM)工具，Spring 支持集成主流的ORM框架，如Hiberate,JDO和 iBATIS SQL Maps。Spring的事务管理同样支持以上所有ORM框架及JDBC。</p><h3 id="10-解释WEB-模块"><a href="#10-解释WEB-模块" class="headerlink" title="10.  解释WEB 模块"></a>10.  解释WEB 模块</h3><p>Spring的WEB模块是构建在application context 模块基础之上，提供一个适合web应用的上下文。这个模块也包括支持多种面向web的任务，如透明地处理多个文件上传请求和程序级请求参数的绑定到你的业务对象。它也有对Jakarta Struts的支持。</p><h3 id="12-Spring配置文件"><a href="#12-Spring配置文件" class="headerlink" title="12.  Spring配置文件"></a>12.  Spring配置文件</h3><p>Spring配置文件是个XML 文件，这个文件包含了类信息，描述了如何配置它们，以及如何相互调用。</p><h3 id="13-什么是Spring-IOC-容器？"><a href="#13-什么是Spring-IOC-容器？" class="headerlink" title="13.  什么是Spring IOC 容器？"></a>13.  什么是Spring IOC 容器？</h3><p>Spring IOC 负责创建对象，管理对象（通过依赖注入（DI），装配对象，配置对象，并且管理这些对象的整个生命周期。</p><h3 id="14-IOC的优点是什么？"><a href="#14-IOC的优点是什么？" class="headerlink" title="14.  IOC的优点是什么？"></a>14.  IOC的优点是什么？</h3><p>IOC 或 依赖注入把应用的代码量降到最低。它使应用容易测试，单元测试不再需要单例和JNDI查找机制。最小的代价和最小的侵入性使松散耦合得以实现。IOC容器支持加载服务时的饿汉式初始化和懒加载。</p><h3 id="15-ApplicationContext通常的实现是什么？"><a href="#15-ApplicationContext通常的实现是什么？" class="headerlink" title="15. ApplicationContext通常的实现是什么？"></a>15. ApplicationContext通常的实现是什么？</h3><ul><li>FileSystemXmlApplicationContext ：此容器从一个XML文件中加载beans的定义，XML Bean 配置文件的全路径名必须提供给它的构造函数。</li><li>ClassPathXmlApplicationContext：此容器也从一个XML文件中加载beans的定义，这里，你需要正确设置classpath因为这个容器将在classpath里找bean配置。</li><li>WebXmlApplicationContext：此容器加载一个XML文件，此文件定义了一个WEB应用的所有bean。</li></ul><h3 id="16-Bean-工厂和-Application-contexts-有什么区别？"><a href="#16-Bean-工厂和-Application-contexts-有什么区别？" class="headerlink" title="16. Bean 工厂和 Application contexts  有什么区别？"></a>16. Bean 工厂和 Application contexts  有什么区别？</h3><p>Application contexts提供一种方法处理文本消息，一个通常的做法是加载文件资源（比如镜像），它们可以向注册为监听器的bean发布事件。另外，在容器或容器内的对象上执行的那些不得不由bean工厂以程序化方式处理的操作，可以在Application contexts中以声明的方式处理。Application contexts实现了MessageSource接口，该接口的实现以可插拔的方式提供获取本地化消息的方法。</p><h3 id="17-一个Spring的应用看起来象什么？"><a href="#17-一个Spring的应用看起来象什么？" class="headerlink" title="17. 一个Spring的应用看起来象什么？"></a>17. 一个Spring的应用看起来象什么？</h3><ul><li>一个定义了一些功能的接口</li><li>这实现包括属性，它的Setter ， getter 方法和函数等</li><li>Spring AOP</li><li>Spring 的XML 配置文件</li><li>使用以上功能的客户端程序</li></ul><h1 id="依赖注入"><a href="#依赖注入" class="headerlink" title="依赖注入"></a>依赖注入</h1><h3 id="18-什么是Spring的依赖注入？"><a href="#18-什么是Spring的依赖注入？" class="headerlink" title="18. 什么是Spring的依赖注入？"></a>18. 什么是Spring的依赖注入？</h3><p>依赖注入，是IOC的一个方面，是个通常的概念，它有多种解释。这概念是说你不用创建对象，而只需要描述它如何被创建。你不在代码里直接组装你的组件和服务，但是要在配置文件里描述哪些组件需要哪些服务，之后一个容器（IOC容器）负责把他们组装起来。</p><h3 id="19-有哪些不同类型的IOC（依赖注入）方式？"><a href="#19-有哪些不同类型的IOC（依赖注入）方式？" class="headerlink" title="19.  有哪些不同类型的IOC（依赖注入）方式？"></a>19.  有哪些不同类型的IOC（依赖注入）方式？</h3><p>构造器依赖注入：构造器依赖注入通过容器触发一个类的构造器来实现的，该类有一系列参数，每个参数代表一个对其他类的依赖。<br>Setter方法注入：Setter方法注入是容器通过调用无参构造器或无参static工厂 方法实例化bean之后，调用该bean的setter方法，即实现了基于setter的依赖注入。</p><h3 id="20-哪种依赖注入方式你建议使用，构造器注入，还是-Setter方法注入？"><a href="#20-哪种依赖注入方式你建议使用，构造器注入，还是-Setter方法注入？" class="headerlink" title="20. 哪种依赖注入方式你建议使用，构造器注入，还是 Setter方法注入？"></a>20. 哪种依赖注入方式你建议使用，构造器注入，还是 Setter方法注入？</h3><p>你两种依赖方式都可以使用，构造器注入和Setter方法注入。最好的解决方案是用构造器参数实现强制依赖，setter方法实现可选依赖。</p><h1 id="Spring-Beans"><a href="#Spring-Beans" class="headerlink" title="Spring Beans"></a>Spring Beans</h1><h3 id="21-什么是Spring-beans？"><a href="#21-什么是Spring-beans？" class="headerlink" title="21.什么是Spring beans？"></a>21.什么是Spring beans？</h3><p>Spring beans 是那些形成Spring应用的主干的java对象。它们被Spring IOC容器初始化，装配，和管理。这些beans通过容器中配置的元数据创建。比如，以XML文件中<bean> 的形式定义。<br>Spring 框架定义的beans都是单件beans。在bean tag中有个属性”singleton”，如果它被赋为TRUE，bean 就是单件，否则就是一个 prototype bean。默认是TRUE，所以所有在Spring框架中的beans 缺省都是单件。</bean></p><h3 id="22-一个-Spring-Bean-定义-包含什么？"><a href="#22-一个-Spring-Bean-定义-包含什么？" class="headerlink" title="22. 一个 Spring Bean 定义 包含什么？"></a>22. 一个 Spring Bean 定义 包含什么？</h3><p>一个Spring Bean 的定义包含容器必知的所有配置元数据，包括如何创建一个bean，它的生命周期详情及它的依赖。</p><h3 id="23-如何给Spring-容器提供配置元数据？"><a href="#23-如何给Spring-容器提供配置元数据？" class="headerlink" title="23. 如何给Spring 容器提供配置元数据？"></a>23. 如何给Spring 容器提供配置元数据？</h3><p>这里有三种重要的方法给Spring 容器提供配置元数据。</p><ul><li>XML配置文件。</li><li>基于注解的配置。</li><li>基于java的配置。</li></ul><h3 id="24-你怎样定义类的作用域？"><a href="#24-你怎样定义类的作用域？" class="headerlink" title="24. 你怎样定义类的作用域？"></a>24. 你怎样定义类的作用域？</h3><p>当定义一个<bean> 在Spring里，我们还能给这个bean声明一个作用域。它可以通过bean 定义中的scope属性来定义。如，当Spring要在需要的时候每次生产一个新的bean实例，bean的scope属性被指定为prototype。另一方面，一个bean每次使用的时候必须返回同一个实例，这个bean的scope 属性 必须设为 singleton。</bean></p><h3 id="25-解释Spring支持的几种bean的作用域"><a href="#25-解释Spring支持的几种bean的作用域" class="headerlink" title="25. 解释Spring支持的几种bean的作用域"></a>25. 解释Spring支持的几种bean的作用域</h3><p>Spring框架支持以下五种bean的作用域：</p><ul><li>singleton : bean在每个Spring ioc 容器中只有一个实例。</li><li>prototype：一个bean的定义可以有多个实例。</li><li>request：每次http请求都会创建一个bean，该作用域仅在基于web的Spring ApplicationContext情形下有效。</li><li>session：在一个HTTP Session中，一个bean定义对应一个实例。该作用域仅在基于web的Spring ApplicationContext情形下有效。</li><li>global-session：在一个全局的HTTP Session中，一个bean定义对应一个实例。该作用域仅在基于web的Spring ApplicationContext情形下有效。<br>缺省的Spring bean 的作用域是Singleton。</li></ul><h3 id="26-Spring框架中的单例bean是线程安全的吗？"><a href="#26-Spring框架中的单例bean是线程安全的吗？" class="headerlink" title="26. Spring框架中的单例bean是线程安全的吗？"></a>26. Spring框架中的单例bean是线程安全的吗？</h3><p>不，Spring框架中的单例bean不是线程安全的。</p><h3 id="27-解释Spring框架中bean的生命周期"><a href="#27-解释Spring框架中bean的生命周期" class="headerlink" title="27. 解释Spring框架中bean的生命周期"></a>27. 解释Spring框架中bean的生命周期</h3><ul><li>Spring容器 从XML 文件中读取bean的定义，并实例化bean。</li><li>Spring根据bean的定义填充所有的属性。</li><li>如果bean实现了BeanNameAware 接口，Spring 传递bean 的ID 到 setBeanName方法。</li><li>如果Bean 实现了 BeanFactoryAware 接口， Spring传递beanfactory 给setBeanFactory 方法。</li><li>如果有任何与bean相关联的BeanPostProcessors，Spring会在postProcesserBeforeInitialization()方法内调用它们。</li><li>如果bean实现IntializingBean了，调用它的afterPropertySet方法，如果bean声明了初始化方法，调用此初始化方法。</li><li>如果有BeanPostProcessors 和bean 关联，这些bean的postProcessAfterInitialization() 方法将被调用。</li><li>如果bean实现了 DisposableBean，它将调用destroy()方法。</li></ul><h3 id="28-哪些是重要的bean生命周期方法？-你能重载它们吗？"><a href="#28-哪些是重要的bean生命周期方法？-你能重载它们吗？" class="headerlink" title="28.  哪些是重要的bean生命周期方法？ 你能重载它们吗？"></a>28.  哪些是重要的bean生命周期方法？ 你能重载它们吗？</h3><p>有两个重要的bean 生命周期方法，第一个是setup ， 它是在容器加载bean的时候被调用。第二个方法是 teardown  它是在容器卸载类的时候被调用。<br>The bean 标签有两个重要的属性（init-method和destroy-method）。用它们你可以自己定制初始化和注销方法。它们也有相应的注解（@PostConstruct和@PreDestroy）。</p><h3 id="29-什么是Spring的内部bean？"><a href="#29-什么是Spring的内部bean？" class="headerlink" title="29. 什么是Spring的内部bean？"></a>29. 什么是Spring的内部bean？</h3><p>当一个bean仅被用作另一个bean的属性时，它能被声明为一个内部bean，为了定义inner bean，在Spring 的 基于XML的 配置元数据中，可以在 <property>或 <constructor-arg> 元素内使用<bean> 元素，内部bean通常是匿名的，它们的Scope一般是prototype。</bean></constructor-arg></property></p><h3 id="30-在-Spring中如何注入一个java集合？"><a href="#30-在-Spring中如何注入一个java集合？" class="headerlink" title="30. 在 Spring中如何注入一个java集合？"></a>30. 在 Spring中如何注入一个java集合？</h3><p>Spring提供以下几种集合的配置元素：</p><ul><li><list>类型用于注入一列值，允许有相同的值。</list></li><li><set> 类型用于注入一组值，不允许有相同的值。</set></li><li><map> 类型用于注入一组键值对，键和值都可以为任意类型。</map></li><li><props>类型用于注入一组键值对，键和值都只能为String类型。</props></li></ul><h3 id="31-什么是bean装配？"><a href="#31-什么是bean装配？" class="headerlink" title="31. 什么是bean装配？"></a>31. 什么是bean装配？</h3><p>装配，或bean 装配是指在Spring 容器中把bean组装到一起，前提是容器需要知道bean的依赖关系，如何通过依赖注入来把它们装配到一起。</p><h3 id="32-什么是bean的自动装配？"><a href="#32-什么是bean的自动装配？" class="headerlink" title="32. 什么是bean的自动装配？"></a>32. 什么是bean的自动装配？</h3><p>Spring 容器能够自动装配相互合作的bean，这意味着容器不需要<constructor-arg>和<property>配置，能通过Bean工厂自动处理bean之间的协作。</property></constructor-arg></p><h3 id="33-解释不同方式的自动装配"><a href="#33-解释不同方式的自动装配" class="headerlink" title="33. 解释不同方式的自动装配"></a>33. 解释不同方式的自动装配</h3><p>有五种自动装配的方式，可以用来指导Spring容器用自动装配方式来进行依赖注入</p><ul><li>no：默认的方式是不进行自动装配，通过显式设置ref 属性来进行装配。</li><li>byName：通过参数名 自动装配，Spring容器在配置文件中发现bean的autowire属性被设置成byname，之后容器试图匹配、装配和该bean的属性具有相同名字的bean。</li><li>byType：通过参数类型自动装配，Spring容器在配置文件中发现bean的autowire属性被设置成byType，之后容器试图匹配、装配和该bean的属性具有相同类型的bean。如果有多个bean符合条件，则抛出错误。</li><li>constructor：这个方式类似于byType， 但是要提供给构造器参数，如果没有确定的带参数的构造器参数类型，将会抛出异常。</li><li>autodetect：首先尝试使用constructor来自动装配，如果无法工作，则使用byType方式。</li></ul><h3 id="34-自动装配有哪些局限性？"><a href="#34-自动装配有哪些局限性？" class="headerlink" title="34.自动装配有哪些局限性？"></a>34.自动装配有哪些局限性？</h3><p>自动装配的局限性是：</p><ul><li>重写：你仍需用 <constructor-arg>和 <property> 配置来定义依赖，意味着总要重写自动装配。</property></constructor-arg></li><li>基本数据类型：你不能自动装配简单的属性，如基本数据类型，String字符串，和类。</li><li>模糊特性：自动装配不如显式装配精确，如果有可能，建议使用显式装配。</li></ul><h3 id="35-你可以在Spring中注入一个null-和一个空字符串吗？"><a href="#35-你可以在Spring中注入一个null-和一个空字符串吗？" class="headerlink" title="35. 你可以在Spring中注入一个null 和一个空字符串吗？"></a>35. 你可以在Spring中注入一个null 和一个空字符串吗？</h3><p>可以。</p><h1 id="Spring注解"><a href="#Spring注解" class="headerlink" title="Spring注解"></a>Spring注解</h1><h3 id="36-什么是基于Java的Spring注解配置-给一些注解的例子"><a href="#36-什么是基于Java的Spring注解配置-给一些注解的例子" class="headerlink" title="36. 什么是基于Java的Spring注解配置? 给一些注解的例子"></a>36. 什么是基于Java的Spring注解配置? 给一些注解的例子</h3><p>基于Java的配置，允许你在少量的Java注解的帮助下，进行你的大部分Spring配置而非通过XML文件。<br>以@Configuration 注解为例，它用来标记类可以当做一个bean的定义，被Spring IOC容器使用。另一个例子是@Bean注解，它表示此方法将要返回一个对象，作为一个bean注册进Spring应用上下文。</p><h3 id="37-什么是基于注解的容器配置？"><a href="#37-什么是基于注解的容器配置？" class="headerlink" title="37. 什么是基于注解的容器配置？"></a>37. 什么是基于注解的容器配置？</h3><p>相对于XML文件，注解型的配置依赖于通过字节码元数据装配组件，而非尖括号的声明。<br>开发者通过在相应的类，方法或属性上使用注解的方式，直接组件类中进行配置，而不是使用xml表述bean的装配关系。</p><h3 id="38-怎样开启注解装配？"><a href="#38-怎样开启注解装配？" class="headerlink" title="38. 怎样开启注解装配？"></a>38. 怎样开启注解装配？</h3><p>注解装配在默认情况下是不开启的，为了使用注解装配，我们必须在Spring配置文件中配置 <a href="context:annotation-config/">context:annotation-config/</a>元素。</p><h3 id="39-Required-注解"><a href="#39-Required-注解" class="headerlink" title="39. @Required  注解"></a>39. @Required  注解</h3><p>这个注解表明bean的属性必须在配置的时候设置，通过一个bean定义的显式的属性值或通过自动装配，若@Required注解的bean属性未被设置，容器将抛出BeanInitializationException。</p><h3 id="40-Autowired-注解"><a href="#40-Autowired-注解" class="headerlink" title="40. @Autowired 注解"></a>40. @Autowired 注解</h3><p>@Autowired 注解提供了更细粒度的控制，包括在何处以及如何完成自动装配。它的用法和@Required一样，修饰setter方法、构造器、属性或者具有任意名称和/或多个参数的PN方法。</p><h3 id="41-Qualifier-注解"><a href="#41-Qualifier-注解" class="headerlink" title="41. @Qualifier 注解"></a>41. @Qualifier 注解</h3><p>当有多个相同类型的bean却只有一个需要自动装配时，将@Qualifier 注解和@Autowire 注解结合使用以消除这种混淆，指定需要装配的确切的bean。</p><h1 id="Spring数据访问"><a href="#Spring数据访问" class="headerlink" title="Spring数据访问"></a>Spring数据访问</h1><h3 id="42-在Spring框架中如何更有效地使用JDBC？"><a href="#42-在Spring框架中如何更有效地使用JDBC？" class="headerlink" title="42.在Spring框架中如何更有效地使用JDBC？"></a>42.在Spring框架中如何更有效地使用JDBC？</h3><p>使用SpringJDBC 框架，资源管理和错误处理的代价都会被减轻。所以开发者只需写statements 和 queries从数据存取数据，JDBC也可以在Spring框架提供的模板类的帮助下更有效地被使用，这个模板叫JdbcTemplate （例子见这里here）</p><h3 id="43-JdbcTemplate"><a href="#43-JdbcTemplate" class="headerlink" title="43. JdbcTemplate"></a>43. JdbcTemplate</h3><p>JdbcTemplate 类提供了很多便利的方法解决诸如把数据库数据转变成基本数据类型或对象，执行写好的或可调用的数据库操作语句，提供自定义的数据错误处理。</p><h3 id="44-Spring对DAO的支持"><a href="#44-Spring对DAO的支持" class="headerlink" title="44. Spring对DAO的支持"></a>44. Spring对DAO的支持</h3><p>Spring对数据访问对象（DAO）的支持旨在简化它和数据访问技术如JDBC，Hibernate or JDO 结合使用。这使我们可以方便切换持久层。编码时也不用担心会捕获每种技术特有的异常。</p><h3 id="45-使用Spring通过什么方式访问Hibernate？"><a href="#45-使用Spring通过什么方式访问Hibernate？" class="headerlink" title="45. 使用Spring通过什么方式访问Hibernate？"></a>45. 使用Spring通过什么方式访问Hibernate？</h3><p>在Spring中有两种方式访问Hibernate：</p><ul><li>控制反转  Hibernate Template和 Callback</li><li>继承 HibernateDAOSupport提供一个AOP 拦截器</li></ul><h3 id="46-Spring支持的ORM"><a href="#46-Spring支持的ORM" class="headerlink" title="46. Spring支持的ORM"></a>46. Spring支持的ORM</h3><ul><li>Spring支持以下ORM：</li><li>Hibernate</li><li>iBatis</li><li>JPA (Java Persistence API)</li><li>TopLink</li><li>JDO (Java Data Objects)</li><li>OJB</li></ul><h3 id="47-如何通过HibernateDaoSupport将Spring和Hibernate结合起来？"><a href="#47-如何通过HibernateDaoSupport将Spring和Hibernate结合起来？" class="headerlink" title="47.如何通过HibernateDaoSupport将Spring和Hibernate结合起来？"></a>47.如何通过HibernateDaoSupport将Spring和Hibernate结合起来？</h3><p>用Spring的 SessionFactory 调用 LocalSessionFactory。集成过程分三步：</p><ul><li>配置the Hibernate SessionFactory</li><li>继承HibernateDaoSupport实现一个DAO</li><li>在AOP支持的事务中装配</li></ul><h3 id="48-Spring支持的事务管理类型"><a href="#48-Spring支持的事务管理类型" class="headerlink" title="48. Spring支持的事务管理类型"></a>48. Spring支持的事务管理类型</h3><p>Spring支持两种类型的事务管理：</p><ul><li>编程式事务管理：这意味你通过编程的方式管理事务，给你带来极大的灵活性，但是难维护。</li><li>声明式事务管理：这意味着你可以将业务代码和事务管理分离，你只需用注解和XML配置来管理事务。</li></ul><h3 id="49-Spring框架的事务管理有哪些优点？"><a href="#49-Spring框架的事务管理有哪些优点？" class="headerlink" title="49. Spring框架的事务管理有哪些优点？"></a>49. Spring框架的事务管理有哪些优点？</h3><ul><li>它为不同的事务API  如 JTA，JDBC，Hibernate，JPA 和JDO，提供一个不变的编程模式。</li><li>它为编程式事务管理提供了一套简单的API而不是一些复杂的事务API如</li><li>它支持声明式事务管理。</li><li>它和Spring各种数据访问抽象层很好得集成。</li></ul><h3 id="50-你更倾向用那种事务管理类型？"><a href="#50-你更倾向用那种事务管理类型？" class="headerlink" title="50. 你更倾向用那种事务管理类型？"></a>50. 你更倾向用那种事务管理类型？</h3><p>大多数Spring框架的用户选择声明式事务管理，因为它对应用代码的影响最小，因此更符合一个无侵入的轻量级容器的思想。声明式事务管理要优于编程式事务管理，虽然比编程式事务管理（这种方式允许你通过代码控制事务）少了一点灵活性。</p><h1 id="Spring面向切面编程（AOP）"><a href="#Spring面向切面编程（AOP）" class="headerlink" title="Spring面向切面编程（AOP）"></a>Spring面向切面编程（AOP）</h1><h3 id="51-解释AOP"><a href="#51-解释AOP" class="headerlink" title="51.  解释AOP"></a>51.  解释AOP</h3><p>面向切面的编程，或AOP， 是一种编程技术，允许程序模块化横向切割关注点，或横切典型的责任划分，如日志和事务管理。</p><h3 id="52-Aspect-切面"><a href="#52-Aspect-切面" class="headerlink" title="52. Aspect 切面"></a>52. Aspect 切面</h3><p>AOP核心就是切面，它将多个类的通用行为封装成可重用的模块，该模块含有一组API提供横切功能。比如，一个日志模块可以被称作日志的AOP切面。根据需求的不同，一个应用程序可以有若干切面。在Spring AOP中，切面通过带有@Aspect注解的类实现。</p><h3 id="52-在Spring-AOP-中，关注点和横切关注的区别是什么？"><a href="#52-在Spring-AOP-中，关注点和横切关注的区别是什么？" class="headerlink" title="52. 在Spring AOP 中，关注点和横切关注的区别是什么？"></a>52. 在Spring AOP 中，关注点和横切关注的区别是什么？</h3><p>关注点是应用中一个模块的行为，一个关注点可能会被定义成一个我们想实现的一个功能。<br>横切关注点是一个关注点，此关注点是整个应用都会使用的功能，并影响整个应用，比如日志，安全和数据传输，几乎应用的每个模块都需要的功能。因此这些都属于横切关注点。</p><h3 id="54-连接点"><a href="#54-连接点" class="headerlink" title="54. 连接点"></a>54. 连接点</h3><p>连接点代表一个应用程序的某个位置，在这个位置我们可以插入一个AOP切面，它实际上是个应用程序执行Spring AOP的位置。</p><h3 id="55-通知"><a href="#55-通知" class="headerlink" title="55. 通知"></a>55. 通知</h3><p>通知是个在方法执行前或执行后要做的动作，实际上是程序执行时要通过SpringAOP框架触发的代码段。<br>Spring切面可以应用五种类型的通知：</p><ul><li>before：前置通知，在一个方法执行前被调用</li><li>after：在方法执行之后调用的通知，无论方法执行是否成功</li><li>after-returning：仅当方法成功完成后执行的通知</li><li>after-throwing：在方法抛出异常退出时执行的通知</li><li>around：在方法执行之前和之后调用的通知</li></ul><h3 id="56-切点"><a href="#56-切点" class="headerlink" title="56. 切点"></a>56. 切点</h3><p>切入点是一个或一组连接点，通知将在这些位置执行。可以通过表达式或匹配的方式指明切入点。</p><h3 id="57-什么是引入？"><a href="#57-什么是引入？" class="headerlink" title="57. 什么是引入？"></a>57. 什么是引入？</h3><p>引入允许我们在已存在的类中增加新的方法和属性。</p><h3 id="58-什么是目标对象？"><a href="#58-什么是目标对象？" class="headerlink" title="58. 什么是目标对象？"></a>58. 什么是目标对象？</h3><p>被一个或者多个切面所通知的对象。它通常是一个代理对象。也指被通知（advised）对象。</p><h3 id="59-什么是代理？"><a href="#59-什么是代理？" class="headerlink" title="59. 什么是代理？"></a>59. 什么是代理？</h3><p>代理是通知目标对象后创建的对象。从客户端的角度看，代理对象和目标对象是一样的。</p><h3 id="60-有几种不同类型的自动代理？"><a href="#60-有几种不同类型的自动代理？" class="headerlink" title="60. 有几种不同类型的自动代理？"></a>60. 有几种不同类型的自动代理？</h3><ul><li>BeanNameAutoProxyCreator</li><li>DefaultAdvisorAutoProxyCreator</li><li>Metadata autoproxying</li></ul><h3 id="61-什么是织入。什么是织入应用的不同点？"><a href="#61-什么是织入。什么是织入应用的不同点？" class="headerlink" title="61. 什么是织入。什么是织入应用的不同点？"></a>61. 什么是织入。什么是织入应用的不同点？</h3><p>织入是将切面和到其他应用类型或对象连接或创建一个被通知对象的过程。<br>织入可以在编译时，加载时，或运行时完成。</p><h3 id="62-解释基于XML-Schema方式的切面实现"><a href="#62-解释基于XML-Schema方式的切面实现" class="headerlink" title="62. 解释基于XML Schema方式的切面实现"></a>62. 解释基于XML Schema方式的切面实现</h3><p>在这种情况下，切面由常规类以及基于XML的配置实现。</p><h3 id="63-解释基于注解的切面实现"><a href="#63-解释基于注解的切面实现" class="headerlink" title="63. 解释基于注解的切面实现"></a>63. 解释基于注解的切面实现</h3><p>在这种情况下(基于@AspectJ的实现)，涉及到的切面声明的风格与带有java5标注的普通java类一致。</p><h1 id="Spring-的MVC"><a href="#Spring-的MVC" class="headerlink" title="Spring 的MVC"></a>Spring 的MVC</h1><h3 id="64-什么是Spring的MVC框架？"><a href="#64-什么是Spring的MVC框架？" class="headerlink" title="64. 什么是Spring的MVC框架？"></a>64. 什么是Spring的MVC框架？</h3><p>Spring 配备构建Web 应用的全功能MVC框架。Spring可以很便捷地和其他MVC框架集成，如Struts，Spring 的MVC框架用控制反转把业务对象和控制逻辑清晰地隔离。它也允许以声明的方式把请求参数和业务对象绑定。</p><h3 id="65-DispatcherServlet"><a href="#65-DispatcherServlet" class="headerlink" title="65. DispatcherServlet"></a>65. DispatcherServlet</h3><p>Spring的MVC框架是围绕DispatcherServlet来设计的，它用来处理所有的HTTP请求和响应。</p><h3 id="66-WebApplicationContext"><a href="#66-WebApplicationContext" class="headerlink" title="66. WebApplicationContext"></a>66. WebApplicationContext</h3><p>WebApplicationContext 继承了ApplicationContext  并增加了一些WEB应用必备的特有功能，它不同于一般的ApplicationContext ，因为它能处理主题，并找到被关联的servlet。</p><h3 id="67-什么是Spring-MVC框架的控制器？"><a href="#67-什么是Spring-MVC框架的控制器？" class="headerlink" title="67. 什么是Spring MVC框架的控制器？"></a>67. 什么是Spring MVC框架的控制器？</h3><p>控制器提供一个访问应用程序的行为，此行为通常通过服务接口实现。控制器解析用户输入并将其转换为一个由视图呈现给用户的模型。Spring用一个非常抽象的方式实现了一个控制层，允许用户创建多种用途的控制器。</p><h3 id="68-Controller-注解"><a href="#68-Controller-注解" class="headerlink" title="68. @Controller 注解"></a>68. @Controller 注解</h3><p>该注解表明该类扮演控制器的角色，Spring不需要你继承任何其他控制器基类或引用Servlet API。</p><h3 id="69-RequestMapping-注解"><a href="#69-RequestMapping-注解" class="headerlink" title="69. @RequestMapping 注解"></a>69. @RequestMapping 注解</h3><p>该注解是用来映射一个URL到一个类或一个特定的方处理法上。</p></body></html>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Anima 是一款牛逼的数据库框架</title>
      <link href="/2019/01/23/Anima%20%E6%98%AF%E4%B8%80%E6%AC%BE%E7%89%9B%E9%80%BC%E7%9A%84%E6%95%B0%E6%8D%AE%E5%BA%93%E6%A1%86%E6%9E%B6/"/>
      <url>/2019/01/23/Anima%20%E6%98%AF%E4%B8%80%E6%AC%BE%E7%89%9B%E9%80%BC%E7%9A%84%E6%95%B0%E6%8D%AE%E5%BA%93%E6%A1%86%E6%9E%B6/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><h1 id="spring-boot-anima"><a href="#spring-boot-anima" class="headerlink" title="spring-boot-anima"></a>spring-boot-anima</h1><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>Anima 是一款操作数据库的框架，它支持MySQL、SQLite、H2、Oracle、SqlServer等数据库，非常方便的对数据库进行操作。</p><p><a href="https://github.com/biezhi/anima/wiki/%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8" target="_blank" rel="noopener">快速入门</a></p><p><a href="https://github.com/biezhi/anima/wiki/%E5%88%9B%E5%BB%BA-Model" target="_blank" rel="noopener">创建 Model</a></p><p><a href="https://github.com/biezhi/anima/wiki/%E6%9F%A5%E8%AF%A2%E6%95%B0%E6%8D%AE" target="_blank" rel="noopener">查询数据</a></p><p><a href="https://github.com/biezhi/anima/wiki/%E4%BF%9D%E5%AD%98%E6%95%B0%E6%8D%AE" target="_blank" rel="noopener">保存数据</a></p><p><a href="https://github.com/biezhi/anima/wiki/%E6%9B%B4%E6%96%B0%E5%92%8C%E5%88%A0%E9%99%A4" target="_blank" rel="noopener">更新和删除</a></p><p><a href="https://github.com/biezhi/anima/wiki/%E4%BA%8B%E5%8A%A1%E6%93%8D%E4%BD%9C" target="_blank" rel="noopener">事务操作</a></p><p><a href="https://github.com/biezhi/anima/wiki/%E5%9C%A8-Spring-%E6%A1%86%E6%9E%B6%E4%B8%AD%E4%BD%BF%E7%94%A8" target="_blank" rel="noopener">在 Spring 框架中使用</a></p><p><a href="https://github.com/biezhi/anima/wiki/%E9%AB%98%E7%BA%A7%E7%94%A8%E6%B3%95" target="_blank" rel="noopener">高级用法</a></p><p>本例程是在spring boot的基础上集成Anima操作MySQL数据库，代码进行了简单的CRUD操作：</p><p>接口：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义实现类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> YI</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018-11-27 14:40:31</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IBaiKeService</span> </span>{</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据id查询数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Baike <span class="title">selectById</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过自定义sql查询</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">List<baike> <span class="title">selectListBySQL</span><span class="params">()</span></baike></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询所有数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">List<baike> <span class="title">selectListAll</span><span class="params">()</span></baike></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据条件查询，点赞数大于等于 good的数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> good 点赞数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">List<baike> <span class="title">selectListByGood</span><span class="params">(<span class="keyword">int</span> good)</span></baike></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> baike 百科数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">save</span><span class="params">(Baike baike)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 批量保存</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> baikes 百科数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">saveBatch</span><span class="params">(List<baike> baikes)</baike></span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更新</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> baike 百科数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(Baike baike)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据id删除</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">deleteById</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p>实现类：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义实现类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> YI</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018-11-27 14:40:31</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IBaiKeServiceImpl</span> <span class="keyword">implements</span> <span class="title">IBaiKeService</span> </span>{</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Baike <span class="title">selectById</span><span class="params">(<span class="keyword">int</span> id)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> select().from(Baike<span class="class">.<span class="keyword">class</span>).<span class="title">byId</span>(<span class="title">id</span>)</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">save</span><span class="params">(Baike baike)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> baike.save().asInt();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveBatch</span><span class="params">(List<baike> baikes)</baike></span> </span>{</span><br><span class="line">        Anima.saveBatch(baikes);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(Baike baike)</span> </span>{</span><br><span class="line">        baike.update();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteById</span><span class="params">(<span class="keyword">int</span> id)</span> </span>{</span><br><span class="line">        Anima.deleteById(Baike<span class="class">.<span class="keyword">class</span>, <span class="title">id</span>)</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List<baike> <span class="title">selectListBySQL</span><span class="params">()</span> </baike></span>{</span><br><span class="line">        return select().bySQL(Baike.class, "select * from baike limit ?", 3).all();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List<baike> <span class="title">selectListAll</span><span class="params">()</span> </baike></span>{</span><br><span class="line">        <span class="keyword">return</span> select().from(Baike<span class="class">.<span class="keyword">class</span>).<span class="title">all</span>()</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List<baike> <span class="title">selectListByGood</span><span class="params">(<span class="keyword">int</span> good)</span> </baike></span>{</span><br><span class="line">        return select().from(Baike.class).gte("age", good).all();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p>具体请看测试用例。</p><p>GitHub地址：<a href="https://github.com/HWYWL/spring-boot-2.x-examples/tree/master/spring-boot-anima" target="_blank" rel="noopener">https://github.com/HWYWL/spring-boot-2.x-examples/tree/master/spring-boot-anima</a></p><h3 id="问题建议"><a href="#问题建议" class="headerlink" title="问题建议"></a>问题建议</h3><ul><li>联系我的邮箱：<a href="mailto:ilovey_hwy@163.com">ilovey_hwy@163.com</a></li><li>我的博客：<a href="https://www.hwy.ac.cn" target="_blank" rel="noopener">https://www.hwy.ac.cn</a></li><li>GitHub：<a href="https://github.com/HWYWL" target="_blank" rel="noopener">https://github.com/HWYWL</a></li></ul></body></html>]]></content>
      
      
      <categories>
          
          <category> ORM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Anima </tag>
            
            <tag> ORM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用IDEA插件Alibaba Cloud Toolkit工具一键部署本地应用到ECS服务器</title>
      <link href="/2018/12/13/%E4%BD%BF%E7%94%A8IDEA%E6%8F%92%E4%BB%B6Alibaba%20Cloud%20Toolkit%E5%B7%A5%E5%85%B7%E4%B8%80%E9%94%AE%E9%83%A8%E7%BD%B2%E6%9C%AC%E5%9C%B0%E5%BA%94%E7%94%A8%E5%88%B0ECS%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
      <url>/2018/12/13/%E4%BD%BF%E7%94%A8IDEA%E6%8F%92%E4%BB%B6Alibaba%20Cloud%20Toolkit%E5%B7%A5%E5%85%B7%E4%B8%80%E9%94%AE%E9%83%A8%E7%BD%B2%E6%9C%AC%E5%9C%B0%E5%BA%94%E7%94%A8%E5%88%B0ECS%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><h1 id="使用IDEA插件Alibaba-Cloud-Toolkit工具一键部署本地应用到ECS服务器"><a href="#使用IDEA插件Alibaba-Cloud-Toolkit工具一键部署本地应用到ECS服务器" class="headerlink" title="使用IDEA插件Alibaba Cloud Toolkit工具一键部署本地应用到ECS服务器"></a>使用IDEA插件Alibaba Cloud Toolkit工具一键部署本地应用到ECS服务器</h1><p>最近看到阿里云发布了一款名为 Alibaba Cloud Toolkit 的插件，可以帮助开发者高效开发并部署适合在云端运行的应用，瞬间击中了我的小心脏，这个对于个人开发者来说超级棒啊，终于不需要再手动 scp/ftp 上传应用到服务器了，连启动的命令都是可以自行编写的，棒棒！<br>PS：个人开发者项目不多也不大，如果使用jenkins等工具会比较麻烦，不如直接用手扔来得直接。</p><h2 id="什么是-Alibaba-Cloud-Toolkit"><a href="#什么是-Alibaba-Cloud-Toolkit" class="headerlink" title="什么是 Alibaba Cloud Toolkit"></a>什么是 Alibaba Cloud Toolkit</h2><p>Alibaba Cloud Toolkit （后文简称 Cloud Toolkit）是阿里云针对 IDE 平台为开发者提供的一款插件，用于帮助开发者高效开发并部署适合在云端运行的应用。<br>您在本地完成应用程序的开发、调试和测试后，可以使用在 IED （如 Eclipse 或 IntelliJ）中安装的 Cloud Toolkit 插件，通过图形配置的方式连接到云端部署环境并将应用程序快如部署到云端。<br>说明：目前 Cloud Toolkit 仅支持 Eclipse、Intellij 等其它开发环境开发中，请您持续关注 Cloud Tookit 动态。<br>官方有提供简单版的文档说明，小伙伴也可以参考下面链接：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://help.aliyun.com/product/29966.html</span><br></pre></td></tr></tbody></table></figure></div><h2 id="使用IDEA安装和配置Cloud-Toolkit"><a href="#使用IDEA安装和配置Cloud-Toolkit" class="headerlink" title="使用IDEA安装和配置Cloud Toolkit"></a>使用IDEA安装和配置Cloud Toolkit</h2><p>作者手动在idea上安装了一下这个工具，并测试完成，对这个工具可以说非常满意，下面是安装和配置的流程，主要有以下几步：</p><ul><li>在idea上安装Alibaba Cloud Toolkit插件</li><li>重启idea应用</li><li>配置Cloud Toolkit插件中的Accout信息</li><li>在阿里云中获取用户AccessKey相关信息（AccessKey ID、    Access Key Secret）</li><li>配置发布到ECS的相关服务器及命令信息</li><li>测试并成功发布</li></ul><p>主要流程为以上6步，下面我们一步步来配置，上图：<br><a href="https://i.imgur.com/hPX0T0T.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.imgur.com/hPX0T0T.jpg" class="lazyload"></a></p><p>如果插件下载速度比较慢，稍等一会，作者测试时也下载失败了一次，下载完成后需要重启idea应用后生效。</p><p>首先，需要先配置Alibaba Cloud Toolkit的Account，位置见下图：<br><a href="https://i.imgur.com/e2NM5oN.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.imgur.com/e2NM5oN.jpg" class="lazyload"></a></p><p><a href="https://i.imgur.com/4BDmwJN.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.imgur.com/4BDmwJN.jpg" class="lazyload"></a></p><p>上图中的AccessKey需要在阿里云的控制台中配置，如果是新用户，需要手动创建一个AccessKey，如下图：<br><a href="https://i.imgur.com/V7KK3kf.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.imgur.com/V7KK3kf.jpg" class="lazyload"></a></p><p>创建完成并配置好Account后，就可以着手配置对应的项目发布到ECS信息，官方文档见以下链接：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://help.aliyun.com/document_detail/98762.html</span><br></pre></td></tr></tbody></table></figure></div><p><a href="https://i.imgur.com/1uSOgIR.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.imgur.com/1uSOgIR.jpg" class="lazyload"></a></p><p>如果你的Account配置没有问题，则会自动账户显示对应的ECS服务器，在发布时，需要手动选择某台服务器，一定要选择哦！</p><p>对于Command的编写，可以参考官方文档（点击下图中的蓝色字体：Learn Sample直达）：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://yq.aliyun.com/articles/665693</span><br></pre></td></tr></tbody></table></figure></div><p><a href="https://i.imgur.com/RRd7HIQ.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.imgur.com/RRd7HIQ.jpg" class="lazyload"></a></p><p>配置成功后，可以点击Run运行程序，此时会自动为我们编译并上传到阿里云服务器中，发布到地址就是上图中的Deploy Location中的路径，发布前如果需要Maven执行，一定不要忘记配置上图中Maven的命令，中间的Command是在上传到服务器成功后执行的命令，主要用于应用的启动停止重启等。<br>下面是发布成功的示例：</p><p><a href="https://i.imgur.com/s9dr40F.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.imgur.com/s9dr40F.jpg" class="lazyload"></a></p><p>服务器的显示结果如下：</p><p><a href="https://i.imgur.com/25pm03e.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.imgur.com/25pm03e.jpg" class="lazyload"></a></p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>以上是对IDEA插件Alibaba Cloud Toolkit的安装配置及使用案例，如果小伙伴还有遇到其他的问题，可以根据一下链接，加入Alibaba Cloud Toolkit 官方唯一指定支持群，提交你的需求&Bug哦。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://yq.aliyun.com/articles/656292</span><br></pre></td></tr></tbody></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">作者：YClimb</span><br><span class="line">链接：https://juejin.im/post/5c0a748ff265da610f6389a8</span><br><span class="line">来源：掘金</span><br><span class="line">著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</span><br></pre></td></tr></tbody></table></figure></div></body></html>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IDEA </tag>
            
            <tag> Alibaba Cloud Toolkit </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>openVPN多配置文件管理</title>
      <link href="/2018/12/06/openVPN%E5%A4%9A%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86/"/>
      <url>/2018/12/06/openVPN%E5%A4%9A%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><p>我们在使用openVPN的时候可能会有好几个不同的配置，此时如果需要切换使用默认会显得很麻烦，我们可以手动修改配置文件达到一键切换的目的。</p><p>首先把不同的配置按文件夹分类归类好，把其所在的<strong>config.ovpn</strong>文件<strong>移动</strong>到文件夹外面，如下：</p><p><a href="https://i.imgur.com/aFvnCwR.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.imgur.com/aFvnCwR.jpg" class="lazyload"></a></p><p>文件夹里面装的是我们生存的配置文件，比如我的那个经典网络文件A级里面：</p><p><a href="https://i.imgur.com/0WPJQMF.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.imgur.com/0WPJQMF.jpg" class="lazyload"></a></p><p>之后我们需要修改移动出来的<strong>xxx.ovpn文件</strong>，用记事本打开可能不会自动格式化就一行显示，看着不方便，所以我用Sunlime Text软件打开，把每个修改为如下的样子</p><p><a href="https://i.imgur.com/6Z8r8eH.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.imgur.com/6Z8r8eH.jpg" class="lazyload"></a></p><p>然后我们启动<strong>OpenVPN GUI</strong>就可以选择我们所需要的网络了</p><p><a href="https://i.imgur.com/WISrKsq.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.imgur.com/WISrKsq.jpg" class="lazyload"></a></p><p>我使用的是Windows 7系统 其他系统不知道信不信，需要自己测试。</p></body></html>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> openVPN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>超详细 Nginx 极简教程</title>
      <link href="/2018/11/15/%E8%B6%85%E8%AF%A6%E7%BB%86%20Nginx%20%E6%9E%81%E7%AE%80%E6%95%99%E7%A8%8B/"/>
      <url>/2018/11/15/%E8%B6%85%E8%AF%A6%E7%BB%86%20Nginx%20%E6%9E%81%E7%AE%80%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><h1 id="超详细-Nginx-极简教程"><a href="#超详细-Nginx-极简教程" class="headerlink" title="超详细 Nginx 极简教程"></a>超详细 Nginx 极简教程</h1><h3 id="什么是Nginx"><a href="#什么是Nginx" class="headerlink" title="什么是Nginx?"></a>什么是Nginx?</h3><p>Nginx (engine x) 是一款轻量级的Web 服务器 、反向代理服务器及电子邮件（IMAP/POP3）代理服务器。</p><h3 id="什么是反向代理？"><a href="#什么是反向代理？" class="headerlink" title="什么是反向代理？"></a>什么是反向代理？</h3><p>反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个反向代理服务器。</p><p><a href="https://i.imgur.com/A4ix0XJ.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.imgur.com/A4ix0XJ.jpg" class="lazyload"></a></p><h2 id="安装与使用"><a href="#安装与使用" class="headerlink" title="安装与使用"></a>安装与使用</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>nginx官网下载地址：<a href="http://nginx.org，发布版本分为" target="_blank" rel="noopener">http://nginx.org，发布版本分为</a> Linux 和 windows 版本。<br>也可以下载源码，编译后运行。</p><h3 id="从源代码编译-Nginx"><a href="#从源代码编译-Nginx" class="headerlink" title="从源代码编译 Nginx"></a>从源代码编译 Nginx</h3><p>把源码解压缩之后，在终端里运行如下命令：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd C:</span><br><span class="line">cd C: ginx-0.8.54   start nginx</span><br></pre></td></tr></tbody></table></figure></div><p>Nginx / Win32 是运行在一个控制台程序，而非 windows 服务方式的。服务器方式目前还是开发尝试中。</p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>nginx 的使用比较简单，就是几条命令。<br>常用到的命令如下：</p><ul><li><p>nginx -s stop ：快速关闭Nginx，可能不保存相关信息，并迅速终止web服务。</p></li><li><p>nginx -s quit ：平稳关闭Nginx，保存相关信息，有安排的结束web服务。</p></li><li><p>nginx -s reload ：因改变了Nginx相关配置，需要重新加载配置而重载。</p></li><li><p>nginx -s reopen ：重新打开日志文件。</p></li><li><p>nginx -c filename ：为 Nginx 指定一个配置文件，来代替缺省的。</p></li><li><p>nginx -t ：不运行，而仅仅测试配置文件。nginx 将检查配置文件的语法的正确性，并尝试打开配置文件中所引用到的文件。</p></li><li><p>nginx -v：显示 nginx 的版本。</p></li><li><p>nginx -V：显示 nginx 的版本，编译器版本和配置参数。</p></li></ul><p>如果不想每次都敲命令，可以在nginx安装目录下新添一个启动批处理文件startup.bat，双击即可运行。内容如下：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">@echo off</span><br><span class="line">rem 如果启动前已经启动nginx并记录下pid文件，会kill指定进程</span><br><span class="line">nginx.exe -s stop</span><br><span class="line"></span><br><span class="line">rem 测试配置文件语法正确性</span><br><span class="line">nginx.exe -t -c conf/nginx.conf</span><br><span class="line"></span><br><span class="line">rem 显示版本信息</span><br><span class="line">nginx.exe -v</span><br><span class="line"></span><br><span class="line">rem 按照指定配置去启动nginx</span><br><span class="line">nginx.exe -c conf/nginx.conf</span><br></pre></td></tr></tbody></table></figure></div><p>如果是运行在 Linux 下，写一个 shell 脚本，大同小异。</p><h3 id="nginx-配置实战"><a href="#nginx-配置实战" class="headerlink" title="nginx 配置实战"></a>nginx 配置实战</h3><p>我始终认为，各种开发工具的配置还是结合实战来讲述，会让人更易理解。</p><h3 id="http反向代理配置"><a href="#http反向代理配置" class="headerlink" title="http反向代理配置"></a>http反向代理配置</h3><p>我们先实现一个小目标：不考虑复杂的配置，仅仅是完成一个 http 反向代理。</p><h3 id="nginx-conf-配置文件如下："><a href="#nginx-conf-配置文件如下：" class="headerlink" title="nginx.conf 配置文件如下："></a>nginx.conf 配置文件如下：</h3><p>注：conf / nginx.conf 是 nginx 的默认配置文件。你也可以使用 nginx -c 指定你的配置文件</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line">#运行用户</span><br><span class="line">#user somebody;</span><br><span class="line"></span><br><span class="line">#启动进程,通常设置成和cpu的数量相等</span><br><span class="line">worker_processes  1;</span><br><span class="line"></span><br><span class="line">#全局错误日志</span><br><span class="line">error_log  D:/Tools/nginx-1.10.1/logs/error.log;</span><br><span class="line">error_log  D:/Tools/nginx-1.10.1/logs/notice.log  notice;</span><br><span class="line">error_log  D:/Tools/nginx-1.10.1/logs/info.log  info;</span><br><span class="line"></span><br><span class="line">#PID文件，记录当前启动的nginx的进程ID</span><br><span class="line">pid        D:/Tools/nginx-1.10.1/logs/nginx.pid;</span><br><span class="line"></span><br><span class="line">#工作模式及连接数上限</span><br><span class="line">events {</span><br><span class="line">   worker_connections 1024;    #单个后台worker process进程的最大并发链接数</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">#设定http服务器，利用它的反向代理功能提供负载均衡支持</span><br><span class="line">http {</span><br><span class="line">   #设定mime类型(邮件支持类型),类型由mime.types文件定义</span><br><span class="line">   include       D:/Tools/nginx-1.10.1/conf/mime.types;</span><br><span class="line">   default_type  application/octet-stream;</span><br><span class="line">   </span><br><span class="line">   #设定日志</span><br><span class="line">   log_format  main  '[$remote_addr] - [$remote_user] [$time_local] "$request" '</span><br><span class="line">                     '$status $body_bytes_sent "$http_referer" '</span><br><span class="line">                     '"$http_user_agent" "$http_x_forwarded_for"';</span><br><span class="line">                     </span><br><span class="line">   access_log    D:/Tools/nginx-1.10.1/logs/access.log main;</span><br><span class="line">   rewrite_log     on;</span><br><span class="line">   </span><br><span class="line">   #sendfile 指令指定 nginx 是否调用 sendfile 函数（zero copy 方式）来输出文件，对于普通应用，</span><br><span class="line">   #必须设为 on,如果用来进行下载等应用磁盘IO重负载应用，可设置为 off，以平衡磁盘与网络I/O处理速度，降低系统的uptime.</span><br><span class="line">   sendfile        on;</span><br><span class="line">   #tcp_nopush     on;</span><br><span class="line"></span><br><span class="line">   #连接超时时间</span><br><span class="line">   keepalive_timeout  120;</span><br><span class="line">   tcp_nodelay        on;</span><br><span class="line">   </span><br><span class="line">   #gzip压缩开关</span><br><span class="line">   #gzip  on;</span><br><span class="line"></span><br><span class="line">   #设定实际的服务器列表 </span><br><span class="line">   upstream zp_server1{</span><br><span class="line">       server 127.0.0.1:8089;</span><br><span class="line">   }</span><br><span class="line"></span><br><span class="line">   #HTTP服务器</span><br><span class="line">   server {</span><br><span class="line">       #监听80端口，80端口是知名端口号，用于HTTP协议</span><br><span class="line">       listen       80;</span><br><span class="line">       </span><br><span class="line">       #定义使用www.xx.com访问</span><br><span class="line">       server_name  www.javastack.cn;</span><br><span class="line">       </span><br><span class="line">       #首页</span><br><span class="line">       index index.html</span><br><span class="line">       </span><br><span class="line">       #指向webapp的目录</span><br><span class="line">       root D:_WorkspaceProjectgithubzpSpringNotesspring-securityspring-shirosrcmainwebapp;</span><br><span class="line">       </span><br><span class="line">       #编码格式</span><br><span class="line">       charset utf-8;</span><br><span class="line">       </span><br><span class="line">       #代理配置参数</span><br><span class="line">       proxy_connect_timeout 180;</span><br><span class="line">       proxy_send_timeout 180;</span><br><span class="line">       proxy_read_timeout 180;</span><br><span class="line">       proxy_set_header Host $host;</span><br><span class="line">       proxy_set_header X-Forwarder-For $remote_addr;</span><br><span class="line"></span><br><span class="line">       #反向代理的路径（和upstream绑定），location 后面设置映射的路径</span><br><span class="line">       location / {</span><br><span class="line">           proxy_pass http://zp_server1;</span><br><span class="line">       } </span><br><span class="line"></span><br><span class="line">       #静态文件，nginx自己处理</span><br><span class="line">       location ~ ^/(images|javascript|js|css|flash|media|static)/ {</span><br><span class="line">           root D:_WorkspaceProjectgithubzpSpringNotesspring-securityspring-shirosrcmainwebappiews;</span><br><span class="line">           #过期30天，静态文件不怎么更新，过期可以设大一点，如果频繁更新，则可以设置得小一点。</span><br><span class="line">           expires 30d;</span><br><span class="line">       }</span><br><span class="line">   </span><br><span class="line">       #设定查看Nginx状态的地址</span><br><span class="line">       location /NginxStatus {</span><br><span class="line">           stub_status           on;</span><br><span class="line">           access_log            on;</span><br><span class="line">           auth_basic            "NginxStatus";</span><br><span class="line">           auth_basic_user_file  conf/htpasswd;</span><br><span class="line">       }</span><br><span class="line">   </span><br><span class="line">       #禁止访问 .htxxx 文件</span><br><span class="line">       location ~ /.ht {</span><br><span class="line">           deny all;</span><br><span class="line">       }</span><br><span class="line">       </span><br><span class="line">       #错误处理页面（可选择性配置）</span><br><span class="line">       #error_page   404              /404.html;</span><br><span class="line">       #error_page   500 502 503 504  /50x.html;</span><br><span class="line">       #location = /50x.html {</span><br><span class="line">       #    root   html;</span><br><span class="line">       #}</span><br><span class="line">   }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p>好了，让我们来试试吧：</p><p>启动 webapp，注意启动绑定的端口要和nginx中的 upstream 设置的端口保持一致。</p><p>更改 host：</p><p>在 C:Windows\System32\drivers\etc 目录下的host文件中添加一条DNS 记录127.0.0.1 <a href="http://www.javastack.cn" target="_blank" rel="noopener">www.javastack.cn</a> 启动前文中 startup.bat 的命令</p><p>在浏览器中访问 <a href="http://www.javastack.cn，不出意外，已经可以访问了。" target="_blank" rel="noopener">www.javastack.cn，不出意外，已经可以访问了。</a></p><h3 id="负载均衡配置"><a href="#负载均衡配置" class="headerlink" title="负载均衡配置"></a>负载均衡配置</h3><p>上一个例子中，代理仅仅指向一个服务器。</p><p>但是，网站在实际运营过程中，多半都是有多台服务器运行着同样的app，这时需要使用负载均衡来分流。</p><p>nginx也可以实现简单的负载均衡功能。</p><p>假设这样一个应用场景：将应用部署在 192.168.1.11:80、192.168.1.12:80、192.168.1.13:80 三台linux环境的服务器上。网站域名叫 <a href="http://www.javastack.cn，公网IP为" target="_blank" rel="noopener">www.javastack.cn，公网IP为</a> 192.168.1.11。在公网IP所在的服务器上部署 nginx，对所有请求做负载均衡处理。</p><p>nginx.conf 配置如下：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">http {</span><br><span class="line">    #设定mime类型,类型由mime.type文件定义</span><br><span class="line">   include       /etc/nginx/mime.types;</span><br><span class="line">   default_type  application/octet-stream;</span><br><span class="line"><span class="meta">   #</span><span class="bash">设定日志格式</span></span><br><span class="line">   access_log    /var/log/nginx/access.log;</span><br><span class="line"></span><br><span class="line"><span class="meta">   #</span><span class="bash">设定负载均衡的服务器列表</span></span><br><span class="line">   upstream load_balance_server {</span><br><span class="line">       #weigth参数表示权值，权值越高被分配到的几率越大</span><br><span class="line">       server 192.168.1.11:80   weight=5;</span><br><span class="line">       server 192.168.1.12:80   weight=1;</span><br><span class="line">       server 192.168.1.13:80   weight=6;</span><br><span class="line">   }</span><br><span class="line"></span><br><span class="line"><span class="meta">  #</span><span class="bash">HTTP服务器</span></span><br><span class="line">  server {</span><br><span class="line">       #侦听80端口</span><br><span class="line">       listen       80;</span><br><span class="line">       </span><br><span class="line">       #定义使用www.xx.com访问</span><br><span class="line">       server_name  www.javastack.cn;</span><br><span class="line"></span><br><span class="line">       #对所有请求进行负载均衡请求</span><br><span class="line">       location / {</span><br><span class="line">           root        /root;                 #定义服务器的默认网站根目录位置</span><br><span class="line">           index       index.html index.htm;  #定义首页索引文件的名称</span><br><span class="line">           proxy_pass  http://load_balance_server ;#请求转向load_balance_server 定义的服务器列表</span><br><span class="line"></span><br><span class="line">           #以下是一些反向代理的配置(可选择性配置)</span><br><span class="line">           #proxy_redirect off;</span><br><span class="line">           proxy_set_header Host $host;</span><br><span class="line">           proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">           #后端的Web服务器可以通过X-Forwarded-For获取用户真实IP</span><br><span class="line">           proxy_set_header X-Forwarded-For $remote_addr;</span><br><span class="line">           proxy_connect_timeout 90;          #nginx跟后端服务器连接超时时间(代理连接超时)</span><br><span class="line">           proxy_send_timeout 90;             #后端服务器数据回传时间(代理发送超时)</span><br><span class="line">           proxy_read_timeout 90;             #连接成功后，后端服务器响应时间(代理接收超时)</span><br><span class="line">           proxy_buffer_size 4k;              #设置代理服务器（nginx）保存用户头信息的缓冲区大小</span><br><span class="line">           proxy_buffers 4 32k;               #proxy_buffers缓冲区，网页平均在32k以下的话，这样设置</span><br><span class="line">           proxy_busy_buffers_size 64k;       #高负荷下缓冲大小（proxy_buffers*2）</span><br><span class="line">           proxy_temp_file_write_size 64k;    #设定缓存文件夹大小，大于这个值，将从upstream服务器传</span><br><span class="line">           </span><br><span class="line">           client_max_body_size 10m;          #允许客户端请求的最大单文件字节数</span><br><span class="line">           client_body_buffer_size 128k;      #缓冲区代理缓冲用户端请求的最大字节数</span><br><span class="line">       }</span><br><span class="line">   }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><h3 id="网站有多个webapp的配置"><a href="#网站有多个webapp的配置" class="headerlink" title="网站有多个webapp的配置"></a>网站有多个webapp的配置</h3><p>当一个网站功能越来越丰富时，往往需要将一些功能相对独立的模块剥离出来，独立维护。这样的话，通常，会有多个 webapp。</p><p>举个例子：假如 <a href="http://www.javastack.cn" target="_blank" rel="noopener">www.javastack.cn</a> 站点有好几个webapp，finance（金融）、product（产品）、admin（用户中心）。访问这些应用的方式通过上下文(context)来进行区分:</p><ul><li><p><a href="http://www.javastack.cn/finance/" target="_blank" rel="noopener">www.javastack.cn/finance/</a></p></li><li><p><a href="http://www.javastack.cn/product/" target="_blank" rel="noopener">www.javastack.cn/product/</a></p></li><li><p><a href="http://www.javastack.cn/admin/" target="_blank" rel="noopener">www.javastack.cn/admin/</a></p></li></ul><p>我们知道，http的默认端口号是80，如果在一台服务器上同时启动这3个 webapp 应用，都用80端口，肯定是不成的。所以，这三个应用需要分别绑定不同的端口号。</p><p>那么，问题来了，用户在实际访问 <a href="http://www.javastack.cn" target="_blank" rel="noopener">www.javastack.cn</a> 站点时，访问不同 webapp，总不会还带着对应的端口号去访问吧。所以，你再次需要用到反向代理来做处理。</p><p>配置也不难，来看看怎么做吧：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">http {</span><br><span class="line"><span class="meta">   #</span><span class="bash">此处省略一些基本配置</span></span><br><span class="line">   </span><br><span class="line">   upstream product_server{</span><br><span class="line">       server www.javastack.cn:8081;</span><br><span class="line">   }</span><br><span class="line">   </span><br><span class="line">   upstream admin_server{</span><br><span class="line">       server www.javastack.cn:8082;</span><br><span class="line">   }</span><br><span class="line">   </span><br><span class="line">   upstream finance_server{</span><br><span class="line">       server www.javastack.cn:8083;</span><br><span class="line">   }</span><br><span class="line"></span><br><span class="line">   server {</span><br><span class="line">       #此处省略一些基本配置</span><br><span class="line">       #默认指向product的server</span><br><span class="line">       location / {</span><br><span class="line">           proxy_pass http://product_server;</span><br><span class="line">       }</span><br><span class="line"></span><br><span class="line">       location /product/{</span><br><span class="line">           proxy_pass http://product_server;</span><br><span class="line">       }</span><br><span class="line"></span><br><span class="line">       location /admin/ {</span><br><span class="line">           proxy_pass http://admin_server;</span><br><span class="line">       }</span><br><span class="line">       </span><br><span class="line">       location /finance/ {</span><br><span class="line">           proxy_pass http://finance_server;</span><br><span class="line">       }</span><br><span class="line">   }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><h3 id="https反向代理配置"><a href="#https反向代理配置" class="headerlink" title="https反向代理配置"></a>https反向代理配置</h3><p>一些对安全性要求比较高的站点，可能会使用 HTTPS（一种使用ssl通信标准的安全HTTP协议）。</p><p>这里不科普 HTTP 协议和 SSL 标准。但是，使用 nginx 配置 https 需要知道几点：</p><ul><li><p>HTTPS 的固定端口号是 443，不同于 HTTP 的 80 端口</p></li><li><p>SSL 标准需要引入安全证书，所以在 nginx.conf 中你需要指定证书和它对应的 key</p></li></ul><p>其他和 http 反向代理基本一样，只是在 Server 部分配置有些不同。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">HTTP服务器</span></span><br><span class="line"> server {</span><br><span class="line">     #监听443端口。443为知名端口号，主要用于HTTPS协议</span><br><span class="line">     listen       443 ssl;</span><br><span class="line"></span><br><span class="line">     #定义使用www.xx.com访问</span><br><span class="line">     server_name  www.javastack.cn;</span><br><span class="line"></span><br><span class="line">     #ssl证书文件位置(常见证书文件格式为：crt/pem)</span><br><span class="line">     ssl_certificate      cert.pem;</span><br><span class="line">     #ssl证书key位置</span><br><span class="line">     ssl_certificate_key  cert.key;</span><br><span class="line"></span><br><span class="line">     #ssl配置参数（选择性配置）</span><br><span class="line">     ssl_session_cache    shared:SSL:1m;</span><br><span class="line">     ssl_session_timeout  5m;</span><br><span class="line">     #数字签名，此处使用MD5</span><br><span class="line">     ssl_ciphers  HIGH:!aNULL:!MD5;</span><br><span class="line">     ssl_prefer_server_ciphers  on;</span><br><span class="line"></span><br><span class="line">     location / {</span><br><span class="line">         root   /root;</span><br><span class="line">         index  index.html index.htm;</span><br><span class="line">     }</span><br><span class="line"> }</span><br></pre></td></tr></tbody></table></figure></div><h3 id="静态站点配置"><a href="#静态站点配置" class="headerlink" title="静态站点配置"></a>静态站点配置</h3><p>有时候，我们需要配置静态站点(即 html 文件和一堆静态资源)。</p><p>举例来说：如果所有的静态资源都放在了 /app/dist 目录下，我们只需要在 nginx.conf 中指定首页以及这个站点的 host 即可。</p><p>配置如下：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">worker_processes  1;</span><br><span class="line"></span><br><span class="line">events {</span><br><span class="line">   worker_connections  1024;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">http {</span><br><span class="line">   include       mime.types;</span><br><span class="line">   default_type  application/octet-stream;</span><br><span class="line">   sendfile        on;</span><br><span class="line">   keepalive_timeout  65;</span><br><span class="line"></span><br><span class="line">   gzip on;</span><br><span class="line">   gzip_types text/plain application/x-javascript text/css application/xml text/javascript application/javascript image/jpeg image/gif image/png;</span><br><span class="line">   gzip_vary on;</span><br><span class="line"></span><br><span class="line">   server {</span><br><span class="line">       listen       80;</span><br><span class="line">       server_name  static.zp.cn;</span><br><span class="line"></span><br><span class="line">       location / {</span><br><span class="line">           root /app/dist;</span><br><span class="line">           index index.html;</span><br><span class="line">           #转发任何请求到 index.html</span><br><span class="line">       }</span><br><span class="line">   }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p>然后，添加 HOST：</p><p>127.0.0.1 static.zp.cn，此时，在本地浏览器访问 static.zp.cn ，就可以访问静态站点了。</p><h3 id="跨域解决方案"><a href="#跨域解决方案" class="headerlink" title="跨域解决方案"></a>跨域解决方案</h3><p>web 领域开发中，经常采用前后端分离模式。这种模式下，前端和后端分别是独立的 web 应用程序，例如：后端是 Java 程序，前端是 React 或 Vue 应用，更多请看这篇文章《<a href="https://mp.weixin.qq.com/s?__biz=MzI3ODcxMzQzMw==&mid=2247485898&idx=1&sn=32626e4f241d5f04684736b52afafb10&chksm=eb538cfcdc2405ea368fa092c0af8e424ad843198274426cca275acc8ed83d86497ec3a54acc&scene=21#wechat_redirect" target="_blank" rel="noopener">到底什么是跨域，及解决方案</a>》。</p><p>各自独立的 web app 在互相访问时，势必存在跨域问题。解决跨域问题一般有两种思路：</p><h3 id="CORS"><a href="#CORS" class="headerlink" title="CORS"></a>CORS</h3><p>在后端服务器设置 HTTP 响应头，把你需要运行访问的域名加入加入 Access-Control-Allow-Origin 中。</p><h3 id="jsonp"><a href="#jsonp" class="headerlink" title="jsonp"></a>jsonp</h3><p>把后端根据请求，构造json数据，并返回，前端用 jsonp 跨域。</p><p>这两种思路，本文不展开讨论。</p><p>需要说明的是，nginx 根据第一种思路，也提供了一种解决跨域的解决方案。</p><p>举例：<a href="http://www.javastack.cn" target="_blank" rel="noopener">www.javastack.cn</a> 网站是由一个前端 app ，一个后端 app 组成的。前端端口号为 9000， 后端端口号为 8080。</p><p>前端和后端如果使用 http 进行交互时，请求会被拒绝，因为存在跨域问题。来看看，nginx 是怎么解决的吧：</p><p>首先，在 enable-cors.conf 文件中设置 cors ：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> allow origin list</span></span><br><span class="line">set $ACAO '*';</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">set</span> single origin</span></span><br><span class="line">if ($http_origin ~* (www.javastack.cn)$) {</span><br><span class="line"> set $ACAO $http_origin;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">if ($cors = "trueget") {</span><br><span class="line">   add_header 'Access-Control-Allow-Origin' "$http_origin";</span><br><span class="line">   add_header 'Access-Control-Allow-Credentials' 'true';</span><br><span class="line">   add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';</span><br><span class="line">   add_header 'Access-Control-Allow-Headers' 'DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type';</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">if ($request_method = 'OPTIONS') {</span><br><span class="line"> set $cors "${cors}options";</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">if ($request_method = 'GET') {</span><br><span class="line"> set $cors "${cors}get";</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">if ($request_method = 'POST') {</span><br><span class="line"> set $cors "${cors}post";</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p>接下来，在你的服务器中 include enable-cors.conf 来引入跨域配置：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"># ----------------------------------------------------</span><br><span class="line"># 此文件为项目 nginx 配置片段</span><br><span class="line"># 可以直接在 nginx config 中 include（推荐）</span><br><span class="line"># 或者 copy 到现有 nginx 中，自行配置</span><br><span class="line"># www.javastack.com 域名需配合 dns hosts 进行配置</span><br><span class="line"># 其中，api 开启了 cors，需配合本目录下另一份配置文件</span><br><span class="line"># ----------------------------------------------------</span><br><span class="line">upstream front_server{</span><br><span class="line"> server www.javastack.cn:9000;</span><br><span class="line">}</span><br><span class="line">upstream api_server{</span><br><span class="line"> server www.javastack.cn:8080;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">server {</span><br><span class="line"> listen       80;</span><br><span class="line"> server_name  www.javastack.cn;</span><br><span class="line"></span><br><span class="line"> location ~ ^/api/ {</span><br><span class="line">   include enable-cors.conf;</span><br><span class="line">   proxy_pass http://api_server;</span><br><span class="line">   rewrite "^/api/(.*)$" /$1 break;</span><br><span class="line"> }</span><br><span class="line"></span><br><span class="line"> location ~ ^/ {</span><br><span class="line">   proxy_pass http://front_server;</span><br><span class="line"> }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p>到此，就完成了。</p></body></html>]]></content>
      
      
      <categories>
          
          <category> Nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何优雅使用Docker</title>
      <link href="/2018/09/25/%E5%A6%82%E4%BD%95%E4%BC%98%E9%9B%85%E4%BD%BF%E7%94%A8Docker/"/>
      <url>/2018/09/25/%E5%A6%82%E4%BD%95%E4%BC%98%E9%9B%85%E4%BD%BF%E7%94%A8Docker/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><h1 id="请收下这15个小技巧"><a href="#请收下这15个小技巧" class="headerlink" title="请收下这15个小技巧"></a>请收下这15个小技巧</h1><h2 id="Tip-1"><a href="#Tip-1" class="headerlink" title="Tip 1"></a><code>Tip 1</code></h2><p>获取最近运行容器的id 这是我们经常会用到的一个操作，按照官方示例，你可以这样做（环境ubuntu）：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ ID=$(docker run ubuntu echo hello world)</span><br><span class="line">hello world</span><br><span class="line">$ docker commit $ID helloworld</span><br><span class="line">fd08a884dc79</span><br></pre></td></tr></tbody></table></figure></div><p>这种方式在编写脚本的时候很有用，比如你想在脚本中批量获取id，然后进一步操作。但是这种方式要求你必须给ID赋值，如果是直接敲命令，这样做就不太方便了。 这时，你可以换一种方式：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ alias dl=’docker ps -l -q’</span><br><span class="line">$ docker run ubuntu echo hello world</span><br><span class="line">hello world</span><br><span class="line">$ dl</span><br><span class="line">1904cf045887</span><br><span class="line">$ docker commit `dl` helloworld</span><br><span class="line">fd08a884dc79</span><br></pre></td></tr></tbody></table></figure></div><p>docker ps -l -q命令将返回最近运行的容器的id，通过设置别名（alias），dl命令就是获取最近容器的id。这样，就无需再输入冗长的docker ps -l -q命令了。通过两个斜引号“，可以获取dl命令的值，也就是最近运行的容器的id。</p><h2 id="Tip-2"><a href="#Tip-2" class="headerlink" title="Tip 2"></a><code>Tip 2</code></h2><p>尽量在Dockerfile中指定要安装的软件，而不用Docker容器的shell直接安装软件。 说实话，我有时候也喜欢在shell中安装软件，也许你也一样，喜欢在shell中把所有软件安装都搞定。但是，搞来搞去，最后还是发现，你还是需要在Doockerfile中指定安装文件。在shell中安装软件，你要这样做：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ docker run -i -t ubuntu bash #登陆到docker容器</span><br><span class="line">root@db0c3967abf8:/#</span><br></pre></td></tr></tbody></table></figure></div><p>然后输入下面的命令来安装文件：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install postgresql</span><br></pre></td></tr></tbody></table></figure></div><p>然后再调用exit：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@db0c3978abf8:/# exit</span><br></pre></td></tr></tbody></table></figure></div><p>退出docker容器，再给docker commit命令传递一个复杂的JSON字符串来提交新的镜像：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker commit -run=”{“Cmd”:[“postgres”,”-too -many -opts”] }” `dl` postgres</span><br></pre></td></tr></tbody></table></figure></div><p>太麻烦了，不是吗？还是在Dockerfile中指定安装文件吧，只要两个步骤：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1.在一个小巧的Dockerfile中，指定当前操作的镜像为FROM命令的参数</span><br><span class="line">2.然后在Dockerfile中指定一些docker的命令，如CMD, ENTERPOINT, VOLUME等等来指定安装的软件</span><br></pre></td></tr></tbody></table></figure></div><h2 id="Tip-3"><a href="#Tip-3" class="headerlink" title="Tip 3"></a><code>Tip 3</code></h2><p>超-超-超级用户</p><p>你可能需要一直用超级用户来操作docker，就像早期示例里一直提示的：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 添加docker用户组</span><br><span class="line">$ sudo groupadd docker</span><br><span class="line"># 把自己加到docker用户组中</span><br><span class="line">$ sudo gpasswd -a myusername docker</span><br><span class="line"># 重启docker后台服务</span><br><span class="line">$ sudo service docker restart</span><br><span class="line"># 注销，然后再登陆</span><br><span class="line">$ exit</span><br></pre></td></tr></tbody></table></figure></div><p>Wow！连续三个sudo！三次化身“超级用户”，真可谓是“超-超-超级用户”啊！别担心，设置完毕，以后你就再也不用打那么多sudo了！</p><h2 id="Tip-4"><a href="#Tip-4" class="headerlink" title="Tip 4"></a><code>Tip 4</code></h2><p>清理垃圾</p><p>如果你想删除所有停止运行的容器，用这个命令：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker rm $(docker ps -a -q)</span><br></pre></td></tr></tbody></table></figure></div><p>顺便说一句，docker ps命令很慢，不知道为啥这么慢，按理说Go语言是很快的啊。docker ps -a -q命令列出所有容器的id，然后根据id删除容器。docker rm命令遇到正在运行的容器就会失效，所以这个命令完美的删除了所有没在运行的容器。</p><h2 id="Tip-5"><a href="#Tip-5" class="headerlink" title="Tip 5"></a><code>Tip 5</code></h2><p>docker inspect输出结果的解析利器：jq 要对docker inspect的输出结果进行过滤，一般情况下，用grep命令，你需要这样操作：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$docker inspect `dl` | grep IPAddress | cut -d '"' -f 4</span><br></pre></td></tr></tbody></table></figure></div><p>哦！看上去很复杂，用jq吧，专业解析docker inspect输出结果，具有更强的可读性，方便易用：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$docker inspect `dl` | jq -r '.[0].NetworkSettings.IPAddress'</span><br></pre></td></tr></tbody></table></figure></div><p>其中第一个’.’代表所有的结果。’[0]’代表数组的第一个元素。就像JavaScript访问一个JSON对象一样，简单方便。</p><h2 id="Tip-6"><a href="#Tip-6" class="headerlink" title="Tip 6"></a><code>Tip 6</code></h2><p>镜像有哪些环境变量？ 有时候，你需要知道自己创建的镜像有哪些环境变量。简单！只要这样：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker run ubuntu env</span><br></pre></td></tr></tbody></table></figure></div><p>输出结果如下：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">HOME=/</span><br><span class="line">PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin</span><br><span class="line">container=lxc</span><br><span class="line">HOSTNAME=5e1560b7f757</span><br></pre></td></tr></tbody></table></figure></div><p>调用env查看环境变量，对于后面要讲到的“链接”(-link)很有用，在连接两个容器时候需要用到这些环境变量，具体请看最后一个要点“链接”。</p><h2 id="Tip-7"><a href="#Tip-7" class="headerlink" title="Tip 7"></a><code>Tip 7</code></h2><p>RUN命令 vs CMD命令</p><p>Docker的新手用户比较容易混淆RUN和CMD这两个命令。 RUN命令在构建（Build）Docker时执行，这时CMD命令不执行。CMD命令在RUN命令执行时才执行。我们来理清关系，假设Dockerfile内容如下：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">FROM thelanddownunder</span><br><span class="line">MAINTAINER crocdundee</span><br></pre></td></tr></tbody></table></figure></div><p>我们要向系统中安装一些软件，那么：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># docker build将会执行下面的命令：</span><br><span class="line">RUN apt-get update</span><br><span class="line">RUN apt-get install softwares</span><br><span class="line"># dokcer run默认执行下面的命令：</span><br><span class="line">CMD [“softwares”]</span><br></pre></td></tr></tbody></table></figure></div><p>Build时执行RUN，RUN时执行CMD，也就是说，CMD才是镜像最终执行的命令。</p><h2 id="Tip-8"><a href="#Tip-8" class="headerlink" title="Tip 8"></a><code>Tip 8</code></h2><p>CMD命令 vs ENTRYPOINT命令</p><p>又是两条容易混淆的命令！具体细节我们就不说了，举个例子，假设一个容器的Dockerfile指定CMD命令，如下：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">FROM ubuntu</span><br><span class="line">CMD [“echo”]</span><br></pre></td></tr></tbody></table></figure></div><p>另一个容器的Dockerfile指定ENTRYPOINT命令，如下：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">FROM ubuntu</span><br><span class="line">ENTRYPOINT [“echo”]</span><br></pre></td></tr></tbody></table></figure></div><p>运行第一个容器：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run image1 echo hello</span><br></pre></td></tr></tbody></table></figure></div><p>得到的结果：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hello</span><br></pre></td></tr></tbody></table></figure></div><p>运行第二个容器：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run image2 echo hello</span><br></pre></td></tr></tbody></table></figure></div><p>得到的结果：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo hello</span><br></pre></td></tr></tbody></table></figure></div><p>看到不同了吧？实际上，CMD命令是可覆盖的，docker run后面输入的命令与CMD指定的命令匹配时，会把CMD指定的命令替换成docker run中带的命令。而ENTRYPOINT指定的命令只是一个“入口”，docker run后面的内容会全部传给这个“入口”，而不是进行命令的替换，所以得到的结果就是“echo hello”。</p><h2 id="Tip-9"><a href="#Tip-9" class="headerlink" title="Tip 9"></a><code>Tip 9</code></h2><p>Docker容器有自己的IP地址吗？ </p><p>刚接触Docker的人或许会有这样的疑问：Docker容器有自己的IP地址吗？Docker容器是一个进程？还是一个虚拟机？嗯…也许两者兼具？哈哈，其实，Docker容器确实有自己的IP，就像一个具有IP的进程。只要分别在主机和Docker容器中执行查看ip的命令就知道了。</p><p>查看主机的ip：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ip -4 -o addr show eth0</span><br></pre></td></tr></tbody></table></figure></div><p>得到结果：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2: eth0 inet 162.243.139.222/24</span><br></pre></td></tr></tbody></table></figure></div><p>查看Docker容器的ip：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker run ubuntu ip -r -o addr show eth0</span><br></pre></td></tr></tbody></table></figure></div><p>得到结果：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">149: eth0   inet 172.17.0.43/16</span><br></pre></td></tr></tbody></table></figure></div><p>两者并不相同，说明Docker容器有自己的ip。</p><h2 id="Tip-10"><a href="#Tip-10" class="headerlink" title="Tip 10"></a><code>Tip 10</code></h2><p>基于命令行的瘦客户端，使用UNIX Socket和Docker后台服务的REST接口进行通信。Docker默认是用UNIX socket通信的，一直到大概0.5、0.6的版本还是用端口来通信，但现在则改成UNIX socket，所以从外部无法控制Docker容器的内部细节。下面我们来搞点有趣的事情，从主机链接到docker的UNIX socket：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 像HTTP客户端一样连接到UNIX socket</span><br><span class="line">$ nc -U / /var/run/docker.sock</span><br></pre></td></tr></tbody></table></figure></div><p>连接成功后，输入：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET /images/json HTTP/1.1</span><br></pre></td></tr></tbody></table></figure></div><p>输入后连敲两个回车，第二个回车表示输入结束。然后，得到的结果应该是：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Content-Type: application/json</span><br><span class="line">Date: Tue, 05 Nov 2013 23:18:09 GMT</span><br><span class="line">Transfer-Encoding: chunked</span><br><span class="line">16aa</span><br><span class="line">[{“Repository”:”postgres”,”Tag”:”......</span><br></pre></td></tr></tbody></table></figure></div><p>有一天，我不小心把提交的名称打错了，名字开头打成”-xxx”（我把命令和选项的顺序搞混了），所以当我删除的时候出了问题，docker rm -xxx，会把-xxx当成参数而不是镜像的名称。所以我只得通过socket直接连到容器来调用REST Server把错误的东西删掉。</p><h2 id="Tip-11"><a href="#Tip-11" class="headerlink" title="Tip 11"></a><code>Tip 11</code></h2><p>把镜像的依赖关系绘制成图</p><p>docker images命令有一个很拉风的选项：-viz，可以把镜像的依赖关系绘制成图并通过管道符号保存到图片文件：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 生成一个依赖关系的图表</span><br><span class="line">$ docker images -viz | dot -T png -o docker.png</span><br></pre></td></tr></tbody></table></figure></div><p>这样，主机的当前路径下就生成了一张png图，然后，用python开启一个微型的HTTP服务器：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -m SimpleHTTPServer</span><br></pre></td></tr></tbody></table></figure></div><p>然后在别的机器上用浏览器打开：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://machinename:8000/docker.png</span><br></pre></td></tr></tbody></table></figure></div><p>OK，依赖关系一目了然！</p><p>（译者注：要使用dot命令，主机要安装graphviz包。另外，如果主机ip没有绑定域名，machinename换成主机的ip即可。）</p><h2 id="Tip-12"><a href="#Tip-12" class="headerlink" title="Tip 12"></a><code>Tip 12</code></h2><p>Docker把东西都存到哪里去了？ Docker实际上把所有东西都放到/var/lib/docker路径下了。切换成super用户，到/var/lib/docker下看看，你能学到很多有趣的东西。执行下面的命令：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ sudo su</span><br><span class="line"># cd /var/lib/docker</span><br><span class="line"># ls -F</span><br><span class="line">containers/ graph/ repositories volumes/</span><br></pre></td></tr></tbody></table></figure></div><p>可以看到不少目录，containers目录当然就是存放容器（container）了，graph目录存放镜像，文件层（file system layer）存放在graph/imageid/layer路径下，这样你就可以看看文件层里到底有哪些东西，利用这种层级结构可以清楚的看到文件层是如 何一层一层叠加起来的。</p><h2 id="Tip-13"><a href="#Tip-13" class="headerlink" title="Tip 13"></a><code>Tip 13</code></h2><p>Docker源代码：Go, Go, Go, Golang! Docker的源代码全部是用Go语言写的。Go是一门非常酷的语言。其实，不只是Docker，很多优秀的软件都是用Go写的。对我来说，Docker源文件中，有4个是我非常喜欢阅读的：</p><p>commands.go docker的命令行接口，是对REST API的一个轻量级封装。Docker团队不希望在命令中出现逻辑，因此commands.go只是向REST API发送指令，确保其较小的颗粒性。</p><p>api.go REST API的路由（接受commands.go中的请求，转发到server.go）</p><p>server.go 大部分REST API的实现</p><p>buildfile.go Dockerfile的解析器</p><p>有的伙计惊叹”Wow!Docker是怎么实现的？！我无法理解！”没关系，Docker是开源软件，去看它的源代码就可以了。如果你不太清楚Dockerfile中的命令是怎么回事，直接去看buildfile.go就明白了。</p><h2 id="Tip-14"><a href="#Tip-14" class="headerlink" title="Tip 14"></a><code>Tip 14</code></h2><p>运行几个Docker后台程序，再退出容器，会发生什么？ OK，倒数第二个要点。如果在Docker中运行几个后台程序，再退出Docker容器，会发生什么？答案是：不要这么做！因为这样做后台程序就全丢了。</p><p>Dockerfile中用RUN命令去开启一个后台程序，如：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">RUN pg_ctl start</span><br></pre></td></tr></tbody></table></figure></div><p>这样的话，RUN命令开启的后台程序就会丢失。调用容器的bash连到容器的shell：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker run -i -t postgresimage bash</span><br></pre></td></tr></tbody></table></figure></div><p>然后调用 ps aux查看进程，你会发现postgres的进程并没有跑起来。 RUN命令会影响文件系统。因此，不要再Dockerfile中用启动后台程序，要把后台程序启动成前台进程。或者，像一些高手提议的那样，写一个启动脚 本，在脚本中启动这些后台程序或进程。</p><h2 id="Tip-15"><a href="#Tip-15" class="headerlink" title="Tip 15"></a><code>Tip 15</code></h2><p>容器之间进行友好沟通：链接 </p><p>这是最拉风的功能！我把它留到最后压轴！这是0.6.5中最重要的新功能，我们前面已经提过两次了。运行一个容器，给它一个名称，在下面的例子中，我们通过-name参数给容器指定名称”loldb”：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker run -d -name loldb loldbimage</span><br></pre></td></tr></tbody></table></figure></div><p>再运行另一个容器，加上-link参数来连接到第一个容器（别名为loldb），并给第二个容器也指定一个别名（这里用的是cheez）：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker run -link /loldb:cheez otherimage env</span><br></pre></td></tr></tbody></table></figure></div><p>顺便得到cheez的环境变量：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">CHEEZ_PORT=tcp://172.17.0.8:6379</span><br><span class="line">CHEEZ_PORT_1337_TCP=tcp://172.17.0.8.6379</span><br><span class="line">CHEEZ_PORT_1337_TCP_ADDR=tcp://172.17.0.12</span><br><span class="line">CHEEZ_PORT_1337_TCP_PORT=6379</span><br><span class="line">CHEEZ_PORT_1337_TCP_PROTO=tcp</span><br></pre></td></tr></tbody></table></figure></div><p>这样，我们就在两个容器间建立起一个网络通道（bridge），基于此，我们可以建立一个类似rails的程序：一个容器可以访问数据库容器而不对外暴露其他接口。非常酷！数据库容器只需要知道第一个容器的别名（在本例中为cheez）和要打开的端口号。所以数据库容器也可以env命令来查看这个端口是否打开。</p></body></html>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>简单多线程基础</title>
      <link href="/2018/09/11/%E7%AE%80%E5%8D%95%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%9F%BA%E7%A1%80/"/>
      <url>/2018/09/11/%E7%AE%80%E5%8D%95%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><h1 id="简单多线程基础"><a href="#简单多线程基础" class="headerlink" title="简单多线程基础"></a>简单多线程基础</h1><p>主要内容：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">简述线程，程序、进程的基本概念。以及他们之间关系是什么？</span><br><span class="line"></span><br><span class="line">线程有哪些基本状态？这些状态是如何定义的?</span><br><span class="line"></span><br><span class="line">何为多线程？</span><br><span class="line"></span><br><span class="line">为什么多线程是必要的？</span><br><span class="line"></span><br><span class="line">使用多线程常见的三种方式</span><br><span class="line"></span><br><span class="line">线程的优先级</span><br><span class="line"></span><br><span class="line">Java多线程分类</span><br><span class="line"></span><br><span class="line">sleep()方法和wait()方法简单对比</span><br><span class="line"></span><br><span class="line">为什么我们调用start()方法时会执行run()方法，为什么我们不能直接调用run()方法？</span><br></pre></td></tr></tbody></table></figure></div><h2 id="1-简述线程，程序、进程的基本概念。以及他们之间关系是什么？"><a href="#1-简述线程，程序、进程的基本概念。以及他们之间关系是什么？" class="headerlink" title="1. 简述线程，程序、进程的基本概念。以及他们之间关系是什么？"></a>1. 简述线程，程序、进程的基本概念。以及他们之间关系是什么？</h2><p><strong>线程</strong>与进程相似，但线程是一个比进程更小的执行单位。一个进程在其执行的过程中可以产生多个线程。与进程不同的是同类的多个线程共享同一块内存空间和一组系统资源，所以系统在产生一个线程，或是在各个线程之间作切换工作时，负担要比进程小得多，也正因为如此，线程也被称为轻量级进程。</p><p><strong>程序</strong>是含有指令和数据的文件，被存储在磁盘或其他的数据存储设备中，也就是说程序是静态的代码。</p><p><strong>进程</strong>是程序的一次执行过程，是系统运行程序的基本单位，因此进程是动态的。系统运行一个程序即是一个进程从创建，运行到消亡的过程。简单来说，一个进程就是一个执行中的程序，它在计算机中一个指令接着一个指令地执行着，同时，每个进程还占有某些系统资源如CPU时间，内存空间，文件，文件，输入输出设备的使用权等等。换句话说，当程序在执行时，将会被操作系统载入内存中。</p><p><strong>线程</strong> 是 <strong>进程</strong> 划分成的更小的运行单位。线程和进程最大的不同在于基本上各进程是独立的，而各线程则不一定，因为同一进程中的线程极有可能会相互影响。从另一角度来说，进程属于操作系统的范畴，主要是同一段时间内，可以同时执行一个以上的程序，而线程则是在同一程序内几乎同时执行一个以上的程序段。</p><p><strong>线程上下文的切换比进程上下文切换要快很多</strong></p><p>进程切换时，涉及到当前进程的CPU环境的保存和新被调度运行进程的CPU环境的设置。</p><p>线程切换仅需要保存和设置少量的寄存器内容，不涉及存储管理方面的操作。</p><h2 id="2-线程有哪些基本状态？这些状态是如何定义的"><a href="#2-线程有哪些基本状态？这些状态是如何定义的" class="headerlink" title="2. 线程有哪些基本状态？这些状态是如何定义的?"></a>2. 线程有哪些基本状态？这些状态是如何定义的?</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">新建(new)：新创建了一个线程对象。</span><br><span class="line"></span><br><span class="line">可运行(runnable)：线程对象创建后，其他线程(比如main线程）调用了该对象的start()方法。该状态的线程位于可运行线程池中，等待被线程调度选中，获 取cpu的使用权。</span><br><span class="line"></span><br><span class="line">运行(running)：可运行状态(runnable)的线程获得了cpu时间片（timeslice），执行程序代码。</span><br><span class="line"></span><br><span class="line">阻塞(block)：阻塞状态是指线程因为某种原因放弃了cpu使用权，也即让出了cpu timeslice，暂时停止运行。直到线程进入可运行(runnable)状态，才有 机会再次获得cpu timeslice转到运行(running)状态。阻塞的情况分三种：</span><br><span class="line"></span><br><span class="line">    (一). 等待阻塞：运行(running)的线程执行o.wait()方法，JVM会把该线程放 入等待队列(waitting queue)中。</span><br><span class="line"></span><br><span class="line">    (二). 同步阻塞：运行(running)的线程在获取对象的同步锁时，若该同步 锁 被别的线程占用，则JVM会把该线程放入锁池(lock pool)中。</span><br><span class="line"></span><br><span class="line">    (三). 其他阻塞: 运行(running)的线程执行Thread.sleep(long ms)或t.join()方法，或者发出了I/O请求时，JVM会把该线程置为阻塞状态。当sleep()状态超时join()等待线程终止或者超时、或者I/O处理完毕时，线程重新转入可运行(runnable)状态。</span><br><span class="line"></span><br><span class="line">死亡(dead)：线程run()、main()方法执行结束，或者因异常退出了run()方法，则该线程结束生命周期。死亡的线程不可再次复生。</span><br></pre></td></tr></tbody></table></figure></div><p>备注： 可以用早起坐地铁来比喻这个过程（下面参考自牛客网某位同学的回答）：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">还没起床：sleeping</span><br><span class="line"></span><br><span class="line">起床收拾好了，随时可以坐地铁出发：Runnable</span><br><span class="line"></span><br><span class="line">等地铁来：Waiting</span><br><span class="line"></span><br><span class="line">地铁来了，但要排队上地铁：I/O阻塞</span><br><span class="line"></span><br><span class="line">上了地铁，发现暂时没座位：synchronized阻塞</span><br><span class="line"></span><br><span class="line">地铁上找到座位：Running</span><br><span class="line"></span><br><span class="line">到达目的地：Dead</span><br></pre></td></tr></tbody></table></figure></div><h2 id="3-何为多线程？"><a href="#3-何为多线程？" class="headerlink" title="3. 何为多线程？"></a>3. 何为多线程？</h2><p>多线程就是多个线程同时运行或交替运行。单核CPU的话是顺序执行，也就是交替运行。多核CPU的话，因为每个CPU有自己的运算器，所以在多个CPU中可以同时运行。</p><h2 id="4-为什么多线程是必要的？"><a href="#4-为什么多线程是必要的？" class="headerlink" title="4. 为什么多线程是必要的？"></a>4. 为什么多线程是必要的？</h2><ul><li><p>使用线程可以把占据长时间的程序中的任务放到后台去处理。</p></li><li><p>用户界面可以更加吸引人，这样比如用户点击了一个按钮去触发某些事件的处理，可以弹出一个进度条来显示处理的进度。</p></li><li><p>程序的运行速度可能加快。</p></li></ul><h1 id="5-使用多线程常见的三种方式"><a href="#5-使用多线程常见的三种方式" class="headerlink" title="5 使用多线程常见的三种方式"></a>5 使用多线程常见的三种方式</h1><h3 id="①继承Thread类"><a href="#①继承Thread类" class="headerlink" title="①继承Thread类"></a>①继承Thread类</h3><p>MyThread.java</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public class MyThread extends Thread {</span><br><span class="line">    @Override</span><br><span class="line">    public void run() {</span><br><span class="line">        super.run();</span><br><span class="line"></span><br><span class="line">        System.out.println("MyThread");</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p>Run.java</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public class Run {</span><br><span class="line">    public static void main(String[] args) {</span><br><span class="line">        MyThread mythread = new MyThread();</span><br><span class="line"></span><br><span class="line">        mythread.start();</span><br><span class="line"></span><br><span class="line">        System.out.println("运行结束");</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p>运行结果：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">MyThread</span><br><span class="line">运行结束</span><br></pre></td></tr></tbody></table></figure></div><p>从上面的运行结果可以看出：线程是一个子任务，CPU以不确定的方式，或者说是以随机的时间来调用线程中的run方法。</p><h3 id="②实现Runnable接口"><a href="#②实现Runnable接口" class="headerlink" title="②实现Runnable接口"></a>②实现Runnable接口</h3><p>推荐实现Runnable接口方式开发多线程，因为Java单继承但是可以实现多个接口。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public class MyRunnable implements Runnable {</span><br><span class="line">    @Override</span><br><span class="line">    public void run() {</span><br><span class="line">        System.out.println("MyRunnable");</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p>Run.java</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public class Run {</span><br><span class="line">    public static void main(String[] args) {</span><br><span class="line">        Runnable runnable = new MyRunnable();</span><br><span class="line"></span><br><span class="line">        Thread thread = new Thread(runnable);</span><br><span class="line"></span><br><span class="line">        thread.start();</span><br><span class="line"></span><br><span class="line">        System.out.println("运行结束！");</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p>运行结果：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">MyThread</span><br><span class="line">运行结束</span><br></pre></td></tr></tbody></table></figure></div><h3 id="③使用线程池"><a href="#③使用线程池" class="headerlink" title="③使用线程池"></a>③使用线程池</h3><p>在<strong>《阿里巴巴Java开发手册》</strong>“并发处理”这一章节，明确指出线程资源必须通过线程池提供，不允许在应用中自行显示创建线程。</p><p>为什么呢？</p><blockquote><p>使用线程池的好处是减少在创建和销毁线程上所消耗的时间以及系统资源开销，解决资源不足的问题。如果不使用线程池，有可能会造成系统创建大量同类线程而导致消耗完内存或者“过度切换”的问题。</p></blockquote><p>另外《阿里巴巴Java开发手册》中强制线程池不允许使用 Executors 去创建，而是通过 ThreadPoolExecutor 的方式，这样的处理方式让写的同学更加明确线程池的运行规则，规避资源耗尽的风险</p><blockquote><p>Executors 返回线程池对象的弊端如下：</p></blockquote><blockquote><p>FixedThreadPool 和 SingleThreadExecutor ： 允许请求的队列长度为 Integer.MAX_VALUE,可能堆积大量的请求，从而导致OOM。</p></blockquote><blockquote><p>CachedThreadPool 和 ScheduledThreadPool ： 允许创建的线程数量为 Integer.MAX_VALUE ，可能会创建大量线程，从而导致OOM。</p></blockquote><h2 id="6-线程的优先级"><a href="#6-线程的优先级" class="headerlink" title="6 线程的优先级"></a>6 线程的优先级</h2><p>每个线程都具有各自的优先级，<strong>线程的优先级可以在程序中表明该线程的重要性，如果有很多线程处于就绪状态，系统会根据优先级来决定首先使哪个线程进入运行状态。</strong>但这个并不意味着低<br>优先级的线程得不到运行，而只是它运行的几率比较小，如垃圾回收机制线程的优先级就比较低。所以很多垃圾得不到及时的回收处理。</p><p><strong>线程优先级具有继承特性。</strong> 比如A线程启动B线程，则B线程的优先级和A是一样的。</p><p><strong>线程优先级具有随机性。</strong> 也就是说线程优先级高的不一定每一次都先执行完。</p><p>Thread类中包含的成员变量代表了线程的某些优先级。如Thread.MINPRIORITY（常数1），Thread.NORMPRIORITY（常数5）,Thread.MAXPRIORITY（常数10）。其中每个线程的优先级都在Thread.MINPRIORITY（常数1） 到Thread.MAXPRIORITY（常数10） 之间，在默认情况下优先级都是Thread.NORMPRIORITY（常数5）。</p><p>学过操作系统这门课程的话，我们可以发现多线程优先级或多或少借鉴了操作系统对进程的管理。</p><h2 id="7-Java多线程分类"><a href="#7-Java多线程分类" class="headerlink" title="7 Java多线程分类"></a>7 Java多线程分类</h2><h3 id="用户线程"><a href="#用户线程" class="headerlink" title="用户线程"></a>用户线程</h3><p>运行在前台，执行具体的任务，如程序的主线程、连接网络的子线程等都是用户线程</p><h3 id="守护线程"><a href="#守护线程" class="headerlink" title="守护线程"></a>守护线程</h3><p>运行在后台，为其他前台线程服务.也可以说守护线程是JVM中非守护线程的 “佣人”。</p><ul><li><p>特点： 一旦所有用户线程都结束运行，守护线程会随JVM一起结束工作</p></li><li><p>应用： 数据库连接池中的检测线程，JVM虚拟机启动后的检测线程</p></li><li><p>最常见的守护线程： 垃圾回收线程</p></li></ul><h3 id="如何设置守护线程？"><a href="#如何设置守护线程？" class="headerlink" title="如何设置守护线程？"></a>如何设置守护线程？</h3><p>可以通过调用 Thead 类的 setDaemon(true) 方法设置当前的线程为守护线程>。</p><p>注意事项：</p><ul><li><p>1.setDaemon(true)必须在start（）方法前执行，否则会抛出IllegalThreadStateExceptio异常</p></li><li><p>2.在守护线程中产生的新线程也是守护线程</p></li><li><p>3.不是所有的任务都可以分配给守护线程来执行，比如读写操作或者计算逻辑</p></li></ul><h3 id="8-sleep-方法和wait-方法简单对比"><a href="#8-sleep-方法和wait-方法简单对比" class="headerlink" title="8 sleep()方法和wait()方法简单对比"></a>8 sleep()方法和wait()方法简单对比</h3><ul><li><p>两者最主要的区别在于：sleep方法没有释放锁，而wait方法释放了锁 。</p></li><li><p>两者都可以暂停线程的执行。</p></li><li><p>Wait通常被用于线程间交互/通信，sleep通常被用于暂停执行。</p></li><li><p>wait()方法被调用后，线程不会自动苏醒，需要别的线程调用同一个对象上的notify()或者nofifyAl()方法。sleep()方法执行完成后，线程会自动苏醒。</p></li></ul><h3 id="9-为什么我们调用start-方法时会执行run-方法，为什么我们不能直接调用run-方法？"><a href="#9-为什么我们调用start-方法时会执行run-方法，为什么我们不能直接调用run-方法？" class="headerlink" title="9 为什么我们调用start()方法时会执行run()方法，为什么我们不能直接调用run()方法？"></a>9 为什么我们调用start()方法时会执行run()方法，为什么我们不能直接调用run()方法？</h3><p>这是另一个非常经典的java多线程面试问题，而且在面试中会经常被问到。很简单，但是很多人都会答不上来！</p><p>new一个Thread，线程进入了新建状态;调用start()方法，会启动一个线程并使线程进入了就绪状态，当分配到时间片后就可以开始运行了。<br>start()会执行线程的相应准备工作，然后自动执行run()方法的内容，这是真正的多线程工作。 而直接执行run()方法，会把run方法当成一个mian线程下的普通方法去执行，并不会在某个线程中执行它，所以这并不是多线程工作。</p><p><strong>总结： 调用start方法方可启动线程并使线程进入就绪状态，而run方法只是thread的一个普通方法调用，还是在主线程里执行。</strong></p></body></html>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> 多线程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 多线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>简单多线程基础</title>
      <link href="/2018/09/11/%E5%8F%B2%E4%B8%8A%E6%9C%80%E5%85%A8%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%90%88%E9%9B%86/"/>
      <url>/2018/09/11/%E5%8F%B2%E4%B8%8A%E6%9C%80%E5%85%A8%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%90%88%E9%9B%86/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>正则表达式，新手见它的感觉就是“这都什么玩意，乱七八糟的，完全不知所云”，但学会它就会体验那种一行代码抵数十上百行，效率飞起的感觉，简直不要太爽。今天小肆先把我自己收藏的一些正则表达式写法分享给大家，当然想深入学习如何写正则表达式，可以去w3c看看教程。</p><h2 id="干货"><a href="#干货" class="headerlink" title="干货"></a>干货</h2><h3 id="一-校验数字"><a href="#一-校验数字" class="headerlink" title="一.校验数字"></a>一.校验数字</h3><ul><li>数字：^[0-9]*$</li><li>n位的数字：^\d{n}$</li><li>至少n位的数字：^\d{n,}$</li><li>m-n位的数字：^\d{m,n}$</li><li>零和非零开头的数字：^(0|[1-9][0-9]*)$</li><li>非零开头的最多带两位小数的数字：^([1-9][0-9]*)+(.[0-9]{1,2})?$</li><li>带1-2位小数的正数或负数：^(-)?\d+(.\d{1,2})?$</li><li>正数、负数、和小数：^(-|+)?\d+(.\d+)?$</li><li>有两位小数的正实数：^[0-9]+(.[0-9]{2})?$</li><li>有1~3位小数的正实数：^[0-9]+(.[0-9]{1,3})?$</li><li>非零的正整数：^[1-9]\d*$</li><li>非零的负整数：^-[1-9][]0-9”*$</li><li>非负整数：^\d+$</li><li>非正整数：^-[1-9]\d*|0$</li><li>非负浮点数：^\d+(.\d+)?$</li><li>非正浮点数：^((-\d+(.\d+)?)|(0+(.0+)?))$</li><li>正浮点数：^[1-9]d.d|0.d[1-9]d$</li><li>负浮点数：^-([1-9]\d<em>.\d</em>|0.\d<em>[1-9]\d</em>)$</li><li>浮点数：^(-?\d+)(.\d+)?$</li></ul><h3 id="二-效验字符"><a href="#二-效验字符" class="headerlink" title="二.效验字符"></a>二.效验字符</h3><ul><li>汉字：^[\u4e00-\u9fa5]{0,}$</li><li>英文和数字：^[A-Za-z0-9]+$</li><li>长度为3-20的所有字符：^.{3,20}$</li><li>由26个英文字母组成的字符串：^[A-Za-z]+$</li><li>由26个大写英文字母组成的字符串：^[A-Z]+$</li><li>由26个小写英文字母组成的字符串：^[a-z]+$</li><li>由数字和26个英文字母组成的字符串：^[A-Za-z0-9]+$</li><li>由数字、26个英文字母或者下划线组成的字符串：^\w+$</li><li>中文、英文、数字包括下划线：^[\u4E00-\u9FA5A-Za-z0-9_]+$</li><li>中文、英文、数字但不包括下划线等符号：^[\u4E00-\u9FA5A-Za-z0-9]+$</li><li>可以输入含有^%&’,;=?$"等字符：[^%&’,;=?$\x22]+</li><li>禁止输入含有<del>的字符：[^</del>\x22]+</li></ul><h3 id="三-特殊需求表达式"><a href="#三-特殊需求表达式" class="headerlink" title="三.特殊需求表达式"></a>三.特殊需求表达式</h3><ul><li>Email地址：^\w+([-+.]\w+)<em>@\w+([-.]\w+)*.\w+([-.]\w+)</em>$</li><li>手机号码：^(13[0-9]|14[5|7]|15[0|1|2|3|5|6|7|8|9]|18[0|1|2|3|5|6|7|8|9])\d{8}$(国内 13、15、18开头的手机号正则表达式,可根据目前国内收集号扩展前两位开头号码）</li><li>电话号码(“XXX-XXXXXXX”、”XXXX-XXXXXXXX”、”XXX-XXXXXXX”、”XXX-XXXXXXXX”、”XXXXXXX”和”XXXXXXXX)：^((\d{3,4}-)|\d{3.4}-)?\d{7,8}$</li><li>国内电话号码(0511-4405222、021-87888822)：\d{3}-\d{8}|\d{4}-\d{7}</li><li>身份证号(15位）：^[1-9]\d{7}((0\d)|(1[0-2]))(([0|1|2]\d)|3[0-1])\d{3}$</li><li>身份证号码(18位)：^[1-9]\d{5}[1-9]\d{3}((0\d)|(1[0-2]))(([0|1|2]\d)|3[0-1])\d{3}([0-9]|X)$</li><li>帐号是否合法(字母开头，允许5-16字节，允许字母数字下划线)：^[a-zA-Z][a-zA-Z0-9_]{4,15}$</li><li>密码(以字母开头，长度在6~18之间，只能包含字母、数字和下划线)：^[a-zA-Z]\w{5,17}$</li><li>强密码(必须包含大小写字母和数字的组合，不能使用特殊字符，长度在8-16之间)：^(?=.<em>\d)(?=.</em>[a-z])(?=.*[A-Z]).{8,16}$</li><li>日期格式：^\d{4}-\d{1,2}-\d{1,2}</li><li>一年的12个月(01～09和1～12)：^(0?[1-9]|1[0-2])$</li><li>一个月的31天(01～09和1～31)：^((0?[1-9])|((1|2)[0-9])|30|31)$</li><li>xml文件：^([a-zA-Z]+-?)+[a-zA-Z0-9]+\.[x|X][m|M][l|L]$</li><li>中文字符的正则表达式：[\u4e00-\u9fa5]</li><li>双字节字符：[^\x00-\xff] (包括汉字在内，可以用来计算字符串的长度(一个双字节字符长度计2，ASCII字符计1))</li><li>空白行的正则表达式：\n\s*\r (可以用来删除空白行)</li><li>首尾空白字符的正则表达式：^\s<em>|\s</em>$或(^\s<em>)|(\s</em>$) (可以用来删除行首行尾的空白字符(包括空格、制表符、换页符等等)，非常有用的表达式)</li><li>腾讯QQ号：[1-9][0-9]{4,11} (腾讯QQ号从10000开始)</li><li>中国邮政编码：[1-9]\d{5}(?!\d) (中国邮政编码为6位数字)</li><li>IP-v4地址：\b(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\b (提取IP地址时有用)</li><li>校验IP-v6地址：(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))</li><li>子网掩码：((?:(?:25[0-5]|2[0-4]\d|[01]?\d?\d)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d?\d))</li><li>校验日期:^(?:(?!0000)[0-9]{4}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1[0-9]|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[0-9]{2}(?:0[48]|[2468][048]|[13579][26])|(?:0[48]|[2468][048]|[13579][26])00)-02-29)$(“yyyy-mm-dd“ 格式的日期校验，已考虑平闰年。)</li><li>抽取注释：<!--(.*?)--></li><li>查找CSS属性:^\s<em>[a-zA-Z\-]+\s</em>[:]{1}\s[a-zA-Z0-9\s.#]+[;]{1}</li><li>提取页面超链接:(<a\s<em>(?!.*\brel=)[^>])(href=”https?:\/\/)((?!(?:(?:www\.)?’.implode(‘|(?:www\.)?’, $follow_list).’))[^”]+)”((?!.<em>\brel=)[^>]</em>)(?:[^>]*)></a\s<em></li><li>提取网页图片:\< <em>[img][^\\>]</em>[src] <em>= *[\“\‘]{0,1}([^\“\‘\ >]</em>)</li><li>提取网页颜色代码:^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$</li><li>文件扩展名效验:^([a-zA-Z]\:|\\)\\([^\\]+\\)<em>[^\/:</em>?”<>|]+\.txt(l)?$</li><li>判断IE版本：^.<em>MSIE <a href="?:\.[0-9]+">5-8</a>?(?!.*Trident\/[5-9]\.0).</em>$</li></ul><p>文章出处：<a href="https://segmentfault.com/a/1190000017834831" target="_blank" rel="noopener">https://segmentfault.com/a/1190000017834831</a></p></body></html>]]></content>
      
      
      <categories>
          
          <category> 正则表达式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 正则表达式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker 部署SpringBoot项目整合 Redis 镜像做访问计数Demo</title>
      <link href="/2018/09/03/Docker%20%E9%83%A8%E7%BD%B2SpringBoot%E9%A1%B9%E7%9B%AE%E6%95%B4%E5%90%88%20Redis%20%E9%95%9C%E5%83%8F%E5%81%9A%E8%AE%BF%E9%97%AE%E8%AE%A1%E6%95%B0Demo/"/>
      <url>/2018/09/03/Docker%20%E9%83%A8%E7%BD%B2SpringBoot%E9%A1%B9%E7%9B%AE%E6%95%B4%E5%90%88%20Redis%20%E9%95%9C%E5%83%8F%E5%81%9A%E8%AE%BF%E9%97%AE%E8%AE%A1%E6%95%B0Demo/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><h1 id="Docker-部署SpringBoot项目整合-Redis-镜像做访问计数Demo"><a href="#Docker-部署SpringBoot项目整合-Redis-镜像做访问计数Demo" class="headerlink" title="Docker 部署SpringBoot项目整合 Redis 镜像做访问计数Demo"></a>Docker 部署SpringBoot项目整合 Redis 镜像做访问计数Demo</h1><h3 id="最终效果如下"><a href="#最终效果如下" class="headerlink" title="最终效果如下"></a>最终效果如下</h3><p><a href="https://i.imgur.com/Ao8GSyX.gif" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.imgur.com/Ao8GSyX.gif" class="lazyload"></a></p><p>大概就几个步骤</p><ul><li>1.安装 Docker CE</li><li>2.运行 Redis 镜像</li><li>3.Java 环境准备</li><li>4.项目准备</li><li>5.编写 Dockerfile</li><li>6.发布项目</li><li>7.测试服务</li></ul><h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><ul><li>系统：Ubuntu 17.04 x64</li><li>Docker 17.12.0-ce</li><li>IP:45.32.31.101</li></ul><h1 id="一、安装-Docker-CE"><a href="#一、安装-Docker-CE" class="headerlink" title="一、安装 Docker CE"></a>一、安装 Docker CE</h1><p>国内<strong>不建议使用:“脚本进行安装”</strong>,会下载安装很慢,使用步骤 1 安装，看下面的链接：常规安装方式</p><h3 id="1-常规安装方式"><a href="#1-常规安装方式" class="headerlink" title="1.常规安装方式"></a>1.常规安装方式</h3><p><a href="http://www.ymq.io/2018/01/11/Docker-Install-docker-ce" target="_blank" rel="noopener">Ubuntu 17.04 x64 安装 Docker CE</a></p><h3 id="2-脚本进行安装"><a href="#2-脚本进行安装" class="headerlink" title="2.脚本进行安装"></a>2.脚本进行安装</h3><p>国内安装不建议使用脚本：</p><p>安装Docker CE</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">$ curl -fsSL get.docker.com -o get-docker.sh</span><br><span class="line">$ sudo sh get-docker.sh</span><br><span class="line"></span><br><span class="line"><output truncated></output></span><br><span class="line"></span><br><span class="line">If you would like to use Docker as a non-root user, you should now consider</span><br><span class="line">adding your user to the "docker" group with something like:</span><br><span class="line"></span><br><span class="line">  sudo usermod -aG docker your-user</span><br><span class="line"></span><br><span class="line">Remember that you will have to log out and back in for this to take effect!</span><br><span class="line"></span><br><span class="line">WARNING: Adding a user to the "docker" group will grant the ability to run</span><br><span class="line">         containers which can be used to obtain root privileges on the</span><br><span class="line">         docker host.</span><br><span class="line">         Refer to https://docs.docker.com/engine/security/security/#docker-daemon-attack-surface</span><br><span class="line">         for more information.</span><br></pre></td></tr></tbody></table></figure></div><p>验证Docker CE</p><p>通过运行hello-world 镜像 验证是否正确安装了Docker CE</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo docker run hello-world</span><br></pre></td></tr></tbody></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">root@souyunku:~# sudo docker images</span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">hello-world         latest              f2a91732366c        7 weeks ago         1.85kB</span><br></pre></td></tr></tbody></table></figure></div><h1 id="二、运行-Redis-镜像"><a href="#二、运行-Redis-镜像" class="headerlink" title="二、运行 Redis 镜像"></a>二、运行 Redis 镜像</h1><h3 id="1-运行镜像"><a href="#1-运行镜像" class="headerlink" title="1.运行镜像"></a>1.运行镜像</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker run --name redis-6379 -p 6379:6379 -d redis</span><br></pre></td></tr></tbody></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Unable to find image 'redis:latest' locally</span><br><span class="line">latest: Pulling from library/redis</span><br><span class="line">c4bb02b17bb4: Pull complete </span><br><span class="line">58638acf67c5: Pull complete </span><br><span class="line">f98d108cc38b: Pull complete </span><br><span class="line">83be14fccb07: Pull complete </span><br><span class="line">5d5f41793421: Pull complete </span><br><span class="line">ed89ff0d9eb2: Pull complete </span><br><span class="line">Digest: sha256:0e773022cd6572a5153e5013afced0f7191652d3cdf9b1c6785eb13f6b2974b1</span><br><span class="line">Status: Downloaded newer image for redis:latest</span><br><span class="line">2f1f20f672e386a61644e1c08232ea34bdfd6a0c244b55fa833fcfd6dd207288</span><br></pre></td></tr></tbody></table></figure></div><h3 id="2-检查镜像"><a href="#2-检查镜像" class="headerlink" title="2.检查镜像"></a>2.检查镜像</h3><p>查看镜像</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">root@souyunku:~# docker images redis</span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">redis               latest              1e70071f4af4        4 weeks ago         107MB</span><br></pre></td></tr></tbody></table></figure></div><p>查看镜像进程</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">root@souyunku:~# docker ps</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                    NAMES</span><br><span class="line">2f1f20f672e3        redis               "docker-entrypoint.s…"   14 seconds ago      Up 14 seconds       0.0.0.0:6379->6379/tcp   redis-6379</span><br></pre></td></tr></tbody></table></figure></div><p>查看容器进程</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">root@souyunku:~# docker container ps</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                    NAMES</span><br><span class="line">2f1f20f672e3        redis               "docker-entrypoint.s…"   7 minutes ago       Up 7 minutes        0.0.0.0:6379->6379/tcp   redis-6379</span><br></pre></td></tr></tbody></table></figure></div><h3 id="3-测试Redis服务"><a href="#3-测试Redis服务" class="headerlink" title="3.测试Redis服务"></a>3.测试Redis服务</h3><p>通过 redis-cli 连接Redis 服务，测试存储数据</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">root@souyunku:~# docker run -it --link redis-6379:redis --rm redis redis-cli -h redis -p 6379</span><br><span class="line">redis:6379> set count 1</span><br><span class="line">OK</span><br><span class="line">redis:6379> get count</span><br><span class="line">"1"</span><br><span class="line">redis:6379> exit</span><br><span class="line">root@souyunku:~#</span><br></pre></td></tr></tbody></table></figure></div><h1 id="三、Java-环境准备"><a href="#三、Java-环境准备" class="headerlink" title="三、Java 环境准备"></a>三、Java 环境准备</h1><p><strong>注意:阅读以下步骤！！！</strong></p><ul><li><p>1.Java 环境是为了，编译Github Maven SpringBoot 示例项目，准备</p></li><li><p>2.或者自己在本地编译好上传也行，那么以下Java 环境，安装:Jdk,Maven,Git,就可以不用配置</p></li></ul><h3 id="1-安装-Jdk"><a href="#1-安装-Jdk" class="headerlink" title="1.安装 Jdk"></a>1.安装 Jdk</h3><p>下载JDK 方式：1</p><p><a href="http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html" target="_blank" rel="noopener">下载Linux环境下的jdk1.8</a></p><p>下载JDK 方式：2</p><p>我在百度云盘分下的链接：YPSuperKey Broken<a href="http://pan.baidu.com/s/1jIFZF9s" target="_blank" rel="noopener">http://pan.baidu.com/s/1jIFZF9s</a> 密码：u4n4</p><p>下载JDK 方式：3</p><p>使用wget下载，</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ wget --no-cookies --no-check-certificate --header "Cookie: gpw_e24=http%3A%2F%2Fwww.oracle.com%2F; oraclelicense=accept-securebackup-cookie" "http://download.oracle.com/otn-pub/java/jdk/8u141-b15/336fa29ff2bb4ef291e347e091f7f4a7/jdk-8u141-linux-x64.tar.gz"</span><br></pre></td></tr></tbody></table></figure></div><p>注意，如果使用：下载JDK 方式：3</p><p>那么以下步骤的，jdk1.8.0_144替换成jdk1.8.0_141</p><p>开始安装</p><p>上传在 /opt 目录</p><p>解压</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ cd /opt</span><br><span class="line">$ tar zxvf jdk-8u144-linux-x64.tar.gz</span><br><span class="line">$ mv jdk1.8.0_144/ /lib/jvm</span><br></pre></td></tr></tbody></table></figure></div><p>配置环境变量</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ vi /etc/profile</span><br><span class="line">#jdk</span><br><span class="line">export JAVA_HOME=/lib/jvm</span><br><span class="line">export JRE_HOME=${JAVA_HOME}/jre   </span><br><span class="line">export CLASSPATH=.:${JAVA_HOME}/lib:${JRE_HOME}/lib   </span><br><span class="line">export PATH=${JAVA_HOME}/bin:$PATH</span><br></pre></td></tr></tbody></table></figure></div><p>使环境变量生效</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ source /etc/profile</span><br></pre></td></tr></tbody></table></figure></div><p>验证</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">root@souyunku:~# java -version</span><br><span class="line">java version "1.8.0_141"</span><br><span class="line">Java(TM) SE Runtime Environment (build 1.8.0_141-b15)</span><br><span class="line">Java HotSpot(TM) 64-Bit Server VM (build 25.141-b15, mixed mode)</span><br></pre></td></tr></tbody></table></figure></div><p>2.安装 Maven</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ apt-get install maven</span><br></pre></td></tr></tbody></table></figure></div><p>验证Maven</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">root@souyunku:~# mvn -v</span><br><span class="line">Apache Maven 3.3.9</span><br><span class="line">Maven home: /usr/share/maven</span><br><span class="line">Java version: 1.8.0_141, vendor: Oracle Corporation</span><br><span class="line">Java home: /lib/jvm/jre</span><br><span class="line">Default locale: en_US, platform encoding: UTF-8</span><br><span class="line">OS name: "linux", version: "4.10.0-35-generic", arch: "amd64", family: "unix"</span><br></pre></td></tr></tbody></table></figure></div><p>3.安装 Git</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ apt-get install git</span><br></pre></td></tr></tbody></table></figure></div><p>验证Git</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@souyunku:~# git --version</span><br><span class="line">git version 2.11.0</span><br></pre></td></tr></tbody></table></figure></div><h1 id="四、项目准备"><a href="#四、项目准备" class="headerlink" title="四、项目准备"></a>四、项目准备</h1><h3 id="1-编译项目"><a href="#1-编译项目" class="headerlink" title="1.编译项目"></a>1.编译项目</h3><p>1.自己在服务器Maven编译项目</p><p>使用 git 克隆项目</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git clone https://github.com/souyunku/other-projects.git</span><br></pre></td></tr></tbody></table></figure></div><p>使用 maven 编译项目</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cd other-projects/docker-spring-boot-demo/</span><br></pre></td></tr></tbody></table></figure></div><h3 id="2-修改项目"><a href="#2-修改项目" class="headerlink" title="2.修改项目"></a>2.修改项目</h3><p>修改 Redis 服务器地址spring.redis.host=45.32.44.217,为本地IP, 在运行 Redis 镜像时候 已经把 Redis 做成外网服务了0.0.0.0:6379->6379/tcp</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vi src/main/resources/application.properties</span><br></pre></td></tr></tbody></table></figure></div><h1 id="Redis服务器地址"><a href="#Redis服务器地址" class="headerlink" title="Redis服务器地址"></a>Redis服务器地址</h1><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">spring.redis.host=45.32.44.217</span><br></pre></td></tr></tbody></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ mvn package</span><br></pre></td></tr></tbody></table></figure></div><p>复制target/ 目录下的docker-spring-boot-demo-0.0.1-SNAPSHOT.jar项目到/opt 目录稍后会用到</p><p>$ cp target/docker-spring-boot-demo-0.0.1-SNAPSHOT.jar /opt/</p><h3 id="2-自己在本地Maven编译项目，然后上传到-opt-目录稍后会用到"><a href="#2-自己在本地Maven编译项目，然后上传到-opt-目录稍后会用到" class="headerlink" title="2.自己在本地Maven编译项目，然后上传到/opt 目录稍后会用到"></a>2.自己在本地Maven编译项目，然后上传到/opt 目录稍后会用到</h3><p>修改application.properties 的 Redis 服务器地址</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">other-projects/docker-spring-boot-demo/src/main/resources/application.properties</span><br></pre></td></tr></tbody></table></figure></div><h1 id="Redis服务器地址-1"><a href="#Redis服务器地址-1" class="headerlink" title="Redis服务器地址"></a>Redis服务器地址</h1><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">spring.redis.host=45.32.44.217</span><br></pre></td></tr></tbody></table></figure></div><h1 id="五、编写-Dockerfile"><a href="#五、编写-Dockerfile" class="headerlink" title="五、编写 Dockerfile"></a>五、编写 Dockerfile</h1><p>编写 Dockerfile 基于java:8镜像为基础</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ cd /opt/</span><br><span class="line">$ touch Dockerfile</span><br><span class="line">$ vi Dockerfile</span><br></pre></td></tr></tbody></table></figure></div><p>编辑内容个如下</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># 基于哪个镜像</span><br><span class="line">FROM java:8</span><br><span class="line"></span><br><span class="line"># 将本地文件夹挂载到当前容器</span><br><span class="line">VOLUME /tmp</span><br><span class="line"></span><br><span class="line"># 拷贝文件到容器，也可以直接写成ADD docker-spring-boot-demo-0.0.1-SNAPSHOT.jar /souyunku-app.jar</span><br><span class="line">ADD docker-spring-boot-demo-0.0.1-SNAPSHOT.jar souyunku-app.jar</span><br><span class="line">RUN bash -c 'touch /souyunku-app.jar'</span><br><span class="line"></span><br><span class="line"># 开放80端口</span><br><span class="line">EXPOSE 80</span><br><span class="line"></span><br><span class="line"># 配置容器启动后执行的命令</span><br><span class="line">ENTRYPOINT ["java","-Djava.security.egd=file:/dev/./urandom","-jar","/souyunku-app.jar"]</span><br></pre></td></tr></tbody></table></figure></div><h1 id="六、发布项目"><a href="#六、发布项目" class="headerlink" title="六、发布项目"></a>六、发布项目</h1><h3 id="1-编译镜像"><a href="#1-编译镜像" class="headerlink" title="1.编译镜像"></a>1.编译镜像</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cd /opt/</span><br><span class="line">$ docker build -t souyunku-app:v1 .</span><br></pre></td></tr></tbody></table></figure></div><p>看到如下信息，就证明你的Dockerfile写的没毛病，而且镜像也编译成功了</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">Sending build context to Docker daemon  18.72MB</span><br><span class="line">Step 1/6 : FROM java:8</span><br><span class="line">8: Pulling from library/java</span><br><span class="line">5040bd298390: Pull complete </span><br><span class="line">fce5728aad85: Pull complete </span><br><span class="line">76610ec20bf5: Pull complete </span><br><span class="line">60170fec2151: Pull complete </span><br><span class="line">e98f73de8f0d: Pull complete </span><br><span class="line">11f7af24ed9c: Pull complete </span><br><span class="line">49e2d6393f32: Pull complete </span><br><span class="line">bb9cdec9c7f3: Pull complete </span><br><span class="line">Digest: sha256:c1ff613e8ba25833d2e1940da0940c3824f03f802c449f3d1815a66b7f8c0e9d</span><br><span class="line">Status: Downloaded newer image for java:8</span><br><span class="line"> ---> d23bdf5b1b1b</span><br><span class="line">Step 2/6 : VOLUME /tmp</span><br><span class="line"> ---> Running in 0559a62b0cd5</span><br><span class="line">Removing intermediate container 0559a62b0cd5</span><br><span class="line"> ---> b1f3846913a4</span><br><span class="line">Step 3/6 : ADD docker-spring-boot-demo-0.0.1-SNAPSHOT.jar souyunku-app.jar</span><br><span class="line"> ---> 9f60dad5d2ac</span><br><span class="line">Step 4/6 : RUN bash -c 'touch /souyunku-app.jar'</span><br><span class="line"> ---> Running in 39d5c09ab614</span><br><span class="line">Removing intermediate container 39d5c09ab614</span><br><span class="line"> ---> 2b691adf7922</span><br><span class="line">Step 5/6 : EXPOSE 80</span><br><span class="line"> ---> Running in 11a577437a23</span><br><span class="line">Removing intermediate container 11a577437a23</span><br><span class="line"> ---> 78815d6fe6b2</span><br><span class="line">Step 6/6 : ENTRYPOINT ["java","-Djava.security.egd=file:/dev/./urandom","-jar","/souyunku-app.jar"]</span><br><span class="line"> ---> Running in eca10fed3d02</span><br><span class="line">Removing intermediate container eca10fed3d02</span><br><span class="line"> ---> 8ec4e85a0f05</span><br><span class="line">Successfully built 8ec4e85a0f05</span><br><span class="line">Successfully tagged souyunku-app:v1</span><br></pre></td></tr></tbody></table></figure></div><h3 id="2-查看镜像"><a href="#2-查看镜像" class="headerlink" title="2.查看镜像"></a>2.查看镜像</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">root@souyunku:/opt# docker images souyunku-app</span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">souyunku-app        v1                  8ec4e85a0f05        2 minutes ago       681MB</span><br></pre></td></tr></tbody></table></figure></div><h3 id="3-运行镜像"><a href="#3-运行镜像" class="headerlink" title="3.运行镜像"></a>3.运行镜像</h3><p>后台守护进程运行，然后把容器端口映射到，外网端口80</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@souyunku:/opt# docker run --name MySpringBoot -d -p 80:80 souyunku-app:v1</span><br><span class="line">e68d438603619e363883d4eae65d3918e1c3e00f867731207bccf06f5690dc64</span><br></pre></td></tr></tbody></table></figure></div><h3 id="4-查看进程"><a href="#4-查看进程" class="headerlink" title="4.查看进程"></a>4.查看进程</h3><p>查看容器进程，可以看到redis 在 6379端口，MySpringBoot 项目在 80端口</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">root@souyunku:/opt# docker container ps</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED              STATUS              PORTS                    NAMES</span><br><span class="line">e68d43860361        souyunku-app:v1     "java -Djava.securit…"   About a minute ago   Up About a minute   0.0.0.0:80->80/tcp       MySpringBoot</span><br><span class="line">0f9646171edd        redis               "docker-entrypoint.s…"   39 minutes ago       Up 39 minutes       0.0.0.0:6379->6379/tcp   redis-6379</span><br></pre></td></tr></tbody></table></figure></div><h1 id="七、测试服务"><a href="#七、测试服务" class="headerlink" title="七、测试服务"></a>七、测试服务</h1><p>浏览器访问：<a href="http://127.0.0.1/,当然我没有输入127.0.0.1" target="_blank" rel="noopener">http://127.0.0.1/,当然我没有输入127.0.0.1</a> 我是在服务器上直接做的，用的公网IP</p><p><a href="https://i.imgur.com/YEk6gyD.gif" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.imgur.com/YEk6gyD.gif" class="lazyload"></a></p><p>Docker Compose<br>Docker Compose 是 Docker 官方编排（Orchestration）项目之一，负责快速在集群中部署分布式应用。</p><p>一个使用Docker容器的应用，通常由多个容器组成。使用Docker Compose，不再需要使用shell脚本来启动容器。在配置文件中，所有的容器通过services来定义，然后使用docker-compose脚本来启动，停止和重启应用，和应用中的服务以及所有依赖服务的容器。</p><p>GitHub :<a href="https://github.com/souyunku/other-projects/tree/master/docker-spring-boot-demo" target="_blank" rel="noopener">docker-spring-boot-demo</a></p><p>Contact<br>作者：鹏磊<br>出处：<a href="http://www.ymq.io/2018/01/11/Docker-deploy-spring-boot-Integrate-redis" target="_blank" rel="noopener">http://www.ymq.io/2018/01/11/Docker-deploy-spring-boot-Integrate-redis</a></p></body></html>]]></content>
      
      
      <categories>
          
          <category> Spring Boot </category>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> Spring Boot </tag>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>为什么Java中1000==1000为false而100==100为true？</title>
      <link href="/2018/08/28/%E4%B8%BA%E4%BB%80%E4%B9%88Java%E4%B8%AD1000==1000%E4%B8%BAfalse%E8%80%8C100==100%E4%B8%BAtrue%EF%BC%9F/"/>
      <url>/2018/08/28/%E4%B8%BA%E4%BB%80%E4%B9%88Java%E4%B8%AD1000==1000%E4%B8%BAfalse%E8%80%8C100==100%E4%B8%BAtrue%EF%BC%9F/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><p>这是一个挺有意思的讨论话题。</p><p>如果你运行下面的代码</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Integer a = 1000, b = 1000;</span><br><span class="line">Integer c = 100, d = 100;</span><br><span class="line">System.out.println(a == b);//1   </span><br><span class="line">System.out.println(c == d);//2</span><br></pre></td></tr></tbody></table></figure></div><p>你会得到：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">false</span><br><span class="line">true</span><br></pre></td></tr></tbody></table></figure></div><p><strong>基本知识</strong>：我们知道，如果两个引用指向同一个对象，用==表示它们是相等的。如果两个引用指向不同的对象，用==表示它们是不相等的，即使它们的内容相同。</p><p>因此，后面一条语句也应该是false 。</p><p>这就是它有趣的地方了。如果你看去看 Integer.Java 类，你会发现有一个内部私有类，IntegerCache.java，它缓存了从-128到127之间的所有的整数对象。</p><p><strong>所以事情就成了，所有的小整数在内部缓存，然后当我们声明类似——</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Integer c = 100;</span><br></pre></td></tr></tbody></table></figure></div><p>的时候，它实际上在内部做的是：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Integer i = Integer.valueOf(100);</span><br></pre></td></tr></tbody></table></figure></div><p>现在，如果我们去看valueOf()方法，我们可以看到：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public static Integer valueOf(int i) {</span><br><span class="line">    if (i >= IntegerCache.low && i</span><br><span class="line">    return IntegerCache.cache[i + (-IntegerCache.low)];</span><br><span class="line">    return new Integer(i);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p>如果值的范围在-128到127之间，它就从高速缓存返回实例。<br>所以…</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Integer c = 100, d = 100;</span><br></pre></td></tr></tbody></table></figure></div><p>指向了同一个对象。</p><p>这就是为什么我们写：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(c == d);</span><br></pre></td></tr></tbody></table></figure></div><p>我们可以得到true。</p><p><strong>现在你可能会问，为什么这里需要缓存？</strong><br>合乎逻辑的理由是，在此范围内的“小”整数使用率比大整数要高，因此，使用相同的底层对象是有价值的，可以减少潜在的内存占用。</p><p>然而，通过反射API你会误用此功能。</p><p><strong>运行下面的代码，享受它的魅力吧</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) throws NoSuchFieldException, IllegalAccessException {</span><br><span class="line">    Class cache = Integer.class.getDeclaredClasses()[0]; //1 </span><br><span class="line">    Field myCache = cache.getDeclaredField("cache"); //2 </span><br><span class="line">    myCache.setAccessible(true);//3 </span><br><span class="line">    Integer[] newCache = (Integer[]) myCache.get(cache); //4 </span><br><span class="line">    newCache[132] = newCache[133]; //5 </span><br><span class="line">    int a = 2;</span><br><span class="line">    int b = a + a;</span><br><span class="line">    System.out.printf("%d + %d = %d", a, a, b); // </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div></body></html>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在Java中如何高效判断数组中是否包含某个元素</title>
      <link href="/2018/08/28/%E5%9C%A8Java%E4%B8%AD%E5%A6%82%E4%BD%95%E9%AB%98%E6%95%88%E5%88%A4%E6%96%AD%E6%95%B0%E7%BB%84%E4%B8%AD%E6%98%AF%E5%90%A6%E5%8C%85%E5%90%AB%E6%9F%90%E4%B8%AA%E5%85%83%E7%B4%A0/"/>
      <url>/2018/08/28/%E5%9C%A8Java%E4%B8%AD%E5%A6%82%E4%BD%95%E9%AB%98%E6%95%88%E5%88%A4%E6%96%AD%E6%95%B0%E7%BB%84%E4%B8%AD%E6%98%AF%E5%90%A6%E5%8C%85%E5%90%AB%E6%9F%90%E4%B8%AA%E5%85%83%E7%B4%A0/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><p>如何检查一个数组(无序)是否包含一个特定的值？这是一个在Java中经常用到的并且非常有用的操作。</p><p>同时，这个问题在Stack Overflow中也是一个非常热门的问题。在投票比较高的几个答案中给出了几种不同的方法，但是他们的时间复杂度也是各不相同的。本文将分析几种常见用法及其时间成本。</p><h3 id="使用List"><a href="#使用List" class="headerlink" title="使用List"></a>使用List</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">useList</span><span class="params">(String[] arr, String targetValue)</span> </span>{</span><br><span class="line">    <span class="keyword">return</span> Arrays.asList(arr).contains(targetValue);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><h3 id="使用Set"><a href="#使用Set" class="headerlink" title="使用Set"></a>使用Set</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">useSet</span><span class="params">(String[] arr, String targetValue)</span> </span>{</span><br><span class="line">    Set<string> set = <span class="keyword">new</span> HashSet<string>(Arrays.asList(arr));</string></string></span><br><span class="line">    <span class="keyword">return</span> set.contains(targetValue);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><h3 id="使用循环判断"><a href="#使用循环判断" class="headerlink" title="使用循环判断"></a>使用循环判断</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">useLoop</span><span class="params">(String[] arr, String targetValue)</span> </span>{</span><br><span class="line">    <span class="keyword">for</span>(String s: arr){</span><br><span class="line">        <span class="keyword">if</span>(s.equals(targetValue))</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p>使用Arrays.binarySearch()</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Arrays.binarySearch()方法只能用于有序数组！！！如果数组无序的话得到的结果就会很奇怪。</span><br></pre></td></tr></tbody></table></figure></div><p>查找有序数组中是否包含某个值的用法如下：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public static boolean useArraysBinarySearch(String[] arr, String targetValue) { </span><br><span class="line">    int a =  Arrays.binarySearch(arr, targetValue);</span><br><span class="line">    if(a > 0)</span><br><span class="line">        return true;</span><br><span class="line">    else</span><br><span class="line">        return false;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><h1 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h1><p>下面的代码可以大概的得出各种方法的时间成本。基本思想就是从数组中查找某个值，数组的大小分别是5、1k、10k。这种方法得到的结果可能并不精确，但是是最简单清晰的方式。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) {</span><br><span class="line">    String[] arr = new String[] {  "CD",  "BC", "EF", "DE", "AB"};</span><br><span class="line"></span><br><span class="line">    //use list</span><br><span class="line">    long startTime = System.nanoTime();</span><br><span class="line">    for (int i = 0; i < 100000; i++) {</span><br><span class="line">        useList(arr, "A");</span><br><span class="line">    }</span><br><span class="line">    long endTime = System.nanoTime();</span><br><span class="line">    long duration = endTime - startTime;</span><br><span class="line">    System.out.println("useList:  " + duration / 1000000);</span><br><span class="line"></span><br><span class="line">    //use set</span><br><span class="line">    startTime = System.nanoTime();</span><br><span class="line">    for (int i = 0; i < 100000; i++) {</span><br><span class="line">        useSet(arr, "A");</span><br><span class="line">    }</span><br><span class="line">    endTime = System.nanoTime();</span><br><span class="line">    duration = endTime - startTime;</span><br><span class="line">    System.out.println("useSet:  " + duration / 1000000);</span><br><span class="line"></span><br><span class="line">    //use loop</span><br><span class="line">    startTime = System.nanoTime();</span><br><span class="line">    for (int i = 0; i < 100000; i++) {</span><br><span class="line">        useLoop(arr, "A");</span><br><span class="line">    }</span><br><span class="line">    endTime = System.nanoTime();</span><br><span class="line">    duration = endTime - startTime;</span><br><span class="line">    System.out.println("useLoop:  " + duration / 1000000);</span><br><span class="line"></span><br><span class="line">    //use Arrays.binarySearch()</span><br><span class="line">    startTime = System.nanoTime();</span><br><span class="line">    for (int i = 0; i < 100000; i++) {</span><br><span class="line">        useArraysBinarySearch(arr, "A");</span><br><span class="line">    }</span><br><span class="line">    endTime = System.nanoTime();</span><br><span class="line">    duration = endTime - startTime;</span><br><span class="line">    System.out.println("useArrayBinary:  " + duration / 1000000);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p>运行结果：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">useList:  13useSet:  72useLoop:  5useArraysBinarySearch:  9</span><br></pre></td></tr></tbody></table></figure></div><h1 id="使用一个长度为1k的数组"><a href="#使用一个长度为1k的数组" class="headerlink" title="使用一个长度为1k的数组"></a>使用一个长度为1k的数组</h1><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String[] arr = new String[1000];Random s = new Random();for(int i=0; i< 1000; i++){</span><br><span class="line">    arr[i] = String.valueOf(s.nextInt());</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p>结果：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">useList:  112useSet:  2055useLoop:  99useArrayBinary:  12</span><br></pre></td></tr></tbody></table></figure></div><h1 id="使用一个长度为10k的数组"><a href="#使用一个长度为10k的数组" class="headerlink" title="使用一个长度为10k的数组"></a>使用一个长度为10k的数组</h1><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String[] arr = new String[10000];Random s = new Random();for(int i=0; i< 10000; i++){</span><br><span class="line">    arr[i] = String.valueOf(s.nextInt());</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p>结果：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">useList:  1590useSet:  23819useLoop:  1526useArrayBinary:  12</span><br></pre></td></tr></tbody></table></figure></div><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>显然，使用一个简单的循环方法比使用任何集合都更加高效。许多开发人员为了方便，都使用第一种方法，但是他的效率也相对较低。因为将数组压入Collection类型中，首先要将数组元素遍历一遍，然后再使用集合类做其他操作。</p><p>如果使用Arrays.binarySearch()方法，数组必须是已排序的。由于上面的数组并没有进行排序，所以该方法不可使用。</p><p>实际上，如果你需要借助数组或者集合类高效地检查数组中是否包含特定值，一个已排序的列表或树可以做到时间复杂度为O(log(n))，hashset可以达到O(1)。</p><p><strong>（英文原文结束，以下是译者注）</strong></p><h3 id="使用ArrayUtils"><a href="#使用ArrayUtils" class="headerlink" title="使用ArrayUtils"></a>使用ArrayUtils</h3><p>除了以上几种以外，Apache Commons类库中还提供了一个ArrayUtils类，可以使用其contains方法判断数组和值的关系。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public static boolean useArrayUtils(String[] arr, String targetValue) {</span><br><span class="line">    return ArrayUtils.contains(arr,targetValue);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p>同样使用以上几种长度的数组进行测试，得出的结果是该方法的效率介于使用集合和使用循环判断之间（有的时候结果甚至比使用循环要理想）。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">useList:  323useSet:  3028useLoop:  141useArrayBinary:  12useArrayUtils:  181-------useList:  3703useSet:  35183useLoop:  3218useArrayBinary:  14useArrayUtils:  3125</span><br></pre></td></tr></tbody></table></figure></div><p>其实，如果查看ArrayUtils.contains的源码可以发现，他判断一个元素是否包含在数组中其实也是使用循环判断的方式。</p><p>部分代码如下：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">if(array == null) {</span><br><span class="line">    return -1;</span><br><span class="line">} else {</span><br><span class="line">    if(startIndex < 0) {</span><br><span class="line">        startIndex = 0;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    int i;</span><br><span class="line">    if(objectToFind == null) {</span><br><span class="line">        for(i = startIndex; i < array.length; ++i) {</span><br><span class="line">            if(array[i] == null) {</span><br><span class="line">                return i;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    } else if(array.getClass().getComponentType().isInstance(objectToFind)) {</span><br><span class="line">        for(i = startIndex; i < array.length; ++i) {</span><br><span class="line">            if(objectToFind.equals(array[i])) {</span><br><span class="line">                return i;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    return -1;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p>所以，相比较之下，我更倾向于使用ArrayUtils工具类来进行一些合数祖相关的操作。毕竟他可以让我少写很多代码（因为自己写代码难免有Bug，毕竟apache提供的开源工具类库都是经过无数开发者考验过的），而且，效率上也并不低太多。</p></body></html>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker安装FastDFS，集成Spring Boot操作</title>
      <link href="/2018/08/26/Docker%E5%AE%89%E8%A3%85FastDFS%EF%BC%8C%E9%9B%86%E6%88%90Spring%20Boot%E6%93%8D%E4%BD%9C/"/>
      <url>/2018/08/26/Docker%E5%AE%89%E8%A3%85FastDFS%EF%BC%8C%E9%9B%86%E6%88%90Spring%20Boot%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><p>Docker安装FastDFS，集成Spring Boot操作</p><ol><li>获取镜像</li><li>运行tracker</li><li>运行storage</li></ol><a id="more"></a><h2 id="1-获取镜像"><a href="#1-获取镜像" class="headerlink" title="1. 获取镜像"></a>1. 获取镜像</h2><p>可以利用已有的FastDFS Docker镜像来运行FastDFS。</p><p>使用Centos 最好使用7.2的版本，不然可能会无法启动，或者缺少各种依赖。</p><p>获取镜像可以通过下载</p><pre><code>docker image pull delron/fastdfs</code></pre><p>也可是直接使用提供的镜像备份文件</p><pre><code>docker load -i 文件路径/fastdfs_docker.tar（提前打包好的）</code></pre><p>加载好镜像后，就可以开启运行FastDFS的tracker和storage了。</p><h2 id="2-运行tracker"><a href="#2-运行tracker" class="headerlink" title="2. 运行tracker"></a><a name="t1" style="outline-style: initial; outline-width: 0px; color: rgb(78, 161, 219); cursor: pointer; word-break: break-all;"></a>2. 运行tracker</h2><p>执行如下命令开启tracker 服务</p><pre><code>docker run -dti --network=host --name tracker -v /var/fdfs/tracker:/var/fdfs delron/fastdfs tracker</code></pre><ul><li>我们将fastDFS tracker运行目录映射到本机的 /var/fdfs/tracker目录中。</li></ul><p>执行如下命令查看tracker是否运行起来</p><pre><code>docker container ls</code></pre><p>如果想停止tracker服务，可以执行如下命令</p><pre><code>docker container stop tracker</code></pre><p>停止后，重新运行tracker，可以执行如下命令</p><pre><code>docker container start tracker</code></pre><h2 id="3-运行storage"><a href="#3-运行storage" class="headerlink" title="3. 运行storage"></a><a name="t2" style="outline-style: initial; outline-width: 0px; color: rgb(78, 161, 219); cursor: pointer; word-break: break-all;"></a>3. 运行storage</h2><p>执行如下命令开启storage服务</p><pre><code>docker run -dti --network=host --name storage -e TRACKER_SERVER=192.168.99.100:22122 -v /var/fdfs/storage:/var/fdfs delron/fastdfs storage</code></pre><ul><li>TRACKER_SERVER=本机的ip地址:22122 本机ip地址不要使用127.0.0.1</li><li>我们将fastDFS storage运行目录映射到本机的/var/fdfs/storage目录中</li></ul><p>执行如下命令查看storage是否运行起来</p><pre><code>docker container ls</code></pre><p>如果想停止storage服务，可以执行如下命令</p><pre><code>docker container stop storage</code></pre><p>停止后，重新运行storage，可以执行如下命令</p><pre><code>docker container start storage</code></pre><p><span style="outline-style: initial; outline-width: 0px; word-break: break-all; font-weight: 700;">注意：如果无法重新运行，可以删除<code>/var/fdfs/storage/data</code>目录下的<code>fdfs_storaged.pid</code> 文件，然后重新运行storage。</span></p><p><span style="outline-style: initial; outline-width: 0px; word-break: break-all; font-weight: 700;"><span style="letter-spacing: 0.2px;"><font color="#ff0000">警告：我此处使用的是win10安装的docker，如果你使用云服务器，记得在安全组开放22122和8888这两个端口，否则将代码将无法连接。</font></span></span></p><p><span style="outline-style: initial; outline-width: 0px; word-break: break-all; font-weight: 700;">项目地址：<a href="https://github.com/HWYWL/spring-boot-docker-fsatdfs" target="_blank" rel="noopener">https://github.com/HWYWL/spring-boot-docker-fsatdfs</a></span></p><p><span style="outline-style: initial; outline-width: 0px; word-break: break-all; font-weight: 700;">效果图：</span><a href="http://www.hwy.ac.cn/upload/2018/08/72qoojamq0iicr4lobc95ijmpo.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="http://www.hwy.ac.cn/upload/2018/08/72qoojamq0iicr4lobc95ijmpo.png" class="lazyload"></a></p></body></html>]]></content>
      
      
      <categories>
          
          <category> Spring Boot </category>
          
          <category> FastDFS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> Spring Boot </tag>
            
            <tag> FastDFS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx基础配置</title>
      <link href="/2018/08/24/Nginx%E5%9F%BA%E7%A1%80%E9%85%8D%E7%BD%AE/"/>
      <url>/2018/08/24/Nginx%E5%9F%BA%E7%A1%80%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><h1 id="Nginx基础配置"><a href="#Nginx基础配置" class="headerlink" title="Nginx基础配置"></a>Nginx基础配置</h1><p>以我的博客为例我们分为两种配置，一种普通的反向代理http，另一种是https</p><h3 id="配置http"><a href="#配置http" class="headerlink" title="配置http"></a>配置http</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">server {</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name www.hwy.ac.cn; #将 www.yourdomain.com 替换为之前注册并解析的域名</span><br><span class="line">    root /root/firekylin;</span><br><span class="line">    set $node_port 此处替换为项目端口号;</span><br><span class="line"></span><br><span class="line">    index index.js index.html index.htm;</span><br><span class="line"></span><br><span class="line">    location ^~ /.well-known/acme-challenge/ {</span><br><span class="line">      alias /root/firekylin/ssl/challenges/;</span><br><span class="line">      try_files $uri = 404;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    location / {</span><br><span class="line">        proxy_http_version 1.1;</span><br><span class="line">        proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">        proxy_set_header Host $http_host;</span><br><span class="line">        proxy_set_header X-NginX-Proxy true;</span><br><span class="line">        proxy_set_header Upgrade $http_upgrade;</span><br><span class="line">        proxy_set_header Connection "upgrade";</span><br><span class="line">        proxy_pass http://127.0.0.1:$node_port$request_uri;</span><br><span class="line">        proxy_redirect off;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    location = /development.js {</span><br><span class="line">        deny all;</span><br><span class="line">    }</span><br><span class="line">    location = /testing.js {</span><br><span class="line">        deny all;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    location = /production.js {</span><br><span class="line">        deny all;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><h3 id="配置https"><a href="#配置https" class="headerlink" title="配置https"></a>配置https</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">server{</span><br><span class="line">    listen 443;</span><br><span class="line">    server_name hwy.ac.cn www.hwy.ac.cn;</span><br><span class="line">    root /root/firekylin;</span><br><span class="line">    set $node_port 此处替换为项目端口号;</span><br><span class="line"></span><br><span class="line">    ssl on;</span><br><span class="line">    ssl_certificate  /xxx/xxx/xxx.crt;</span><br><span class="line">    ssl_certificate_key /xxx/xxx/xxx.key;</span><br><span class="line"></span><br><span class="line">    ssl_session_timeout 5m;</span><br><span class="line">    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;</span><br><span class="line">    ssl_ciphers ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA:ECDHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA;</span><br><span class="line">    ssl_session_cache shared:SSL:50m;</span><br><span class="line">    ssl_dhparam %path/ssl/dhparams.pem;</span><br><span class="line">    ssl_prefer_server_ciphers on;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    index index.js index.html index.htm;</span><br><span class="line"></span><br><span class="line">    location ^~ /.well-known/acme-challenge/ {</span><br><span class="line">      alias /root/firekylin/ssl/challenges/;</span><br><span class="line">      try_files $uri = 404;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">   location / {</span><br><span class="line">        proxy_http_version 1.1;</span><br><span class="line">        proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">        proxy_set_header Host $http_host;</span><br><span class="line">        proxy_set_header X-NginX-Proxy true;</span><br><span class="line">        proxy_set_header Upgrade $http_upgrade;</span><br><span class="line">        proxy_set_header Connection "upgrade";</span><br><span class="line">        proxy_pass http://127.0.0.1:$node_port$request_uri;</span><br><span class="line">        proxy_redirect off;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    location = /development.js {</span><br><span class="line">        deny all;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    location = /testing.js {</span><br><span class="line">        deny all;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    location = /production.js {</span><br><span class="line">        deny all;</span><br><span class="line">   }</span><br><span class="line">}</span><br><span class="line">server {</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name hwy.ac.cn www.hwy.ac.cn;</span><br><span class="line">    rewrite ^(.*) https://hwy.ac.cn$1 permanent;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p>其他项目可以参考配置，大部分配置是一样的。</p></body></html>]]></content>
      
      
      <categories>
          
          <category> Nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx反向代理本地目录</title>
      <link href="/2018/08/24/nginx%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E6%9C%AC%E5%9C%B0%E7%9B%AE%E5%BD%95/"/>
      <url>/2018/08/24/nginx%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E6%9C%AC%E5%9C%B0%E7%9B%AE%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">server {</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name www.avenger.com;    //在host中把这个地址设置为127.0.0.1</span><br><span class="line">    index index.html index.htm;</span><br><span class="line"></span><br><span class="line">    autoindex on;</span><br><span class="line">    autoindex_exact_size on;</span><br><span class="line">    autoindex_localtime on;</span><br><span class="line"></span><br><span class="line">    location / {</span><br><span class="line">        root D:/work/code/fed-static;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div></body></html>]]></content>
      
      
      <categories>
          
          <category> Nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Docker安装RabbitMQ</title>
      <link href="/2018/08/18/%E4%BD%BF%E7%94%A8Docker%E5%AE%89%E8%A3%85RabbitMQ/"/>
      <url>/2018/08/18/%E4%BD%BF%E7%94%A8Docker%E5%AE%89%E8%A3%85RabbitMQ/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><p>获取rabbit镜像：<br>docker pull rabbitmq:management</p><a id="more"></a><p>获取rabbit镜像：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">docker pull rabbitmq:management</span><br><span class="line"><span class="string">``</span><span class="string">`  </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">创建并运行容器：</span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>js</span><br><span class="line">docker run -d --hostname my-rabbit --name rabbit -p <span class="number">8080</span>:<span class="number">15672</span> rabbitmq:management  </span><br><span class="line">--hostname：指定容器主机名称  </span><br><span class="line">--name:指定容器名称  </span><br><span class="line">-p:将mq端口号映射到本地  </span><br><span class="line"></span><br><span class="line">或在运行时设置用户和密码</span><br><span class="line">docker run -d --hostname my-rabbit --name rabbit -e RABBITMQ_DEFAULT_USER=admin -e RABBITMQ_DEFAULT_PASS=admin -p <span class="number">15672</span>:<span class="number">15672</span> -p <span class="number">5672</span>:<span class="number">5672</span> -p <span class="number">25672</span>:<span class="number">25672</span> -p <span class="number">61613</span>:<span class="number">61613</span> -p <span class="number">1883</span>:<span class="number">1883</span> rabbitmq:management</span><br><span class="line"></span><br><span class="line"><span class="number">15672</span>：控制台端口号</span><br><span class="line"></span><br><span class="line"><span class="number">5672</span>：应用访问端口号</span><br><span class="line"><span class="string">``</span><span class="string">`  </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">查看rabbit运行状况：</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">![](https://images2017.cnblogs.com/blog/1081448/201710/1081448-20171027152847117-1098449262.png)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>js</span><br><span class="line">容器运行正常，使用http:<span class="comment">//192.168.99.100:15672访问RabbitMQ控制台</span></span><br></pre></td></tr></tbody></table></figure></div></body></html>]]></content>
      
      
      <categories>
          
          <category> 消息队列 </category>
          
          <category> RabbitMQ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> RabbitMQ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx 简明教程</title>
      <link href="/2018/08/15/Nginx%20%E7%AE%80%E6%98%8E%E6%95%99%E7%A8%8B/"/>
      <url>/2018/08/15/Nginx%20%E7%AE%80%E6%98%8E%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><p>NGINX 是一款来自俄罗斯的HTTP 和反向代理（reverse proxy）服务器、邮件服务器，以及通用的 TCP/UDP 代理服务器，以其高性能被业界广泛采用。本文通过最简洁的方式，将 NGINX 核心应用做下介绍。</p><a id="more"></a><p>NGINX 是一款来自俄罗斯的HTTP 和反向代理（reverse proxy）服务器、邮件服务器，以及通用的 TCP/UDP 代理服务器，以其高性能被业界广泛采用。本文通过最简洁的方式，将 NGINX 核心应用做下介绍。</p><h2 id="什么是-NGINX"><a href="#什么是-NGINX" class="headerlink" title="什么是 NGINX"></a>什么是 NGINX</h2><p>NGINX是一个免费的、开源的、高性能的 HTTP 服务器和反向代理，以及一个 IMAP/POP3 代理服务器。 NGINX以其高性能、稳定性、丰富的功能集、简单的配置和低资源消耗而闻名。</p><p>NGINX 是为解决<a href="http://www.kegel.com/c10k.html" target="_blank" rel="noopener">C10K</a> 问题而编写的少数服务器之一。与传统服务器不同，NGINX 不依赖于线程来处理请求。相反，它使用更加可扩展的事件驱动（异步）架构。这种架构在负载下使用小的但更重要的是可预测的内存量。即使您不希望处理数千个并发请求，您仍然可以从 NGINX 的高性能和小内存中获益。 NGINX 在各个方向扩展：从最小的 VPS 一直到大型服务器集群。</p><h2 id="控制语句"><a href="#控制语句" class="headerlink" title="控制语句"></a>控制语句</h2><p>NGINX 启动后，有一个主进程（master process）和一个或多个工作进程（worker process），主进程的作用主要是读入和检查NGINX的配置信息，以及维护工作进程；工作进程才是真正处理客户端请求的进程。具体要启动多少个工作进程，可以在 NGINX 的配置文件<code>nginx.conf</code>中通过<code>worker_processes</code>指令指定。 可以通过以下这些命令来控制 NGINX：</p><pre><code class="js">nginx -s [ stop | quit | reopen | reload ]</code></pre><p>其中：</p><ul><li><code>nginx -s stop</code>： 强制停止NGINX，不管工作进程当前是否正在处理用户请求，都会立即退出。</li><li><code>nginx -s quit</code>：“优雅地”退出NGINX，执行这个命令后，工作进程会将当前正在处理的请求处理完毕后，再退出。</li><li><code>nginx -s reload</code>：重载配置信息。当NGINX的配置文件改变之后，同过执行这个命令，使更改的配置信息生效，而无需重新启动nginx.</li><li><code>nginx -s reopen</code>：重新打开日志文件。</li></ul><h2 id="配置服务器名称"><a href="#配置服务器名称" class="headerlink" title="配置服务器名称"></a>配置服务器名称</h2><p>服务器名称是用<code>server_name</code>指令来定义的，并且它决定了哪一个<code>server</code>块将用来处理给定的请求。可以使用精确名称、通配符、正则表达式来定义服务器名称。</p><pre><code class="js">server {    listen <span class="number">80</span>;    server_name example.org www.example.org;    ...  }  server {    listen <span class="number">80</span>;    server_name _.example.org;    ...  }  server {    listen <span class="number">80</span>;    server_name mail._;    ...  }  server {    listen <span class="number">80</span>;    server_name ~^(?<span class="xml"><span class="tag"><<span class="name">user</span>></span>.+).example.net$;  </span><span class="xml">  ...  </span><span class="xml">}</span></code></pre><p>当寻找一个虚拟服务器的名字，如果指定的名称匹配多个变体，例如，通配符和正则表达式都匹配，将会按照以下的顺序选择第一个匹配的变体：</p><ul><li>精确名称</li><li>以星号（<em>）开头的最长的通配符，例如“</em>.example.org”</li><li>以星号（_）结尾的最长的通配符，例如“mail._”</li><li>第一个匹配的正则表达式（根据在配置文件中出现的顺序）</li></ul><h2 id="配置-HTTPS-服务器"><a href="#配置-HTTPS-服务器" class="headerlink" title="配置 HTTPS 服务器"></a>配置 HTTPS 服务器</h2><p>修改 <code>conf/nginx.conf</code> 文件，必须在配置文件 server 块中的监听指令 listen 后启用 ssl 参数，并且指定服务器证书 <code>ssl_certificate</code> 和私钥 <code>ssl_certificate_key</code> 的位置：</p><pre><code class="js">server {    listen <span class="number">443</span> ssl;    server_name www.example.com;    ssl_certificate www.example.com.crt;    ssl_certificate_key www.example.com.key;    ssl_protocols TLSv1 TLSv1<span class="number">.1</span> TLSv1<span class="number">.2</span>;    ssl_ciphers HIGH:!aNULL:!MD5;    ...  }</code></pre><p>服务器证书是一个公共实体，它被发送给连接到服务器的每一个客户机。私钥是一个安全实体，应该存储在具有受限访问的文件中，但它必须可被nginx主进程读取。私钥也可以存储在与服务器证书相同的文件中：</p><pre><code class="js">ssl_certificate www.example.com.cert;  ssl_certificate_key www.example.com.cert;</code></pre><p>在这种情况下，这个证书文件的访问权限也应受到限制。虽然证书和密钥存储在一个文件中，但只有证书被发送到客户端。</p><p>指令 <code>ssl_protocols</code> 和 <code>ssl_ciphers</code> 可用于限制仅包括强版本和密码的 SSL/TLS 连接。 默认情况下，NGINX 使 用<code>ssl_protocols TLSv1 TLSv1.1 TLSv1.2</code>版本和<code>ssl_ciphers HIGH:!aNULL:!MD5</code>密码，因此通常不需要显式地配置它们。需要注意的是，这些指令的默认值在不同的版本里面已经变更好几次了。</p><h2 id="作为-HTTP-负载均衡器"><a href="#作为-HTTP-负载均衡器" class="headerlink" title="作为 HTTP 负载均衡器"></a>作为 HTTP 负载均衡器</h2><p>跨多个应用程序实例的负载均衡是优化资源利用率，最大限度地提高吞吐量，降低延迟，并确保容错配置一个常用的技术。</p><p>NGINX 支持如下负载均衡的机制（或方法）：</p><h3 id="1-轮询"><a href="#1-轮询" class="headerlink" title="1. 轮询"></a>1. 轮询</h3><p>如果没有指定负载均衡的方法，那么 NGINX 默认采用的是轮询的方式。最简单的负载均衡配置如下：</p><pre><code class="js">http {    upstream myapp1 {      server srv1.example.com;      server srv2.example.com;      server srv3.example.com;    }    server {      listen <span class="number">80</span>;      location / {        proxy_pass [http:<span class="comment">//myapp1](http://myapp1);  </span>    }    }  }</code></pre><p>3个同样实例的应用（srv1-srv3）是采用轮询方式。所有请求被代理到一组服务<code>myapp1</code>，同时，NGINX 运用 HTTP 负载均衡来分发请求。</p><p>反向代理被应用在 NGINX 内，包括负载均衡针对 HTTP、HTTPS、FASTCGI、uwsgi、SCGI 以及 memcached。</p><p>配置负载均衡针对 HTTPS 替代 HTTP 的话，仅仅使用 https 协议即可（proxy_pass <a href="https://myapp1）。" target="_blank" rel="noopener">https://myapp1）。</a></p><p>在为 FASTCGI、uwsgi、SCGI 或 memcached 设置负载均衡时，分别使用 fastcgi_pass、uwsgi_pass、scgi_pass 和 memcached_pass 指令。</p><h3 id="2-最少连接"><a href="#2-最少连接" class="headerlink" title="2. 最少连接"></a>2. 最少连接</h3><p>在一些请求需要更长时间才能完成的情况下，最少连接可以更公正地控制应用程序实例的负载。</p><p>使用最少连接的负载平衡，NGINX 将不会加重一个有过多请求的应用服务负担，而是将它分发新的请求给最不繁忙的服务器。</p><p>在 NGINX 中需要通过设置<code>least_conn</code>来激活最少连接的负载均衡策略配置：</p><pre><code class="js">upstream myapp1 {    least_conn;    server srv1.example.com;    server srv2.example.com;    server srv3.example.com;  }</code></pre><h3 id="3-IP-哈希（会话持久）"><a href="#3-IP-哈希（会话持久）" class="headerlink" title="3. IP 哈希（会话持久）"></a>3. IP 哈希（会话持久）</h3><p>注意，采用轮询或者最少连接的负载均衡策略，每个客户端的后续请求可能被分配带不同的服务器，不能保证同一个客户端总是指向同一个服务。如果需要告诉客户端分配到一个特定的应用服务，换句话，就是保持客户端的会话粘性（sticky）或者会话持久性（persitent），即总是尝试选着同一个特定的服务器，IP 哈希 负载均衡机制可以被使用。</p><p>采用 IP 哈希的策略，客户端的 IP 地址被用作一个哈希 key，决定哪个服务应该被选中来服务客户端的请求。这种方式，确保了同一个客户端来的请求将总是被指向同一个服务，除非这个服务不可用了。</p><p>配置IP 哈希负载均衡，只需要通过设置<code>ip_hash</code>来激活：</p><pre><code class="js">upstream myapp1 {    ip_hash;    server srv1.example.com;    server srv2.example.com;    server srv3.example.com;  }</code></pre><h3 id="权重（weight）"><a href="#权重（weight）" class="headerlink" title="权重（weight）"></a>权重（weight）</h3><p>可以通过使用服务器的权重来影响 NGINX 的负载均衡算法，在上述轮询、最少请求、基于IP 哈希负载均衡配置中，服务器的权重没有配置，意味着所有服务器的权重都是一样的。特别是轮询，它意味着或多或少平等的分发请求到服务器（请求够多，并且请求以均匀方式进行处理，并完成够快）</p><p>当配置了一个 weight 变量到一个指定的服务后，权重被作为一个 NGINX 的负载均衡的决定的一部分：</p><pre><code class="js">upstream myapp1 {    server srv1.example.com weight=<span class="number">3</span>;    server srv2.example.com;    server srv3.example.com;  }</code></pre><p>采用上面的配置，如果来了5个请求，3个到srv1，1个到srv2,1个到srv3。在最近的NGINX版本中，同样可以使用权重针对最少连接和IP 哈希的负载均衡策略。</p><h3 id="健康监测"><a href="#健康监测" class="headerlink" title="健康监测"></a>健康监测</h3><p>反向代理在 NGINX 中实现了被动的健康监测，如果响应从一个特定的服务器失败，携带着错误，NGINX 将标记这个服务器是失败的，并将尝试一段时间避免选择这个服务器作为后续请求的服务器。</p><p><code>fail_timeout</code> 和 <code>max_fails</code> 用于设定指定时间内，应该发生连续不成功的数目。默认<code>max_fail</code>等于1，如果设置成0，相当于关闭这个服务器的健康监测。<code>fail_timeout</code>参数，定义多久服务器被标识失败。过了服务器<code>fail_timeout</code>失败超时间隔后，NGINX 将开始探测存活的客户端的请求，如果探测成功，服务被标识成存活状态。</p><h2 id="压缩与解压"><a href="#压缩与解压" class="headerlink" title="压缩与解压"></a>压缩与解压</h2><p>压缩响应通常会显着减少传输数据的大小。 然而，由于压缩在运行时发生，所以会增加处理开销，这可能会对性能产生负面影响。</p><p>在向客户端发送响应之前，NGINX 会执行压缩，但不会“重复压缩”已经压缩过的响应。</p><h3 id="启用压缩"><a href="#启用压缩" class="headerlink" title="启用压缩"></a>启用压缩</h3><p>要启用压缩，在 gzip 指令上请使用<code>on</code>参数:</p><pre><code class="js">gzip on;</code></pre><p>默认情况下，NGINX 仅压缩使用MIME 类型 为 <code>text/html</code>的响应。要压缩其他 MIME 类型的响应，请包含<code>gzip_types</code>指令并列出相应的类型。</p><pre><code class="js">gzip_types text/plain application/xml;</code></pre><p>要指定要压缩的响应的最小长度，请使用<code>gzip_min_length</code>指令。默认值为20字节，下面示例调整为1000：</p><pre><code class="js">gzip_min_length <span class="number">1000</span>;</code></pre><p>默认情况下，NGINX 不会压缩对代理请求的响应（来自代理服务器的请求）。请求是否来自代理服务器是由请求中<code>Via</code>头字段的是否存来确定的。要配置这些响应的压缩，请使用<code>gzip_proxied</code>指令。该指令具有多个参数来指定 NGINX 应压缩哪种代理请求。例如，仅对不会在代理服务器上缓存的请求进行压缩响应，为此，<code>gzip_proxied</code>指令具有指示 NGINX 在响应中检查<code>Cache-Control</code>头字段的参数，如果值是 no-cache、no-store 或 private，则压缩响应。另外，您必须包括 expired 的参数来检查<code>Expires</code>头字段的值。这些参数在以下示例中与 auth 参数一起设置，该参数检查<code>Authorization</code>头字段的存在（授权响应特定于最终用户，并且通常不被缓存）：</p><pre><code class="js">gzip_proxied no-cache no-store private expired auth;</code></pre><p>与大多数其他指令一样，配置压缩的指令可以包含在<code>http</code>上下文中，也可以包含在 <code>server</code> 或 <code>location</code> 块中。</p><p>gzip 压缩的整体配置可能如下所示。</p><pre><code class="js">server {    gzip on;    gzip_types text/plain application/xml;    gzip_proxied no-cache no-store private expired auth;    gzip_min_length <span class="number">1000</span>;    ...  } </code></pre><h3 id="启用解压"><a href="#启用解压" class="headerlink" title="启用解压"></a>启用解压</h3><p>某些客户端不支持使用 gzip 编码方法的响应。同时，可能需要存储压缩数据，或者即时压缩响应并将它们存储在缓存中。为了都能成功地服务于接受或者不接受压缩数据的客户端，针对后一种类型的客户端时，NGINX 可以在将数据发送时即时解压缩数据。</p><p>要启用运行时解压缩，请使用<code>gunzip</code>指令。</p><pre><code class="js">location /storage/ {    gunzip on;    ...  }</code></pre><p><code>gunzip</code>指令可以在与<code>gzip</code>指令相同的上下文中指定：</p><pre><code class="js">server {    gzip on;    gzip_min_length <span class="number">1000</span>;    gunzip on;    ...  }</code></pre><p>请注意，此指令在单独的模块中定义（见<code>ngx_http_gunzip_module</code><a href="https://nginx.org/en/docs/http/ngx_http_gunzip_module.html" target="_blank" rel="noopener">http://nginx.org/en/docs/http/ngx_http_gunzip_module.html</a>），默认情况下可能不包含在开源 NGINX 构建中。</p><h3 id="发送压缩文件"><a href="#发送压缩文件" class="headerlink" title="发送压缩文件"></a>发送压缩文件</h3><p>要将文件的压缩版本发送到客户端而不是常规文件，请在适当的上下文中将<code>gzip_static</code>指令设置为 on。</p><pre><code class="js">location / {    gzip_static on;  }</code></pre><p>在这种情况下，为了服务<code>/path/to/file</code>的请求，NGINX 尝试查找并发送文件<code>/path/to/file.gz</code>。如果文件不存在，或客户端不支持 gzip，则 NGINX 将发送未压缩版本的文件。</p><p>请注意，<code>gzip_static</code>指令不启用即时压缩。它只是使用压缩工具预先压缩的文件。要在运行时压缩内容（而不仅仅是静态内容），请使用<code>gzip</code>指令。</p><p>该指令在单独的模块中定义（见<code>ngx_http_gzip_static_module</code><a href="https://nginx.org/en/docs/http/ngx_http_gzip_static_module.html" target="_blank" rel="noopener">http://nginx.org/en/docs/http/ngx_http_gzip_static_module.html</a>），默认情况下可能不包含在开源NGINX构建中。</p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul><li>《NGINX 教程》:<a href="https://github.com/waylau/nginx-tutorial" target="_blank" rel="noopener">https://github.com/waylau/nginx-tutorial</a></li></ul></body></html>]]></content>
      
      
      <categories>
          
          <category> Nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker容器名字冲突解决</title>
      <link href="/2018/08/07/Docker%E5%AE%B9%E5%99%A8%E5%90%8D%E5%AD%97%E5%86%B2%E7%AA%81%E8%A7%A3%E5%86%B3/"/>
      <url>/2018/08/07/Docker%E5%AE%B9%E5%99%A8%E5%90%8D%E5%AD%97%E5%86%B2%E7%AA%81%E8%A7%A3%E5%86%B3/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><p>Docker容器名字冲突解决</p><a id="more"></a><p>– Docker容器名字冲突解决</p><pre><code class="js">docker: <span class="built_in">Error</span> response <span class="keyword">from</span> daemon: Conflict. The container name <span class="string">"/tracker"</span> is already <span class="keyword">in</span> use by container <span class="string">"73b9fc481e0316195ab89d4c4faa38c5a1012a84ce859a65488e983e9b415255"</span>. You have to remove (or rename) that container to be able to reuse that name.See <span class="string">'docker run --help'</span>.</code></pre><p>以上是错误的提示，我们发现有一个名为tracker的容器冲突了，此时我们使用命令进行查看</p><pre><code class="js">docker ps</code></pre><p>如果容器存在直接使用一下命令停止、删除</p><pre><code class="js">docker stop iddocker rm id</code></pre><p>如果容器不存在使用以下命令查看,就会找到存在的镜像</p><pre><code class="js">docker ps -a</code></pre><p>此时你可以使用删除，或者把他重启，记得后面跟上id参数</p><pre><code class="js">docker restart & docker stop & docker start</code></pre><p>注意：因为存在数据卷的原因，所以以前的数据不会被删除，可以放心大胆的删除镜像！！！</p></body></html>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用docker安装kafka</title>
      <link href="/2018/08/07/%E4%BD%BF%E7%94%A8docker%E5%AE%89%E8%A3%85kafka/"/>
      <url>/2018/08/07/%E4%BD%BF%E7%94%A8docker%E5%AE%89%E8%A3%85kafka/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><ol><li>启动zookeeper容器</li><li>启动kafka容器</li><li>测试kafka</li><li>集群搭建</li><li>创建Replication为2，Partition为2的topic</li></ol><a id="more"></a><h3 id="1-启动zookeeper容器"><a href="#1-启动zookeeper容器" class="headerlink" title="1. 启动zookeeper容器"></a>1. 启动zookeeper容器</h3><pre><code>docker pull wurstmeister/zookeeperdocker run -d --name zookeeper -p 2181:2181 -t wurstmeister/zookeeper</code></pre><h3 id="2-启动kafka容器"><a href="#2-启动kafka容器" class="headerlink" title="2. 启动kafka容器"></a><a name="t1" style="outline-style: initial; outline-width: 0px; color: rgb(78, 161, 219); cursor: pointer; word-break: break-all;"></a>2. 启动kafka容器</h3><pre><code>docker pull wurstmeister/kafkadocker run  -d --name kafka -p 9092:9092 -e KAFKA_BROKER_ID=0 -e KAFKA_ZOOKEEPER_CONNECT=192.168.99.100:2181 -e KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://192.168.99.100:9092 -e KAFKA_LISTENERS=PLAINTEXT://0.0.0.0:9092 -t wurstmeister/kafka </code></pre><p>这里面主要设置了4个参数</p><pre><code>KAFKA_BROKER_ID=0               KAFKA_ZOOKEEPER_CONNECT=192.168.99.100:2181KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://192.168.99.100:9092KAFKA_LISTENERS=PLAINTEXT://0.0.0.0:9092</code></pre><p>中间两个参数的192.168.99.100改为宿主机器的IP地址，如果不这么设置，可能会导致在别的机器上访问不到kafka。</p><h3 id="3-测试kafka"><a href="#3-测试kafka" class="headerlink" title="3. 测试kafka"></a><a name="t2" style="outline-style: initial; outline-width: 0px; color: rgb(78, 161, 219); cursor: pointer; word-break: break-all;"></a>3. 测试kafka</h3><p>进入kafka容器的命令行</p><pre><code>docker exec -ti kafka /bin/bash</code></pre><p>进入kafka所在目录</p><pre><code>cd opt/kafka_2.11-2.0.0/</code></pre><h3 id="4-集群搭建"><a href="#4-集群搭建" class="headerlink" title="4. 集群搭建"></a><a name="t3" style="outline-style: initial; outline-width: 0px; color: rgb(78, 161, 219); cursor: pointer; word-break: break-all;"></a>4. 集群搭建</h3><p>使用docker命令可快速在同一台机器搭建多个kafka，只需要改变brokerId和端口</p><pre><code>docker run -d --name kafka1 \-p 9093:9093 \-e KAFKA_BROKER_ID=1 \-e KAFKA_ZOOKEEPER_CONNECT=192.168.99.100:2181 \-e KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://192.168.99.100:9093 \-e KAFKA_LISTENERS=PLAINTEXT://0.0.0.0:9093 -t wurstmeister/kafka</code></pre><h3 id="5-创建Replication为2，Partition为2的topic"><a href="#5-创建Replication为2，Partition为2的topic" class="headerlink" title="5. 创建Replication为2，Partition为2的topic"></a><a name="t4" style="outline-style: initial; outline-width: 0px; color: rgb(78, 161, 219); cursor: pointer; word-break: break-all;"></a>5. 创建Replication为2，Partition为2的topic</h3><p>在kafka容器中的opt/<span style="background-color: transparent; color: inherit; font-family: Menlo, Monaco, Consolas, " courier new", monospace; font-size: inherit; white-space: pre-wrap;">kafka_2.11-2.0.0</span>/目录下输入</p><pre><code>bin/kafka-topics.sh --create --zookeeper 192.168.99.100:2181 --replication-factor 2 --partitions 2 --topic partopic</code></pre><h3 id="6-查看topic的状态"><a href="#6-查看topic的状态" class="headerlink" title="6. 查看topic的状态"></a><a name="t5" style="outline-style: initial; outline-width: 0px; color: rgb(78, 161, 219); cursor: pointer; word-break: break-all;"></a>6. 查看topic的状态</h3><p>在kafka容器中的opt/<span style="background-color: transparent; color: inherit; font-family: Menlo, Monaco, Consolas, " courier new", monospace; font-size: inherit; white-space: pre-wrap;">kafka_2.11-2.0.0</span>/目录下输入</p><pre><code>bin/kafka-topics.sh --describe --zookeeper 192.168.99.100:2181 --topic partopic</code></pre><p>输出结果：</p><pre><code>Topic:partopic  PartitionCount:2    ReplicationFactor:2 Configs:    Topic: partopic Partition: 0    Leader: 0   Replicas: 0,1   Isr: 0,1    Topic: partopic Partition: 1    Leader: 0   Replicas: 1,0   Isr: 0,1</code></pre><p>显示每个分区的Leader机器为broker0，在broker0和1上具有备份，Isr代表存活的备份机器中存活的。<br>当停掉kafka1后，</p><pre><code>docker stop kafka1</code></pre><p>再查看topic状态，输出结果：</p><pre><code>Topic:partopic  PartitionCount:2    ReplicationFactor:2 Configs:    Topic: partopic Partition: 0    Leader: 0   Replicas: 0,1   Isr: 0    Topic: partopic Partition: 1    Leader: 0   Replicas: 1,0   Isr: 0</code></pre></body></html>]]></content>
      
      
      <categories>
          
          <category> 消息队列 </category>
          
          <category> kafka </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> kafka </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker nginx安装与配置挂载并实现负载均衡</title>
      <link href="/2018/07/27/Docker%20nginx%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE%E6%8C%82%E8%BD%BD%E5%B9%B6%E5%AE%9E%E7%8E%B0%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/"/>
      <url>/2018/07/27/Docker%20nginx%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE%E6%8C%82%E8%BD%BD%E5%B9%B6%E5%AE%9E%E7%8E%B0%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><p>在Docker下载Nginx镜像</p><p>docker pull nginx docker images</p><a id="more"></a><h3 id="Docker-nginx安装与配置挂载并实现负载均衡"><a href="#Docker-nginx安装与配置挂载并实现负载均衡" class="headerlink" title="Docker nginx安装与配置挂载并实现负载均衡"></a><strong><font color="#a5c6ce" style face="Arial Black">Docker nginx安装与配置挂载并实现负载均衡</font></strong></h3><ul><li><p><span style="outline-style: initial; outline-width: 0px; font-weight: 700; word-break: break-all;">在Docker下载Nginx镜像</span></p><p>docker pull nginx<br>docker images</p></li></ul><p><a href="https://img-blog.csdn.net/2018070213224659?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI2NjQxNzgx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" data-fancybox="group" data-caption="这里写图片描述" class="fancybox"><img alt="这里写图片描述" title="这里写图片描述" data-src="https://img-blog.csdn.net/2018070213224659?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI2NjQxNzgx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" class="lazyload"></a></p><ul><li><p><span style="outline-style: initial; outline-width: 0px; font-weight: 700; word-break: break-all;">创建挂载目录</span></p><p>mkdir -p /data/nginx/{conf,conf.d,html,logs}</p></li></ul><p><a href="https://img-blog.csdn.net/20180702132449202?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI2NjQxNzgx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" data-fancybox="group" data-caption="这里写图片描述" class="fancybox"><img alt="这里写图片描述" title="这里写图片描述" data-src="https://img-blog.csdn.net/20180702132449202?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI2NjQxNzgx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" class="lazyload"></a></p><ul><li><p><span style="outline-style: initial; outline-width: 0px; font-weight: 700; word-break: break-all;">编写nginx,conf配置文件，并放在文件夹中</span></p><h1 id="For-more-information-on-configuration-see"><a href="#For-more-information-on-configuration-see" class="headerlink" title="For more information on configuration, see:"></a>For more information on configuration, see:</h1><h1 id="Official-English-Documentation-http-nginx-org-en-docs"><a href="#Official-English-Documentation-http-nginx-org-en-docs" class="headerlink" title="* Official English Documentation: http://nginx.org/en/docs/"></a>* Official English Documentation: <a href="http://nginx.org/en/docs/" target="_blank" rel="noopener">http://nginx.org/en/docs/</a></h1><h1 id="Official-Russian-Documentation-http-nginx-org-ru-docs"><a href="#Official-Russian-Documentation-http-nginx-org-ru-docs" class="headerlink" title="* Official Russian Documentation: http://nginx.org/ru/docs/"></a>* Official Russian Documentation: <a href="http://nginx.org/ru/docs/" target="_blank" rel="noopener">http://nginx.org/ru/docs/</a></h1><p>user nginx;<br>worker_processes auto;<br>error_log /var/log/nginx/error.log;<br>pid /run/nginx.pid;</p><h1 id="Load-dynamic-modules-See-usr-share-nginx-README-dynamic"><a href="#Load-dynamic-modules-See-usr-share-nginx-README-dynamic" class="headerlink" title="Load dynamic modules. See /usr/share/nginx/README.dynamic."></a>Load dynamic modules. See /usr/share/nginx/README.dynamic.</h1><p>include /usr/share/nginx/modules/*.conf;</p><p>events {</p><pre><code>worker_connections 1024;</code></pre><p>}</p><p>http {</p><pre><code>log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '                  '$status $body_bytes_sent "$http_referer" '                  '"$http_user_agent" "$http_x_forwarded_for"';access_log  /var/log/nginx/access.log  main;sendfile            on;tcp_nopush          on;tcp_nodelay         on;keepalive_timeout   65;types_hash_max_size 2048;include             /etc/nginx/mime.types;default_type        application/octet-stream;# Load modular configuration files from the /etc/nginx/conf.d directory.# See http://nginx.org/en/docs/ngx_core_module.html#include# for more information.include /etc/nginx/conf.d/*.conf;server {    listen       80 default_server;    listen       [::]:80 default_server;    server_name  182.254.161.54;    root         /usr/share/nginx/html;    # Load configuration files for the default server block.    include /etc/nginx/default.d/*.conf;    location / {    proxy_pass http://pic;     }    error_page 404 /404.html;        location = /40x.html {    }    error_page 500 502 503 504 /50x.html;        location = /50x.html {    }}upstream pic{            server 182.254.161.54:8088 weight=5;            server 182.254.161.54:8089 weight=5;}</code></pre><p>}</p></li><li><p><span style="outline-style: initial; outline-width: 0px; font-weight: 700; word-break: break-all;">启动容器</span></p><p>docker run –name mynginx -d -p 82:80  -v /data/nginx/conf/nginx.conf:/etc/nginx/nginx.conf  -v /data/nginx/logs:/var/log/nginx -d docker.io/nginx</p></li><li><p><span style="outline-style: initial; outline-width: 0px; font-weight: 700; word-break: break-all;">查看启动的容器</span></p><p>docker ps </p></li></ul><p><a href="https://img-blog.csdn.net/20180702132832236?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI2NjQxNzgx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" data-fancybox="group" data-caption="这里写图片描述" class="fancybox"><img alt="这里写图片描述" title="这里写图片描述" data-src="https://img-blog.csdn.net/20180702132832236?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI2NjQxNzgx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" class="lazyload"></a></p><ul><li><span style="outline-style: initial; outline-width: 0px; font-weight: 700; word-break: break-all;">先前已经在Docker部署两个tomcat，一个是8088端口，另一个是8089端口，并进入两个容器里编写了简单的页面</span></li></ul><p><a href="https://img-blog.csdn.net/20180702133106139?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI2NjQxNzgx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" data-fancybox="group" data-caption="这里写图片描述" class="fancybox"><img alt="这里写图片描述" title="这里写图片描述" data-src="https://img-blog.csdn.net/20180702133106139?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI2NjQxNzgx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" class="lazyload"></a></p><p><span style="outline-style: initial; outline-width: 0px; font-weight: 700; word-break: break-all;">访问8088端口</span><br><a href="https://img-blog.csdn.net/20180702133728495?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI2NjQxNzgx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" data-fancybox="group" data-caption="这里写图片描述" class="fancybox"><img alt="这里写图片描述" title="这里写图片描述" data-src="https://img-blog.csdn.net/20180702133728495?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI2NjQxNzgx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" class="lazyload"></a></p><p><span style="outline-style: initial; outline-width: 0px; font-weight: 700; word-break: break-all;">访问8089端口</span><br><a href="https://img-blog.csdn.net/20180702133805719?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI2NjQxNzgx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" data-fancybox="group" data-caption="这里写图片描述" class="fancybox"><img alt="这里写图片描述" title="这里写图片描述" data-src="https://img-blog.csdn.net/20180702133805719?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI2NjQxNzgx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" class="lazyload"></a></p><ul><li><span style="outline-style: initial; outline-width: 0px; font-weight: 700; word-break: break-all;">现在通过Nginx访问两个tomcat的内容，实现负载均衡的功能，出于区别，更能体现负载均衡的功能，两个页面的内容不一样，但是访问路径都一样，只是通过Nginx反向代理去轮换访问</span></li></ul><p><a href="https://img-blog.csdn.net/20180702133452332?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI2NjQxNzgx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" data-fancybox="group" data-caption="这里写图片描述" class="fancybox"><img alt="这里写图片描述" title="这里写图片描述" data-src="https://img-blog.csdn.net/20180702133452332?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI2NjQxNzgx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" class="lazyload"></a></p><p><a href="https://img-blog.csdn.net/20180702133509870?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI2NjQxNzgx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" data-fancybox="group" data-caption="这里写图片描述" class="fancybox"><img alt="这里写图片描述" title="这里写图片描述" data-src="https://img-blog.csdn.net/20180702133509870?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI2NjQxNzgx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" class="lazyload"></a></p></body></html>]]></content>
      
      
      <categories>
          
          <category> Nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker 安装mysql5.7</title>
      <link href="/2018/07/27/Docker%20%E5%AE%89%E8%A3%85mysql5.7/"/>
      <url>/2018/07/27/Docker%20%E5%AE%89%E8%A3%85mysql5.7/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><p>1 安装</p><p>docker pull docker.io/mysql</p><a id="more"></a><p><font face="Arial Black" color="#73a5ad"><span style="font-size: 16px;"><strong>Docker 安装mysql5.7</strong></span></font>  </p><p>1 安装</p><p> docker pull docker.io/mysql  </p><pre><code>[root@iZuf6boi8ejfovwda7q1ynZ ~]# docker pull docker.io/mysqlUsing default tag: latestTrying to pull repository docker.io/library/mysql ... latest: Pulling from docker.io/library/mysqlf49cf87b52c1: Pull complete 78032de49d65: Pull complete 837546b20bc4: Pull complete 9b8316af6cc6: Pull complete 1056cf29b9f1: Pull complete 86f3913b029a: Pull complete 4cbbfc9aebab: Pull complete 8ffd0352f6a8: Pull complete 45d90f823f97: Pull complete ca2a791aeb35: Pull complete Digest: sha256:1f95a2ba07ea2ee2800ec8ce3b5370ed4754b0a71d9d11c0c35c934e9708dcf1</code></pre><p>2 启动<br>[root@iZuf6boi8ejfovwda7q1ynZ ~]# docker run –name mysql -p 3306:3306 -e MYSQL_ROOT_PASSWORD=123456 -d mysql<br>3c995c988a94ce38a5ade6dcce7cc9168b349051ec51dc5e8a11c8f210658c04</p><p>如果需要把数据存储在宿主机器 加参数-v</p><pre><code>[root@iZuf6boi8ejfovwda7q1ynZ home]# docker run --name mysql -p 3306:3306 -e MYSQL_ROOT_PASSWORD=123456 -v /home/mysql/data:/var/lib/mysql -v /home/mysql/my.cnf:/etc/mysql/my.cnf -d mysql/usr/bin/docker-current: Error response from daemon: Conflict. The name "/mysql" is already in use by container 3c995c988a94ce38a5ade6dcce7cc9168b349051ec51dc5e8a11c8f210658c04\. You have to remove (or rename) that container to be able to reuse that name..See '/usr/bin/docker-current run --help'.</code></pre><p><span style="color: rgb(51, 51, 51); font-family: -apple-system, " sf ui text", arial, "pingfang sc", "hiragino sans gb", "microsoft yahei", "wenquanyi micro hei", sans-serif, simhei, simsun;">有容器用了mysql这个名称，需要先停止，再删除镜像</span>  </p><pre><code>[root@iZuf6boi8ejfovwda7q1ynZ home]# docker psCONTAINER ID        IMAGE                               COMMAND                  CREATED             STATUS                  PORTS                                                             NAMES3c995c988a94        mysql                               "docker-entrypoint.sh"   8 hours ago         Up 8 hours              0.0.0.0:3306->3306/tcp                                            mysql[root@iZuf6boi8ejfovwda7q1ynZ home]# docker stop mysqlmysql[root@iZuf6boi8ejfovwda7q1ynZ home]# docker rm mysqlmysql</code></pre><p><span style="color: rgb(51, 51, 51); font-family: -apple-system, " sf ui text", arial, "pingfang sc", "hiragino sans gb", "microsoft yahei", "wenquanyi micro hei", sans-serif, simhei, simsun;">再次启动</span>  </p><pre><code>[root@iZuf6boi8ejfovwda7q1ynZ home]# docker run --name mysql -p 3306:3306 -e MYSQL_ROOT_PASSWORD=123456 -v /home/mysql/data:/var/lib/mysql -v /home/mysql/my.cnf:/etc/mysql/my.cnf -d mysqla086c00b114a744e5f3b9f64357aef15e46cc7face8dca0878be37e34e0eb240/usr/bin/docker-current: Error response from daemon: invalid header field value "oci runtime error: container_linux.go:247: starting container process caused \"process_linux.go:364: container init caused \\\"rootfs_linux.go:54: mounting \\\\\\\"/home/mysql/my.cnf\\\\\\\" to rootfs \\\\\\\"/var/lib/docker/devicemapper/mnt/54b2f88d4d6b504e68cdc8dc41e9bf229ecc739bbdce4e23b1253cec6ea62e1e/rootfs\\\\\\\" at \\\\\\\"/var/lib/docker/devicemapper/mnt/54b2f88d4d6b504e68cdc8dc41e9bf229ecc739bbdce4e23b1253cec6ea62e1e/rootfs/etc/mysql/mysql.cnf\\\\\\\" caused \\\\\\\"not a directory\\\\\\\"\\\"\"\n".[root@iZuf6boi8ejfovwda7q1ynZ home]# docker psCONTAINER ID        IMAGE                               COMMAND                  CREATED             STATUS                  PORTS                                                             NAMES[root@iZuf6boi8ejfovwda7q1ynZ home]# docker ps -aCONTAINER ID        IMAGE                               COMMAND                  CREATED             STATUS                    PORTS                                                             NAMESa086c00b114a        mysql                               "docker-entrypoint.sh"   38 seconds ago      Created                                                                                     mysql</code></pre><p><span style="color: rgb(51, 51, 51); font-family: -apple-system, " sf ui text", arial, "pingfang sc", "hiragino sans gb", "microsoft yahei", "wenquanyi micro hei", sans-serif, simhei, simsun;">再次启动发现，没有配置文件/home/mysql/my.cnf  但是容器还是创建成功了</span>  </p><pre><code>[root@iZuf6boi8ejfovwda7q1ynZ home]# docker rm mysqlmysql[root@iZuf6boi8ejfovwda7q1ynZ home]# docker ps -aCONTAINER ID        IMAGE                               COMMAND                  CREATED             STATUS                    PORTS                                                             NAMES[root@iZuf6boi8ejfovwda7q1ynZ home]# docker run --name mysql -p 3306:3306 -e MYSQL_ROOT_PASSWORD=123456 -v /home/mysql/data:/var/lib/mysql -d mysql825f0c86efe9fa16e909ac2444ae077a8c68667b3ae6760220971d6f2cda5f19[root@iZuf6boi8ejfovwda7q1ynZ home]# </code></pre><p><span style="color: rgb(51, 51, 51); font-family: -apple-system, " sf ui text", arial, "pingfang sc", "hiragino sans gb", "microsoft yahei", "wenquanyi micro hei", sans-serif, simhei, simsun;">所以还是需要删除镜像，重新启动，简单点把配置文件去掉就好了</span>  </p><p>3 进入容器<br>[root@iZuf6boi8ejfovwda7q1ynZ ~]# docker exec -it mysql  bash<br>root@3c995c988a94:/# mysql<br>ERROR 1045 (28000): Access denied for user ‘root’@’localhost’ (using password: NO)</p><p>4 进入客户端  </p><pre><code>[root@3c995c988a94:/# mysql -uroot -pEnter password: Welcome to the MySQL monitor.  Commands end with ; or \g.Your MySQL connection id is 4Server version: 5.7.20 MySQL Community Server (GPL)  Copyright (c) 2000, 2017, Oracle and/or its affiliates. All rights reserved.  Oracle is a registered trademark of Oracle Corporation and/or itsaffiliates. Other names may be trademarks of their respectiveowners.  Type 'help;' or '\h' for help. Type '\c' to clear the current input statement.  mysql> select version(); +-----------+| version() |+-----------+| 5.7.20    |+-----------+1 row in set (0.00 sec)</code></pre></body></html>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Excel表的读写</title>
      <link href="/2018/07/27/Centos7%E4%B8%8A%E5%AE%89%E8%A3%85docker/"/>
      <url>/2018/07/27/Centos7%E4%B8%8A%E5%AE%89%E8%A3%85docker/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><p>Docker从1.13版本之后采用时间线的方式作为版本号，分为社区版CE和企业版EE。 社区版是免费提供给个人开发者和小型团体使用的，企业版会提供额外的收费服务，比如经过官方测试认证过的基础设施、容器、插件等。</p><a id="more"></a><h2 id="Centos7上安装docker"><a href="#Centos7上安装docker" class="headerlink" title="Centos7上安装docker"></a><font color="#9cc6ef">Centos7上安装docker</font></h2><div id="cnblogs_post_body" class="blogpost-body" style="margin-bottom: 20px; word-break: break-word; font-family: Verdana, Geneva, Arial, Helvetica, sans-serif; font-size: 14.4px; background-color: rgb(238, 238, 238);"><p><span style="font-size: 16px;">Docker从1.13版本之后采用时间线的方式作为版本号，分为社区版CE和企业版EE。</span></p><p><span style="font-size: 16px;">社区版是免费提供给个人开发者和小型团体使用的，企业版会提供额外的收费服务，比如经过官方测试认证过的基础设施、容器、插件等。</span></p><p><span style="font-size: 16px;">社区版按照stable和edge两种方式发布，每个季度更新stable版本，如17.06，17.09；每个月份更新edge版本，如17.09，17.10。</span></p><h2 id="一、安装docker"><a href="#一、安装docker" class="headerlink" title="一、安装docker"></a>一、安装docker</h2><p>1、Docker 要求 CentOS 系统的内核版本高于 3.10 ，查看本页面的前提条件来验证你的CentOS 版本是否支持 Docker 。</p><p>通过 *<em>uname -r *</em>命令查看你当前的内核版本</p><div class="cnblogs_code" style="background-color: rgb(245, 245, 245); border: 1px solid rgb(204, 204, 204); padding: 5px; overflow: auto; margin: 5px 0px; font-family: " courier new" !important; font-size: 12px !important;"><pre style="margin-bottom: 0px; white-space: pre-wrap; font-family: " courier new" !important; font-size: 12px !important;"> $ <span style="color: rgb(0, 0, 255); font-size: 12px !important; line-height: 1.5 !important;">uname</span> -r</pre></div><p><span style="font-size: 16px;">2、使用 <code>root</code> 权限登录 Centos。确保 yum 包更新到最新。</span></p><div class="cnblogs_code" style="background-color: rgb(245, 245, 245); border: 1px solid rgb(204, 204, 204); padding: 5px; overflow: auto; margin: 5px 0px; font-family: " courier new" !important; font-size: 12px !important;"><pre style="margin-bottom: 0px; white-space: pre-wrap; font-family: " courier new" !important; font-size: 12px !important;">$ <span style="color: rgb(0, 0, 255); font-size: 12px !important; line-height: 1.5 !important;">sudo</span> <span style="color: rgb(0, 0, 255); font-size: 12px !important; line-height: 1.5 !important;">yum</span> update</pre></div><p><span style="font-size: 16px;">3、卸载旧版本(如果安装过旧版本的话)</span></p><div class="cnblogs_code" style="background-color: rgb(245, 245, 245); border: 1px solid rgb(204, 204, 204); padding: 5px; overflow: auto; margin: 5px 0px; font-family: " courier new" !important; font-size: 12px !important;"><pre style="margin-bottom: 0px; white-space: pre-wrap; font-family: " courier new" !important; font-size: 12px !important;">$ <span style="color: rgb(0, 0, 255); font-size: 12px !important; line-height: 1.5 !important;">sudo</span> <span style="color: rgb(0, 0, 255); font-size: 12px !important; line-height: 1.5 !important;">yum</span> <span style="color: rgb(0, 0, 0); font-size: 12px !important; line-height: 1.5 !important;">remove docker  docker</span>-<span style="color: rgb(0, 0, 0); font-size: 12px !important; line-height: 1.5 !important;">common docker</span>-<span style="color: rgb(0, 0, 0); font-size: 12px !important; line-height: 1.5 !important;">selinux docker</span>-engine</pre></div><p><span style="font-size: 16px;">4、安装需要的软件包， </span><span style="font-size: 16px;">yum-util 提供yum-config-manager功能，</span><span class="pln" style="font-size: 16px;"><span class="com">另外两个是devicemapper驱动依赖的</span></span></p><div class="cnblogs_code" style="background-color: rgb(245, 245, 245); border: 1px solid rgb(204, 204, 204); padding: 5px; overflow: auto; margin: 5px 0px; font-family: " courier new" !important; font-size: 12px !important;"><pre style="margin-bottom: 0px; white-space: pre-wrap; font-family: " courier new" !important; font-size: 12px !important;">$ <span style="color: rgb(0, 0, 255); font-size: 12px !important; line-height: 1.5 !important;">sudo</span> <span style="color: rgb(0, 0, 255); font-size: 12px !important; line-height: 1.5 !important;">yum</span> <span style="color: rgb(0, 0, 255); font-size: 12px !important; line-height: 1.5 !important;">install</span> -y <span style="color: rgb(0, 0, 255); font-size: 12px !important; line-height: 1.5 !important;">yum</span>-utils device-mapper-persistent-data lvm2</pre></div><p>5、设置yum源</p><div class="cnblogs_code" style="background-color: rgb(245, 245, 245); border: 1px solid rgb(204, 204, 204); padding: 5px; overflow: auto; margin: 5px 0px; font-family: " courier new" !important; font-size: 12px !important;"><pre style="margin-bottom: 0px; white-space: pre-wrap; font-family: " courier new" !important; font-size: 12px !important;"><span style="color: rgb(0, 0, 255); font-size: 12px !important; line-height: 1.5 !important;"><span style="color: rgb(0, 0, 0); font-size: 12px !important; line-height: 1.5 !important;">$</span> sudo</span> <span style="color: rgb(0, 0, 255); font-size: 12px !important; line-height: 1.5 !important;">yum</span>-config-manager --add-repo https:<span style="color: rgb(0, 128, 0); font-size: 12px !important; line-height: 1.5 !important;">//</span><span style="color: rgb(0, 128, 0); font-size: 12px !important; line-height: 1.5 !important;">download.docker.com/linux/centos/docker-ce.repo</span></pre></div><p> <a href="https://images2017.cnblogs.com/blog/1107037/201801/1107037-20180128094640209-1433322312.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://images2017.cnblogs.com/blog/1107037/201801/1107037-20180128094640209-1433322312.png" class="lazyload"></a></p><p>6、可以查看所有仓库中所有docker版本，并选择特定版本安装</p><div class="cnblogs_code" style="background-color: rgb(245, 245, 245); border: 1px solid rgb(204, 204, 204); padding: 5px; overflow: auto; margin: 5px 0px; font-family: " courier new" !important; font-size: 12px !important;"><pre style="margin-bottom: 0px; white-space: pre-wrap; font-family: " courier new" !important; font-size: 12px !important;">$ <span style="color: rgb(0, 0, 255); font-size: 12px !important; line-height: 1.5 !important;">yum</span> list docker-ce --showduplicates | <span style="color: rgb(0, 0, 255); font-size: 12px !important; line-height: 1.5 !important;">sort</span> -r</pre></div><p><a href="https://images2017.cnblogs.com/blog/1107037/201801/1107037-20180128095038600-772177322.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://images2017.cnblogs.com/blog/1107037/201801/1107037-20180128095038600-772177322.png" class="lazyload"></a></p><p>7、安装docker</p><div class="cnblogs_code" style="background-color: rgb(245, 245, 245); border: 1px solid rgb(204, 204, 204); padding: 5px; overflow: auto; margin: 5px 0px; font-family: " courier new" !important; font-size: 12px !important;"><pre style="margin-bottom: 0px; white-space: pre-wrap; font-family: " courier new" !important; font-size: 12px !important;">$ <span style="color: rgb(0, 0, 255); font-size: 12px !important; line-height: 1.5 !important;">sudo</span> <span style="color: rgb(0, 0, 255); font-size: 12px !important; line-height: 1.5 !important;">yum</span> <span style="color: rgb(0, 0, 255); font-size: 12px !important; line-height: 1.5 !important;">install</span> docker-ce  <span style="color: rgb(0, 128, 0); font-size: 12px !important; line-height: 1.5 !important;">#由于repo中默认只开启stable仓库，故这里安装的是最新稳定版17.12.0</span> <span style="color: rgb(0, 0, 0); font-size: 12px !important; line-height: 1.5 !important;">$</span> <span style="color: rgb(0, 0, 255); font-size: 12px !important; line-height: 1.5 !important;">sudo</span> <span style="color: rgb(0, 0, 255); font-size: 12px !important; line-height: 1.5 !important;">yum</span> <span style="color: rgb(0, 0, 255); font-size: 12px !important; line-height: 1.5 !important;">install</span> <fqpn>  <span style="color: rgb(0, 128, 0); font-size: 12px !important; line-height: 1.5 !important;"># 例如：sudo yum install docker-ce-17.12.0.ce</span></fqpn></pre></div><p> <a href="https://images2017.cnblogs.com/blog/1107037/201801/1107037-20180128103448287-493824081.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://images2017.cnblogs.com/blog/1107037/201801/1107037-20180128103448287-493824081.png" class="lazyload"></a></p><p><span style="font-size: 16px;">8、启动并加入开机启动</span></p><div class="cnblogs_code" style="background-color: rgb(245, 245, 245); border: 1px solid rgb(204, 204, 204); padding: 5px; overflow: auto; margin: 5px 0px; font-family: " courier new" !important; font-size: 12px !important;"><pre style="margin-bottom: 0px; white-space: pre-wrap; font-family: " courier new" !important; font-size: 12px !important;">$ <span style="color: rgb(0, 0, 255); font-size: 12px !important; line-height: 1.5 !important;">sudo</span> <span style="color: rgb(0, 0, 0); font-size: 12px !important; line-height: 1.5 !important;">systemctl start docker$</span> <span style="color: rgb(0, 0, 255); font-size: 12px !important; line-height: 1.5 !important;">sudo</span> systemctl enable docker</pre></div><p><span style="font-size: 16px;">9、验证安装是否成功(有client和service两部分表示docker安装启动都成功了)</span></p><div class="cnblogs_code" style="background-color: rgb(245, 245, 245); border: 1px solid rgb(204, 204, 204); padding: 5px; overflow: auto; margin: 5px 0px; font-family: " courier new" !important; font-size: 12px !important;"><pre style="margin-bottom: 0px; white-space: pre-wrap; font-family: " courier new" !important; font-size: 12px !important;">$ <span style="color: rgb(0, 0, 255); font-size: 12px !important; line-height: 1.5 !important;">docker</span> version</pre></div><p><a href="https://images2017.cnblogs.com/blog/1107037/201801/1107037-20180128104046600-1053107877.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://images2017.cnblogs.com/blog/1107037/201801/1107037-20180128104046600-1053107877.png" class="lazyload"></a></p><h2 id="二、问题"><a href="#二、问题" class="headerlink" title="二、问题"></a>二、问题</h2><p><span style="font-size: 16px;">1、因为之前已经安装过旧版本的docker，在安装的时候报错如下：</span></p><div class="cnblogs_code" style="background-color: rgb(245, 245, 245); border: 1px solid rgb(204, 204, 204); padding: 5px; overflow: auto; margin: 5px 0px; font-family: " courier new" !important; font-size: 12px !important;"><pre style="margin-bottom: 0px; white-space: pre-wrap; font-family: " courier new" !important; font-size: 12px !important;"><span style="color: rgb(0, 0, 0); font-size: 12px !important; line-height: 1.5 !important;">Transaction check error:</span> <span style="color: rgb(0, 0, 255); font-size: 12px !important; line-height: 1.5 !important;">file</span> /usr/bin/docker from <span style="color: rgb(0, 0, 255); font-size: 12px !important; line-height: 1.5 !important;">install</span> of docker-ce-<span style="color: rgb(128, 0, 128); font-size: 12px !important; line-height: 1.5 !important;">17.12</span>.<span style="color: rgb(128, 0, 128); font-size: 12px !important; line-height: 1.5 !important;">0</span>.ce-<span style="color: rgb(128, 0, 128); font-size: 12px !important; line-height: 1.5 !important;">1</span>.el7.centos.x86_64 conflicts with <span style="color: rgb(0, 0, 255); font-size: 12px !important; line-height: 1.5 !important;">file</span> from package <span style="font-size: 15px; color: rgb(255, 0, 0); line-height: 1.5 !important;">**docker-common-2:1.12.6-68.gitec8512b.el7.centos.x86_64**</span> <span style="color: rgb(0, 0, 255); font-size: 12px !important; line-height: 1.5 !important;">file</span> /usr/bin/docker-containerd from <span style="color: rgb(0, 0, 255); font-size: 12px !important; line-height: 1.5 !important;">install</span> of docker-ce-<span style="color: rgb(128, 0, 128); font-size: 12px !important; line-height: 1.5 !important;">17.12</span>.<span style="color: rgb(128, 0, 128); font-size: 12px !important; line-height: 1.5 !important;">0</span>.ce-<span style="color: rgb(128, 0, 128); font-size: 12px !important; line-height: 1.5 !important;">1</span>.el7.centos.x86_64 conflicts with <span style="color: rgb(0, 0, 255); font-size: 12px !important; line-height: 1.5 !important;">file</span> from package <span style="font-size: 15px; color: rgb(255, 0, 0); line-height: 1.5 !important;">**docker-common-2:1.12.6-68.gitec8512b.el7.centos.x86_64**</span> <span style="color: rgb(0, 0, 255); font-size: 12px !important; line-height: 1.5 !important;">file</span> /usr/bin/docker-containerd-shim from <span style="color: rgb(0, 0, 255); font-size: 12px !important; line-height: 1.5 !important;">install</span> of docker-ce-<span style="color: rgb(128, 0, 128); font-size: 12px !important; line-height: 1.5 !important;">17.12</span>.<span style="color: rgb(128, 0, 128); font-size: 12px !important; line-height: 1.5 !important;">0</span>.ce-<span style="color: rgb(128, 0, 128); font-size: 12px !important; line-height: 1.5 !important;">1</span>.el7.centos.x86_64 conflicts with <span style="color: rgb(0, 0, 255); font-size: 12px !important; line-height: 1.5 !important;">file</span> from package <span style="font-size: 15px; color: rgb(255, 0, 0); line-height: 1.5 !important;">**docker-common-2:1.12.6-68.gitec8512b.el7.centos.x86_64**</span> <span style="color: rgb(0, 0, 255); font-size: 12px !important; line-height: 1.5 !important;">file</span> /usr/bin/dockerd from <span style="color: rgb(0, 0, 255); font-size: 12px !important; line-height: 1.5 !important;">install</span> of docker-ce-<span style="color: rgb(128, 0, 128); font-size: 12px !important; line-height: 1.5 !important;">17.12</span>.<span style="color: rgb(128, 0, 128); font-size: 12px !important; line-height: 1.5 !important;">0</span>.ce-<span style="color: rgb(128, 0, 128); font-size: 12px !important; line-height: 1.5 !important;">1</span>.el7.centos.x86_64 conflicts with <span style="color: rgb(0, 0, 255); font-size: 12px !important; line-height: 1.5 !important;">file</span> from package **<span style="font-size: 15px; color: rgb(255, 0, 0); line-height: 1.5 !important;">docker-common-2:1.12.6-68.gitec8512b.el7.centos.x86_64</span>**</pre></div><p><span style="font-size: 16px;">2、卸载旧版本的包</span></p><div class="cnblogs_code" style="background-color: rgb(245, 245, 245); border: 1px solid rgb(204, 204, 204); padding: 5px; overflow: auto; margin: 5px 0px; font-family: " courier new" !important; font-size: 12px !important;"><pre style="margin-bottom: 0px; white-space: pre-wrap; font-family: " courier new" !important; font-size: 12px !important;">$ <span style="color: rgb(0, 0, 255); font-size: 12px !important; line-height: 1.5 !important;">sudo</span> <span style="color: rgb(0, 0, 255); font-size: 12px !important; line-height: 1.5 !important;">yum</span> erase docker-common-<span style="color: rgb(128, 0, 128); font-size: 12px !important; line-height: 1.5 !important;">2</span>:<span style="color: rgb(128, 0, 128); font-size: 12px !important; line-height: 1.5 !important;">1.12</span>.<span style="color: rgb(128, 0, 128); font-size: 12px !important; line-height: 1.5 !important;">6</span>-<span style="color: rgb(128, 0, 128); font-size: 12px !important; line-height: 1.5 !important;">68</span>.gitec8512b.el7.centos.x86_64</pre></div><p><a href="https://images2017.cnblogs.com/blog/1107037/201801/1107037-20180128103145287-536100760.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://images2017.cnblogs.com/blog/1107037/201801/1107037-20180128103145287-536100760.png" class="lazyload"></a></p><p><span style="font-size: 16px;">3、再次安装docker</span></p><div class="cnblogs_code" style="background-color: rgb(245, 245, 245); border: 1px solid rgb(204, 204, 204); padding: 5px; overflow: auto; margin: 5px 0px; font-family: " courier new" !important; font-size: 12px !important;"><pre style="margin-bottom: 0px; white-space: pre-wrap; font-family: " courier new" !important; font-size: 12px !important;">$ <span style="color: rgb(0, 0, 255); font-size: 12px !important; line-height: 1.5 !important;">sudo</span> <span style="color: rgb(0, 0, 255); font-size: 12px !important; line-height: 1.5 !important;">yum</span> <span style="color: rgb(0, 0, 255); font-size: 12px !important; line-height: 1.5 !important;">install</span> docker-ce</pre></div><div id="comment_body_3991824" class="blog_comment_body" style="word-wrap: break-word; overflow: hidden;">4、推荐一种删除docker的方法：  <div class="cnblogs_Highlighter sh-gutter"><div id="highlighter_844319" class="syntaxhighlighter  csharp" style="width: 1613px; margin: 1em 0px !important; position: relative !important; overflow: auto !important; font-size: 1em !important; background-color: rgb(255, 255, 255) !important;"><table border="0" cellpadding="0" cellspacing="0" style="width: 1613px; border-radius: 0px !important; background-image: none !important; background-position: initial !important; background-size: initial !important; background-repeat: initial !important; background-attachment: initial !important; background-origin: initial !important; background-clip: initial !important; border: 0px !important; bottom: auto !important; float: none !important; height: auto !important; left: auto !important; line-height: 1.1em !important; margin: 0px !important; outline-style: initial !important; outline-width: 0px !important; overflow: visible !important; padding: 0px !important; position: static !important; right: auto !important; top: auto !important; vertical-align: baseline !important; box-sizing: content-box !important; font-family: Consolas, " bitstream vera sans mono", "courier new", courier, monospace !important; font-size: 12px min-height: auto !important;"><tbody style="border-radius: 0px !important; background: none !important; border: 0px !important; bottom: auto !important; float: none !important; height: auto !important; left: auto !important; line-height: 1.1em !important; margin: 0px !important; outline-style: initial !important; outline-width: 0px !important; overflow: visible !important; padding: 0px !important; position: static !important; right: auto !important; top: auto !important; vertical-align: baseline !important; width: auto !important; box-sizing: content-box !important; font-size: 12px !important; min-height: auto !important;"><tr style="border-radius: 0px !important; background: none !important; border: 0px !important; bottom: auto !important; float: none !important; height: auto !important; left: auto !important; line-height: 1.1em !important; margin: 0px !important; outline-style: initial !important; outline-width: 0px !important; overflow: visible !important; padding: 0px !important; position: static !important; right: auto !important; top: auto !important; vertical-align: baseline !important; width: auto !important; box-sizing: content-box !important; font-size: 12px !important; min-height: auto !important;"><td class="gutter" style="border-radius: 0px !important; background: none !important; border: 0px !important; bottom: auto !important; float: none !important; height: auto !important; left: auto !important; line-height: 1.1em !important; margin: 0px !important; outline-style: initial !important; outline-width: 0px !important; overflow: visible !important; position: static !important; right: auto !important; top: auto !important; vertical-align: baseline !important; width: 35px !important; box-sizing: content-box !important; font-size: 12px !important; min-height: auto !important; color: rgb(175, 175, 175) !important;"><div class="line number1 index0 alt2" style="border-radius: 0px !important; background: none rgb(244, 244, 244) !important; border-width: 0px 2px 0px 0px !important; border-top-style: initial !important; border-right-style: solid !important; border-bottom-style: initial !important; border-left-style: initial !important; border-top-color: initial !important; border-right-color: rgb(108, 226, 108) !important; border-bottom-color: initial !important; border-left-color: initial !important; border-image: initial !important; bottom: auto !important; float: none !important; height: auto !important; left: auto !important; line-height: 1.8em !important; margin: 0px !important; outline-style: initial !important; outline-width: 0px !important; overflow: visible !important; padding: 0px 0.5em !important; position: static !important; right: auto !important; text-align: right !important; top: auto !important; vertical-align: baseline !important; width: auto !important; box-sizing: content-box !important; font-size: 12px !important; min-height: auto !important; white-space: nowrap !important;">1</div><div class="line number2 index1 alt1" style="border-radius: 0px !important; background-image: none !important; background-position: initial !important; background-size: initial !important; background-repeat: initial !important; background-attachment: initial !important; background-origin: initial !important; background-clip: initial !important; border-width: 0px 2px 0px 0px !important; border-top-style: initial !important; border-right-style: solid !important; border-bottom-style: initial !important; border-left-style: initial !important; border-top-color: initial !important; border-right-color: rgb(108, 226, 108) !important; border-bottom-color: initial !important; border-left-color: initial !important; border-image: initial !important; bottom: auto !important; float: none !important; height: auto !important; left: auto !important; line-height: 1.8em !important; margin: 0px !important; outline-style: initial !important; outline-width: 0px !important; overflow: visible !important; padding: 0px 0.5em !important; position: static !important; right: auto !important; text-align: right !important; top: auto !important; vertical-align: baseline !important; width: auto !important; box-sizing: content-box !important; font-size: 12px !important; min-height: auto !important; white-space: nowrap !important;">2</div><div class="line number3 index2 alt2" style="border-radius: 0px !important; background: none rgb(244, 244, 244) !important; border-width: 0px 2px 0px 0px !important; border-top-style: initial !important; border-right-style: solid !important; border-bottom-style: initial !important; border-left-style: initial !important; border-top-color: initial !important; border-right-color: rgb(108, 226, 108) !important; border-bottom-color: initial !important; border-left-color: initial !important; border-image: initial !important; bottom: auto !important; float: none !important; height: auto !important; left: auto !important; line-height: 1.8em !important; margin: 0px !important; outline-style: initial !important; outline-width: 0px !important; overflow: visible !important; padding: 0px 0.5em !important; position: static !important; right: auto !important; text-align: right !important; top: auto !important; vertical-align: baseline !important; width: auto !important; box-sizing: content-box !important; font-size: 12px !important; min-height: auto !important; white-space: nowrap !important;">3</div><div class="line number4 index3 alt1" style="border-radius: 0px !important; background-image: none !important; background-position: initial !important; background-size: initial !important; background-repeat: initial !important; background-attachment: initial !important; background-origin: initial !important; background-clip: initial !important; border-width: 0px 2px 0px 0px !important; border-top-style: initial !important; border-right-style: solid !important; border-bottom-style: initial !important; border-left-style: initial !important; border-top-color: initial !important; border-right-color: rgb(108, 226, 108) !important; border-bottom-color: initial !important; border-left-color: initial !important; border-image: initial !important; bottom: auto !important; float: none !important; height: auto !important; left: auto !important; line-height: 1.8em !important; margin: 0px !important; outline-style: initial !important; outline-width: 0px !important; overflow: visible !important; padding: 0px 0.5em !important; position: static !important; right: auto !important; text-align: right !important; top: auto !important; vertical-align: baseline !important; width: auto !important; box-sizing: content-box !important; font-size: 12px !important; min-height: auto !important; white-space: nowrap !important;">4</div></td><td class="code" style="border-radius: 0px !important; background: none !important; border: 0px !important; bottom: auto !important; float: none !important; height: auto !important; left: auto !important; line-height: 1.1em !important; margin: 0px !important; outline-style: initial !important; outline-width: 0px !important; overflow: visible !important; position: static !important; right: auto !important; top: auto !important; vertical-align: baseline !important; width: auto !important; box-sizing: content-box !important; font-size: 12px !important; min-height: auto !important;"><div class="container" style="border-radius: 0px !important; background: none !important; border: 0px !important; bottom: auto !important; float: none !important; height: auto !important; left: auto !important; line-height: 1.1em !important; margin: 0px !important; outline-style: initial !important; outline-width: 0px !important; overflow: visible !important; padding: 0px !important; position: relative !important; right: auto !important; top: auto !important; vertical-align: baseline !important; box-sizing: content-box !important; font-size: 12px !important; min-height: auto !important;"><div class="line number1 index0 alt2" style="border-radius: 0px !important; background: none rgb(244, 244, 244) !important; border: 0px !important; bottom: auto !important; float: none !important; height: auto !important; left: auto !important; line-height: 1.8em !important; margin: 0px !important; outline-style: initial !important; outline-width: 0px !important; overflow: visible !important; padding: 0px 1em !important; position: static !important; right: auto !important; top: auto !important; vertical-align: baseline !important; width: auto !important; box-sizing: content-box !important; font-size: 12px !important; min-height: auto !important; white-space: nowrap !important;">`yum remove docker docker-common docker-selinux docker-engine -y`</div><div class="line number2 index1 alt1" style="border-radius: 0px !important; background-image: none !important; background-position: initial !important; background-size: initial !important; background-repeat: initial !important; background-attachment: initial !important; background-origin: initial !important; background-clip: initial !important; border: 0px !important; bottom: auto !important; float: none !important; height: auto !important; left: auto !important; line-height: 1.8em !important; margin: 0px !important; outline-style: initial !important; outline-width: 0px !important; overflow: visible !important; padding: 0px 1em !important; position: static !important; right: auto !important; top: auto !important; vertical-align: baseline !important; width: auto !important; box-sizing: content-box !important; font-size: 12px !important; min-height: auto !important; white-space: nowrap !important;">`/etc/systemd -name ``'*docker*'` `-exec rm -f {} ;`</div><div class="line number3 index2 alt2" style="border-radius: 0px !important; background: none rgb(244, 244, 244) !important; border: 0px !important; bottom: auto !important; float: none !important; height: auto !important; left: auto !important; line-height: 1.8em !important; margin: 0px !important; outline-style: initial !important; outline-width: 0px !important; overflow: visible !important; padding: 0px 1em !important; position: static !important; right: auto !important; top: auto !important; vertical-align: baseline !important; width: auto !important; box-sizing: content-box !important; font-size: 12px !important; min-height: auto !important; white-space: nowrap !important;">`find /etc/systemd -name ``'*docker*'` `-exec rm -f {} \;`</div><div class="line number4 index3 alt1" style="border-radius: 0px !important; background-image: none !important; background-position: initial !important; background-size: initial !important; background-repeat: initial !important; background-attachment: initial !important; background-origin: initial !important; background-clip: initial !important; border: 0px !important; bottom: auto !important; float: none !important; height: auto !important; left: auto !important; line-height: 1.8em !important; margin: 0px !important; outline-style: initial !important; outline-width: 0px !important; overflow: visible !important; padding: 0px 1em !important; position: static !important; right: auto !important; top: auto !important; vertical-align: baseline !important; width: auto !important; box-sizing: content-box !important; font-size: 12px !important; min-height: auto !important; white-space: nowrap !important;">`find /lib/systemd -name ``'*docker*'` `-exec rm -f {} \;`</div></div></td></tr></tbody></table></div></div></div></div></body></html>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
