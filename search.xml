<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>博客迁移之痛</title>
      <link href="/2020/02/26/%E5%8D%9A%E5%AE%A2%E8%BF%81%E7%A7%BB%E4%B9%8B%E7%97%9B/"/>
      <url>/2020/02/26/%E5%8D%9A%E5%AE%A2%E8%BF%81%E7%A7%BB%E4%B9%8B%E7%97%9B/</url>
      
        <content type="html"><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script></head><body><p>今天对博客进行的迁移，导致大量博文的丢失，我的心好卵痛，是这样的</p><a id="more"></a><h3 id="博客迁移"><a href="#博客迁移" class="headerlink" title="博客迁移"></a>博客迁移</h3><p>今天对博客进行的迁移，导致大量博文的丢失，我的心好卵痛，是这样的</p><p><a href="https://i.imgur.com/wc1JaEY.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.imgur.com/wc1JaEY.png" class="lazyload"></a></p><p>特别是以前的博文应为不是Markdown格式导致和现在的博客系统不兼容，在博文的图片使用的是本地服务器存储，图片丢失也导致不得不放弃一部分文章，先让我哭一会。</p><p><a href="https://i.imgur.com/rxEtTwb.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.imgur.com/rxEtTwb.jpg" class="lazyload"></a></p><p>不过值得高兴的是迁移总算结束了，速度快乐很多呦，你不要试试吗！</p><p><a href="https://i.imgur.com/ynQlEoT.gif" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.imgur.com/ynQlEoT.gif" class="lazyload"></a></p></body></html>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 其他 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu18.04修改swap分区大小</title>
      <link href="/2020/02/26/Ubuntu18-04%E4%BF%AE%E6%94%B9swap%E5%88%86%E5%8C%BA%E5%A4%A7%E5%B0%8F/"/>
      <url>/2020/02/26/Ubuntu18-04%E4%BF%AE%E6%94%B9swap%E5%88%86%E5%8C%BA%E5%A4%A7%E5%B0%8F/</url>
      
        <content type="html"><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script></head><body><h2 id="查看初始状态"><a href="#查看初始状态" class="headerlink" title="查看初始状态"></a>查看初始状态</h2><p>查看原先swap大小</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">root@gpu-2:~# free -h</span><br><span class="line">              总计         已用        空闲      共享    缓冲/缓存    可用</span><br><span class="line">内存：         62G        417M         38G        3.0M         23G         61G</span><br><span class="line">交换：        2.0G          0B        2.0G</span><br><span class="line">root@gpu-2:~#</span><br></pre></td></tr></tbody></table></figure></div><p>原先swap文件位置</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">root@gpu-2:~# swapon  -s</span><br><span class="line">文件名             类型      大小       已用  权限</span><br><span class="line">/swapfile1         file      12582908    0   -2</span><br><span class="line">root@gpu-2:~#</span><br></pre></td></tr></tbody></table></figure></div><h2 id="创建一个新的swap文件"><a href="#创建一个新的swap文件" class="headerlink" title="创建一个新的swap文件"></a>创建一个新的swap文件</h2><p>一般swap分区要大于或等于物理内存(1-1.5倍)，最大一般有20G即可，我这里创建12G：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">root@gpu-2:~# cd /</span><br><span class="line">root@gpu-2:/# dd if=/dev/zero of=/swapfile1 bs=1G count=12</span><br><span class="line">记录了12+0 的读入</span><br><span class="line">记录了12+0 的写出</span><br><span class="line">12884901888 bytes (13 GB, 12 GiB) copied, 17.1497 s, 751 MB/s</span><br><span class="line">root@gpu-2:/# ll</span><br><span class="line">总用量 14680188</span><br><span class="line">drwxr-xr-x  25 root root        4096 4月  10 17:22 ./</span><br><span class="line">drwxr-xr-x  25 root root        4096 4月  10 17:22 ../</span><br><span class="line">drwxr-xr-x   2 root root        4096 4月  10 06:59 bin/</span><br><span class="line">drwxr-xr-x   4 root root        4096 4月  10 06:59 boot/</span><br><span class="line">drwxrwxr-x   2 root root        4096 3月  25 20:44 cdrom/</span><br><span class="line">drwxr-xr-x   5 netc netc          58 4月   9 14:01 data/</span><br><span class="line">drwxr-xr-x  19 root root        4340 3月  29 07:50 dev/</span><br><span class="line">drwxr-xr-x 127 root root       12288 4月  10 06:59 etc/</span><br><span class="line">drwxr-xr-x   3 root root        4096 3月  25 20:45 home/</span><br><span class="line">lrwxrwxrwx   1 root root          33 4月   3 06:24 initrd.img -> boot/initrd.img-4.18.0-17-generic</span><br><span class="line">lrwxrwxrwx   1 root root          33 4月   4 06:31 initrd.img.old -> boot/initrd.img-4.18.0-16-generic</span><br><span class="line">drwxr-xr-x  21 root root        4096 3月  25 20:56 lib/</span><br><span class="line">drwxr-xr-x   2 root root        4096 2月  10 08:12 lib64/</span><br><span class="line">drwx------   2 root root       16384 3月  25 20:41 lost+found/</span><br><span class="line">drwxr-xr-x   2 root root        4096 2月  10 08:12 media/</span><br><span class="line">drwxr-xr-x   2 root root        4096 2月  10 08:12 mnt/</span><br><span class="line">drwxr-xr-x   2 root root        4096 2月  10 08:12 opt/</span><br><span class="line">dr-xr-xr-x 323 root root           0 3月  26 10:39 proc/</span><br><span class="line">drwx------   8 root root        4096 3月  26 11:22 root/</span><br><span class="line">drwxr-xr-x  31 root root        1040 4月  10 17:20 run/</span><br><span class="line">drwxr-xr-x   2 root root       12288 4月  10 06:58 sbin/</span><br><span class="line">drwxr-xr-x  12 root root        4096 3月  26 08:54 snap/</span><br><span class="line">drwxr-xr-x   2 root root        4096 2月  10 08:12 srv/</span><br><span class="line">-rw-------   1 root root  2147483648 3月  25 20:41 swapfile     # 之前的swap文件</span><br><span class="line">-rw-r--r--   1 root root 12884901888 4月  10 17:22 swapfile1    # 新创建的swap文件</span><br><span class="line">dr-xr-xr-x  13 root root           0 4月  10 17:11 sys/</span><br><span class="line">drwxrwxrwt  10 root root       12288 4月  10 17:23 tmp/</span><br><span class="line">drwxr-xr-x  10 root root        4096 2月  10 08:12 usr/</span><br><span class="line">drwxr-xr-x  14 root root        4096 2月  10 08:20 var/</span><br><span class="line">lrwxrwxrwx   1 root root          30 4月   3 06:24 vmlinuz -> boot/vmlinuz-4.18.0-17-generic</span><br><span class="line">lrwxrwxrwx   1 root root          30 4月   4 06:31 vmlinuz.old -> boot/vmlinuz-4.18.0-16-generic</span><br><span class="line">root@gpu-2:/#</span><br></pre></td></tr></tbody></table></figure></div><h2 id="创建swap文件系统"><a href="#创建swap文件系统" class="headerlink" title="创建swap文件系统"></a>创建swap文件系统</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">root@gpu-2:/# mkswap -f swapfile1</span><br><span class="line">mkswap: swapfile1：不安全的权限 0644，建议使用 0600。</span><br><span class="line">正在设置交换空间版本 1，大小 = 12 GiB (12884897792  个字节)</span><br><span class="line">无标签， UUID=3779f693-8356-42e9-8a2c-2ab51f12654a</span><br><span class="line">root@gpu-2:/# chmod 0600 swapfile1</span><br><span class="line">root@gpu-2:/# ll</span><br><span class="line">总用量 14680188</span><br><span class="line">drwxr-xr-x  25 root root        4096 4月  10 17:22 ./</span><br><span class="line">drwxr-xr-x  25 root root        4096 4月  10 17:22 ../</span><br><span class="line">drwxr-xr-x   2 root root        4096 4月  10 06:59 bin/</span><br><span class="line">drwxr-xr-x   4 root root        4096 4月  10 06:59 boot/</span><br><span class="line">drwxrwxr-x   2 root root        4096 3月  25 20:44 cdrom/</span><br><span class="line">drwxr-xr-x   5 netc netc          58 4月   9 14:01 data/</span><br><span class="line">drwxr-xr-x  19 root root        4340 3月  29 07:50 dev/</span><br><span class="line">drwxr-xr-x 127 root root       12288 4月  10 06:59 etc/</span><br><span class="line">drwxr-xr-x   3 root root        4096 3月  25 20:45 home/</span><br><span class="line">lrwxrwxrwx   1 root root          33 4月   3 06:24 initrd.img -> boot/initrd.img-4.18.0-17-generic</span><br><span class="line">lrwxrwxrwx   1 root root          33 4月   4 06:31 initrd.img.old -> boot/initrd.img-4.18.0-16-generic</span><br><span class="line">drwxr-xr-x  21 root root        4096 3月  25 20:56 lib/</span><br><span class="line">drwxr-xr-x   2 root root        4096 2月  10 08:12 lib64/</span><br><span class="line">drwx------   2 root root       16384 3月  25 20:41 lost+found/</span><br><span class="line">drwxr-xr-x   2 root root        4096 2月  10 08:12 media/</span><br><span class="line">drwxr-xr-x   2 root root        4096 2月  10 08:12 mnt/</span><br><span class="line">drwxr-xr-x   2 root root        4096 2月  10 08:12 opt/</span><br><span class="line">dr-xr-xr-x 323 root root           0 3月  26 10:39 proc/</span><br><span class="line">drwx------   8 root root        4096 3月  26 11:22 root/</span><br><span class="line">drwxr-xr-x  31 root root        1040 4月  10 17:20 run/</span><br><span class="line">drwxr-xr-x   2 root root       12288 4月  10 06:58 sbin/</span><br><span class="line">drwxr-xr-x  12 root root        4096 3月  26 08:54 snap/</span><br><span class="line">drwxr-xr-x   2 root root        4096 2月  10 08:12 srv/</span><br><span class="line">-rw-------   1 root root  2147483648 3月  25 20:41 swapfile</span><br><span class="line">-rw-------   1 root root 12884901888 4月  10 17:22 swapfile1</span><br><span class="line">dr-xr-xr-x  13 root root           0 4月  10 17:11 sys/</span><br><span class="line">drwxrwxrwt  10 root root       12288 4月  10 17:23 tmp/</span><br><span class="line">drwxr-xr-x  10 root root        4096 2月  10 08:12 usr/</span><br><span class="line">drwxr-xr-x  14 root root        4096 2月  10 08:20 var/</span><br><span class="line">lrwxrwxrwx   1 root root          30 4月   3 06:24 vmlinuz -> boot/vmlinuz-4.18.0-17-generic</span><br><span class="line">lrwxrwxrwx   1 root root          30 4月   4 06:31 vmlinuz.old -> boot/vmlinuz-4.18.0-16-generic</span><br><span class="line">root@gpu-2:/#</span><br></pre></td></tr></tbody></table></figure></div><h2 id="开启新的swap"><a href="#开启新的swap" class="headerlink" title="开启新的swap"></a>开启新的swap</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">root@gpu-2:/# swapoff /swapfile</span><br><span class="line">root@gpu-2:/# free -h</span><br><span class="line">              总计         已用        空闲      共享    缓冲/缓存    可用</span><br><span class="line">内存：         62G        417M         38G        3.0M         23G         61G</span><br><span class="line">交换：          0B          0B          0B</span><br><span class="line">root@gpu-2:/# swapon /swapfile1</span><br><span class="line">root@gpu-2:/# free -h</span><br><span class="line">              总计         已用        空闲      共享    缓冲/缓存    可用</span><br><span class="line">内存：         62G        420M         38G        3.0M         23G         61G</span><br><span class="line">交换：         11G          0B         11G</span><br><span class="line">root@gpu-2:/#</span><br></pre></td></tr></tbody></table></figure></div><h2 id="设置开机启动"><a href="#设置开机启动" class="headerlink" title="设置开机启动"></a>设置开机启动</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">root@gpu-2:/# vim /etc/fstab</span><br><span class="line">/swapfile                                 none            swap    sw              0       0</span><br><span class="line">改为</span><br><span class="line">/swapfile1                                none            swap    sw              0       0</span><br><span class="line">root@gpu-2:/#</span><br></pre></td></tr></tbody></table></figure></div><h2 id="重启"><a href="#重启" class="headerlink" title="重启"></a>重启</h2><p>重启，然后查看是否有问题</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shutdown -r now</span><br></pre></td></tr></tbody></table></figure></div><p>可以先在虚拟机上测试，如果成功的话，再在物理机操作，如果都没问题的话，可以删掉旧的swap文件</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm -f /swapfile</span><br></pre></td></tr></tbody></table></figure></div></body></html>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 操作系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PostgreSQL中jsonb数据格式操作</title>
      <link href="/2020/02/11/PostgreSQL%E4%B8%ADjsonb%E6%95%B0%E6%8D%AE%E6%A0%BC%E5%BC%8F%E6%93%8D%E4%BD%9C/"/>
      <url>/2020/02/11/PostgreSQL%E4%B8%ADjsonb%E6%95%B0%E6%8D%AE%E6%A0%BC%E5%BC%8F%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script></head><body><h2 id="建表SQL"><a href="#建表SQL" class="headerlink" title="建表SQL"></a>建表SQL</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE "public"."contents_review_log" (</span><br><span class="line">  "id" varchar(128) COLLATE "pg_catalog"."default" NOT NULL,</span><br><span class="line">  "app_id" int4 NOT NULL,</span><br><span class="line">  "open_id" varchar(128) COLLATE "pg_catalog"."default" NOT NULL,</span><br><span class="line">  "platform_id" int4,</span><br><span class="line">  "send_role_id" varchar(100) COLLATE "pg_catalog"."default" NOT NULL,</span><br><span class="line">  "receive_role_id" varchar(100) COLLATE "pg_catalog"."default",</span><br><span class="line">  "send_server_id" int4 DEFAULT 1,</span><br><span class="line">  "receive_server_id" int4,</span><br><span class="line">  "send_role_name" varchar(255) COLLATE "pg_catalog"."default",</span><br><span class="line">  "receive_role_name" varchar(255) COLLATE "pg_catalog"."default",</span><br><span class="line">  "send_vip_level" int4 DEFAULT 0,</span><br><span class="line">  "receive_vip_level" int4 DEFAULT 0,</span><br><span class="line">  "send_role_level" int4,</span><br><span class="line">  "receive_role_level" int4,</span><br><span class="line">  "chat_type" varchar(25) COLLATE "pg_catalog"."default",</span><br><span class="line">  "suggestion" varchar(25) COLLATE "pg_catalog"."default",</span><br><span class="line">  "detail" jsonb DEFAULT '{}'::jsonb,</span><br><span class="line">  "chat_content" varchar(2400) COLLATE "pg_catalog"."default" NOT NULL,</span><br><span class="line">  "event_time" timestamp(6) NOT NULL DEFAULT (now() + '08:00:00'::interval),</span><br><span class="line">  "creation_time" timestamp(6) DEFAULT (now() + '08:00:00'::interval),</span><br><span class="line">  "is_review" int2 NOT NULL DEFAULT 0,</span><br><span class="line">  "generate_id" varchar(128) COLLATE "pg_catalog"."default",</span><br><span class="line">  CONSTRAINT "review_contents_violation_pkey" PRIMARY KEY ("id")</span><br><span class="line">)</span><br><span class="line">;</span><br><span class="line"></span><br><span class="line">ALTER TABLE "public"."contents_review_log" </span><br><span class="line">  OWNER TO "ikylin_nx";</span><br><span class="line"></span><br><span class="line">CREATE INDEX "contents_review_log_index_chat_tpye" ON "public"."contents_review_log" USING btree (</span><br><span class="line">  "chat_type" COLLATE "pg_catalog"."default" "pg_catalog"."text_ops" ASC NULLS LAST</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">CREATE INDEX "contents_review_log_index_event_time" ON "public"."contents_review_log" USING btree (</span><br><span class="line">  "event_time" "pg_catalog"."timestamp_ops" ASC NULLS LAST</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">CREATE INDEX "contents_review_log_index_generate_id" ON "public"."contents_review_log" USING btree (</span><br><span class="line">  "generate_id" COLLATE "pg_catalog"."default" "pg_catalog"."text_ops" ASC NULLS LAST</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">CREATE UNIQUE INDEX "contents_review_log_index_id" ON "public"."contents_review_log" USING btree (</span><br><span class="line">  "id" COLLATE "pg_catalog"."default" "pg_catalog"."text_ops" ASC NULLS LAST</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">CREATE INDEX "contents_review_log_index_role" ON "public"."contents_review_log" USING btree (</span><br><span class="line">  "send_role_id" COLLATE "pg_catalog"."default" "pg_catalog"."text_ops" ASC NULLS LAST,</span><br><span class="line">  "receive_role_id" COLLATE "pg_catalog"."default" "pg_catalog"."text_ops" ASC NULLS LAST</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">CREATE INDEX "contents_review_log_index_vip_level" ON "public"."contents_review_log" USING btree (</span><br><span class="line">  "send_vip_level" "pg_catalog"."int4_ops" ASC NULLS LAST,</span><br><span class="line">  "receive_vip_level" "pg_catalog"."int4_ops" ASC NULLS LAST</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">CREATE TRIGGER "auto_del_chat" AFTER INSERT ON "public"."contents_review_log"</span><br><span class="line">FOR EACH ROW</span><br><span class="line">EXECUTE PROCEDURE "public"."auto_del_chat"();</span><br><span class="line"></span><br><span class="line">COMMENT ON COLUMN "public"."contents_review_log"."id" IS '唯一使用appid+违规角色id+服务器id+事件时间戳组合';</span><br><span class="line"></span><br><span class="line">COMMENT ON COLUMN "public"."contents_review_log"."app_id" IS '游戏id';</span><br><span class="line"></span><br><span class="line">COMMENT ON COLUMN "public"."contents_review_log"."open_id" IS '违规用户id';</span><br><span class="line"></span><br><span class="line">COMMENT ON COLUMN "public"."contents_review_log"."platform_id" IS '平台id';</span><br><span class="line"></span><br><span class="line">COMMENT ON COLUMN "public"."contents_review_log"."send_role_id" IS '违规角色id';</span><br><span class="line"></span><br><span class="line">COMMENT ON COLUMN "public"."contents_review_log"."receive_role_id" IS '收信角色id';</span><br><span class="line"></span><br><span class="line">COMMENT ON COLUMN "public"."contents_review_log"."send_server_id" IS '发送者所在服务器id';</span><br><span class="line"></span><br><span class="line">COMMENT ON COLUMN "public"."contents_review_log"."receive_server_id" IS '接收者所在服务器id';</span><br><span class="line"></span><br><span class="line">COMMENT ON COLUMN "public"."contents_review_log"."send_role_name" IS '发信者角色名称';</span><br><span class="line"></span><br><span class="line">COMMENT ON COLUMN "public"."contents_review_log"."receive_role_name" IS '接收者角色名称';</span><br><span class="line"></span><br><span class="line">COMMENT ON COLUMN "public"."contents_review_log"."send_vip_level" IS '违规角色vip等级';</span><br><span class="line"></span><br><span class="line">COMMENT ON COLUMN "public"."contents_review_log"."receive_vip_level" IS '接收角色vip等级';</span><br><span class="line"></span><br><span class="line">COMMENT ON COLUMN "public"."contents_review_log"."send_role_level" IS '发送者用户等级';</span><br><span class="line"></span><br><span class="line">COMMENT ON COLUMN "public"."contents_review_log"."receive_role_level" IS '接收者用户等级';</span><br><span class="line"></span><br><span class="line">COMMENT ON COLUMN "public"."contents_review_log"."chat_type" IS '频道';</span><br><span class="line"></span><br><span class="line">COMMENT ON COLUMN "public"."contents_review_log"."suggestion" IS '检测结果可分为block、review';</span><br><span class="line"></span><br><span class="line">COMMENT ON COLUMN "public"."contents_review_log"."detail" IS '语义检查结果';</span><br><span class="line"></span><br><span class="line">COMMENT ON COLUMN "public"."contents_review_log"."chat_content" IS '审核文本';</span><br><span class="line"></span><br><span class="line">COMMENT ON COLUMN "public"."contents_review_log"."event_time" IS '事件生成时间戳';</span><br><span class="line"></span><br><span class="line">COMMENT ON COLUMN "public"."contents_review_log"."creation_time" IS '数据入库时间';</span><br><span class="line"></span><br><span class="line">COMMENT ON COLUMN "public"."contents_review_log"."is_review" IS '后台是否已经处理';</span><br><span class="line"></span><br><span class="line">COMMENT ON COLUMN "public"."contents_review_log"."generate_id" IS 'appid+违规角色id+服务器id+事件时间戳组合';</span><br><span class="line"></span><br><span class="line">COMMENT ON TABLE "public"."contents_review_log" IS '内容审查表';</span><br></pre></td></tr></tbody></table></figure></div><h2 id="JsonbTypeHandler解析"><a href="#JsonbTypeHandler解析" class="headerlink" title="JsonbTypeHandler解析"></a>JsonbTypeHandler解析</h2><p>我们可以看到有一个叫detail的字段是使用了jsonb的格式存储数据，所以我们在JavaBean中可以这样建立一个模型。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jinkejoy.chat.aliyunchat.handler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.hutool.json.JSONUtil;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.type.BaseTypeHandler;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.type.JdbcType;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.type.MappedTypes;</span><br><span class="line"><span class="keyword">import</span> org.postgresql.util.PGobject;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.CallableStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义PSQL jsonb数据格式类型处理器</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> huangwenyi</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-1-11</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@MappedTypes</span>({Object<span class="class">.<span class="keyword">class</span>})</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">JsonbTypeHandler</span> <span class="keyword">extends</span> <span class="title">BaseTypeHandler</span><<span class="title">Object</span>> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> PGobject jsonObject = <span class="keyword">new</span> PGobject();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNonNullParameter</span><span class="params">(PreparedStatement preparedStatement, <span class="keyword">int</span> i, Object o, JdbcType jdbcType)</span> <span class="keyword">throws</span> SQLException </span>{</span><br><span class="line">        jsonObject.setType(<span class="string">"jsonb"</span>);</span><br><span class="line">        jsonObject.setValue(JSONUtil.toJsonStr(o));</span><br><span class="line">        preparedStatement.setObject(i, jsonObject);</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getNullableResult</span><span class="params">(ResultSet resultSet, String s)</span> <span class="keyword">throws</span> SQLException </span>{</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != resultSet.getString(s)) {</span><br><span class="line">            <span class="keyword">return</span> JSONUtil.toBean(resultSet.getString(s), Object<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getNullableResult</span><span class="params">(ResultSet resultSet, <span class="keyword">int</span> i)</span> <span class="keyword">throws</span> SQLException </span>{</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != resultSet.getString(i)) {</span><br><span class="line">            <span class="keyword">return</span> JSONUtil.toBean(resultSet.getString(i), Object<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getNullableResult</span><span class="params">(CallableStatement callableStatement, <span class="keyword">int</span> i)</span> <span class="keyword">throws</span> SQLException </span>{</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != callableStatement.getString(i)) {</span><br><span class="line">            <span class="keyword">return</span> JSONUtil.toBean(callableStatement.getString(i), Object<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>在model使用中使用mybatis plus中的 @TableField注解自定义json解析</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br></pre></td><td class="code"><pre><span class="line">package com.jinkejoy.chat.aliyunchat.model;</span><br><span class="line"></span><br><span class="line">import com.baomidou.mybatisplus.annotation.TableField;</span><br><span class="line">import com.baomidou.mybatisplus.annotation.TableId;</span><br><span class="line">import com.jinkejoy.chat.aliyunchat.handler.JsonbTypeHandler;</span><br><span class="line">import lombok.Data;</span><br><span class="line"></span><br><span class="line">import java.io.Serializable;</span><br><span class="line">import java.sql.Timestamp;</span><br><span class="line">import java.util.Date;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 数据库bean</span><br><span class="line"> * @author huangwenyi</span><br><span class="line"> */</span><br><span class="line">@Data</span><br><span class="line">public class ContentsReviewLog implements Serializable {</span><br><span class="line"></span><br><span class="line">    private static final long serialVersionUID = 1L;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 唯一使用appid+违规角色id+服务器id+事件时间+随机数戳组合</span><br><span class="line">     */</span><br><span class="line">    @TableId</span><br><span class="line">    private String id;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 游戏id</span><br><span class="line">     */</span><br><span class="line">    public Integer app_id;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 违规用户id</span><br><span class="line">     */</span><br><span class="line">    private String open_id;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 平台id</span><br><span class="line">     */</span><br><span class="line">    private Integer platform_id;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 违规角色id</span><br><span class="line">     */</span><br><span class="line">    private String send_role_id;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 收信角色id</span><br><span class="line">     */</span><br><span class="line">    private String receive_role_id;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 发送者所在服务器id</span><br><span class="line">     */</span><br><span class="line">    private Integer send_server_id;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 接收者所在服务器id</span><br><span class="line">     */</span><br><span class="line">    private Integer receive_server_id;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 发信者角色名称</span><br><span class="line">     */</span><br><span class="line">    private String send_role_name;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 接收者角色名称</span><br><span class="line">     */</span><br><span class="line">    private String receive_role_name;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 违规角色vip等级</span><br><span class="line">     */</span><br><span class="line">    private Integer send_vip_level;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 接收角色vip等级</span><br><span class="line">     */</span><br><span class="line">    private Integer receive_vip_level;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 发送者用户等级</span><br><span class="line">     */</span><br><span class="line">    private Integer send_role_level;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 接收者用户等级</span><br><span class="line">     */</span><br><span class="line">    private Integer receive_role_level;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 频道</span><br><span class="line">     */</span><br><span class="line">    private String chat_type;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 检测结果可分为block、review</span><br><span class="line">     */</span><br><span class="line">    private String suggestion;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 语义检查结果</span><br><span class="line">     */</span><br><span class="line">    @TableField(typeHandler = JsonbTypeHandler.class)</span><br><span class="line">    private Detail detail;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 审核文本</span><br><span class="line">     */</span><br><span class="line">    private String chat_content;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 事件生成时间戳</span><br><span class="line">     */</span><br><span class="line">    private Timestamp event_time;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 数据入库时间</span><br><span class="line">     */</span><br><span class="line">    private Date creation_time = new Date();</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 后台是否已经处理</span><br><span class="line">     */</span><br><span class="line">    private Integer is_review = 0;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * appid+违规角色id+服务器id+事件时间</span><br><span class="line">     */</span><br><span class="line">    private String generate_id;</span><br><span class="line"></span><br><span class="line">    public ContentsReviewLog() {</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><h2 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h2><p>顺便说一句我在 <strong>JsonbTypeHandler</strong>类中使用的json工具是一个叫<strong>hutool</strong>的开源工具，你也可以使用<strong>fastjson</strong>代替也没问题。<br>使用上面这种方式可以像正常curd一样操作数据库，而不需要使用手写SQL的方式，简单快捷。</p></body></html>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PostgreSQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>哪吒的魔童降世豆瓣影评分析</title>
      <link href="/2020/01/27/%E5%93%AA%E5%90%92%E7%9A%84%E9%AD%94%E7%AB%A5%E9%99%8D%E4%B8%96%E8%B1%86%E7%93%A3%E5%BD%B1%E8%AF%84%E5%88%86%E6%9E%90/"/>
      <url>/2020/01/27/%E5%93%AA%E5%90%92%E7%9A%84%E9%AD%94%E7%AB%A5%E9%99%8D%E4%B8%96%E8%B1%86%E7%93%A3%E5%BD%B1%E8%AF%84%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script></head><body><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>今天看豆瓣的时候一不小心看到了<strong>哪吒之魔童降世</strong>这部动漫，不由自主的滚动鼠标看着影评。突然躁动的小心心想看看所有的影评说的啥（脑子：不，你不想）。</p><p><a href="https://i.imgur.com/DeVidHH.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.imgur.com/DeVidHH.png" class="lazyload"></a></p><p>辣么多，想想还是算了，心疼我的电脑一秒，继续让下翻发现有一个比较少<strong>影评</strong>,只有一万多条，还带有短评，那还等什么，抄家伙。<br><a href="https://i.imgur.com/bfvTzfF.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.imgur.com/bfvTzfF.png" class="lazyload"></a></p><p>爬虫的过程就不说了基本就是<strong>F12</strong>找标签，我把代码上传到了GitHub，有兴趣可以下载看看：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/HWYWL/spring-boot-2.x-examples/tree/master/spring-boot-douban</span><br></pre></td></tr></tbody></table></figure></div><p>然后就是等待数据全部落地。</p><p><a href="https://i.imgur.com/xfEErMq.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.imgur.com/xfEErMq.jpg" class="lazyload"></a></p><h3 id="成果"><a href="#成果" class="headerlink" title="成果"></a>成果</h3><p>接下来就是见证奇迹的时刻，我们来瞅瞅他们在说啥。</p><p><a href="https://i.imgur.com/zXwcq4K.gif" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.imgur.com/zXwcq4K.gif" class="lazyload"></a></p><p>我们先使用词频图谱来看一下最直观，唉，可怜的敖丙被哪吒挤在角落瑟瑟发抖。配角就没人权吗，不知道我肩负着整个龙族的命运吗？下次见到导演用冰冻他一天。哈哈开玩笑，除此还有两个比较直观的关键词：<strong>国漫、好看</strong>，看来大部分人对国漫还是比较乐观的，虽有不足，但能看到努力。<br><a href="https://i.imgur.com/sarCRN2.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.imgur.com/sarCRN2.png" class="lazyload"></a></p><p>看完词频我们根据不同的纬度来看看，其他数据</p><p><a href="https://i.imgur.com/EIKBGSw.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.imgur.com/EIKBGSw.png" class="lazyload"></a></p><p>这个<strong>不由</strong>最开始统计出来我是一脸懵逼的，不由是什么鬼，后来我在影评搜了一下才发现，那是哪吒的名言：<strong>我命由我不由天</strong>，除了<strong>不错</strong>和<strong>优秀</strong>的概括性词汇以外，还出现了<strong>特效</strong>，嗯，这部电影的特效的确不错。</p><p><a href="https://i.imgur.com/bHjf1j9.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.imgur.com/bHjf1j9.png" class="lazyload"></a></p><p>从这个动词图除了<strong>好看</strong>和<strong>喜欢</strong>，还出现了频谱挺高的<strong>成见</strong>，说实话挺意外的。由此也可以看出观众在思考更深层次的东西，而非流于表面，当做一场爆米花电影，值得庆幸。</p><h3 id="总结一下"><a href="#总结一下" class="headerlink" title="总结一下"></a>总结一下</h3><p>我喜欢<strong>白蛇：缘起</strong></p><p><a href="https://i.imgur.com/jW267bP.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.imgur.com/jW267bP.jpg" class="lazyload"></a></p><h3 id="问题建议"><a href="#问题建议" class="headerlink" title="问题建议"></a>问题建议</h3><ul><li>联系我的邮箱：<a href="mailto:ilovey_hwy@163.com">ilovey_hwy@163.com</a></li><li>我的博客：<a href="http://www.hwy.ac.cn" target="_blank" rel="noopener">http://www.hwy.ac.cn</a></li><li>GitHub：<a href="https://github.com/HWYWL" target="_blank" rel="noopener">https://github.com/HWYWL</a></li></ul></body></html>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
            <tag> 数据分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>膨胀的我爬了一下链家</title>
      <link href="/2020/01/26/%E8%86%A8%E8%83%80%E7%9A%84%E6%88%91%E7%88%AC%E4%BA%86%E4%B8%80%E4%B8%8B%E9%93%BE%E5%AE%B6/"/>
      <url>/2020/01/26/%E8%86%A8%E8%83%80%E7%9A%84%E6%88%91%E7%88%AC%E4%BA%86%E4%B8%80%E4%B8%8B%E9%93%BE%E5%AE%B6/</url>
      
        <content type="html"><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script></head><body><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>别问为什么爬的是二手房，问就是买不起，嗯，是的，我连现在爬的二手房也一样买不起。</p><p><a href="https://i.imgur.com/Z2BWQfG.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.imgur.com/Z2BWQfG.jpg" class="lazyload"></a></p><p>我们言归正传，我在连接上找一了一下二手房，挺多的，六万多套，就是不知道我的在哪。</p><p><a href="https://i.imgur.com/P7nnT61.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.imgur.com/P7nnT61.png" class="lazyload"></a></p><p>听说今年房地产不景气，价格有所下降(一点点)，所以我风平浪静的心也开始蠢蠢欲动，啊，春天来了吗！！！</p><p>爬虫需要知道几个关键信息，一个是分页，另一个是详情页，我们从链家的地址可以看出<strong><a href="https://gz.lianjia.com/ershoufang/pg2/" target="_blank" rel="noopener">https://gz.lianjia.com/ershoufang/pg2/</a></strong>，pg2应该就是单词page2的缩写，赶紧翻到第三页,果不起然是pg3，分页有了我们来看看详情页，万能的<strong>F12</strong>,通过标题直接显示出详情页，连拼接都省了，链家真贴心。</p><p><a href="https://i.imgur.com/MRXYnZI.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.imgur.com/MRXYnZI.png" class="lazyload"></a></p><p>再看看里面的详情页所有数据被安排的整整齐齐，真香。</p><p><a href="https://i.imgur.com/88OWL7m.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.imgur.com/88OWL7m.png" class="lazyload"></a></p><p>竟然万事俱备，那我们就上吧，代码撸起来！！！</p><p><a href="https://i.imgur.com/TVsyREI.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.imgur.com/TVsyREI.jpg" class="lazyload"></a></p><h3 id="撸代码"><a href="#撸代码" class="headerlink" title="撸代码"></a>撸代码</h3><p>爬虫框架用的是 <strong>webmagic</strong> 通过一个循环生成 <strong>pg</strong> 页，再把怕下来的数据落到MySQL数据库。<br>别问为啥用 <strong>webmagic</strong> ，问就是喜欢(简单)。</p><p><a href="https://i.imgur.com/QhgYNCZ.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.imgur.com/QhgYNCZ.jpg" class="lazyload"></a></p><p>巴拉巴拉写好代码，代码不复杂，只要会xpath，撸遍天下都不怕，代码地址：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/HWYWL/spring-boot-2.x-examples/tree/master/spring-boot-lianjia</span><br></pre></td></tr></tbody></table></figure></div><p>我们来看看成果，我们来排序一下，从高到低，刺激。<br><a href="https://i.imgur.com/pB20zv7.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.imgur.com/pB20zv7.png" class="lazyload"></a></p><p>红色框左边的是单价（万元/平米），右边的是总价（万元），看完这价格感觉血压有点高，手里的窝窝头突然不香了。</p><p><a href="https://i.imgur.com/MWookXS.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.imgur.com/MWookXS.jpg" class="lazyload"></a></p><p>我们还是看看低价吧，惹不起.jpg</p><p><a href="https://i.imgur.com/s8IoeHF.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.imgur.com/s8IoeHF.png" class="lazyload"></a></p><p>低价的就是很香了,除了偏僻一点、小一点。。。</p><h3 id="总结一下"><a href="#总结一下" class="headerlink" title="总结一下"></a>总结一下</h3><p>爬取的时候只能爬到一百页，如果再往下就是重复数据，此时你需要增加筛选条件，数据就会变得不一样，<br>可能就是为了防止我这种人去爬数据做限制。不过想想其实也正常，正常看房的谁真的能翻到一百页，<br>我羊城的房子看看就好，不要管几手的，反正我都买不起。</p><p><a href="https://i.imgur.com/dHOTmhZ.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.imgur.com/dHOTmhZ.jpg" class="lazyload"></a></p><h3 id="问题建议"><a href="#问题建议" class="headerlink" title="问题建议"></a>问题建议</h3><ul><li>联系我的邮箱：<a href="mailto:ilovey_hwy@163.com">ilovey_hwy@163.com</a></li><li>我的博客：<a href="http://www.hwy.ac.cn" target="_blank" rel="noopener">http://www.hwy.ac.cn</a></li><li>GitHub：<a href="https://github.com/HWYWL" target="_blank" rel="noopener">https://github.com/HWYWL</a></li></ul></body></html>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
            <tag> 数据分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>重磅：Redis 5.0 正式版发布了，19 个新特性！</title>
      <link href="/2019/11/02/%E9%87%8D%E7%A3%85%EF%BC%9ARedis%205.0%20%E6%AD%A3%E5%BC%8F%E7%89%88%E5%8F%91%E5%B8%83%E4%BA%86%EF%BC%8C19%20%E4%B8%AA%E6%96%B0%E7%89%B9%E6%80%A7%EF%BC%81/"/>
      <url>/2019/11/02/%E9%87%8D%E7%A3%85%EF%BC%9ARedis%205.0%20%E6%AD%A3%E5%BC%8F%E7%89%88%E5%8F%91%E5%B8%83%E4%BA%86%EF%BC%8C19%20%E4%B8%AA%E6%96%B0%E7%89%B9%E6%80%A7%EF%BC%81/</url>
      
        <content type="html"><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script></head><body><p><a href="https://i.imgur.com/kxrr5OC.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.imgur.com/kxrr5OC.jpg" class="lazyload"></a></p><h1 id="Redis-5-0-GA-正式版发布了！"><a href="#Redis-5-0-GA-正式版发布了！" class="headerlink" title="Redis 5.0 GA 正式版发布了！"></a>Redis 5.0 GA 正式版发布了！</h1><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">下载地址：</span><br><span class="line">download.redis.io/releases/redis-5.0.0.tar.gz</span><br><span class="line">源码下载：</span><br><span class="line">github.com/antirez/redis/releases/tag/5.0.0</span><br></pre></td></tr></tbody></table></figure></div><p>先看一下 Redis 5 带来的更新内容：</p><ul><li><ol><li>新的流数据类型(Stream data type) <a href="https://redis.io/topics/streams-intro" target="_blank" rel="noopener">https://redis.io/topics/streams-intro</a></li></ol></li><li><p>2.新的 Redis 模块 API：定时器、集群和字典 API(Timers, Cluster and Dictionary APIs)</p></li><li><ol start="3"><li>RDB 现在可存储 LFU 和 LRU 信息</li></ol></li><li><p>4.redis-cli 中的集群管理器从 Ruby (redis-trib.rb) 移植到了 C 语言代码。执行 <code>redis-cli --- cluster help</code> 命令以了解更多信息</p></li><li><ol start="5"><li>新的有序集合(sorted set)命令：ZPOPMIN/MAX 和阻塞变体(blocking variants)</li></ol></li><li><ol start="6"><li>升级 Active defragmentation 至 v2 版本</li></ol></li><li><ol start="7"><li>增强 HyperLogLog 的实现</li></ol></li><li><ol start="8"><li>更好的内存统计报告</li></ol></li><li><ol start="9"><li>许多包含子命令的命令现在都有一个 HELP 子命令</li></ol></li><li><ol start="10"><li>客户端频繁连接和断开连接时，性能表现更好</li></ol></li><li><ol start="11"><li>许多错误修复和其他方面的改进</li></ol></li><li><ol start="12"><li>升级 Jemalloc 至 5.1 版本</li></ol></li><li><ol start="13"><li>引入 CLIENT UNBLOCK 和 CLIENT ID</li></ol></li><li><ol start="14"><li>新增 LOLWUT 命令 <a href="http://antirez.com/news/123" target="_blank" rel="noopener">http://antirez.com/news/123</a></li></ol></li><li><ol start="15"><li>在不存在需要保持向后兼容性的地方，弃用 “slave” 术语</li></ol></li><li><ol start="16"><li>网络层中的差异优化</li></ol></li><li><ol start="17"><li>Lua 相关的改进：<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">将 Lua 脚本更好地传播到 replicas / AOF</span><br><span class="line">Lua 脚本现在可以超时并在副本中进入 -BUSY 状态</span><br></pre></td></tr></tbody></table></figure></div></li></ol></li><li><ol start="18"><li>引入动态的 HZ(Dynamic HZ) 以平衡空闲 CPU 使用率和响应性</li></ol></li><li><ol start="19"><li>对 Redis 核心代码进行了重构并在许多方面进行了改进</li></ol></li></ul><p>Redis 5 是 Redis 引入流数据类型(Stream data type)的第一个版本。按照官方的说法，不使用该特性的用户在生产环境中使用 Redis 5 会有更好的体验 —— 虽然开发团队尚未发现关于这项特性的关键错误。</p><p>此外，因为许多内部结构与 Redis 4 共享，因此在内部工作方式方面，变化不会很大。</p></body></html>]]></content>
      
      
      <categories>
          
          <category> 缓存 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
            <tag> 缓存 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用RedisTemplate访问Redis数据结构</title>
      <link href="/2019/09/30/%E4%BD%BF%E7%94%A8RedisTemplate%E8%AE%BF%E9%97%AERedis%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
      <url>/2019/09/30/%E4%BD%BF%E7%94%A8RedisTemplate%E8%AE%BF%E9%97%AERedis%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script></head><body><h1 id="Redis-数据结构简介"><a href="#Redis-数据结构简介" class="headerlink" title="Redis 数据结构简介"></a>Redis 数据结构简介</h1><p>Redis 可以存储键与5种不同数据结构类型之间的映射，这5种数据结构类型分别为String（字符串）、List（列表）、Set（集合）、Hash（散列）和 Zset（有序集合）。</p><p>下面来对这5种数据结构类型作简单的介绍：</p><p><a href="https://i.imgur.com/oHymQgy.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.imgur.com/oHymQgy.jpg" class="lazyload"></a></p><p>Redis 5种数据结构的概念大致介绍到这边，下面将结合Spring封装的RedisTemplate来对这5种数据结构的运用进行演示</p><h3 id="RedisTemplate介绍"><a href="#RedisTemplate介绍" class="headerlink" title="RedisTemplate介绍"></a>RedisTemplate介绍</h3><p>spring 封装了 RedisTemplate 对象来进行对redis的各种操作，它支持所有的 redis 原生的 api。</p><p>RedisTemplate在spring代码中的结构如下：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">org.springframework.data.redis.core</span><br><span class="line">Class RedisTemplate<k,v></k,v></span><br><span class="line">java.lang.Object</span><br><span class="line">    org.springframework.data.redis.core.RedisAccessor</span><br><span class="line">        org.springframework.data.redis.core.RedisTemplate<k,v></k,v></span><br><span class="line">Type Parameters:</span><br><span class="line">K</span><br></pre></td></tr></tbody></table></figure></div><ul><li><p>the Redis key type against which the template works (usually a String)<br>模板中的Redis key的类型（通常为String）如：RedisTemplate<string, object><br>注意：如果没特殊情况，切勿定义成RedisTemplate<object, object>，否则根据里氏替换原则，使用的时候会造成类型错误 。<br>V</object,></string,></p></li><li><p>the Redis value type against which the template works<br>模板中的Redis value的类型</p><h3 id="RedisTemplate中定义了对5种数据结构操作"><a href="#RedisTemplate中定义了对5种数据结构操作" class="headerlink" title="RedisTemplate中定义了对5种数据结构操作"></a>RedisTemplate中定义了对5种数据结构操作</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">redisTemplate.opsForValue();//操作字符串</span><br><span class="line">redisTemplate.opsForHash();//操作hash</span><br><span class="line">redisTemplate.opsForList();//操作list</span><br><span class="line">redisTemplate.opsForSet();//操作set</span><br><span class="line">redisTemplate.opsForZSet();//操作有序set</span><br></pre></td></tr></tbody></table></figure></div><h3 id="StringRedisTemplate与RedisTemplate"><a href="#StringRedisTemplate与RedisTemplate" class="headerlink" title="StringRedisTemplate与RedisTemplate"></a>StringRedisTemplate与RedisTemplate</h3></li><li><p>两者的关系是StringRedisTemplate继承RedisTemplate。</p></li><li><p>两者的数据是不共通的；也就是说StringRedisTemplate只能管理StringRedisTemplate里面的数据，RedisTemplate只能管理RedisTemplate中的数据。</p></li><li><p>SDR默认采用的序列化策略有两种，一种是String的序列化策略，一种是JDK的序列化策略。</p></li><li><p>StringRedisTemplate默认采用的是String的序列化策略，保存的key和value都是采用此策略序列化保存的。</p></li><li><p>RedisTemplate默认采用的是JDK的序列化策略，保存的key和value都是采用此策略序列化保存的。</p></li></ul><h3 id="RedisTemplate配置如下："><a href="#RedisTemplate配置如下：" class="headerlink" title="RedisTemplate配置如下："></a>RedisTemplate配置如下：</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">@Bean</span><br><span class="line">    public RedisTemplate<string, object> redisTemplate(RedisConnectionFactory redisConnectionFactory)</string,></span><br><span class="line">    {</span><br><span class="line">        Jackson2JsonRedisSerializer<object> jackson2JsonRedisSerializer = new Jackson2JsonRedisSerializer<object>(Object.class);<br><span class="line">        ObjectMapper om = new ObjectMapper();</span><br><span class="line">        om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);</span><br><span class="line">        om.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);</span><br><span class="line">        jackson2JsonRedisSerializer.setObjectMapper(om);</span><br><span class="line">        RedisTemplate<string, object> template = new RedisTemplate<string, object>();</string,></string,></span><br><span class="line">        template.setConnectionFactory(redisConnectionFactory);</span><br><span class="line">        template.setKeySerializer(jackson2JsonRedisSerializer);</span><br><span class="line">        template.setValueSerializer(jackson2JsonRedisSerializer);</span><br><span class="line">        template.setHashKeySerializer(jackson2JsonRedisSerializer);</span><br><span class="line">        template.setHashValueSerializer(jackson2JsonRedisSerializer);</span><br><span class="line">        template.afterPropertiesSet();</span><br><span class="line">        return template;</span><br><span class="line">    }</span><br></object></object></span></pre></td></tr></tbody></table></figure></div><h3 id="Redis的String数据结构-（推荐使用StringRedisTemplate）"><a href="#Redis的String数据结构-（推荐使用StringRedisTemplate）" class="headerlink" title="Redis的String数据结构 （推荐使用StringRedisTemplate）"></a>Redis的String数据结构 （推荐使用StringRedisTemplate）</h3><p>注意：如果使用RedisTemplate需要更改序列化方式</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">RedisSerializer<string> stringSerializer = new StringRedisSerializer();</string></span><br><span class="line">        template.setKeySerializer(stringSerializer );</span><br><span class="line">        template.setValueSerializer(stringSerializer );</span><br><span class="line">        template.setHashKeySerializer(stringSerializer );</span><br><span class="line">        template.setHashValueSerializer(stringSerializer );</span><br></pre></td></tr></tbody></table></figure></div><p>public interface ValueOperations<k,v><br>Redis operations for simple (or in Redis terminology ‘string’) values.<br>ValueOperations可以对String数据结构进行操作：</k,v></p><ul><li><p>set void set(K key, V value);</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">使用：redisTemplate.opsForValue().set("name","tom");</span><br><span class="line">结果：redisTemplate.opsForValue().get("name")  输出结果为tom</span><br></pre></td></tr></tbody></table></figure></div></li><li><p>set void set(K key, V value, long timeout, TimeUnit unit);</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">使用：redisTemplate.opsForValue().set("name","tom",10, TimeUnit.SECONDS);</span><br><span class="line">结果：redisTemplate.opsForValue().get("name")由于设置的是10秒失效，十秒之内查询有结果，十秒之后返回为null</span><br></pre></td></tr></tbody></table></figure></div></li><li><p>set void set(K key, V value, long offset);<br>该方法是用 value 参数覆写(overwrite)给定 key 所储存的字符串值，从偏移量 offset 开始</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">使用：template.opsForValue().set("key","hello world");</span><br><span class="line">        template.opsForValue().set("key","redis", 6);</span><br><span class="line">        System.out.println("***************"+template.opsForValue().get("key"));</span><br><span class="line">结果：***************hello redis</span><br></pre></td></tr></tbody></table></figure></div></li><li><p>setIfAbsent Boolean setIfAbsent(K key, V value);</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">使用：System.out.println(template.opsForValue().setIfAbsent("multi1","multi1"));//false  multi1之前已经存在</span><br><span class="line">        System.out.println(template.opsForValue().setIfAbsent("multi111","multi111"));//true  multi111之前不存在</span><br><span class="line">结果：false</span><br><span class="line">true</span><br></pre></td></tr></tbody></table></figure></div></li><li><p>multiSet void multiSet(Map<!--? extends K, ? extends V--> m);<br>为多个键分别设置它们的值</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">使用：Map<string,string> maps = new HashMap<string, string>();</string,></string,string></span><br><span class="line">        maps.put("multi1","multi1");</span><br><span class="line">        maps.put("multi2","multi2");</span><br><span class="line">        maps.put("multi3","multi3");</span><br><span class="line">        template.opsForValue().multiSet(maps);</span><br><span class="line">        List<string> keys = new ArrayList<string>();</string></string></span><br><span class="line">        keys.add("multi1");</span><br><span class="line">        keys.add("multi2");</span><br><span class="line">        keys.add("multi3");</span><br><span class="line">        System.out.println(template.opsForValue().multiGet(keys));</span><br><span class="line">结果：[multi1, multi2, multi3]</span><br></pre></td></tr></tbody></table></figure></div></li><li><p>multiSetIfAbsent Boolean multiSetIfAbsent(Map<!--? extends K, ? extends V--> m);<br>为多个键分别设置它们的值，如果存在则返回false，不存在返回true</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">使用：Map<string,string> maps = new HashMap<string, string>();</string,></string,string></span><br><span class="line">        maps.put("multi11","multi11");</span><br><span class="line">        maps.put("multi22","multi22");</span><br><span class="line">        maps.put("multi33","multi33");</span><br><span class="line">        Map<string,string> maps2 = new HashMap<string, string>();</string,></string,string></span><br><span class="line">        maps2.put("multi1","multi1");</span><br><span class="line">        maps2.put("multi2","multi2");</span><br><span class="line">        maps2.put("multi3","multi3");</span><br><span class="line">        System.out.println(template.opsForValue().multiSetIfAbsent(maps));</span><br><span class="line">        System.out.println(template.opsForValue().multiSetIfAbsent(maps2));</span><br><span class="line">结果：true</span><br><span class="line">false</span><br></pre></td></tr></tbody></table></figure></div></li><li><p>get V get(Object key);</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">使用：template.opsForValue().set("key","hello world");</span><br><span class="line">        System.out.println("***************"+template.opsForValue().get("key"));</span><br><span class="line">结果：***************hello world</span><br></pre></td></tr></tbody></table></figure></div></li><li><p>getAndSet V getAndSet(K key, V value);<br>设置键的字符串值并返回其旧值</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">使用：template.opsForValue().set("getSetTest","test");</span><br><span class="line">        System.out.println(template.opsForValue().getAndSet("getSetTest","test2"));</span><br><span class="line">结果：test</span><br></pre></td></tr></tbody></table></figure></div></li><li><p>multiGet List<v> multiGet(Collection<k> keys);<br>为多个键分别取出它们的值</k></v></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">使用：Map<string,string> maps = new HashMap<string, string>();</string,></string,string></span><br><span class="line">        maps.put("multi1","multi1");</span><br><span class="line">        maps.put("multi2","multi2");</span><br><span class="line">        maps.put("multi3","multi3");</span><br><span class="line">        template.opsForValue().multiSet(maps);</span><br><span class="line">        List<string> keys = new ArrayList<string>();</string></string></span><br><span class="line">        keys.add("multi1");</span><br><span class="line">        keys.add("multi2");</span><br><span class="line">        keys.add("multi3");</span><br><span class="line">        System.out.println(template.opsForValue().multiGet(keys));</span><br><span class="line">结果：[multi1, multi2, multi3]</span><br></pre></td></tr></tbody></table></figure></div></li><li><p>increment Long increment(K key, long delta);<br>支持整数</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">使用：template.opsForValue().increment("increlong",1);</span><br><span class="line">        System.out.println("***************"+template.opsForValue().get("increlong"));</span><br><span class="line">结果：***************1</span><br></pre></td></tr></tbody></table></figure></div></li><li><p>increment Double increment(K key, double delta);<br>也支持浮点数</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">使用：template.opsForValue().increment("increlong",1.2);</span><br><span class="line">        System.out.println("***************"+template.opsForValue().get("increlong"));</span><br><span class="line">结果：***************2.2</span><br></pre></td></tr></tbody></table></figure></div></li><li><p>append Integer append(K key, String value);<br>如果key已经存在并且是一个字符串，则该命令将该值追加到字符串的末尾。如果键不存在，则它被创建并设置为空字符串，因此APPEND在这种特殊情况下将类似于SET。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">使用：template.opsForValue().append("appendTest","Hello");</span><br><span class="line">        System.out.println(template.opsForValue().get("appendTest"));</span><br><span class="line">        template.opsForValue().append("appendTest","world");</span><br><span class="line">        System.out.println(template.opsForValue().get("appendTest"));</span><br><span class="line">结果：Hello</span><br><span class="line">        Helloworld</span><br></pre></td></tr></tbody></table></figure></div></li><li><p>get String get(K key, long start, long end);<br>截取key所对应的value字符串</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">使用：appendTest对应的value为Helloworld</span><br><span class="line">System.out.println("*********"+template.opsForValue().get("appendTest",0,5));</span><br><span class="line">结果：*********Hellow</span><br><span class="line">使用：System.out.println("*********"+template.opsForValue().get("appendTest",0,-1));</span><br><span class="line">结果：*********Helloworld</span><br><span class="line">使用：System.out.println("*********"+template.opsForValue().get("appendTest",-3,-1));</span><br><span class="line">结果：*********rld</span><br></pre></td></tr></tbody></table></figure></div></li><li><p>size Long size(K key);<br>返回key所对应的value值得长度</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">使用：template.opsForValue().set("key","hello world");</span><br><span class="line">    System.out.println("***************"+template.opsForValue().size("key"));</span><br><span class="line">结果：***************11</span><br></pre></td></tr></tbody></table></figure></div></li><li><p>setBit Boolean setBit(K key, long offset, boolean value);<br>对 key 所储存的字符串值，设置或清除指定偏移量上的位(bit)<br>key键对应的值value对应的ascii码,在offset的位置(从左向右数)变为value</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">使用：template.opsForValue().set("bitTest","a");</span><br><span class="line">        // 'a' 的ASCII码是 97。转换为二进制是：01100001</span><br><span class="line">        // 'b' 的ASCII码是 98  转换为二进制是：01100010</span><br><span class="line">        // 'c' 的ASCII码是 99  转换为二进制是：01100011</span><br><span class="line">        //因为二进制只有0和1，在setbit中true为1，false为0，因此我要变为'b'的话第六位设置为1，第七位设置为0</span><br><span class="line">        template.opsForValue().setBit("bitTest",6, true);</span><br><span class="line">        template.opsForValue().setBit("bitTest",7, false);</span><br><span class="line">        System.out.println(template.opsForValue().get("bitTest"));</span><br><span class="line">结果：b</span><br></pre></td></tr></tbody></table></figure></div></li><li><p>getBit Boolean getBit(K key, long offset);<br>获取键对应值的ascii码的在offset处位值</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">使用：System.out.println(template.opsForValue().getBit("bitTest",7));</span><br><span class="line">结果：false</span><br></pre></td></tr></tbody></table></figure></div><h3 id="Redis的List数据结构"><a href="#Redis的List数据结构" class="headerlink" title="Redis的List数据结构"></a>Redis的List数据结构</h3><p>这边我们把RedisTemplate序列化方式改回之前的</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Jackson2JsonRedisSerializer<object> jackson2JsonRedisSerializer = new Jackson2JsonRedisSerializer<object>(Object.class);<br><span class="line">        ObjectMapper om = new ObjectMapper();</span><br><span class="line">        om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);</span><br><span class="line">        om.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);</span><br><span class="line">        jackson2JsonRedisSerializer.setObjectMapper(om);</span><br><span class="line">RedisTemplate<string, object> template = new RedisTemplate<string, object>();</string,></string,></span><br><span class="line">       template.setKeySerializer(jackson2JsonRedisSerializer);</span><br><span class="line">        template.setValueSerializer(jackson2JsonRedisSerializer);</span><br><span class="line">        template.setHashKeySerializer(jackson2JsonRedisSerializer);</span><br><span class="line">        template.setHashValueSerializer(jackson2JsonRedisSerializer);</span><br></object></object></span></pre></td></tr></tbody></table></figure></div><p>public interface ListOperations<k,v><br>Redis列表是简单的字符串列表，按照插入顺序排序。你可以添加一个元素导列表的头部（左边）或者尾部（右边）<br>ListOperations专门操作list列表：</k,v></p></li><li><p>List<v> range(K key, long start, long end);<br>返回存储在键中的列表的指定元素。偏移开始和停止是基于零的索引，其中0是列表的第一个元素（列表的头部），1是下一个元素</v></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">使用：System.out.println(template.opsForList().range("list",0,-1));</span><br><span class="line">结果:[c#, c++, python, java, c#, c#]</span><br></pre></td></tr></tbody></table></figure></div></li><li><p>void trim(K key, long start, long end);<br>修剪现有列表，使其只包含指定的指定范围的元素，起始和停止都是基于0的索引</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">使用：System.out.println(template.opsForList().range("list",0,-1));</span><br><span class="line">template.opsForList().trim("list",1,-1);//裁剪第一个元素</span><br><span class="line">System.out.println(template.opsForList().range("list",0,-1));</span><br><span class="line">结果:[c#, c++, python, java, c#, c#]</span><br><span class="line">[c++, python, java, c#, c#]</span><br></pre></td></tr></tbody></table></figure></div></li><li><p>Long size(K key);<br>返回存储在键中的列表的长度。如果键不存在，则将其解释为空列表，并返回0。当key存储的值不是列表时返回错误。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">使用：System.out.println(template.opsForList().size("list"));</span><br><span class="line">结果:6</span><br></pre></td></tr></tbody></table></figure></div></li><li><p>Long leftPush(K key, V value);<br>将所有指定的值插入存储在键的列表的头部。如果键不存在，则在执行推送操作之前将其创建为空列表。（从左边插入）</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">使用：template.opsForList().leftPush("list","java");</span><br><span class="line">        template.opsForList().leftPush("list","python");</span><br><span class="line">        template.opsForList().leftPush("list","c++");</span><br><span class="line">结果:返回的结果为推送操作后的列表的长度</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td></tr></tbody></table></figure></div></li><li><p>Long leftPushAll(K key, V… values);<br>批量把一个数组插入到列表中</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">使用：String[] stringarrays = new String[]{"1","2","3"};</span><br><span class="line">        template.opsForList().leftPushAll("listarray",stringarrays);</span><br><span class="line">        System.out.println(template.opsForList().range("listarray",0,-1));</span><br><span class="line">结果:[3, 2, 1]</span><br></pre></td></tr></tbody></table></figure></div></li><li><p>Long leftPushAll(K key, Collection<v> values);<br>批量把一个集合插入到列表中</v></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">使用：List<object> strings = new ArrayList<object>();<br><span class="line">        strings.add("1");</span><br><span class="line">        strings.add("2");</span><br><span class="line">        strings.add("3");</span><br><span class="line">        template.opsForList().leftPushAll("listcollection4", strings);</span><br><span class="line">        System.out.println(template.opsForList().range("listcollection4",0,-1));</span><br><span class="line">结果:[3, 2, 1]</span><br></object></object></span></pre></td></tr></tbody></table></figure></div></li><li><p>Long leftPushIfPresent(K key, V value);<br>只有存在key对应的列表才能将这个value值插入到key所对应的列表中</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">使用：System.out.println(template.opsForList().leftPushIfPresent("leftPushIfPresent","aa"));</span><br><span class="line">        System.out.println(template.opsForList().leftPushIfPresent("leftPushIfPresent","bb"));</span><br><span class="line">==========分割线===========</span><br><span class="line">System.out.println(template.opsForList().leftPush("leftPushIfPresent","aa"));</span><br><span class="line">        System.out.println(template.opsForList().leftPushIfPresent("leftPushIfPresent","bb"));</span><br><span class="line">结果:</span><br><span class="line">0</span><br><span class="line">0</span><br><span class="line">==========分割线===========</span><br><span class="line">1</span><br><span class="line">2</span><br></pre></td></tr></tbody></table></figure></div></li><li><p>Long leftPush(K key, V pivot, V value);<br>把value值放到key对应列表中pivot值的左面，如果pivot值存在的话</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">使用：template.opsForList().leftPush("list","java","oc");</span><br><span class="line">        System.out.print(template.opsForList().range("list",0,-1));</span><br><span class="line">结果：[c++, python, oc, java, c#, c#]</span><br></pre></td></tr></tbody></table></figure></div></li><li><p>Long rightPush(K key, V value);<br>将所有指定的值插入存储在键的列表的头部。如果键不存在，则在执行推送操作之前将其创建为空列表。（从右边插入）</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">使用：template.opsForList().rightPush("listRight","java");</span><br><span class="line">        template.opsForList().rightPush("listRight","python");</span><br><span class="line">        template.opsForList().rightPush("listRight","c++");</span><br><span class="line">结果:</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td></tr></tbody></table></figure></div></li><li><p>Long rightPushAll(K key, V… values);</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">使用：String[] stringarrays = new String[]{"1","2","3"};</span><br><span class="line">        template.opsForList().rightPushAll("listarrayright",stringarrays);</span><br><span class="line">        System.out.println(template.opsForList().range("listarrayright",0,-1));</span><br><span class="line">结果:[1, 2, 3]</span><br></pre></td></tr></tbody></table></figure></div></li><li><p>Long rightPushAll(K key, Collection<v> values);</v></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">使用：List<object> strings = new ArrayList<object>();<br><span class="line">        strings.add("1");</span><br><span class="line">        strings.add("2");</span><br><span class="line">        strings.add("3");</span><br><span class="line">        template.opsForList().rightPushAll("listcollectionright", strings);</span><br><span class="line">        System.out.println(template.opsForList().range("listcollectionright",0,-1));</span><br><span class="line">结果:[1, 2, 3]</span><br></object></object></span></pre></td></tr></tbody></table></figure></div></li><li><p>Long rightPushIfPresent(K key, V value);<br>只有存在key对应的列表才能将这个value值插入到key所对应的列表中<br>使用：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(template.opsForList().rightPushIfPresent("rightPushIfPresent","aa"));</span><br><span class="line">        System.out.println(template.opsForList().rightPushIfPresent("rightPushIfPresent","bb"));</span><br><span class="line">        System.out.println("==========分割线===========");</span><br><span class="line">        System.out.println(template.opsForList().rightPush("rightPushIfPresent","aa"));</span><br><span class="line">        System.out.println(template.opsForList().rightPushIfPresent("rightPushIfPresent","bb"));</span><br><span class="line">结果:0</span><br><span class="line">0</span><br><span class="line">==========分割线===========</span><br><span class="line">1</span><br><span class="line">2</span><br></pre></td></tr></tbody></table></figure></div></li><li><p>Long rightPush(K key, V pivot, V value);<br>把value值放到key对应列表中pivot值的右面，如果pivot值存在的话</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">使用：System.out.println(template.opsForList().range("listRight",0,-1));</span><br><span class="line">        template.opsForList().rightPush("listRight","python","oc");</span><br><span class="line">        System.out.println(template.opsForList().range("listRight",0,-1));</span><br><span class="line">结果:[java, python, c++]</span><br><span class="line">[java, python, oc, c++]</span><br></pre></td></tr></tbody></table></figure></div></li><li><p>void set(K key, long index, V value);<br>在列表中index的位置设置value值</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">使用：System.out.println(template.opsForList().range("listRight",0,-1));</span><br><span class="line">        template.opsForList().set("listRight",1,"setValue");</span><br><span class="line">        System.out.println(template.opsForList().range("listRight",0,-1));</span><br><span class="line">结果:[java, python, oc, c++]</span><br><span class="line">[java, setValue, oc, c++]</span><br></pre></td></tr></tbody></table></figure></div></li><li><p>Long remove(K key, long count, Object value);<br>从存储在键中的列表中删除等于值的元素的第一个计数事件。<br>计数参数以下列方式影响操作：<br>count> 0：删除等于从头到尾移动的值的元素。<br>count <0：删除等于从尾到头移动的值的元素。<br>count = 0：删除等于value的所有元素。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">使用：System.out.println(template.opsForList().range("listRight",0,-1));</span><br><span class="line">        template.opsForList().remove("listRight",1,"setValue");//将删除列表中存储的列表中第一次次出现的“setValue”。</span><br><span class="line">        System.out.println(template.opsForList().range("listRight",0,-1));</span><br><span class="line">结果:[java, setValue, oc, c++]</span><br><span class="line">[java, oc, c++]</span><br></pre></td></tr></tbody></table></figure></div></li><li><p>V index(K key, long index);<br>根据下表获取列表中的值，下标是从0开始的</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">使用：System.out.println(template.opsForList().range("listRight",0,-1));</span><br><span class="line">System.out.println(template.opsForList().index("listRight",2));</span><br><span class="line">结果:[java, oc, c++]</span><br><span class="line">c++</span><br></pre></td></tr></tbody></table></figure></div></li><li><p>V leftPop(K key);<br>弹出最左边的元素，弹出之后该值在列表中将不复存在</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">使用：System.out.println(template.opsForList().range("list",0,-1));</span><br><span class="line">        System.out.println(template.opsForList().leftPop("list"));</span><br><span class="line">        System.out.println(template.opsForList().range("list",0,-1));</span><br><span class="line">结果:</span><br><span class="line">[c++, python, oc, java, c#, c#]</span><br><span class="line">c++</span><br><span class="line">[python, oc, java, c#, c#]</span><br></pre></td></tr></tbody></table></figure></div></li><li><p>V leftPop(K key, long timeout, TimeUnit unit);<br>移出并获取列表的第一个元素， 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">使用：用法与 leftPop(K key);一样</span><br></pre></td></tr></tbody></table></figure></div></li><li><p>V rightPop(K key);<br>弹出最右边的元素，弹出之后该值在列表中将不复存在</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">使用： System.out.println(template.opsForList().range("list",0,-1));</span><br><span class="line">        System.out.println(template.opsForList().rightPop("list"));</span><br><span class="line">        System.out.println(template.opsForList().range("list",0,-1));</span><br><span class="line">结果:[python, oc, java, c#, c#]</span><br><span class="line">c#</span><br><span class="line">[python, oc, java, c#]</span><br></pre></td></tr></tbody></table></figure></div></li><li><p>V rightPop(K key, long timeout, TimeUnit unit);<br>移出并获取列表的最后一个元素， 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">使用：用法与 rightPop(K key);一样</span><br><span class="line">V rightPopAndLeftPush(K sourceKey, K destinationKey);</span><br><span class="line">用于移除列表的最后一个元素，并将该元素添加到另一个列表并返回。</span><br><span class="line">使用：System.out.println(template.opsForList().range("list",0,-1));</span><br><span class="line">template.opsForList().rightPopAndLeftPush("list","rightPopAndLeftPush");</span><br><span class="line">    System.out.println(template.opsForList().range("list",0,-1));</span><br><span class="line">    System.out.println(template.opsForList().range("rightPopAndLeftPush",0,-1));</span><br><span class="line">结果:[oc, java,c#]</span><br><span class="line">[oc, java]</span><br><span class="line">[c#]</span><br></pre></td></tr></tbody></table></figure></div></li><li><p>V rightPopAndLeftPush(K sourceKey, K destinationKey, long timeout, TimeUnit unit);<br>用于移除列表的最后一个元素，并将该元素添加到另一个列表并返回，如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">使用：用法与rightPopAndLeftPush(K sourceKey, K destinationKey)一样</span><br><span class="line"></span><br><span class="line">### Redis的Hash数据机构</span><br><span class="line">Redis的散列可以让用户将多个键值对存储到一个Redis键里面。</span><br><span class="line">public interface HashOperations<h,hk,hv></h,hk,hv></span><br><span class="line">HashOperations提供一系列方法操作hash：</span><br></pre></td></tr></tbody></table></figure></div><p>初始数据:<br>//template.opsForHash().put(“redisHash”,”name”,”tom”);</p><pre><code>//template.opsForHash().put("redisHash","age",26);//template.opsForHash().put("redisHash","class","6");</code></pre></li></ul><p>//Map<string,object> testMap = new HashMap();<br>        //testMap.put(“name”,”jack”);<br>        //testMap.put(“age”,27);<br>        //testMap.put(“class”,”1”);<br>        //template.opsForHash().putAll(“redisHash1”,testMap);</string,object></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- Long delete(H key, Object... hashKeys);</span><br><span class="line">删除给定的哈希hashKeys</span><br></pre></td></tr></tbody></table></figure></div><p>使用：System.out.println(template.opsForHash().delete(“redisHash”,”name”));<br>        System.out.println(template.opsForHash().entries(“redisHash”));<br>结果：1<br>{class=6, age=28.1}</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- Boolean hasKey(H key, Object hashKey);</span><br><span class="line">确定哈希hashKey是否存在</span><br></pre></td></tr></tbody></table></figure></div><p>使用：System.out.println(template.opsForHash().hasKey(“redisHash”,”age”));<br>        System.out.println(template.opsForHash().hasKey(“redisHash”,”ttt”));<br>结果：true<br>false</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- HV get(H key, Object hashKey);</span><br><span class="line">从键中的哈希获取给定hashKey的值</span><br></pre></td></tr></tbody></table></figure></div><p>使用：System.out.println(template.opsForHash().get(“redisHash”,”age”));<br>结果：26</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- List<hv> multiGet(H key, Collection<hk> hashKeys);</hk></hv></span><br><span class="line">从哈希中获取给定hashKey的值</span><br></pre></td></tr></tbody></table></figure></div><p>使用：List<object> kes = new ArrayList<object>();<br>        kes.add(“name”);<br>        kes.add(“age”);<br>        System.out.println(template.opsForHash().multiGet(“redisHash”,kes));<br>结果：[jack, 28.1]<p></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- Long increment(H key, HK hashKey, long delta);</span><br><span class="line">通过给定的delta增加散列hashKey的值（整型）</span><br></pre></td></tr></tbody></table></figure></div><p>使用：System.out.println(template.opsForHash().get(“redisHash”,”age”));<br>    System.out.println(template.opsForHash().increment(“redisHash”,”age”,1));<br>结果：26<br>27</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- Double increment(H key, HK hashKey, double delta);</span><br><span class="line">通过给定的delta增加散列hashKey的值（浮点数）</span><br></pre></td></tr></tbody></table></figure></div><p>使用：System.out.println(template.opsForHash().get(“redisHash”,”age”));<br>    System.out.println(template.opsForHash().increment(“redisHash”,”age”,1.1));<br>结果：27<br>28.1</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- Set<hk> keys(H key);</hk></span><br><span class="line">获取key所对应的散列表的key</span><br></pre></td></tr></tbody></table></figure></div><p>使用：System.out.println(template.opsForHash().keys(“redisHash1”));<br>//redisHash1所对应的散列表为{class=1, name=jack, age=27}<br>结果：[name, class, age]</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- Long size(H key);</span><br><span class="line">获取key所对应的散列表的大小个数</span><br></pre></td></tr></tbody></table></figure></div><p>使用：System.out.println(template.opsForHash().size(“redisHash1”));<br>//redisHash1所对应的散列表为{class=1, name=jack, age=27}<br>结果：3</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- void putAll(H key, Map<!--? extends HK, ? extends HV--> m);</span><br><span class="line">使用m中提供的多个散列字段设置到key对应的散列表中</span><br></pre></td></tr></tbody></table></figure></div><p>使用：Map<string,object> testMap = new HashMap();<br>        testMap.put(“name”,”jack”);<br>        testMap.put(“age”,27);<br>        testMap.put(“class”,”1”);<br>        template.opsForHash().putAll(“redisHash1”,testMap);<br>        System.out.println(template.opsForHash().entries(“redisHash1”));<br>结果：{class=1, name=jack, age=27}</string,object></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- void put(H key, HK hashKey, HV value);</span><br><span class="line">设置散列hashKey的值</span><br></pre></td></tr></tbody></table></figure></div><p>使用：template.opsForHash().put(“redisHash”,”name”,”tom”);<br>        template.opsForHash().put(“redisHash”,”age”,26);<br>        template.opsForHash().put(“redisHash”,”class”,”6”);<br>System.out.println(template.opsForHash().entries(“redisHash”));<br>结果：{age=26, class=6, name=tom}</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- Boolean putIfAbsent(H key, HK hashKey, HV value);</span><br><span class="line">仅当hashKey不存在时才设置散列hashKey的值。</span><br></pre></td></tr></tbody></table></figure></div><p>使用：System.out.println(template.opsForHash().putIfAbsent(“redisHash”,”age”,30));<br>System.out.println(template.opsForHash().putIfAbsent(“redisHash”,”kkk”,”kkk”));<br>结果：false<br>true</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- List<hv> values(H key);</hv></span><br><span class="line">获取整个哈希存储的值根据密钥</span><br></pre></td></tr></tbody></table></figure></div><p>使用：System.out.println(template.opsForHash().values(“redisHash”));<br>结果：[tom, 26, 6]</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- Map<hk, hv> entries(H key);</hk,></span><br><span class="line">获取整个哈希存储根据密钥</span><br></pre></td></tr></tbody></table></figure></div><p>使用：System.out.println(template.opsForHash().entries(“redisHash”));<br>结果：{age=26, class=6, name=tom}</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- Cursor<map.entry<hk, hv>> scan(H key, ScanOptions options);</map.entry<hk,></span><br><span class="line">使用Cursor在key的hash中迭代，相当于迭代器。</span><br></pre></td></tr></tbody></table></figure></div><p>使用：Cursor<map.entry<object, object>> curosr = template.opsForHash().scan(“redisHash”, ScanOptions.ScanOptions.NONE);<br>        while(curosr.hasNext()){<br>            Map.Entry<object, object> entry = curosr.next();<br>            System.out.println(entry.getKey()+”:”+entry.getValue());<br>        }<br>结果：age:28.1<br>class:6<br>kkk:kkk</object,></map.entry<object,></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">### Redis的Set数据结构</span><br><span class="line">Redis的Set是string类型的无序集合。集合成员是唯一的，这就意味着集合中不能出现重复的数据。</span><br><span class="line">Redis 中 集合是通过哈希表实现的，所以添加，删除，查找的复杂度都是O(1)。</span><br><span class="line">public interface SetOperations<k,v></k,v></span><br><span class="line">SetOperations提供了对无序集合的一系列操作：</span><br><span class="line"></span><br><span class="line">- Long add(K key, V... values);</span><br><span class="line">无序集合中添加元素，返回添加个数</span><br><span class="line">也可以直接在add里面添加多个值 如：template.opsForSet().add("setTest","aaa","bbb")</span><br></pre></td></tr></tbody></table></figure></div><p>使用：String[] strarrays = new String[]{“strarr1”,”sgtarr2”};<br>        System.out.println(template.opsForSet().add(“setTest”, strarrays));<br>结果：2</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- Long remove(K key, Object... values);</span><br><span class="line">移除集合中一个或多个成员</span><br></pre></td></tr></tbody></table></figure></div><p>使用：String[] strarrays = new String[]{“strarr1”,”sgtarr2”};<br>System.out.println(template.opsForSet().remove(“setTest”,strarrays));<br>结果：2</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- V pop(K key);</span><br><span class="line">移除并返回集合中的一个随机元素</span><br></pre></td></tr></tbody></table></figure></div><p>使用：System.out.println(template.opsForSet().pop(“setTest”));<br>System.out.println(template.opsForSet().members(“setTest”));<br>结果：bbb<br>[aaa, ccc]</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- Boolean move(K key, V value, K destKey);</span><br><span class="line">将 member 元素从 source 集合移动到 destination 集合</span><br></pre></td></tr></tbody></table></figure></div><p>使用：template.opsForSet().move(“setTest”,”aaa”,”setTest2”);<br>        System.out.println(template.opsForSet().members(“setTest”));<br>        System.out.println(template.opsForSet().members(“setTest2”));<br>结果：[ccc]<br>[aaa]</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- Long size(K key);</span><br><span class="line">无序集合的大小长度</span><br></pre></td></tr></tbody></table></figure></div><p>使用：System.out.println(template.opsForSet().size(“setTest”));<br>结果：1</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- Boolean isMember(K key, Object o);</span><br><span class="line">判断 member 元素是否是集合 key 的成员</span><br></pre></td></tr></tbody></table></figure></div><p>使用：System.out.println(template.opsForSet().isMember(“setTest”,”ccc”));<br>        System.out.println(template.opsForSet().isMember(“setTest”,”asd”));<br>结果：true<br>false</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- Set<v> intersect(K key, K otherKey);</v></span><br><span class="line">key对应的无序集合与otherKey对应的无序集合求交集</span><br></pre></td></tr></tbody></table></figure></div><p>使用：System.out.println(template.opsForSet().members(“setTest”));<br>        System.out.println(template.opsForSet().members(“setTest2”));<br>        System.out.println(template.opsForSet().intersect(“setTest”,”setTest2”));<br>结果：[aaa, ccc]<br>[aaa]<br>[aaa]</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- Set<v> intersect(K key, Collection<k> otherKeys);</k></v></span><br><span class="line">key对应的无序集合与多个otherKey对应的无序集合求交集</span><br></pre></td></tr></tbody></table></figure></div><p>使用：System.out.println(template.opsForSet().members(“setTest”));<br>        System.out.println(template.opsForSet().members(“setTest2”));<br>        System.out.println(template.opsForSet().members(“setTest3”));<br>        List<string> strlist = new ArrayList<string>();<br>        strlist.add(“setTest2”);<br>        strlist.add(“setTest3”);<br>        System.out.println(template.opsForSet().intersect(“setTest”,strlist));<br>结果：[aaa, ccc]<br>[aaa]<br>[ccc, aaa]<br>[aaa]</string></string></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- Long intersectAndStore(K key, K otherKey, K destKey);</span><br><span class="line">key无序集合与otherkey无序集合的交集存储到destKey无序集合中</span><br></pre></td></tr></tbody></table></figure></div><p>使用：System.out.println(“setTest:” + template.opsForSet().members(“setTest”));<br>System.out.println(“setTest2:” + template.opsForSet().members(“setTest2”));<br>System.out.println(template.opsForSet().intersectAndStore(“setTest”,”setTest2”,”destKey1”));<br>System.out.println(template.opsForSet().members(“destKey1”));<br>结果：setTest:[ddd, bbb, aaa, ccc]<br>setTest2:[ccc, aaa]<br>2<br>[aaa, ccc]</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- Long intersectAndStore(K key, Collection<k> otherKeys, K destKey);</k></span><br><span class="line">key对应的无序集合与多个otherKey对应的无序集合求交集存储到destKey无序集合中</span><br></pre></td></tr></tbody></table></figure></div><p>使用：System.out.println(“setTest:” + template.opsForSet().members(“setTest”));<br>        System.out.println(“setTest2:” + template.opsForSet().members(“setTest2”));<br>        System.out.println(“setTest3:” + template.opsForSet().members(“setTest3”));<br>        List<string> strlist = new ArrayList<string>();<br>        strlist.add(“setTest2”);<br>        strlist.add(“setTest3”);<br>        System.out.println(template.opsForSet().intersectAndStore(“setTest”,strlist,”destKey2”));<br>        System.out.println(template.opsForSet().members(“destKey2”));<br>结果：setTest:[ddd, bbb, aaa, ccc]<br>setTest2:[ccc, aaa]<br>setTest3:[ccc, aaa]<br>2<br>[aaa, ccc]</string></string></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- Set<v> union(K key, K otherKey);</v></span><br><span class="line">key无序集合与otherKey无序集合的并集</span><br></pre></td></tr></tbody></table></figure></div><p>使用：System.out.println(“setTest:” + template.opsForSet().members(“setTest”));<br>        System.out.println(“setTest2:” + template.opsForSet().members(“setTest2”));<br>        System.out.println(template.opsForSet().union(“setTest”,”setTest2”));<br>结果：setTest:[ddd, bbb, aaa, ccc]<br>setTest2:[ccc, aaa]<br>[ccc, aaa, ddd, bbb]</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- Set<v> union(K key, Collection<k> otherKeys);</k></v></span><br><span class="line">key无序集合与多个otherKey无序集合的并集</span><br></pre></td></tr></tbody></table></figure></div><p>使用：System.out.println(“setTest:” + template.opsForSet().members(“setTest”));<br>        System.out.println(“setTest2:” + template.opsForSet().members(“setTest2”));<br>        System.out.println(“setTest3:” + template.opsForSet().members(“setTest3”));<br>        List<string> strlist = new ArrayList<string>();<br>        strlist.add(“setTest2”);<br>        strlist.add(“setTest3”);<br>        System.out.println(template.opsForSet().union(“setTest”,strlist));<br>结果：setTest:[ddd, bbb, aaa, ccc]<br>setTest2:[ccc, aaa]<br>setTest3:[xxx, ccc, aaa]<br>[ddd, xxx, bbb, aaa, ccc]</string></string></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- Long unionAndStore(K key, K otherKey, K destKey);</span><br><span class="line">key无序集合与otherkey无序集合的并集存储到destKey无序集合中</span><br></pre></td></tr></tbody></table></figure></div><p>使用：System.out.println(“setTest:” + template.opsForSet().members(“setTest”));<br>        System.out.println(“setTest2:” + template.opsForSet().members(“setTest2”));<br>        System.out.println(template.opsForSet().unionAndStore(“setTest”,”setTest2”,”unionAndStoreTest1”));<br>        System.out.println(“unionAndStoreTest1:” + template.opsForSet().members(“unionAndStoreTest1”));<br>结果：setTest:[ddd, bbb, aaa, ccc]<br>setTest2:[ccc, aaa]<br>4<br>unionAndStoreTest1:[ccc, aaa, ddd, bbb]</p><ul><li><p>Long unionAndStore(K key, Collection<k> otherKeys, K destKey);<br>key无序集合与多个otherkey无序集合的并集存储到destKey无序集合中</k></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">使用：System.out.println("setTest:" + template.opsForSet().members("setTest"));</span><br><span class="line">        System.out.println("setTest2:" + template.opsForSet().members("setTest2"));</span><br><span class="line">        System.out.println("setTest3:" + template.opsForSet().members("setTest3"));</span><br><span class="line">        List<string> strlist = new ArrayList<string>();</string></string></span><br><span class="line">        strlist.add("setTest2");</span><br><span class="line">        strlist.add("setTest3");</span><br><span class="line">        System.out.println(template.opsForSet().unionAndStore("setTest",strlist,"unionAndStoreTest2"));</span><br><span class="line">        System.out.println("unionAndStoreTest2:" + template.opsForSet().members("unionAndStoreTest2"));</span><br><span class="line">结果：setTest:[ddd, bbb, aaa, ccc]</span><br><span class="line">setTest2:[ccc, aaa]</span><br><span class="line">setTest3:[xxx, ccc, aaa]</span><br><span class="line">5</span><br><span class="line">unionAndStoreTest2:[ddd, xxx, bbb, aaa, ccc]</span><br></pre></td></tr></tbody></table></figure></div></li><li><p>Set<v> difference(K key, K otherKey);<br>key无序集合与otherKey无序集合的差集</v></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">使用：System.out.println("setTest:" + template.opsForSet().members("setTest"));</span><br><span class="line">        System.out.println("setTest2:" + template.opsForSet().members("setTest2"));</span><br><span class="line">        System.out.println(template.opsForSet().difference("setTest","setTest2"));</span><br><span class="line">结果：setTest:[ddd, bbb, aaa, ccc]</span><br><span class="line">setTest2:[ccc, aaa]</span><br><span class="line">[bbb, ddd]</span><br></pre></td></tr></tbody></table></figure></div></li><li><p>Set<v> difference(K key, Collection<k> otherKeys);<br>key无序集合与多个otherKey无序集合的差集</k></v></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">使用：System.out.println("setTest:" + template.opsForSet().members("setTest"));</span><br><span class="line">        System.out.println("setTest2:" + template.opsForSet().members("setTest2"));</span><br><span class="line">        System.out.println("setTest3:" + template.opsForSet().members("setTest3"));</span><br><span class="line">        List<string> strlist = new ArrayList<string>();</string></string></span><br><span class="line">        strlist.add("setTest2");</span><br><span class="line">        strlist.add("setTest3");</span><br><span class="line">        System.out.println(template.opsForSet().difference("setTest",strlist));</span><br><span class="line">结果：setTest:[ddd, bbb, aaa, ccc]</span><br><span class="line">setTest2:[ccc, aaa]</span><br><span class="line">setTest3:[xxx, ccc, aaa]</span><br><span class="line">[bbb, ddd]</span><br></pre></td></tr></tbody></table></figure></div></li><li><p>Long differenceAndStore(K key, K otherKey, K destKey);<br>key无序集合与otherkey无序集合的差集存储到destKey无序集合中</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">使用：System.out.println("setTest:" + template.opsForSet().members("setTest"));</span><br><span class="line">        System.out.println("setTest2:" + template.opsForSet().members("setTest2"));</span><br><span class="line">        System.out.println(template.opsForSet().differenceAndStore("setTest","setTest2","differenceAndStore1"));</span><br><span class="line">        System.out.println("differenceAndStore1:" + template.opsForSet().members("differenceAndStore1"));</span><br><span class="line">结果：setTest:[ddd, bbb, aaa, ccc]</span><br><span class="line">setTest2:[ccc, aaa]</span><br><span class="line">2</span><br><span class="line">differenceAndStore1:[bbb, ddd]</span><br></pre></td></tr></tbody></table></figure></div></li><li><p>Long differenceAndStore(K key, Collection<k> otherKeys, K destKey);<br>key无序集合与多个otherkey无序集合的差集存储到destKey无序集合中</k></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">使用：System.out.println("setTest:" + template.opsForSet().members("setTest"));</span><br><span class="line">        System.out.println("setTest2:" + template.opsForSet().members("setTest2"));</span><br><span class="line">        System.out.println("setTest3:" + template.opsForSet().members("setTest3"));</span><br><span class="line">        List<string> strlist = new ArrayList<string>();</string></string></span><br><span class="line">        strlist.add("setTest2");</span><br><span class="line">        strlist.add("setTest3");</span><br><span class="line">        System.out.println(template.opsForSet().differenceAndStore("setTest",strlist,"differenceAndStore2"));</span><br><span class="line">        System.out.println("differenceAndStore2:" + template.opsForSet().members("differenceAndStore2"));</span><br><span class="line">结果：setTest:[ddd, bbb, aaa, ccc]</span><br><span class="line">setTest2:[ccc, aaa]</span><br><span class="line">setTest3:[xxx, ccc, aaa]</span><br><span class="line">2</span><br><span class="line">differenceAndStore2:[bbb, ddd]</span><br></pre></td></tr></tbody></table></figure></div></li><li><p>Set<v> members(K key);<br>返回集合中的所有成员</v></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">使用：System.out.println(template.opsForSet().members("setTest"));</span><br><span class="line">结果：[ddd, bbb, aaa, ccc]</span><br></pre></td></tr></tbody></table></figure></div></li><li><p>V randomMember(K key);<br>随机获取key无序集合中的一个元素</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">使用：System.out.println("setTest:" + template.opsForSet().members("setTest"));</span><br><span class="line">        System.out.println("setTestrandomMember:" + template.opsForSet().randomMember("setTest"));</span><br><span class="line">        System.out.println("setTestrandomMember:" + template.opsForSet().randomMember("setTest"));</span><br><span class="line">        System.out.println("setTestrandomMember:" + template.opsForSet().randomMember("setTest"));</span><br><span class="line">        System.out.println("setTestrandomMember:" + template.opsForSet().randomMember("setTest"));</span><br><span class="line">结果：setTest:[ddd, bbb, aaa, ccc]</span><br><span class="line">setTestrandomMember:aaa</span><br><span class="line">setTestrandomMember:bbb</span><br><span class="line">setTestrandomMember:aaa</span><br><span class="line">setTestrandomMember:ddd</span><br></pre></td></tr></tbody></table></figure></div></li><li><p>Set<v> distinctRandomMembers(K key, long count);<br>获取多个key无序集合中的元素（去重），count表示个数</v></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">使用：System.out.println("randomMembers:" + template.opsForSet().distinctRandomMembers("setTest",5));</span><br><span class="line">结果：randomMembers:[aaa, bbb, ddd, ccc]</span><br></pre></td></tr></tbody></table></figure></div></li><li><p>List<v> randomMembers(K key, long count);<br>获取多个key无序集合中的元素，count表示个数</v></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">使用：System.out.println("randomMembers:" + template.opsForSet().randomMembers("setTest",5));</span><br><span class="line">结果：randomMembers:[ccc, ddd, ddd, ddd, aaa]</span><br></pre></td></tr></tbody></table></figure></div></li><li><p>Cursor<v> scan(K key, ScanOptions options);<br>遍历set</v></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">使用： Cursor<object> curosr = template.opsForSet().scan("setTest", ScanOptions.NONE);<br><span class="line">        while(curosr.hasNext()){</span><br><span class="line">            System.out.println(curosr.next());</span><br><span class="line">        }</span><br><span class="line">结果：ddd</span><br><span class="line">bbb</span><br><span class="line">aaa</span><br><span class="line">ccc</span><br></object></span></pre></td></tr></tbody></table></figure></div><h3 id="Redis的ZSet数据结构"><a href="#Redis的ZSet数据结构" class="headerlink" title="Redis的ZSet数据结构"></a>Redis的ZSet数据结构</h3><p>Redis 有序集合和无序集合一样也是string类型元素的集合,且不允许重复的成员。<br>不同的是每个元素都会关联一个double类型的分数。redis正是通过分数来为集合中的成员进行从小到大的排序。<br>有序集合的成员是唯一的,但分数(score)却可以重复。<br>public interface ZSetOperations<k,v><br>ZSetOperations提供了一系列方法对有序集合进行操作：</k,v></p></li><li><p>Boolean add(K key, V value, double score);<br>新增一个有序集合，存在的话为false，不存在的话为true</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">使用：System.out.println(template.opsForZSet().add("zset1","zset-1",1.0));</span><br><span class="line">结果：true</span><br></pre></td></tr></tbody></table></figure></div></li><li><p>Long add(K key, Set<typedtuple<v>> tuples);<br>新增一个有序集合</typedtuple<v></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">使用：ZSetOperations.TypedTuple<object> objectTypedTuple1 = new DefaultTypedTuple<object>("zset-5",9.6);<br><span class="line">        ZSetOperations.TypedTuple<object> objectTypedTuple2 = new DefaultTypedTuple<object>("zset-6",9.9);<br><span class="line">        Set<zsetoperations.typedtuple<object>> tuples = new HashSet<zsetoperations.typedtuple<object>>();</zsetoperations.typedtuple<object></zsetoperations.typedtuple<object></span><br><span class="line">        tuples.add(objectTypedTuple1);</span><br><span class="line">        tuples.add(objectTypedTuple2);</span><br><span class="line">        System.out.println(template.opsForZSet().add("zset1",tuples));</span><br><span class="line">        System.out.println(template.opsForZSet().range("zset1",0,-1));</span><br><span class="line">结果：[zset-1, zset-2, zset-3, zset-4, zset-5, zset-6]</span><br></object></object></span></object></object></span></pre></td></tr></tbody></table></figure></div></li><li><p>Long remove(K key, Object… values);<br>从有序集合中移除一个或者多个元素</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">使用：System.out.println(template.opsForZSet().range("zset1",0,-1));</span><br><span class="line">        System.out.println(template.opsForZSet().remove("zset1","zset-6"));</span><br><span class="line">        System.out.println(template.opsForZSet().range("zset1",0,-1));</span><br><span class="line">结果：[zset-1, zset-2, zset-3, zset-4, zset-5, zset-6]</span><br><span class="line">1</span><br><span class="line">[zset-1, zset-2, zset-3, zset-4, zset-5]</span><br></pre></td></tr></tbody></table></figure></div></li><li><p>Double incrementScore(K key, V value, double delta);<br>增加元素的score值，并返回增加后的值</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">使用：System.out.println(template.opsForZSet().incrementScore("zset1","zset-1",1.1));  //原为1.1</span><br><span class="line">结果：2.2</span><br></pre></td></tr></tbody></table></figure></div></li><li><p>Long rank(K key, Object o);<br>返回有序集中指定成员的排名，其中有序集成员按分数值递增(从小到大)顺序排列</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">使用：System.out.println(template.opsForZSet().range("zset1",0,-1));</span><br><span class="line">        System.out.println(template.opsForZSet().rank("zset1","zset-2"));</span><br><span class="line">结果：[zset-2, zset-1, zset-3, zset-4, zset-5]</span><br><span class="line">0   //表明排名第一</span><br></pre></td></tr></tbody></table></figure></div></li><li><p>Long reverseRank(K key, Object o);<br>返回有序集中指定成员的排名，其中有序集成员按分数值递减(从大到小)顺序排列</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">使用：System.out.println(template.opsForZSet().range("zset1",0,-1));</span><br><span class="line">        System.out.println(template.opsForZSet().reverseRank("zset1","zset-2"));</span><br><span class="line">结果：[zset-2, zset-1, zset-3, zset-4, zset-5]</span><br><span class="line">4 //递减之后排到第五位去了</span><br></pre></td></tr></tbody></table></figure></div></li><li><p>Set<v> range(K key, long start, long end);<br>通过索引区间返回有序集合成指定区间内的成员，其中有序集成员按分数值递增(从小到大)顺序排列</v></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">使用：System.out.println(template.opsForZSet().range("zset1",0,-1));</span><br><span class="line">结果：[zset-2, zset-1, zset-3, zset-4, zset-5]</span><br></pre></td></tr></tbody></table></figure></div></li><li><p>Set<typedtuple<v>> rangeWithScores(K key, long start, long end);<br>通过索引区间返回有序集合成指定区间内的成员对象，其中有序集成员按分数值递增(从小到大)顺序排列</typedtuple<v></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">使用：Set<zsetoperations.typedtuple<object>> tuples = template.opsForZSet().rangeWithScores("zset1",0,-1);</zsetoperations.typedtuple<object></span><br><span class="line">        Iterator<zsetoperations.typedtuple<object>> iterator = tuples.iterator();</zsetoperations.typedtuple<object></span><br><span class="line">        while (iterator.hasNext())</span><br><span class="line">        {</span><br><span class="line">            ZSetOperations.TypedTuple<object> typedTuple = iterator.next();<br><span class="line">            System.out.println("value:" + typedTuple.getValue() + "score:" + typedTuple.getScore());</span><br><span class="line">        }</span><br><span class="line">结果：value:zset-2score:1.2</span><br><span class="line">value:zset-1score:2.2</span><br><span class="line">value:zset-3score:2.3</span><br><span class="line">value:zset-4score:6.6</span><br><span class="line">value:zset-5score:9.6</span><br></object></span></pre></td></tr></tbody></table></figure></div></li><li><p>Set<v> rangeByScore(K key, double min, double max);<br>通过分数返回有序集合指定区间内的成员，其中有序集成员按分数值递增(从小到大)顺序排列</v></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">使用：System.out.println(template.opsForZSet().rangeByScore("zset1",0,5));</span><br><span class="line">结果：[zset-2, zset-1, zset-3]</span><br></pre></td></tr></tbody></table></figure></div></li><li><p>Set<typedtuple<v>> rangeByScoreWithScores(K key, double min, double max);<br>通过分数返回有序集合指定区间内的成员对象，其中有序集成员按分数值递增(从小到大)顺序排列</typedtuple<v></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">使用：Set<zsetoperations.typedtuple<object>> tuples = template.opsForZSet().rangeByScoreWithScores("zset1",0,5);</zsetoperations.typedtuple<object></span><br><span class="line">        Iterator<zsetoperations.typedtuple<object>> iterator = tuples.iterator();</zsetoperations.typedtuple<object></span><br><span class="line">        while (iterator.hasNext())</span><br><span class="line">        {</span><br><span class="line">            ZSetOperations.TypedTuple<object> typedTuple = iterator.next();<br><span class="line">            System.out.println("value:" + typedTuple.getValue() + "score:" + typedTuple.getScore());</span><br><span class="line">        }</span><br><span class="line">结果：value:zset-2score:1.2</span><br><span class="line">value:zset-1score:2.2</span><br><span class="line">value:zset-3score:2.3</span><br></object></span></pre></td></tr></tbody></table></figure></div></li><li><p>Set<v> rangeByScore(K key, double min, double max, long offset, long count);<br>通过分数返回有序集合指定区间内的成员，并在索引范围内，其中有序集成员按分数值递增(从小到大)顺序排列</v></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">使用： System.out.println(template.opsForZSet().rangeByScore("zset1",0,5));</span><br><span class="line">    System.out.println(template.opsForZSet().rangeByScore("zset1",0,5,1,2));</span><br><span class="line">结果：[zset-2, zset-1, zset-3]</span><br><span class="line">[zset-1, zset-3]</span><br></pre></td></tr></tbody></table></figure></div></li><li><p>Set<typedtuple<v>> rangeByScoreWithScores(K key, double min, double max, long offset, long count);<br>通过分数返回有序集合指定区间内的成员对象，并在索引范围内，其中有序集成员按分数值递增(从小到大)顺序排列</typedtuple<v></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">使用：Set<zsetoperations.typedtuple<object>> tuples = template.opsForZSet().rangeByScoreWithScores("zset1",0,5,1,2);</zsetoperations.typedtuple<object></span><br><span class="line">        Iterator<zsetoperations.typedtuple<object>> iterator = tuples.iterator();</zsetoperations.typedtuple<object></span><br><span class="line">        while (iterator.hasNext())</span><br><span class="line">        {</span><br><span class="line">            ZSetOperations.TypedTuple<object> typedTuple = iterator.next();<br><span class="line">            System.out.println("value:" + typedTuple.getValue() + "score:" + typedTuple.getScore());</span><br><span class="line">        }</span><br><span class="line">结果：value:zset-1score:2.2</span><br><span class="line">value:zset-3score:2.3</span><br></object></span></pre></td></tr></tbody></table></figure></div></li><li><p>Set<v> reverseRange(K key, long start, long end);<br>通过索引区间返回有序集合成指定区间内的成员，其中有序集成员按分数值递减(从大到小)顺序排列</v></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">使用：System.out.println(template.opsForZSet().reverseRange("zset1",0,-1));</span><br><span class="line">结果：[zset-5, zset-4, zset-3, zset-1, zset-2]</span><br></pre></td></tr></tbody></table></figure></div></li><li><p>Set<typedtuple<v>> reverseRangeWithScores(K key, long start, long end);<br>通过索引区间返回有序集合成指定区间内的成员对象，其中有序集成员按分数值递减(从大到小)顺序排列</typedtuple<v></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">使用：Set<zsetoperations.typedtuple<object>> tuples = template.opsForZSet().reverseRangeWithScores("zset1",0,-1);</zsetoperations.typedtuple<object></span><br><span class="line">        Iterator<zsetoperations.typedtuple<object>> iterator = tuples.iterator();</zsetoperations.typedtuple<object></span><br><span class="line">        while (iterator.hasNext())</span><br><span class="line">        {</span><br><span class="line">            ZSetOperations.TypedTuple<object> typedTuple = iterator.next();<br><span class="line">            System.out.println("value:" + typedTuple.getValue() + "score:" + typedTuple.getScore());</span><br><span class="line">        }</span><br><span class="line">结果：value:zset-5score:9.6</span><br><span class="line">value:zset-4score:6.6</span><br><span class="line">value:zset-3score:2.3</span><br><span class="line">value:zset-1score:2.2</span><br><span class="line">value:zset-2score:1.2</span><br></object></span></pre></td></tr></tbody></table></figure></div></li><li><p>Set<v> reverseRangeByScore(K key, double min, double max);</v></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">使用：与rangeByScore调用方法一样，其中有序集成员按分数值递减(从大到小)顺序排列</span><br><span class="line">Set<typedtuple<v>> reverseRangeByScoreWithScores(K key, double min, double max);</typedtuple<v></span><br><span class="line">使用：与rangeByScoreWithScores调用方法一样，其中有序集成员按分数值递减(从大到小)顺序排列</span><br></pre></td></tr></tbody></table></figure></div></li><li><p>Set<v> reverseRangeByScore(K key, double min, double max, long offset, long count);</v></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">使用：与rangeByScore调用方法一样，其中有序集成员按分数值递减(从大到小)顺序排列</span><br></pre></td></tr></tbody></table></figure></div></li><li><p>Set<typedtuple<v>> reverseRangeByScoreWithScores(K key, double min, double max, long offset, long count);</typedtuple<v></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">使用：与rangeByScoreWithScores调用方法一样，其中有序集成员按分数值递减(从大到小)顺序排列</span><br></pre></td></tr></tbody></table></figure></div></li><li><p>Long count(K key, double min, double max);<br>通过分数返回有序集合指定区间内的成员个数</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">使用：System.out.println(template.opsForZSet().rangeByScore("zset1",0,5));</span><br><span class="line">        System.out.println(template.opsForZSet().count("zset1",0,5));</span><br><span class="line">结果：[zset-2, zset-1, zset-3]</span><br><span class="line">3</span><br></pre></td></tr></tbody></table></figure></div></li><li><p>Long size(K key);<br>获取有序集合的成员数，内部调用的就是zCard方法</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">使用：System.out.println(template.opsForZSet().size("zset1"));</span><br><span class="line">结果：6</span><br></pre></td></tr></tbody></table></figure></div></li><li><p>Long zCard(K key);<br>获取有序集合的成员数</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">使用：System.out.println(template.opsForZSet().zCard("zset1"));</span><br><span class="line">结果：6</span><br></pre></td></tr></tbody></table></figure></div></li><li><p>Double score(K key, Object o);<br>获取指定成员的score值</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">使用：System.out.println(template.opsForZSet().score("zset1","zset-1"));</span><br><span class="line">结果：2.2</span><br></pre></td></tr></tbody></table></figure></div></li><li><p>Long removeRange(K key, long start, long end);<br>移除指定索引位置的成员，其中有序集成员按分数值递增(从小到大)顺序排列</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">使用：System.out.println(template.opsForZSet().range("zset2",0,-1));</span><br><span class="line">        System.out.println(template.opsForZSet().removeRange("zset2",1,2));</span><br><span class="line">        System.out.println(template.opsForZSet().range("zset2",0,-1));</span><br><span class="line">结果：[zset-1, zset-2, zset-3, zset-4]</span><br><span class="line">2</span><br><span class="line">[zset-1, zset-4]</span><br></pre></td></tr></tbody></table></figure></div></li><li><p>Long removeRangeByScore(K key, double min, double max);<br>根据指定的score值得范围来移除成员</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">使用：//System.out.println(template.opsForZSet().add("zset2","zset-1",1.1));</span><br><span class="line">        //System.out.println(template.opsForZSet().add("zset2","zset-2",1.2));</span><br><span class="line">        //System.out.println(template.opsForZSet().add("zset2","zset-3",2.3));</span><br><span class="line">        //System.out.println(template.opsForZSet().add("zset2","zset-4",6.6));</span><br><span class="line">System.out.println(template.opsForZSet().range("zset2",0,-1));</span><br><span class="line">System.out.println(template.opsForZSet().removeRangeByScore("zset2",2,3));</span><br><span class="line">    System.out.println(template.opsForZSet().range("zset2",0,-1));</span><br><span class="line">结果：[zset-1, zset-2, zset-3,zset-4]</span><br><span class="line">1</span><br><span class="line">[zset-1, zset-2, zset-4]</span><br></pre></td></tr></tbody></table></figure></div></li><li><p>Long unionAndStore(K key, K otherKey, K destKey);<br>计算给定的一个有序集的并集，并存储在新的 destKey中，key相同的话会把score值相加</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">使用：System.out.println(template.opsForZSet().add("zzset1","zset-1",1.0));</span><br><span class="line">        System.out.println(template.opsForZSet().add("zzset1","zset-2",2.0));</span><br><span class="line">        System.out.println(template.opsForZSet().add("zzset1","zset-3",3.0));</span><br><span class="line">        System.out.println(template.opsForZSet().add("zzset1","zset-4",6.0));</span><br><span class="line"></span><br><span class="line">        System.out.println(template.opsForZSet().add("zzset2","zset-1",1.0));</span><br><span class="line">        System.out.println(template.opsForZSet().add("zzset2","zset-2",2.0));</span><br><span class="line">        System.out.println(template.opsForZSet().add("zzset2","zset-3",3.0));</span><br><span class="line">        System.out.println(template.opsForZSet().add("zzset2","zset-4",6.0));</span><br><span class="line">        System.out.println(template.opsForZSet().add("zzset2","zset-5",7.0));</span><br><span class="line">        System.out.println(template.opsForZSet().unionAndStore("zzset1","zzset2","destZset11"));</span><br><span class="line"></span><br><span class="line">        Set<zsetoperations.typedtuple<object>> tuples = template.opsForZSet().rangeWithScores("destZset11",0,-1);</zsetoperations.typedtuple<object></span><br><span class="line">        Iterator<zsetoperations.typedtuple<object>> iterator = tuples.iterator();</zsetoperations.typedtuple<object></span><br><span class="line">        while (iterator.hasNext())</span><br><span class="line">        {</span><br><span class="line">            ZSetOperations.TypedTuple<object> typedTuple = iterator.next();<br><span class="line">            System.out.println("value:" + typedTuple.getValue() + "score:" + typedTuple.getScore());</span><br><span class="line">        }</span><br><span class="line">结果：value:zset-1score:2.0</span><br><span class="line">value:zset-2score:4.0</span><br><span class="line">value:zset-3score:6.0</span><br><span class="line">value:zset-5score:7.0</span><br><span class="line">value:zset-4score:12.0</span><br></object></span></pre></td></tr></tbody></table></figure></div></li><li><p>Long unionAndStore(K key, Collection<k> otherKeys, K destKey);<br>计算给定的多个有序集的并集，并存储在新的 destKey中</k></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">使用：//System.out.println(template.opsForZSet().add("zzset1","zset-1",1.0));</span><br><span class="line">        //System.out.println(template.opsForZSet().add("zzset1","zset-2",2.0));</span><br><span class="line">        //System.out.println(template.opsForZSet().add("zzset1","zset-3",3.0));</span><br><span class="line">        //System.out.println(template.opsForZSet().add("zzset1","zset-4",6.0));</span><br><span class="line">        //</span><br><span class="line">        //System.out.println(template.opsForZSet().add("zzset2","zset-1",1.0));</span><br><span class="line">        //System.out.println(template.opsForZSet().add("zzset2","zset-2",2.0));</span><br><span class="line">        //System.out.println(template.opsForZSet().add("zzset2","zset-3",3.0));</span><br><span class="line">        //System.out.println(template.opsForZSet().add("zzset2","zset-4",6.0));</span><br><span class="line">        //System.out.println(template.opsForZSet().add("zzset2","zset-5",7.0));</span><br><span class="line"></span><br><span class="line">        System.out.println(template.opsForZSet().add("zzset3","zset-1",1.0));</span><br><span class="line">        System.out.println(template.opsForZSet().add("zzset3","zset-2",2.0));</span><br><span class="line">        System.out.println(template.opsForZSet().add("zzset3","zset-3",3.0));</span><br><span class="line">        System.out.println(template.opsForZSet().add("zzset3","zset-4",6.0));</span><br><span class="line">        System.out.println(template.opsForZSet().add("zzset3","zset-5",7.0));</span><br><span class="line"></span><br><span class="line">        List<string> stringList = new ArrayList<string>();</string></string></span><br><span class="line">        stringList.add("zzset2");</span><br><span class="line">        stringList.add("zzset3");</span><br><span class="line">        System.out.println(template.opsForZSet().unionAndStore("zzset1",stringList,"destZset22"));</span><br><span class="line"></span><br><span class="line">        Set<zsetoperations.typedtuple<object>> tuples = template.opsForZSet().rangeWithScores("destZset22",0,-1);</zsetoperations.typedtuple<object></span><br><span class="line">        Iterator<zsetoperations.typedtuple<object>> iterator = tuples.iterator();</zsetoperations.typedtuple<object></span><br><span class="line">        while (iterator.hasNext())</span><br><span class="line">        {</span><br><span class="line">            ZSetOperations.TypedTuple<object> typedTuple = iterator.next();<br><span class="line">            System.out.println("value:" + typedTuple.getValue() + "score:" + typedTuple.getScore());</span><br><span class="line">        }</span><br><span class="line">结果：value:zset-1score:3.0</span><br><span class="line">value:zset-2score:6.0</span><br><span class="line">value:zset-3score:9.0</span><br><span class="line">value:zset-5score:14.0</span><br><span class="line">value:zset-4score:18.0</span><br></object></span></pre></td></tr></tbody></table></figure></div></li><li><p>Long intersectAndStore(K key, K otherKey, K destKey);<br>计算给定的一个或多个有序集的交集并将结果集存储在新的有序集合 key 中</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">使用：System.out.println(template.opsForZSet().intersectAndStore("zzset1","zzset2","destZset33"));</span><br><span class="line"></span><br><span class="line">        Set<zsetoperations.typedtuple<object>> tuples = template.opsForZSet().rangeWithScores("destZset33",0,-1);</zsetoperations.typedtuple<object></span><br><span class="line">        Iterator<zsetoperations.typedtuple<object>> iterator = tuples.iterator();</zsetoperations.typedtuple<object></span><br><span class="line">        while (iterator.hasNext())</span><br><span class="line">        {</span><br><span class="line">            ZSetOperations.TypedTuple<object> typedTuple = iterator.next();<br><span class="line">            System.out.println("value:" + typedTuple.getValue() + "score:" + typedTuple.getScore());</span><br><span class="line">        }</span><br><span class="line">结果：value:zset-1score:2.0</span><br><span class="line">value:zset-2score:4.0</span><br><span class="line">value:zset-3score:6.0</span><br><span class="line">value:zset-4score:12.0</span><br></object></span></pre></td></tr></tbody></table></figure></div></li><li><p>Long intersectAndStore(K key, Collection<k> otherKeys, K destKey);<br>计算给定的一个或多个有序集的交集并将结果集存储在新的有序集合 key 中</k></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">使用：List<string> stringList = new ArrayList<string>();</string></string></span><br><span class="line">        stringList.add("zzset2");</span><br><span class="line">        stringList.add("zzset3");</span><br><span class="line">        System.out.println(template.opsForZSet().intersectAndStore("zzset1",stringList,"destZset44"));</span><br><span class="line"></span><br><span class="line">        Set<zsetoperations.typedtuple<object>> tuples = template.opsForZSet().rangeWithScores("destZset44",0,-1);</zsetoperations.typedtuple<object></span><br><span class="line">        Iterator<zsetoperations.typedtuple<object>> iterator = tuples.iterator();</zsetoperations.typedtuple<object></span><br><span class="line">        while (iterator.hasNext())</span><br><span class="line">        {</span><br><span class="line">            ZSetOperations.TypedTuple<object> typedTuple = iterator.next();<br><span class="line">            System.out.println("value:" + typedTuple.getValue() + "score:" + typedTuple.getScore());</span><br><span class="line">        }</span><br><span class="line">结果：value:zset-1score:3.0</span><br><span class="line">value:zset-2score:6.0</span><br><span class="line">value:zset-3score:9.0</span><br><span class="line">value:zset-4score:18.0</span><br></object></span></pre></td></tr></tbody></table></figure></div></li><li><p>Cursor<typedtuple<v>> scan(K key, ScanOptions options);<br>遍历zset</typedtuple<v></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">使用： Cursor<zsetoperations.typedtuple<object>> cursor = template.opsForZSet().scan("zzset1", ScanOptions.NONE);</zsetoperations.typedtuple<object></span><br><span class="line">        while (cursor.hasNext()){</span><br><span class="line">            ZSetOperations.TypedTuple<object> item = cursor.next();<br><span class="line">            System.out.println(item.getValue() + ":" + item.getScore());</span><br><span class="line">        }</span><br><span class="line">结果：zset-1:1.0</span><br><span class="line">zset-2:2.0</span><br><span class="line">zset-3:3.0</span><br><span class="line">zset-4:6.0</span><br></object></span></pre></td></tr></tbody></table></figure></div><p>注：TimeUnit是java.util.concurrent包下面的一个类，表示给定单元粒度的时间段<br>常用的颗粒度<br>TimeUnit.DAYS //天<br>TimeUnit.HOURS //小时<br>TimeUnit.MINUTES //分钟<br>TimeUnit.SECONDS //秒<br>TimeUnit.MILLISECONDS //毫秒</p></li></ul><p>作者：DreamerRzc<br>链接：<a href="https://www.jianshu.com/p/7bf5dc61ca06/" target="_blank" rel="noopener">https://www.jianshu.com/p/7bf5dc61ca06/</a><br>來源：简书<br>简书著作权归作者所有，任何形式的转载都请联系作者获得授权并注明出处。</p></object></object></p></body></html>]]></content>
      
      
      <categories>
          
          <category> 缓存 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
            <tag> 缓存 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis使用场景总结</title>
      <link href="/2019/09/28/Redis%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF%E6%80%BB%E7%BB%93/"/>
      <url>/2019/09/28/Redis%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script></head><body><p><a href="https://camo.githubusercontent.com/bbd053bdea116e0a9495082e4dfc7c5787a9775b/68747470733a2f2f747661312e73696e61696d672e636e2f6c617267652f30303679386d4e366c7931673934727534356a72666a3330753031686f6232392e6a7067" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="https://camo.githubusercontent.com/bbd053bdea116e0a9495082e4dfc7c5787a9775b/68747470733a2f2f747661312e73696e61696d672e636e2f6c617267652f30303679386d4e366c7931673934727534356a72666a3330753031686f6232392e6a7067" class="lazyload"></a></p></body></html>]]></content>
      
      
      <categories>
          
          <category> 缓存 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
            <tag> 缓存 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RedisTemplate设置过期时间</title>
      <link href="/2019/09/28/RedisTemplate%E8%AE%BE%E7%BD%AE%E8%BF%87%E6%9C%9F%E6%97%B6%E9%97%B4/"/>
      <url>/2019/09/28/RedisTemplate%E8%AE%BE%E7%BD%AE%E8%BF%87%E6%9C%9F%E6%97%B6%E9%97%B4/</url>
      
        <content type="html"><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script></head><body><h1 id="通过spring-boot-中的Redis模板设置数据的过期时间"><a href="#通过spring-boot-中的Redis模板设置数据的过期时间" class="headerlink" title="通过spring boot 中的Redis模板设置数据的过期时间"></a>通过spring boot 中的Redis模板设置数据的过期时间</h1><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">//向redis里存入数据和设置缓存时间  </span><br><span class="line">stringRedisTemplate.opsForValue().set("baike", "100", 60 * 10, TimeUnit.SECONDS);</span><br><span class="line"></span><br><span class="line">//val做-1操作  </span><br><span class="line">stringRedisTemplate.boundValueOps("baike").increment(-1);</span><br><span class="line"></span><br><span class="line">//根据key获取缓存中的val  </span><br><span class="line">stringRedisTemplate.opsForValue().get("baike")</span><br><span class="line"></span><br><span class="line">//val +1  </span><br><span class="line">stringRedisTemplate.boundValueOps("baike").increment(1);</span><br><span class="line"></span><br><span class="line">//根据key获取过期时间  </span><br><span class="line">stringRedisTemplate.getExpire("baike");</span><br><span class="line"></span><br><span class="line">//根据key获取过期时间并换算成指定单位  </span><br><span class="line">stringRedisTemplate.getExpire("baike",TimeUnit.SECONDS);</span><br><span class="line"></span><br><span class="line">//根据key删除缓存  </span><br><span class="line">stringRedisTemplate.delete("baike");</span><br><span class="line"></span><br><span class="line">//检查key是否存在，返回boolean值  </span><br><span class="line">stringRedisTemplate.hasKey("baike");</span><br><span class="line"></span><br><span class="line">//向指定key中存放set集合  </span><br><span class="line">stringRedisTemplate.opsForSet().add("baike", "1","2","3");</span><br><span class="line"></span><br><span class="line">//设置过期时间  </span><br><span class="line">stringRedisTemplate.expire("baike",1000 , TimeUnit.MILLISECONDS);</span><br><span class="line"></span><br><span class="line">//根据key查看集合中是否存在指定数据  </span><br><span class="line">stringRedisTemplate.opsForSet().isMember("baike", "1");</span><br><span class="line"></span><br><span class="line">//根据key获取set集合  </span><br><span class="line">stringRedisTemplate.opsForSet().members("baike");</span><br><span class="line"></span><br><span class="line">//验证有效时间</span><br><span class="line">Long expire = redisTemplate.boundHashOps("baike").getExpire();</span><br><span class="line">System.out.println("redis有效时间："+expire+"S");</span><br></pre></td></tr></tbody></table></figure></div></body></html>]]></content>
      
      
      <categories>
          
          <category> 缓存 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
            <tag> 缓存 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Scala面向对象编程之对象</title>
      <link href="/2019/09/27/Scala%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%E4%B9%8B%E5%AF%B9%E8%B1%A1/"/>
      <url>/2019/09/27/Scala%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%E4%B9%8B%E5%AF%B9%E8%B1%A1/</url>
      
        <content type="html"><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script></head><body><h2 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h2><h3 id="Scala中的object"><a href="#Scala中的object" class="headerlink" title="Scala中的object"></a>Scala中的object</h3><p>object 相当于 class 的单个实例，通常在里面放一些静态的 field 或者 method；</p><p>在Scala中没有静态方法和静态字段，但是可以使用object这个语法结构来达到同样的目的。</p><p>object作用：</p><ul><li>存放工具方法和常量</li><li>高效共享单个不可变的实例</li><li>单例模式</li></ul><p>举例说明：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yi.clasz</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Session</span> </span>{}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">SessionFactory</span></span>{</span><br><span class="line">  <span class="comment">//该部分相当于java中的静态块</span></span><br><span class="line">  <span class="keyword">val</span> session = <span class="keyword">new</span> <span class="type">Session</span>()</span><br><span class="line"></span><br><span class="line">  <span class="comment">//在object中的方法相当于java中的静态方法</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">getSession</span></span>(): <span class="type">Session</span> ={</span><br><span class="line">    session</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">SessionDemo</span></span>{</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = {</span><br><span class="line">    <span class="comment">//单例对象，不需要new，用【单例对象名称.方法】调用对象中的方法</span></span><br><span class="line">    <span class="keyword">val</span> session1 = <span class="type">SessionFactory</span>.getSession()</span><br><span class="line">    <span class="keyword">val</span> session2 = <span class="type">SessionFactory</span>.getSession()</span><br><span class="line">    </span><br><span class="line">    println(session1)</span><br><span class="line">    println(session2)</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p><strong>结果</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">com.yi.clasz.Session@2be94b0f</span><br><span class="line">com.yi.clasz.Session@2be94b0f</span><br></pre></td></tr></tbody></table></figure></div><h3 id="Scala中的伴生对象"><a href="#Scala中的伴生对象" class="headerlink" title="Scala中的伴生对象"></a>Scala中的伴生对象</h3><p>如果有一个class文件，还有一个与class同名的object文件，那么就称这个object是class的伴生对象，class是object的伴生类。</p><ul><li>伴生类和伴生对象必须存放在一个.scala文件中；</li><li>伴生类和伴生对象的最大特点是，可以相互访问；</li></ul><p>举例说明：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yi.clasz</span><br><span class="line"></span><br><span class="line"><span class="comment">// 伴生类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dao</span> </span>{</span><br><span class="line">  <span class="keyword">val</span> id = <span class="number">1</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">var</span> name = <span class="string">"旺财"</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">printName</span></span>(): <span class="type">Unit</span> = {</span><br><span class="line">    <span class="comment">// 在Dao类中可以访问伴生类对象的的私有属性</span></span><br><span class="line">    println(<span class="type">Dao</span>.<span class="type">COUSTANT</span> + name)</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 伴生对象</span></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Dao</span> </span>{</span><br><span class="line">  <span class="comment">// 伴生对象中的私有属性</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">val</span> <span class="type">COUSTANT</span> = <span class="string">"汪汪汪。。。"</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = {</span><br><span class="line">    <span class="keyword">val</span> p = <span class="keyword">new</span> <span class="type">Dao</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 访问伴生类的私有属性</span></span><br><span class="line">    p.name = <span class="string">"大旺财"</span></span><br><span class="line">    p.printName()</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p><strong>结果</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">汪汪汪。。。大旺财</span><br></pre></td></tr></tbody></table></figure></div><h3 id="Scala中的apply方法"><a href="#Scala中的apply方法" class="headerlink" title="Scala中的apply方法"></a>Scala中的apply方法</h3><ul><li>object 中非常重要的一个特殊方法，就是apply方法；</li><li>apply方法通常是在伴生对象中实现的，其目的是，通过伴生类的构造函数功能，来实现伴生对象的构造函数功能；</li><li>通常我们会在类的伴生对象中定义apply方法，当遇到类名(参数1,…参数n)时apply方法会被调用；//ctrl+n</li><li>在创建伴生对象或伴生类的对象时，通常不会使用new class/class() 的方式，而是直接使用 class()，隐式的调用伴生对象的 apply 方法，这样会让对象创建的更加简洁；</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通过伴生类的构造函数功能，来实现伴生对象的构造函数功能</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">ApplyApp</span> </span>{</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = {</span><br><span class="line">    <span class="keyword">val</span> ap = <span class="keyword">new</span> <span class="type">ApplyTest</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (_ <- <span class="number">1.</span>to(<span class="number">10</span>)){</span><br><span class="line">      <span class="type">ApplyTest</span>.incr1()</span><br><span class="line">      ap.incr2()</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    println(<span class="type">ApplyTest</span>.count1)</span><br><span class="line">    println(ap.count2)</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * class是object的伴生类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">ApplyTest</span> </span>{</span><br><span class="line">  <span class="keyword">var</span> count1 = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">incr1</span></span>(): <span class="type">Unit</span> ={</span><br><span class="line">    count1 += <span class="number">1</span></span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * object是class的伴生对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ApplyTest</span></span>{</span><br><span class="line">  <span class="keyword">var</span> count2 = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">incr2</span></span>(): <span class="type">Unit</span> ={</span><br><span class="line">    count2 += <span class="number">1</span></span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p><strong>结果</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">10</span><br><span class="line">10</span><br></pre></td></tr></tbody></table></figure></div></body></html>]]></content>
      
      
      <categories>
          
          <category> Scala </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Scala </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Scala面向对象编程之继承</title>
      <link href="/2019/09/27/Scala%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%E4%B9%8B%E7%BB%A7%E6%89%BF/"/>
      <url>/2019/09/27/Scala%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%E4%B9%8B%E7%BB%A7%E6%89%BF/</url>
      
        <content type="html"><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script></head><body><h2 id="Scala面向对象编程之继承"><a href="#Scala面向对象编程之继承" class="headerlink" title="Scala面向对象编程之继承"></a>Scala面向对象编程之继承</h2><h2 id="Scala中继承-extends-的概念"><a href="#Scala中继承-extends-的概念" class="headerlink" title="Scala中继承(extends)的概念"></a>Scala中继承(extends)的概念</h2><ul><li>Scala 中，让子类继承父类，与 Java 一样，也是使用 extends 关键字；</li><li>继承就代表，子类可继承父类的 field 和 method，然后子类还可以在自己的内部实现父类没有的，子类特有的 field 和method，使用继承可以有效复用代码；</li><li>子类可以覆盖父类的 field 和 method，但是如果父类用 final 修饰，或者 field 和 method 用 final 修饰，则该类是无法被继承的，或者 field 和 method 是无法被覆盖的。</li><li>rivate 修饰的 field 和 method 不可以被子类继承，只能在类的内部使用；</li><li>field 必须要被定义成 val 的形式才能被继承，并且还要使用 override 关键字。 因为 var 修饰的 field 是可变的，在子类中可直接引用被赋值，不需要被继承；即 val 修饰的才允许被继承，var 修饰的只允许被引用。继承就是改变、覆盖的意思。</li><li>Java 中的访问控制权限，同样适用于 Scala</li></ul><table><thead><tr><th>header 1</th><th>header 2</th></tr></thead><tbody><tr><td>row 1 col 1</td><td>row 1 col 2</td></tr><tr><td>row 2 col 1</td><td>row 2 col 2</td></tr></tbody></table><table><thead><tr><th>关键字</th><th>类内部</th><th>本包</th><th>子类</th><th>外部包</th></tr></thead><tbody><tr><td>public</td><td>√</td><td>√</td><td>√</td><td>√</td></tr><tr><td>protected</td><td>√</td><td>√</td><td>√</td><td>×</td></tr><tr><td>default</td><td>√</td><td>√</td><td>×</td><td>×</td></tr><tr><td>private</td><td>√</td><td>×</td><td>×</td><td>×</td></tr></tbody></table><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yi.clasz</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>{</span><br><span class="line">  <span class="keyword">val</span> name=<span class="string">"super"</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">getName=this</span>.<span class="title">name</span></span></span><br><span class="line"><span class="function">}</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">class</span> <span class="title">Student</span> <span class="title">extends</span> <span class="title">Person</span> </span>{</span><br><span class="line">  <span class="comment">//继承加上关键字</span></span><br><span class="line">  <span class="keyword">override</span></span><br><span class="line">  <span class="keyword">val</span> name=<span class="string">"sub"</span></span><br><span class="line">  <span class="comment">//子类可以定义自己的field和method</span></span><br><span class="line">  <span class="keyword">val</span> score=<span class="string">"A"</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">getScore=this</span>.<span class="title">score</span></span></span><br><span class="line"><span class="function">}</span></span><br></pre></td></tr></tbody></table></figure></div><h3 id="Scala中override-和-super-关键字"><a href="#Scala中override-和-super-关键字" class="headerlink" title="Scala中override 和 super 关键字"></a>Scala中override 和 super 关键字</h3><ul><li>Scala中，如果子类要覆盖父类中的一个非抽象方法，必须要使用 override 关键字；子类可以覆盖父类的 val 修饰的field，只要在子类中使用 override 关键字即可。</li><li>override 关键字可以帮助开发者尽早的发现代码中的错误，比如， override 修饰的父类方法的方法名拼写错误。</li><li>此外，在子类覆盖父类方法后，如果在子类中要调用父类中被覆盖的方法，则必须要使用 super 关键字，显示的指出要调用的父类方法。</li></ul><p>举例说明：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>{</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">val</span> name=<span class="string">"校花"</span></span><br><span class="line">  <span class="keyword">val</span> age = <span class="number">18</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">getName=this</span>.<span class="title">name</span></span></span><br><span class="line"><span class="function">}</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">class</span> <span class="title">Student</span> <span class="title">extends</span> <span class="title">Person</span> </span>{</span><br><span class="line">  <span class="comment">// 子类可以定义自己的field和method</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">val</span> score = <span class="string">"A"</span></span><br><span class="line">  <span class="comment">//继承加上关键字,覆盖父类</span></span><br><span class="line">  <span class="keyword">override</span></span><br><span class="line">  <span class="keyword">val</span> age=<span class="number">19</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">getScore=this</span>.<span class="title">score</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">  <span class="title">//</span> <span class="title">覆盖父类非抽象方法，必须要使用override关键字</span></span></span><br><span class="line"><span class="function">  <span class="title">//</span> <span class="title">同时调用父类的方法，使用super关键字</span></span></span><br><span class="line"><span class="function">  <span class="title">override</span> <span class="title">def</span> <span class="title">getName</span></span>: <span class="type">String</span> = <span class="string">"你的名字："</span> + <span class="keyword">super</span>.getName</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><h3 id="Scala中isInstanceOf-和-asInstanceOf"><a href="#Scala中isInstanceOf-和-asInstanceOf" class="headerlink" title="Scala中isInstanceOf 和 asInstanceOf"></a>Scala中isInstanceOf 和 asInstanceOf</h3><p>如果实例化了子类的对象，但是将其赋予了父类类型的变量，在后续的过程中，又需要将父类类型的变量转换为子类类型的变量，应该如何做？</p><ul><li>首先，需要使用 isInstanceOf 判断对象是否为指定类的对象，如果是的话，则可以使用 asInstanceOf 将对象转换为指定类型；</li><li>注意： p.isInstanceOf[XX] 判断 p 是否为 XX 对象的实例；p.asInstanceOf[XX] 把 p 转换成 XX 对象的实例</li><li>注意：如果没有用 isInstanceOf 先判断对象是否为指定类的实例，就直接用 asInstanceOf 转换，则可能会抛出异常；</li><li>注意：如果对象是 null，则 isInstanceOf 一定返回 false， asInstanceOf 一定返回 null；</li><li>Scala与Java类型检查和转换</li></ul><table><thead><tr><th>Scala</th><th>Java</th></tr></thead><tbody><tr><td>obj.isInstanceOf[C]</td><td>obj instanceof C</td></tr><tr><td>obj.asInstanceOf[C]</td><td>(C)obj</td></tr><tr><td>classOf[C]</td><td>C.class</td></tr></tbody></table><p>举例说明：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yi.clasz</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Persion3</span> </span>{}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student3</span> <span class="keyword">extends</span> <span class="title">Persion3</span></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">object</span> <span class="title">Student3</span> </span>{</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = {</span><br><span class="line">    <span class="keyword">val</span> p: <span class="type">Persion3</span> = <span class="keyword">new</span> <span class="type">Student3</span></span><br><span class="line">    <span class="keyword">var</span> s: <span class="type">Persion3</span> = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果对象是null，则isInstanceOf一定返回false</span></span><br><span class="line">    println(s.isInstanceOf[<span class="type">Student3</span>])</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断 p 是否为Student3对象实例</span></span><br><span class="line">    <span class="keyword">if</span> (p.isInstanceOf[<span class="type">Student3</span>]) {</span><br><span class="line">      <span class="comment">// 把p转换为Student3对象实例</span></span><br><span class="line">      s = p.asInstanceOf[<span class="type">Student3</span>]</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    println(s.isInstanceOf[<span class="type">Student3</span>])</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p><strong>结果</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">false</span><br><span class="line">true</span><br></pre></td></tr></tbody></table></figure></div><h3 id="Scala中getClass-和-classOf"><a href="#Scala中getClass-和-classOf" class="headerlink" title="Scala中getClass 和 classOf"></a>Scala中getClass 和 classOf</h3><ul><li>sInstanceOf 只能判断出对象是否为指定类以及其子类的对象，而不能精确的判断出，对象就是指定类的对象；</li><li>如果要求精确地判断出对象就是指定类的对象，那么就只能使用 getClass 和 classOf 了；</li><li>p.getClass 可以精确地获取对象的类，classOf[XX] 可以精确的获取类，然后使用 == 操作符即可判断；</li></ul><p>举例说明：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yi.clasz</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person4</span> </span>{}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student4</span> <span class="keyword">extends</span> <span class="title">Person4</span> </span>{}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Student4</span> </span>{</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = {</span><br><span class="line">    <span class="keyword">val</span> p: <span class="type">Person4</span> = <span class="keyword">new</span> <span class="type">Student4</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//判断p是否为Student4类的实例</span></span><br><span class="line">    println(p.isInstanceOf[<span class="type">Person4</span>])</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断p的类型是否为Persion4类</span></span><br><span class="line">    println(p.getClass == classOf[<span class="type">Person4</span>])</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断p的类型是否为Student4类</span></span><br><span class="line">    println(p.getClass == classOf[<span class="type">Student4</span>])</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p><strong>结果</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">true</span><br><span class="line">false</span><br><span class="line">true</span><br></pre></td></tr></tbody></table></figure></div><h3 id="Scala中使用模式匹配进行类型判断"><a href="#Scala中使用模式匹配进行类型判断" class="headerlink" title="Scala中使用模式匹配进行类型判断"></a>Scala中使用模式匹配进行类型判断</h3><ul><li>在实际的开发中，比如 spark 源码中，大量的地方使用了模式匹配的语法进行类型的判断，这种方式更加地简洁明了，而且代码的可维护性和可扩展性也非常高；</li><li>使用模式匹配，功能性上来说，与 isInstanceOf 的作用一样，主要判断是否为该类或其子类的对象即可，不是精准判断。如果想要精准的判断使用getClass 和 classOf来判断</li><li>等同于 Java 中的 switch case 语法；</li></ul><p>举例说明：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">package com.yi.clasz</span><br><span class="line"></span><br><span class="line">class Persion5 {}</span><br><span class="line"></span><br><span class="line">class Student5 extends Persion5</span><br><span class="line"></span><br><span class="line">object Student5 {</span><br><span class="line">  def main(args: Array[String]): Unit = {</span><br><span class="line">    val p: Student5 = new Student5</span><br><span class="line"></span><br><span class="line">    p match {</span><br><span class="line">      // 匹配是否为Person5类或其子类对象</span><br><span class="line">      case _: Persion5 => println("This id a Person5")</span><br><span class="line">      // 匹配剩余情况</span><br><span class="line">      case _ => println("Unknown type!")</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p><strong>结果</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">This id a Person5</span><br></pre></td></tr></tbody></table></figure></div><h3 id="Scala中protected"><a href="#Scala中protected" class="headerlink" title="Scala中protected"></a>Scala中protected</h3><ul><li>跟 Java 一样，Scala 中同样可使用 protected 关键字来修饰 field 和 method。在子类中，可直接访问父类的 field 和 method，而不需要使用 super 关键字；</li><li>还可以使用 protected[this] 关键字， 访问权限的保护范围：只允许在当前子类中访问父类的 field 和 method，不允许通过其他子类对象访问父类的 field 和 method。</li></ul><p>举例说明：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">package com.yi.clasz</span><br><span class="line"></span><br><span class="line">class Person6 {</span><br><span class="line">  protected var name:String = "美女"</span><br><span class="line"></span><br><span class="line">  protected[this] var hobby:String = "game"</span><br><span class="line"></span><br><span class="line">  protected def sayBye = println("嘿嘿嘿。。。")</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">class Student6 extends Person6{</span><br><span class="line">  // 父类使用protected关键字来修饰 field可以直接访问</span><br><span class="line">  def satHello = println("嘿嘿嘿 " + name)</span><br><span class="line"></span><br><span class="line">  // 父类使用protected关键字来修饰method可以直接访问</span><br><span class="line">  def sayByeBye = sayBye</span><br><span class="line"></span><br><span class="line">  def makeFiends(s:Student6)={</span><br><span class="line">    println("My hobby is" + hobby)</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">object Student6{</span><br><span class="line">  def main(args: Array[String]): Unit = {</span><br><span class="line">    val s:Student6 = new Student6</span><br><span class="line"></span><br><span class="line">    s.satHello</span><br><span class="line">    s.sayByeBye</span><br><span class="line">    s.makeFiends(s)</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p><strong>结果</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">嘿嘿嘿 美女</span><br><span class="line">嘿嘿嘿。。。</span><br><span class="line">My hobby is 你懂得</span><br></pre></td></tr></tbody></table></figure></div><h3 id="Scala中调用父类的constructor"><a href="#Scala中调用父类的constructor" class="headerlink" title="Scala中调用父类的constructor"></a>Scala中调用父类的constructor</h3><ul><li>cala中，每个类都可以有一个主constructor和任意多个辅助constructor，而且每个辅助constructor的第一行都必须调用其他辅助constructor或者主constructor代码；因此子类的辅助constructor是一定不可能直接调用父类的constructor的；</li><li>只能在子类的主constructor中调用父类的constructor。</li><li>如果父类的构造函数已经定义过的 field，比如name和age，子类再使用时，就不要用 val 或 var 来修饰了，否则会被认为，子类要覆盖父类的field，且要求一定要使用 override 关键字。</li></ul><p>举例说明：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">package com.yi.clasz</span><br><span class="line"></span><br><span class="line">class Person7(val name:String, val age:Int) {</span><br><span class="line">  var score: Double = 3.0</span><br><span class="line">  var address:String = "北京"</span><br><span class="line">  </span><br><span class="line">  def this(name:String, score:Double)={</span><br><span class="line">    // 每个辅助的constructor的第一行都必须调用其他的辅助constructor或者主constructor代码</span><br><span class="line">    </span><br><span class="line">    // 主constructor代码</span><br><span class="line">    this(name, 18)</span><br><span class="line">    this.score = score</span><br><span class="line">  }</span><br><span class="line">  </span><br><span class="line">  // 辅助constructor</span><br><span class="line">  def this(name:String, address:String)={</span><br><span class="line">    this(name, 100.0)</span><br><span class="line">    this.address = address</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">class Student7(name:String,score:Double) extends Person7(name, score)</span><br></pre></td></tr></tbody></table></figure></div></body></html>]]></content>
      
      
      <categories>
          
          <category> Scala </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Scala </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>类</title>
      <link href="/2019/09/26/%E7%B1%BB/"/>
      <url>/2019/09/26/%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script></head><body><h2 id="类"><a href="#类" class="headerlink" title="类"></a>类</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 在Scala中，类并不用声明为public类型的。</span></span><br><span class="line"><span class="comment">* Scala源文件中可以包含多个类，所有这些类都具有共有可见性。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>{</span><br><span class="line">  <span class="comment">//用val修饰的变量是可读属性，有getter但没有setter（相当与Java中用final修饰的变量）</span></span><br><span class="line">  <span class="keyword">val</span> id=<span class="string">"9527"</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//用var修饰的变量都既有getter，又有setter</span></span><br><span class="line">  <span class="keyword">var</span> age:<span class="type">Int</span>=<span class="number">18</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//类私有字段，只能在类的内部使用或者伴生对象中访问</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">var</span> name : <span class="type">String</span> = <span class="string">"唐伯虎"</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//类私有字段，访问权限更加严格的，该字段在当前类中被访问</span></span><br><span class="line">  <span class="comment">//在伴生对象里面也不可以访问</span></span><br><span class="line">  <span class="keyword">private</span>[<span class="keyword">this</span>] <span class="keyword">var</span> pet = <span class="string">"小强"</span></span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//伴生对象（这个名字和类名相同，叫伴生对象）</span></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Person</span></span>{</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = {</span><br><span class="line">    <span class="keyword">val</span> p=<span class="keyword">new</span> <span class="type">Person</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//如果是下面的修改，发现下面有红线，说明val类型的不支持重新赋值，但是可以获取到值</span></span><br><span class="line">    <span class="comment">//p.id = "123"</span></span><br><span class="line">    println(p.id)</span><br><span class="line">    <span class="comment">//打印age</span></span><br><span class="line">    println(p.age)</span><br><span class="line">    <span class="comment">//打印name,伴生对象中可以在访问private变量</span></span><br><span class="line">    println(p.name)</span><br><span class="line">    <span class="comment">//由于pet字段用private[this]修饰，伴生对象中访问不到pet变量</span></span><br><span class="line">    <span class="comment">//p.pet(访问不到)</span></span><br><span class="line"></span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><h3 id="构造器"><a href="#构造器" class="headerlink" title="构造器"></a>构造器</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">class People() {</span><br><span class="line">  // 定义属性 _ 是占位符</span><br><span class="line">  var name: String = _</span><br><span class="line">  var age: Int = _</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  // 附属构造器</span><br><span class="line">  def this(name: String, age: Int){</span><br><span class="line">    // 第一步必须调用主构造器</span><br><span class="line">    this()</span><br><span class="line"></span><br><span class="line">    // 执行附属构造器</span><br><span class="line">    this.age = age</span><br><span class="line">    this.name = name</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  // 定义方法</span><br><span class="line"></span><br><span class="line">  def eat(): Unit ={</span><br><span class="line">    println(age + " 岁的 " + name + " 在吃饭！！！")</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">object People{</span><br><span class="line">  def main(args: Array[String]): Unit = {</span><br><span class="line">    val people = new People("张三", 18)</span><br><span class="line">    people.eat()</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p><strong>结果</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">18 岁的 张三 在吃饭！！！</span><br></pre></td></tr></tbody></table></figure></div></body></html>]]></content>
      
      
      <categories>
          
          <category> Scala </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Scala </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>集合 List、Set、Map</title>
      <link href="/2019/09/26/%E9%9B%86%E5%90%88%20List%E3%80%81Set%E3%80%81Map/"/>
      <url>/2019/09/26/%E9%9B%86%E5%90%88%20List%E3%80%81Set%E3%80%81Map/</url>
      
        <content type="html"><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script></head><body><h2 id="List"><a href="#List" class="headerlink" title="List"></a>List</h2><p>在Scala中列表要么为空（Nil表示空列表），要么是一个head元素加上一个tail列表。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">ListApp</span> </span>{</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = {</span><br><span class="line">    <span class="keyword">val</span> list1 = <span class="type">List</span>(<span class="string">"Hello"</span>, <span class="string">"Scala"</span>, <span class="string">"Hadoop"</span>)</span><br><span class="line">    println(list1)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> list2 = <span class="string">"Spark"</span> :: <span class="string">"Storm"</span> :: <span class="string">"Kylin"</span> :: <span class="string">"Scala"</span> :: <span class="type">Nil</span></span><br><span class="line">    println(list2)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> list3 = scala.collection.mutable.<span class="type">ListBuffer</span>[<span class="type">String</span>]()</span><br><span class="line">    <span class="comment">// 判断list是否为空</span></span><br><span class="line">    <span class="keyword">if</span> (list3.isEmpty){</span><br><span class="line">      println(<span class="string">"我是空"</span>)</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    list3 ++= list1</span><br><span class="line">    list3 += <span class="string">"Hadoop"</span></span><br><span class="line">    println(list3 + <span class="string">" 长度："</span> + list3.size)</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p><strong>结果</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">List(Hello, Scala, Hadoop)</span><br><span class="line">List(Spark, Storm, Kylin, Scala)</span><br><span class="line">我是空</span><br><span class="line">ListBuffer(Hello, Scala, Hadoop, Hadoop) 长度：4</span><br></pre></td></tr></tbody></table></figure></div><h2 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h2><p>Set代表一个没有重复元素的集合；将重复元素加入Set是没有用的，而且 Set 是不保证插入顺序的，即 Set 中的元素是乱序的。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">SetApp</span> </span>{</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = {</span><br><span class="line">    <span class="keyword">var</span> set1 = <span class="type">Set</span>(<span class="number">2</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">-1</span>, <span class="number">0</span>)</span><br><span class="line">    set1 += <span class="number">9</span></span><br><span class="line"></span><br><span class="line">    println(set1)</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p><strong>结果</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HashSet(0, 5, 1, 9, 2, -1)</span><br></pre></td></tr></tbody></table></figure></div><h2 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">MapApp</span> </span>{</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = {</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构建映射</span></span><br><span class="line">    <span class="keyword">var</span> scores1 = <span class="type">Map</span>(<span class="string">"NO1"</span> -> <span class="string">"校花"</span>, <span class="string">"NO2"</span> -> <span class="string">"美女"</span>, <span class="string">"NO3"</span> -> <span class="string">"女神"</span>)</span><br><span class="line">    <span class="keyword">val</span> scores2 = <span class="type">Map</span>((<span class="string">"NO1"</span> -> <span class="string">"校花"</span>), (<span class="string">"NO2"</span> -> <span class="string">"美女"</span>), (<span class="string">"NO3"</span> -> <span class="string">"女神"</span>))</span><br><span class="line">    scores1 +=(<span class="string">"NO4"</span> -> <span class="string">"萝莉"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取映射的指</span></span><br><span class="line">    println(scores1(<span class="string">"NO2"</span>))</span><br><span class="line">    println(scores2.getOrElse(<span class="string">"NO3"</span>, <span class="string">"不在榜单中"</span>))</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p><strong>结果</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">美女</span><br><span class="line">女神</span><br></pre></td></tr></tbody></table></figure></div></body></html>]]></content>
      
      
      <categories>
          
          <category> Scala </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Scala </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>元组</title>
      <link href="/2019/09/26/%E5%85%83%E7%BB%84/"/>
      <url>/2019/09/26/%E5%85%83%E7%BB%84/</url>
      
        <content type="html"><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script></head><body><h2 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h2><p>映射是K/V对偶的集合，对偶是元组的最简单形式，元组可以装着多个不同类型的值。</p><h3 id="创建元组"><a href="#创建元组" class="headerlink" title="创建元组"></a>创建元组</h3><ol><li>元组是不同类型的值的聚集；对偶是最简单的元组。</li><li>元组表示通过将不同的值用小括号括起来，即表示元组。</li></ol><p><strong>创建元组格式：</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">val tuple=(元素,元素...)</span><br></pre></td></tr></tbody></table></figure></div><p><strong>例程：</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 元组</span><br><span class="line"> */</span><br><span class="line">object TupleApp {</span><br><span class="line">  def main(args: Array[String]): Unit = {</span><br><span class="line">    val tup = ("Hadoop", 3.1415, 12, Map("NO1" -> "美女"), Array("Hello", "Scala", "Hadoop", "Spark", "Storm"))</span><br><span class="line"></span><br><span class="line">    println(tup._1)</span><br><span class="line">    println(tup._4.getOrElse("NO2", "不在映射中"))</span><br><span class="line">    println(tup._5.mkString(","))</span><br><span class="line"></span><br><span class="line">    // 拉链操作</span><br><span class="line">    val names = Array("校花", "美女", "女神")</span><br><span class="line">    val scores1 = Array(18, 19, 17)</span><br><span class="line">    val scores2 = Array(18, 19)</span><br><span class="line"></span><br><span class="line">    var map1 = names.zip(scores1)</span><br><span class="line"></span><br><span class="line">    // 对“校花”数组后面的元素进行填充，填充数据不够使用 18 填充</span><br><span class="line">    var map2 = names.zipAll(scores2, "校花", 18)</span><br><span class="line"></span><br><span class="line">    println(map1.mkString)</span><br><span class="line">    println(map2.mkString)</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p><strong>结果：</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Hadoop</span><br><span class="line">不在映射中</span><br><span class="line">Hello,Scala,Hadoop,Spark,Storm</span><br><span class="line">(校花,18)(美女,19)(女神,17)</span><br><span class="line">(校花,18)(美女,19)(女神,18)</span><br></pre></td></tr></tbody></table></figure></div></body></html>]]></content>
      
      
      <categories>
          
          <category> Scala </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Scala </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>映射</title>
      <link href="/2019/09/26/%E6%98%A0%E5%B0%84/"/>
      <url>/2019/09/26/%E6%98%A0%E5%B0%84/</url>
      
        <content type="html"><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script></head><body><h2 id="映射"><a href="#映射" class="headerlink" title="映射"></a>映射</h2><p>在Scala中，把哈希表这种数据结构叫做映射。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 构建映射</span></span><br><span class="line"><span class="keyword">var</span> scores1 = <span class="type">Map</span>(<span class="string">"NO1"</span> -> <span class="string">"校花"</span>, <span class="string">"NO2"</span> -> <span class="string">"美女"</span>, <span class="string">"NO3"</span> -> <span class="string">"女神"</span>)</span><br><span class="line"><span class="keyword">val</span> scores2 = <span class="type">Map</span>((<span class="string">"NO1"</span> -> <span class="string">"校花"</span>), (<span class="string">"NO2"</span> -> <span class="string">"美女"</span>), (<span class="string">"NO3"</span> -> <span class="string">"女神"</span>))</span><br><span class="line">scores1 +=(<span class="string">"NO4"</span> -> <span class="string">"萝莉"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取映射的指</span></span><br><span class="line">println(scores1(<span class="string">"NO2"</span>))</span><br><span class="line">println(scores2.getOrElse(<span class="string">"NO4"</span>, <span class="string">"不在榜单中"</span>))</span><br></pre></td></tr></tbody></table></figure></div><p><strong>结果</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">美女</span><br><span class="line">不在榜单中</span><br></pre></td></tr></tbody></table></figure></div><p><strong>注意</strong>：通常我们在创建一个集合是会用val这个关键字修饰一个变量（相当于java中的final），那么就意味着该变量的引用不可变，该引用中的内容是不是可变，取决于这个引用指向的集合的类型</p></body></html>]]></content>
      
      
      <categories>
          
          <category> Scala </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Scala </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数组</title>
      <link href="/2019/09/26/%E6%95%B0%E7%BB%84/"/>
      <url>/2019/09/26/%E6%95%B0%E7%BB%84/</url>
      
        <content type="html"><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script></head><body><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">（1）定长数组定义格式：</span><br><span class="line"> val arr=new Array[T](数组长度)</span><br><span class="line"></span><br><span class="line">（2）变长数组定义格式：</span><br><span class="line"> val arr = ArrayBuffer[T]()</span><br></pre></td></tr></tbody></table></figure></div><p>注意需要导包：import scala.collection.mutable.ArrayBuffer</p><h3 id="例程"><a href="#例程" class="headerlink" title="例程"></a>例程</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">ArrayApp</span> </span>{</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = {</span><br><span class="line">    <span class="comment">// 数组声明</span></span><br><span class="line">    <span class="keyword">val</span> arr = <span class="keyword">new</span> <span class="type">Array</span>[<span class="type">String</span>](<span class="number">5</span>)</span><br><span class="line">    arr(<span class="number">1</span>) = <span class="string">"HAHA"</span></span><br><span class="line">    println(arr.mkString(<span class="string">","</span>))</span><br><span class="line">    println(<span class="string">"**********************************************************"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化赋值</span></span><br><span class="line">    <span class="keyword">val</span> arr2 = <span class="type">Array</span>(<span class="string">"Hello"</span>, <span class="string">"Scala"</span>, <span class="string">"Hadoop"</span>, <span class="string">"Spark"</span>, <span class="string">"Storm"</span>)</span><br><span class="line">    <span class="keyword">for</span> (elem <- arr2) {</span><br><span class="line">      println(elem)</span><br><span class="line">    }</span><br><span class="line">    println(<span class="string">"**********************************************************"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 反序输出（增强for）</span></span><br><span class="line">    <span class="keyword">for</span> (elem <- arr2.reverse) {</span><br><span class="line">      println(elem)</span><br><span class="line">    }</span><br><span class="line">    println(<span class="string">"**********************************************************"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 可变长度数组</span></span><br><span class="line">    <span class="keyword">var</span> arr3 = scala.collection.mutable.<span class="type">ArrayBuffer</span>[<span class="type">String</span>]()</span><br><span class="line">    arr3.++=(arr2)</span><br><span class="line">    arr3 += <span class="string">"你好"</span></span><br><span class="line">    println(arr3.mkString(<span class="string">","</span>))</span><br><span class="line">    println(<span class="string">"**********************************************************"</span>)</span><br><span class="line">    arr3.remove(<span class="number">2</span>)</span><br><span class="line">    println(arr3.mkString(<span class="string">","</span>))</span><br><span class="line">    println(<span class="string">"**********************************************************"</span>)</span><br><span class="line">    arr3.trimEnd(<span class="number">4</span>)</span><br><span class="line">    println(arr3.mkString(<span class="string">","</span>))</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p><strong>结果</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">null,HAHA,null,null,null</span><br><span class="line">**********************************************************</span><br><span class="line">Hello</span><br><span class="line">Scala</span><br><span class="line">Hadoop</span><br><span class="line">Spark</span><br><span class="line">Storm</span><br><span class="line">**********************************************************</span><br><span class="line">Storm</span><br><span class="line">Spark</span><br><span class="line">Hadoop</span><br><span class="line">Scala</span><br><span class="line">Hello</span><br><span class="line">**********************************************************</span><br><span class="line">Hello,Scala,Hadoop,Spark,Storm,你好</span><br><span class="line">**********************************************************</span><br><span class="line">Hello,Scala,Spark,Storm,你好</span><br><span class="line">**********************************************************</span><br><span class="line">Hello</span><br></pre></td></tr></tbody></table></figure></div><p>yield关键字将原始的数组进行转换会产生一个新的数组，原始的数组不变</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// yield关键字将原始的数组进行转换会产生一个新的数组，原始的数组不变</span></span><br><span class="line"><span class="keyword">val</span> arr4 = <span class="type">Array</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将偶数取出乘以10，再生成一个新的数组</span></span><br><span class="line"><span class="keyword">val</span>  res = <span class="keyword">for</span>(e <- arr4 <span class="keyword">if</span> e % <span class="number">2</span> == <span class="number">0</span>) <span class="keyword">yield</span> e * <span class="number">10</span></span><br><span class="line">println(res.mkString(<span class="string">","</span>))</span><br><span class="line">println(<span class="string">"**********************************************************"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// filter过滤器，接收返回值为booblean的函数</span></span><br><span class="line"><span class="comment">// map 相当于将数组中的每一个元素取出来，应用传进来的函数</span></span><br><span class="line"><span class="keyword">val</span> resPlus = arr4.filter(_ % <span class="number">2</span> == <span class="number">0</span>).map(_ * <span class="number">10</span>)</span><br><span class="line">println(resPlus.mkString(<span class="string">","</span>))</span><br></pre></td></tr></tbody></table></figure></div><p><strong>结果</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">20,40,60,80</span><br><span class="line">**********************************************************</span><br><span class="line">20,40,60,80</span><br></pre></td></tr></tbody></table></figure></div><h3 id="数组常用算法"><a href="#数组常用算法" class="headerlink" title="数组常用算法"></a>数组常用算法</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> arr5 = <span class="type">Array</span>(<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">-5</span>, <span class="number">6</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 求和</span></span><br><span class="line">println(arr5.sum)</span><br><span class="line"><span class="comment">// 求最大值</span></span><br><span class="line">println(arr5.max)</span><br><span class="line"><span class="comment">// 求最小值</span></span><br><span class="line">println(arr5.min)</span><br><span class="line"><span class="comment">// 排序</span></span><br><span class="line">println(arr5.sorted.mkString(<span class="string">","</span>))</span><br></pre></td></tr></tbody></table></figure></div><p><strong>结果</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">35</span><br><span class="line">9</span><br><span class="line">-5</span><br><span class="line">-5,1,2,3,4,6,7,8,9</span><br></pre></td></tr></tbody></table></figure></div></body></html>]]></content>
      
      
      <categories>
          
          <category> Scala </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Scala </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>定义方法和函数</title>
      <link href="/2019/09/26/%E5%AE%9A%E4%B9%89%E6%96%B9%E6%B3%95%E5%92%8C%E5%87%BD%E6%95%B0/"/>
      <url>/2019/09/26/%E5%AE%9A%E4%B9%89%E6%96%B9%E6%B3%95%E5%92%8C%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script></head><body><p>Scala中的+ - * / %等操作符的作用与Java一样，位操作符 & | ^ >> <<也一样。只是有一点特别的：这些操作符实际上是方法。</p><p>例如：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a + b</span><br><span class="line">是如下方法调用的简写：</span><br><span class="line">a.+(b)</span><br><span class="line">a 方法 b可以写成 a.方法(b)</span><br></pre></td></tr></tbody></table></figure></div><h3 id="定义方法"><a href="#定义方法" class="headerlink" title="定义方法"></a>定义方法</h3><p><a href="A974B5609AC14D67A000F519938B556E" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="A974B5609AC14D67A000F519938B556E" class="lazyload"></a></p><p><a href="948BF87436B04567B6832256D13BC8B0" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="948BF87436B04567B6832256D13BC8B0" class="lazyload"></a></p><p>方法的返回值类型可以不写，编译器可以自动推断出来，但是<strong>对于递归函数，必须指定返回类型。</strong></p><p><a href="65171CF7C46B4035B6ABEF2B5C1D8C05" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="65171CF7C46B4035B6ABEF2B5C1D8C05" class="lazyload"></a></p><h3 id="定义函数"><a href="#定义函数" class="headerlink" title="定义函数"></a>定义函数</h3><p><a href="90C23650CC79424AAF6AB9A969A547D2" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="90C23650CC79424AAF6AB9A969A547D2" class="lazyload"></a></p><h3 id="方法和函数的区别"><a href="#方法和函数的区别" class="headerlink" title="方法和函数的区别"></a>方法和函数的区别</h3><p>在函数式编程语言中，函数是“头等公民”，它可以像任何其他数据类型一样被传递和操作，函数是一个对象，继承自FuctionN。N代表函数创建是有多少个参数。</p><p>函数对象有apply、curried(柯里化)、toString、tupled(元组)这些方法。而方法不具有这些特性。</p><p>如果想把方法转换成一个函数，可以用方法名跟上下划线的方式。</p><p>案例：首先定义一个方法，再定义一个函数，然后将函数传递到方法里面<br><a href="F3F7FAAED87E4FC8B5AB441D335E70EE" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="F3F7FAAED87E4FC8B5AB441D335E70EE" class="lazyload"></a></p><h3 id="方法代码"><a href="#方法代码" class="headerlink" title="方法代码"></a>方法代码</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">FunctionApp</span> </span>{</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = {</span><br><span class="line">    sayHello(<span class="string">"小明"</span>)</span><br><span class="line"></span><br><span class="line">    println(add(<span class="number">1</span>, <span class="number">2</span>))</span><br><span class="line"></span><br><span class="line">    defaultValue(<span class="literal">null</span>)</span><br><span class="line"></span><br><span class="line">    variableParameter(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 无返回值</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * @param name</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">sayHello</span></span>(name: <span class="type">String</span>): <span class="type">Unit</span> = {</span><br><span class="line">    println(<span class="string">"Hello "</span> + name)</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 最后一个执行的结果就是返回值，不需要return</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * @param x 参数一</span></span><br><span class="line"><span class="comment">   * @param y 参数二</span></span><br><span class="line"><span class="comment">   * @return 相加结果</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">add</span></span>(x: <span class="type">Int</span>, y: <span class="type">Int</span>): <span class="type">Int</span> = {</span><br><span class="line">    x + y</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 默认参数</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * @param name 参数，有一个默认值</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">defaultValue</span></span>(name: <span class="type">String</span> = <span class="string">"李四"</span>): <span class="type">Unit</span> = {</span><br><span class="line">    println(<span class="string">"你好 "</span> + name)</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 可变参数函数</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * @param num 可变参数(类型必须相同)</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">variableParameter</span></span>(num: <span class="type">Int</span>*) {</span><br><span class="line">    <span class="keyword">var</span> count: <span class="type">Int</span> = <span class="number">0</span></span><br><span class="line">    num.foreach(e => {</span><br><span class="line">      count += e</span><br><span class="line">    })</span><br><span class="line"></span><br><span class="line">    println(<span class="string">"总和："</span> + count)</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div></body></html>]]></content>
      
      
      <categories>
          
          <category> Scala </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Scala </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Scala基础</title>
      <link href="/2019/09/25/Scala%E5%9F%BA%E7%A1%80/"/>
      <url>/2019/09/25/Scala%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script></head><body><h3 id="声明变量"><a href="#声明变量" class="headerlink" title="声明变量"></a>声明变量</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Hello</span> </span>{</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = {</span><br><span class="line">    println(<span class="string">"Hello Scala"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用val定义的变量值是不可变的，相当于Java里面final修饰的变量</span></span><br><span class="line">    <span class="keyword">val</span> i = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用var定义的变量是可变的，在Scala中鼓励使用val</span></span><br><span class="line">    <span class="keyword">var</span> s = <span class="string">"Hello Scala"</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Scala编译器会自动推断变量的类型，必要的时候可以指定类型</span></span><br><span class="line">    <span class="keyword">val</span> str: <span class="type">String</span> = <span class="string">"Hello Spark"</span></span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><h3 id="常用类型"><a href="#常用类型" class="headerlink" title="常用类型"></a>常用类型</h3><p>Scala和Java一样，有7种数值类型Byte、Char、Short、Int、Long、Float、Double类型和1个Boolean类型。</p><h3 id="条件表达式"><a href="#条件表达式" class="headerlink" title="条件表达式"></a>条件表达式</h3><p>Scala的条件表达式比较简洁，定义变量时加上if else判断条件。例如：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 条件表达式</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* @param num1 参数一</span></span><br><span class="line"><span class="comment">* @param num2 参数二</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">conditionalExpression</span></span>(num1: <span class="type">Int</span>, num2: <span class="type">Int</span>): <span class="type">Unit</span> = {</span><br><span class="line">    <span class="comment">// 条件表达式</span></span><br><span class="line">    <span class="keyword">if</span> (num1 > num2) {</span><br><span class="line">      println(num1 + <span class="string">" > "</span> + num2)</span><br><span class="line">    } <span class="keyword">else</span> <span class="keyword">if</span> (num1 == num2) {</span><br><span class="line">      println(num1 + <span class="string">" = "</span> + num2)</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">      println(num1 + <span class="string">" < "</span> + num2)</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><h3 id="块表达式"><a href="#块表达式" class="headerlink" title="块表达式"></a>块表达式</h3><p>定义变量时用 {} 包含一系列表达式，其中块的最后一个表达式的值就是块的值。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">lump</span> </span>(): <span class="type">Unit</span> ={</span><br><span class="line">    <span class="keyword">val</span> a = <span class="number">10</span></span><br><span class="line">    <span class="keyword">val</span> b = <span class="number">20</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 块表达式</span></span><br><span class="line">    <span class="keyword">val</span> result = {</span><br><span class="line">    <span class="comment">// 块中最后一个表达式的值,既是快表达式的返回值</span></span><br><span class="line">      a + b</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    println(result)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><h3 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h3><p>在scala中有好几种循环，其中for循环和while循环用的比较多</p><p><strong>for循环：</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * foreach循环表达式</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @param num1 参数一</span></span><br><span class="line"><span class="comment"> * @param num2 参数二</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foreachExpression</span></span>(num1: <span class="type">Int</span>, num2: <span class="type">Int</span>): <span class="type">Unit</span> = {</span><br><span class="line">  <span class="keyword">val</span> arr: <span class="type">Range</span> = num1.until(num2)</span><br><span class="line">  arr.foreach(e => {</span><br><span class="line">    print(e + <span class="string">" "</span>)</span><br><span class="line">  })</span><br><span class="line">  println()</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * for循环表达式</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @param num1 参数一</span></span><br><span class="line"><span class="comment"> * @param num2 参数二</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">forExpression</span></span>(num1: <span class="type">Int</span>, num2: <span class="type">Int</span>): <span class="type">Unit</span> = {</span><br><span class="line">  <span class="keyword">val</span> arr: <span class="type">Range</span> = num1.until(num2)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (a <- arr <span class="keyword">if</span> a % <span class="number">2</span> == <span class="number">0</span>) {</span><br><span class="line">    println(<span class="string">"质数: "</span> + a)</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p><strong>while循环：</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * while循环表达式</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">whileExpression</span></span>(): <span class="type">Unit</span> = {</span><br><span class="line">  <span class="keyword">var</span> count = <span class="number">10</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (count > <span class="number">0</span>) {</span><br><span class="line">    print(count + <span class="string">" "</span>)</span><br><span class="line">    count -= <span class="number">1</span></span><br><span class="line">  }</span><br><span class="line">  println()</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * do-while循环表达式</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dowhileExpression</span></span>(): <span class="type">Unit</span> = {</span><br><span class="line">  <span class="keyword">var</span> count = <span class="number">10</span></span><br><span class="line"></span><br><span class="line">  do {</span><br><span class="line">    print(count + <span class="string">" "</span>)</span><br><span class="line">    count -= <span class="number">1</span></span><br><span class="line">  } <span class="keyword">while</span> (count > <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">  println()</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p><strong>其他循环：</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * to循环表达式</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @param num1 参数一</span></span><br><span class="line"><span class="comment"> * @param num2 参数二</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">toExpression</span></span>(num1: <span class="type">Int</span>, num2: <span class="type">Int</span>): <span class="type">Unit</span> = {</span><br><span class="line">  <span class="keyword">val</span> arr: <span class="type">Inclusive</span> = num1.to(num2)</span><br><span class="line">  println(arr.toList)</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * range循环表达式</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @param num1 参数一</span></span><br><span class="line"><span class="comment"> * @param num2 参数二</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rangeExpression</span></span>(num1: <span class="type">Int</span>, num2: <span class="type">Int</span>): <span class="type">Unit</span> = {</span><br><span class="line">  <span class="keyword">val</span> arr: <span class="type">Range</span> = <span class="type">Range</span>(num1, num2)</span><br><span class="line">  println(arr.toList)</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * until循环表达式</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @param num1 参数一</span></span><br><span class="line"><span class="comment"> * @param num2 参数二</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">untilExpression</span></span>(num1: <span class="type">Int</span>, num2: <span class="type">Int</span>): <span class="type">Unit</span> = {</span><br><span class="line">  <span class="keyword">val</span> arr: <span class="type">Range</span> = num1.until(num2)</span><br><span class="line">  println(arr.toList)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p><strong>break 终止循环</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * break 终止循环</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">breakExpression</span></span>(num1: <span class="type">Int</span>, num2: <span class="type">Int</span>): <span class="type">Unit</span> = {</span><br><span class="line">  <span class="keyword">val</span> arr: <span class="type">Inclusive</span> = num1.to(num2)</span><br><span class="line">  <span class="keyword">val</span> loop = <span class="keyword">new</span> <span class="type">Breaks</span>;</span><br><span class="line"></span><br><span class="line">  loop.breakable {</span><br><span class="line">    <span class="keyword">for</span> (a <- arr) {</span><br><span class="line">      print(a + <span class="string">" "</span>)</span><br><span class="line">      <span class="keyword">if</span> (a == <span class="number">5</span>) {</span><br><span class="line">        <span class="comment">// 终止循环</span></span><br><span class="line">        loop.<span class="keyword">break</span>()</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  println()</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div></body></html>]]></content>
      
      
      <categories>
          
          <category> Scala </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Scala </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux安装Scala编译器</title>
      <link href="/2019/09/25/Linux%E5%AE%89%E8%A3%85Scala%E7%BC%96%E8%AF%91%E5%99%A8/"/>
      <url>/2019/09/25/Linux%E5%AE%89%E8%A3%85Scala%E7%BC%96%E8%AF%91%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script></head><body><ul><li>下载Scala地址<a href="https://www.scala-lang.org/download/2.11.8.html" target="_blank" rel="noopener">https://www.scala-lang.org/download/2.11.8.html</a></li><li>解压Scala到指定目录<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf scala-2.11.8.tgz -C /usr/java</span><br></pre></td></tr></tbody></table></figure></div></li><li>配置环境变量，将scala加入到PATH中<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/profile</span><br><span class="line">export JAVA_HOME=/usr/java/jdk1.8</span><br><span class="line">export PATH=$PATH:$JAVA_HOME/bin:/usr/java/scala-2.11.8/bin</span><br></pre></td></tr></tbody></table></figure></div></li></ul></body></html>]]></content>
      
      
      <categories>
          
          <category> Scala </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Scala </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker 部署SpringBoot项目整合 Redis 镜像做访问计数Demo</title>
      <link href="/2019/09/03/Docker%20%E9%83%A8%E7%BD%B2SpringBoot%E9%A1%B9%E7%9B%AE%E6%95%B4%E5%90%88%20Redis%20%E9%95%9C%E5%83%8F%E5%81%9A%E8%AE%BF%E9%97%AE%E8%AE%A1%E6%95%B0Demo/"/>
      <url>/2019/09/03/Docker%20%E9%83%A8%E7%BD%B2SpringBoot%E9%A1%B9%E7%9B%AE%E6%95%B4%E5%90%88%20Redis%20%E9%95%9C%E5%83%8F%E5%81%9A%E8%AE%BF%E9%97%AE%E8%AE%A1%E6%95%B0Demo/</url>
      
        <content type="html"><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script></head><body><h1 id="Docker-部署SpringBoot项目整合-Redis-镜像做访问计数Demo"><a href="#Docker-部署SpringBoot项目整合-Redis-镜像做访问计数Demo" class="headerlink" title="Docker 部署SpringBoot项目整合 Redis 镜像做访问计数Demo"></a>Docker 部署SpringBoot项目整合 Redis 镜像做访问计数Demo</h1><h3 id="最终效果如下"><a href="#最终效果如下" class="headerlink" title="最终效果如下"></a>最终效果如下</h3><p><a href="https://i.imgur.com/Ao8GSyX.gif" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.imgur.com/Ao8GSyX.gif" class="lazyload"></a></p><p>大概就几个步骤</p><ul><li>1.安装 Docker CE</li><li>2.运行 Redis 镜像</li><li>3.Java 环境准备</li><li>4.项目准备</li><li>5.编写 Dockerfile</li><li>6.发布项目</li><li>7.测试服务</li></ul><h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><ul><li>系统：Ubuntu 17.04 x64</li><li>Docker 17.12.0-ce</li><li>IP:45.32.31.101</li></ul><h1 id="一、安装-Docker-CE"><a href="#一、安装-Docker-CE" class="headerlink" title="一、安装 Docker CE"></a>一、安装 Docker CE</h1><p>国内<strong>不建议使用:“脚本进行安装”</strong>,会下载安装很慢,使用步骤 1 安装，看下面的链接：常规安装方式</p><h3 id="1-常规安装方式"><a href="#1-常规安装方式" class="headerlink" title="1.常规安装方式"></a>1.常规安装方式</h3><p><a href="http://www.ymq.io/2018/01/11/Docker-Install-docker-ce" target="_blank" rel="noopener">Ubuntu 17.04 x64 安装 Docker CE</a></p><h3 id="2-脚本进行安装"><a href="#2-脚本进行安装" class="headerlink" title="2.脚本进行安装"></a>2.脚本进行安装</h3><p>国内安装不建议使用脚本：</p><p>安装Docker CE</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">$ curl -fsSL get.docker.com -o get-docker.sh</span><br><span class="line">$ sudo sh get-docker.sh</span><br><span class="line"></span><br><span class="line"><output truncated></output></span><br><span class="line"></span><br><span class="line">If you would like to use Docker as a non-root user, you should now consider</span><br><span class="line">adding your user to the "docker" group with something like:</span><br><span class="line"></span><br><span class="line">  sudo usermod -aG docker your-user</span><br><span class="line"></span><br><span class="line">Remember that you will have to log out and back in for this to take effect!</span><br><span class="line"></span><br><span class="line">WARNING: Adding a user to the "docker" group will grant the ability to run</span><br><span class="line">         containers which can be used to obtain root privileges on the</span><br><span class="line">         docker host.</span><br><span class="line">         Refer to https://docs.docker.com/engine/security/security/#docker-daemon-attack-surface</span><br><span class="line">         for more information.</span><br></pre></td></tr></tbody></table></figure></div><p>验证Docker CE</p><p>通过运行hello-world 镜像 验证是否正确安装了Docker CE</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo docker run hello-world</span><br></pre></td></tr></tbody></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">root@souyunku:~# sudo docker images</span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">hello-world         latest              f2a91732366c        7 weeks ago         1.85kB</span><br></pre></td></tr></tbody></table></figure></div><h1 id="二、运行-Redis-镜像"><a href="#二、运行-Redis-镜像" class="headerlink" title="二、运行 Redis 镜像"></a>二、运行 Redis 镜像</h1><h3 id="1-运行镜像"><a href="#1-运行镜像" class="headerlink" title="1.运行镜像"></a>1.运行镜像</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker run --name redis-6379 -p 6379:6379 -d redis</span><br></pre></td></tr></tbody></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Unable to find image 'redis:latest' locally</span><br><span class="line">latest: Pulling from library/redis</span><br><span class="line">c4bb02b17bb4: Pull complete </span><br><span class="line">58638acf67c5: Pull complete </span><br><span class="line">f98d108cc38b: Pull complete </span><br><span class="line">83be14fccb07: Pull complete </span><br><span class="line">5d5f41793421: Pull complete </span><br><span class="line">ed89ff0d9eb2: Pull complete </span><br><span class="line">Digest: sha256:0e773022cd6572a5153e5013afced0f7191652d3cdf9b1c6785eb13f6b2974b1</span><br><span class="line">Status: Downloaded newer image for redis:latest</span><br><span class="line">2f1f20f672e386a61644e1c08232ea34bdfd6a0c244b55fa833fcfd6dd207288</span><br></pre></td></tr></tbody></table></figure></div><h3 id="2-检查镜像"><a href="#2-检查镜像" class="headerlink" title="2.检查镜像"></a>2.检查镜像</h3><p>查看镜像</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">root@souyunku:~# docker images redis</span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">redis               latest              1e70071f4af4        4 weeks ago         107MB</span><br></pre></td></tr></tbody></table></figure></div><p>查看镜像进程</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">root@souyunku:~# docker ps</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                    NAMES</span><br><span class="line">2f1f20f672e3        redis               "docker-entrypoint.s…"   14 seconds ago      Up 14 seconds       0.0.0.0:6379->6379/tcp   redis-6379</span><br></pre></td></tr></tbody></table></figure></div><p>查看容器进程</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">root@souyunku:~# docker container ps</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                    NAMES</span><br><span class="line">2f1f20f672e3        redis               "docker-entrypoint.s…"   7 minutes ago       Up 7 minutes        0.0.0.0:6379->6379/tcp   redis-6379</span><br></pre></td></tr></tbody></table></figure></div><h3 id="3-测试Redis服务"><a href="#3-测试Redis服务" class="headerlink" title="3.测试Redis服务"></a>3.测试Redis服务</h3><p>通过 redis-cli 连接Redis 服务，测试存储数据</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">root@souyunku:~# docker run -it --link redis-6379:redis --rm redis redis-cli -h redis -p 6379</span><br><span class="line">redis:6379> set count 1</span><br><span class="line">OK</span><br><span class="line">redis:6379> get count</span><br><span class="line">"1"</span><br><span class="line">redis:6379> exit</span><br><span class="line">root@souyunku:~#</span><br></pre></td></tr></tbody></table></figure></div><h1 id="三、Java-环境准备"><a href="#三、Java-环境准备" class="headerlink" title="三、Java 环境准备"></a>三、Java 环境准备</h1><p><strong>注意:阅读以下步骤！！！</strong></p><ul><li><p>1.Java 环境是为了，编译Github Maven SpringBoot 示例项目，准备</p></li><li><p>2.或者自己在本地编译好上传也行，那么以下Java 环境，安装:Jdk,Maven,Git,就可以不用配置</p></li></ul><h3 id="1-安装-Jdk"><a href="#1-安装-Jdk" class="headerlink" title="1.安装 Jdk"></a>1.安装 Jdk</h3><p>下载JDK 方式：1</p><p><a href="http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html" target="_blank" rel="noopener">下载Linux环境下的jdk1.8</a></p><p>下载JDK 方式：2</p><p>我在百度云盘分下的链接：YPSuperKey Broken<a href="http://pan.baidu.com/s/1jIFZF9s" target="_blank" rel="noopener">http://pan.baidu.com/s/1jIFZF9s</a> 密码：u4n4</p><p>下载JDK 方式：3</p><p>使用wget下载，</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ wget --no-cookies --no-check-certificate --header "Cookie: gpw_e24=http%3A%2F%2Fwww.oracle.com%2F; oraclelicense=accept-securebackup-cookie" "http://download.oracle.com/otn-pub/java/jdk/8u141-b15/336fa29ff2bb4ef291e347e091f7f4a7/jdk-8u141-linux-x64.tar.gz"</span><br></pre></td></tr></tbody></table></figure></div><p>注意，如果使用：下载JDK 方式：3</p><p>那么以下步骤的，jdk1.8.0_144替换成jdk1.8.0_141</p><p>开始安装</p><p>上传在 /opt 目录</p><p>解压</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ cd /opt</span><br><span class="line">$ tar zxvf jdk-8u144-linux-x64.tar.gz</span><br><span class="line">$ mv jdk1.8.0_144/ /lib/jvm</span><br></pre></td></tr></tbody></table></figure></div><p>配置环境变量</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ vi /etc/profile</span><br><span class="line">#jdk</span><br><span class="line">export JAVA_HOME=/lib/jvm</span><br><span class="line">export JRE_HOME=${JAVA_HOME}/jre   </span><br><span class="line">export CLASSPATH=.:${JAVA_HOME}/lib:${JRE_HOME}/lib   </span><br><span class="line">export PATH=${JAVA_HOME}/bin:$PATH</span><br></pre></td></tr></tbody></table></figure></div><p>使环境变量生效</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ source /etc/profile</span><br></pre></td></tr></tbody></table></figure></div><p>验证</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">root@souyunku:~# java -version</span><br><span class="line">java version "1.8.0_141"</span><br><span class="line">Java(TM) SE Runtime Environment (build 1.8.0_141-b15)</span><br><span class="line">Java HotSpot(TM) 64-Bit Server VM (build 25.141-b15, mixed mode)</span><br></pre></td></tr></tbody></table></figure></div><p>2.安装 Maven</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ apt-get install maven</span><br></pre></td></tr></tbody></table></figure></div><p>验证Maven</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">root@souyunku:~# mvn -v</span><br><span class="line">Apache Maven 3.3.9</span><br><span class="line">Maven home: /usr/share/maven</span><br><span class="line">Java version: 1.8.0_141, vendor: Oracle Corporation</span><br><span class="line">Java home: /lib/jvm/jre</span><br><span class="line">Default locale: en_US, platform encoding: UTF-8</span><br><span class="line">OS name: "linux", version: "4.10.0-35-generic", arch: "amd64", family: "unix"</span><br></pre></td></tr></tbody></table></figure></div><p>3.安装 Git</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ apt-get install git</span><br></pre></td></tr></tbody></table></figure></div><p>验证Git</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@souyunku:~# git --version</span><br><span class="line">git version 2.11.0</span><br></pre></td></tr></tbody></table></figure></div><h1 id="四、项目准备"><a href="#四、项目准备" class="headerlink" title="四、项目准备"></a>四、项目准备</h1><h3 id="1-编译项目"><a href="#1-编译项目" class="headerlink" title="1.编译项目"></a>1.编译项目</h3><p>1.自己在服务器Maven编译项目</p><p>使用 git 克隆项目</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git clone https://github.com/souyunku/other-projects.git</span><br></pre></td></tr></tbody></table></figure></div><p>使用 maven 编译项目</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cd other-projects/docker-spring-boot-demo/</span><br></pre></td></tr></tbody></table></figure></div><h3 id="2-修改项目"><a href="#2-修改项目" class="headerlink" title="2.修改项目"></a>2.修改项目</h3><p>修改 Redis 服务器地址spring.redis.host=45.32.44.217,为本地IP, 在运行 Redis 镜像时候 已经把 Redis 做成外网服务了0.0.0.0:6379->6379/tcp</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vi src/main/resources/application.properties</span><br></pre></td></tr></tbody></table></figure></div><h1 id="Redis服务器地址"><a href="#Redis服务器地址" class="headerlink" title="Redis服务器地址"></a>Redis服务器地址</h1><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">spring.redis.host=45.32.44.217</span><br></pre></td></tr></tbody></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ mvn package</span><br></pre></td></tr></tbody></table></figure></div><p>复制target/ 目录下的docker-spring-boot-demo-0.0.1-SNAPSHOT.jar项目到/opt 目录稍后会用到</p><p>$ cp target/docker-spring-boot-demo-0.0.1-SNAPSHOT.jar /opt/</p><h3 id="2-自己在本地Maven编译项目，然后上传到-opt-目录稍后会用到"><a href="#2-自己在本地Maven编译项目，然后上传到-opt-目录稍后会用到" class="headerlink" title="2.自己在本地Maven编译项目，然后上传到/opt 目录稍后会用到"></a>2.自己在本地Maven编译项目，然后上传到/opt 目录稍后会用到</h3><p>修改application.properties 的 Redis 服务器地址</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">other-projects/docker-spring-boot-demo/src/main/resources/application.properties</span><br></pre></td></tr></tbody></table></figure></div><h1 id="Redis服务器地址-1"><a href="#Redis服务器地址-1" class="headerlink" title="Redis服务器地址"></a>Redis服务器地址</h1><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">spring.redis.host=45.32.44.217</span><br></pre></td></tr></tbody></table></figure></div><h1 id="五、编写-Dockerfile"><a href="#五、编写-Dockerfile" class="headerlink" title="五、编写 Dockerfile"></a>五、编写 Dockerfile</h1><p>编写 Dockerfile 基于java:8镜像为基础</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ cd /opt/</span><br><span class="line">$ touch Dockerfile</span><br><span class="line">$ vi Dockerfile</span><br></pre></td></tr></tbody></table></figure></div><p>编辑内容个如下</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># 基于哪个镜像</span><br><span class="line">FROM java:8</span><br><span class="line"></span><br><span class="line"># 将本地文件夹挂载到当前容器</span><br><span class="line">VOLUME /tmp</span><br><span class="line"></span><br><span class="line"># 拷贝文件到容器，也可以直接写成ADD docker-spring-boot-demo-0.0.1-SNAPSHOT.jar /souyunku-app.jar</span><br><span class="line">ADD docker-spring-boot-demo-0.0.1-SNAPSHOT.jar souyunku-app.jar</span><br><span class="line">RUN bash -c 'touch /souyunku-app.jar'</span><br><span class="line"></span><br><span class="line"># 开放80端口</span><br><span class="line">EXPOSE 80</span><br><span class="line"></span><br><span class="line"># 配置容器启动后执行的命令</span><br><span class="line">ENTRYPOINT ["java","-Djava.security.egd=file:/dev/./urandom","-jar","/souyunku-app.jar"]</span><br></pre></td></tr></tbody></table></figure></div><h1 id="六、发布项目"><a href="#六、发布项目" class="headerlink" title="六、发布项目"></a>六、发布项目</h1><h3 id="1-编译镜像"><a href="#1-编译镜像" class="headerlink" title="1.编译镜像"></a>1.编译镜像</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cd /opt/</span><br><span class="line">$ docker build -t souyunku-app:v1 .</span><br></pre></td></tr></tbody></table></figure></div><p>看到如下信息，就证明你的Dockerfile写的没毛病，而且镜像也编译成功了</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">Sending build context to Docker daemon  18.72MB</span><br><span class="line">Step 1/6 : FROM java:8</span><br><span class="line">8: Pulling from library/java</span><br><span class="line">5040bd298390: Pull complete </span><br><span class="line">fce5728aad85: Pull complete </span><br><span class="line">76610ec20bf5: Pull complete </span><br><span class="line">60170fec2151: Pull complete </span><br><span class="line">e98f73de8f0d: Pull complete </span><br><span class="line">11f7af24ed9c: Pull complete </span><br><span class="line">49e2d6393f32: Pull complete </span><br><span class="line">bb9cdec9c7f3: Pull complete </span><br><span class="line">Digest: sha256:c1ff613e8ba25833d2e1940da0940c3824f03f802c449f3d1815a66b7f8c0e9d</span><br><span class="line">Status: Downloaded newer image for java:8</span><br><span class="line"> ---> d23bdf5b1b1b</span><br><span class="line">Step 2/6 : VOLUME /tmp</span><br><span class="line"> ---> Running in 0559a62b0cd5</span><br><span class="line">Removing intermediate container 0559a62b0cd5</span><br><span class="line"> ---> b1f3846913a4</span><br><span class="line">Step 3/6 : ADD docker-spring-boot-demo-0.0.1-SNAPSHOT.jar souyunku-app.jar</span><br><span class="line"> ---> 9f60dad5d2ac</span><br><span class="line">Step 4/6 : RUN bash -c 'touch /souyunku-app.jar'</span><br><span class="line"> ---> Running in 39d5c09ab614</span><br><span class="line">Removing intermediate container 39d5c09ab614</span><br><span class="line"> ---> 2b691adf7922</span><br><span class="line">Step 5/6 : EXPOSE 80</span><br><span class="line"> ---> Running in 11a577437a23</span><br><span class="line">Removing intermediate container 11a577437a23</span><br><span class="line"> ---> 78815d6fe6b2</span><br><span class="line">Step 6/6 : ENTRYPOINT ["java","-Djava.security.egd=file:/dev/./urandom","-jar","/souyunku-app.jar"]</span><br><span class="line"> ---> Running in eca10fed3d02</span><br><span class="line">Removing intermediate container eca10fed3d02</span><br><span class="line"> ---> 8ec4e85a0f05</span><br><span class="line">Successfully built 8ec4e85a0f05</span><br><span class="line">Successfully tagged souyunku-app:v1</span><br></pre></td></tr></tbody></table></figure></div><h3 id="2-查看镜像"><a href="#2-查看镜像" class="headerlink" title="2.查看镜像"></a>2.查看镜像</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">root@souyunku:/opt# docker images souyunku-app</span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">souyunku-app        v1                  8ec4e85a0f05        2 minutes ago       681MB</span><br></pre></td></tr></tbody></table></figure></div><h3 id="3-运行镜像"><a href="#3-运行镜像" class="headerlink" title="3.运行镜像"></a>3.运行镜像</h3><p>后台守护进程运行，然后把容器端口映射到，外网端口80</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@souyunku:/opt# docker run --name MySpringBoot -d -p 80:80 souyunku-app:v1</span><br><span class="line">e68d438603619e363883d4eae65d3918e1c3e00f867731207bccf06f5690dc64</span><br></pre></td></tr></tbody></table></figure></div><h3 id="4-查看进程"><a href="#4-查看进程" class="headerlink" title="4.查看进程"></a>4.查看进程</h3><p>查看容器进程，可以看到redis 在 6379端口，MySpringBoot 项目在 80端口</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">root@souyunku:/opt# docker container ps</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED              STATUS              PORTS                    NAMES</span><br><span class="line">e68d43860361        souyunku-app:v1     "java -Djava.securit…"   About a minute ago   Up About a minute   0.0.0.0:80->80/tcp       MySpringBoot</span><br><span class="line">0f9646171edd        redis               "docker-entrypoint.s…"   39 minutes ago       Up 39 minutes       0.0.0.0:6379->6379/tcp   redis-6379</span><br></pre></td></tr></tbody></table></figure></div><h1 id="七、测试服务"><a href="#七、测试服务" class="headerlink" title="七、测试服务"></a>七、测试服务</h1><p>浏览器访问：<a href="http://127.0.0.1/,当然我没有输入127.0.0.1" target="_blank" rel="noopener">http://127.0.0.1/,当然我没有输入127.0.0.1</a> 我是在服务器上直接做的，用的公网IP</p><p><a href="https://i.imgur.com/YEk6gyD.gif" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.imgur.com/YEk6gyD.gif" class="lazyload"></a></p><p>Docker Compose<br>Docker Compose 是 Docker 官方编排（Orchestration）项目之一，负责快速在集群中部署分布式应用。</p><p>一个使用Docker容器的应用，通常由多个容器组成。使用Docker Compose，不再需要使用shell脚本来启动容器。在配置文件中，所有的容器通过services来定义，然后使用docker-compose脚本来启动，停止和重启应用，和应用中的服务以及所有依赖服务的容器。</p><p>GitHub :<a href="https://github.com/souyunku/other-projects/tree/master/docker-spring-boot-demo" target="_blank" rel="noopener">docker-spring-boot-demo</a></p><p>Contact<br>作者：鹏磊<br>出处：<a href="http://www.ymq.io/2018/01/11/Docker-deploy-spring-boot-Integrate-redis" target="_blank" rel="noopener">http://www.ymq.io/2018/01/11/Docker-deploy-spring-boot-Integrate-redis</a></p></body></html>]]></content>
      
      
      <categories>
          
          <category> Spring Boot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> Spring Boot </tag>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用docker安装kafka</title>
      <link href="/2019/08/30/kafkaManager%E7%9B%91%E6%8E%A7%E5%B7%A5%E5%85%B7%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/"/>
      <url>/2019/08/30/kafkaManager%E7%9B%91%E6%8E%A7%E5%B7%A5%E5%85%B7%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script></head><body><h3 id="下载kafkaManager"><a href="#下载kafkaManager" class="headerlink" title="下载kafkaManager"></a>下载kafkaManager</h3><p>源码下载地址：<a href="https://github.com/yahoo/kafka-manager/" target="_blank" rel="noopener">https://github.com/yahoo/kafka-manager/</a><br>下载源码，然后上传解压准备编译</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd /export/servers/kafka-manager-1.3.3.15</span><br><span class="line">unzip kafka-manager-1.3.3.15.zip -d  ../servers/</span><br><span class="line">./sbt clean dist</span><br></pre></td></tr></tbody></table></figure></div><p>编译完成之后，我们需要的安装包就在这个路径之下</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/export/servers/kafka-manager-1.3.3.15/target/universal</span><br></pre></td></tr></tbody></table></figure></div><p>将我们编译好的kafkamanager的压缩包解压到指定目录</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd  /export/servers/kafka-manager-1.3.3.15/target/universal</span><br><span class="line">unzip kafka-manager-1.3.3.15.zip -d /export/servers/</span><br></pre></td></tr></tbody></table></figure></div><p>修改配置文件</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /export/servers/kafka-manager-1.3.3.15/</span><br><span class="line">vim  conf/application.conf</span><br></pre></td></tr></tbody></table></figure></div><p>配置修改为如下</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kafka-manager.zkhosts="node01:2181,node02:2181,node03:2181"</span><br></pre></td></tr></tbody></table></figure></div><p>为kafkamanager的启动脚本添加执行权限</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /export/servers/kafka-manager-1.3.3.15/bin</span><br><span class="line">chmod u+x ./*</span><br></pre></td></tr></tbody></table></figure></div><p>启动kafkamanager进程</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /export/servers/kafka-manager-1.3.3.15</span><br><span class="line">nohup bin/kafka-manager  -Dconfig.file=/export/servers/kafka-manager-1.3.3.15/conf/application.conf -Dhttp.port=8070   2>&1 &</span><br></pre></td></tr></tbody></table></figure></div><p>浏览器页面访问<br><a href="http://node01:8070/" target="_blank" rel="noopener">http://node01:8070/</a></p><p>在页面中的Cluster配置好指定的kafka就可以监控了</p><p><a href="https://s2.ax1x.com/2020/02/26/3Ufphq.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://s2.ax1x.com/2020/02/26/3Ufphq.png" class="lazyload"></a></p></body></html>]]></content>
      
      
      <categories>
          
          <category> 消息队列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 消息队列 </tag>
            
            <tag> kafka </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一分钟实现内网穿透（ngrok服务器搭建）</title>
      <link href="/2019/08/28/%E4%B8%80%E5%88%86%E9%92%9F%E5%AE%9E%E7%8E%B0%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%EF%BC%88ngrok%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA%EF%BC%89/"/>
      <url>/2019/08/28/%E4%B8%80%E5%88%86%E9%92%9F%E5%AE%9E%E7%8E%B0%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%EF%BC%88ngrok%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script></head><body><p>简单来说内网穿透的目的是：让外网能访问你本地的应用，例如在外网打开你本地<a href="http://127.0.0.1指向的Web站点。" target="_blank" rel="noopener">http://127.0.0.1指向的Web站点。</a></p><p>最近公司的花生壳到期了，要续费，发现价格一直在涨，都是5年以上的老用户，旗舰版都没有实现内网完全穿透，打算自己动手替换这个服务，中间走了不少的弯路，这里记录一些文字为大家提供参考。</p><p>随着开发与运行移动互联网的应用越来越多对打通内外网的需要也更加迫切，如微信开发、IOS与Android开发等。</p><p>虽然租用VPS、ECS等服务器可以解决很多问题但高性能的外网服务器价格非常贵还有数据安全问题，我选择的是公网服务器仅做代理与轻量应用，复杂的应用部署到内网服务器再穿透访问。</p><h1 id="一、内网穿透概要"><a href="#一、内网穿透概要" class="headerlink" title="一、内网穿透概要"></a>一、内网穿透概要</h1><p>为了理解内网穿透我们先来了解几个概念：</p><h3 id="1-1、IP地址"><a href="#1-1、IP地址" class="headerlink" title="1.1、IP地址"></a>1.1、IP地址</h3><p><strong>网络中唯一定位一台设备的逻辑地址</strong>，类似我们的电话号码</p><p>在互联网中我们访问一个网站或使用一个网络服务最终都需要通过IP定位到每一台主机，如访问baidu网站：<br><a href="8664A94F41774DC99906C452E415CCB2" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="8664A94F41774DC99906C452E415CCB2" class="lazyload"></a></p><p>其中119.75.213.61就是一个公网的IP地址，他最终指向了一台服务器。</p><p>IP地址是IP协议提供的一种统一的地址格式，它为互联网上的每一个网络和每一台主机分配一个逻辑地址，以此来屏蔽物理地址的差异。</p><p>内网IP可以同时出现在多个不同的局域网络中，如A公司的U1用户获得了192.168.0.5，B公司的U3用户也可以获得192.168.0.5；但公网IP是唯一的，因为我们只有一个Internet。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//局域网可使用的网段（私网地址段）有三大段：</span><br><span class="line">10.0.0.0~10.255.255.255（A类）</span><br><span class="line">172.16.0.0~172.31.255.255（B类）</span><br><span class="line">192.168.0.0~192.168.255.255（C类）</span><br></pre></td></tr></tbody></table></figure></div><h3 id="1-2、域名"><a href="#1-2、域名" class="headerlink" title="1.2、域名"></a>1.2、域名</h3><p><strong>域名是IP的别名，便于记忆，域名最终通过DNS解析成IP地址。</strong><br><a href="3E6ACF5E2C4D41F4940ACED7AFB22B47" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="3E6ACF5E2C4D41F4940ACED7AFB22B47" class="lazyload"></a></p><p>IP V4是一个32位的数字，IP V6有128位，要记住一串毫无意义的数字非常困难，域名解决了这个问题。</p><p>如<a href="http://www.zhangguo.com.cn就是一个域名，cn表示地区，com表示商业机构，zhangguo是公司名称，www是主机名" target="_blank" rel="noopener">www.zhangguo.com.cn就是一个域名，cn表示地区，com表示商业机构，zhangguo是公司名称，www是主机名</a></p><p><a href="9D1A55DD04844185AC7E5452B5D33E06" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="9D1A55DD04844185AC7E5452B5D33E06" class="lazyload"></a></p><p>DNS查询过程如下，最终将域名变成IP地址</p><p><a href="A6376FD5CBA5458DA96E89B782C3A46B" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="A6376FD5CBA5458DA96E89B782C3A46B" class="lazyload"></a></p><h3 id="1-3、NAT"><a href="#1-3、NAT" class="headerlink" title="1.3、NAT"></a>1.3、NAT</h3><p><strong>NAT（Network Address Translation）即网络地址转换，NAT能将其本地地址转换成全球IP地址。</strong></p><p>内网的一些主机本来已经分配到了本地IP地址（如局域网DHCP分配的IP），但现在又想和因特网上的主机通信（并不需要加密）时，可使用NAT方法。</p><p>通过使用少量的公有IP 地址代表较多的私有IP 地址的方式，将有助于减缓可用的IP地址空间的枯竭。</p><p>NAT不仅能解决了lP地址不足与共享上网的问题，而且还能够有效地避免来自网络外部的攻击，隐藏并保护网络内部的计算机。</p><p>多路由器可完成NAT功能。</p><p>NAT的实现方式：</p><p><strong>静态转换</strong>：是指将内部网络的私有IP地址转换为公有IP地址，IP地址对是一对一。</p><p><strong>动态转换</strong>：是指将内部网络的私有IP地址转换为公用IP地址时，IP地址是不确定的，是随机的。</p><p><strong>端口多路复用（Port address Translation,PAT)</strong>：内部网络的所有主机均可共享一个合法外部IP地址实现对Internet的访问，从而可以最大限度地节约IP地址资源。同时又可隐藏网络内部的所有主机，有效避免来自internet的攻击。因此，目前网络中应用最多的就是端口多路复用方式。</p><p><strong>应用程序级网关技术（Application Level Gateway）ALG</strong>：传统的NAT技术只对IP层和传输层头部进行转换处理，ALG它能对这些应用程序在通信时所包含的地址信息也进行相应的NAT转换。</p><p><a href="2900DB8519DA4E409ACFE364F0A978FA" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="2900DB8519DA4E409ACFE364F0A978FA" class="lazyload"></a></p><p><a href="2732EDAFFCA54EEF9BCFC61277E051F5" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="2732EDAFFCA54EEF9BCFC61277E051F5" class="lazyload"></a></p><h3 id="1-4、Proxy"><a href="#1-4、Proxy" class="headerlink" title="1.4、Proxy"></a>1.4、Proxy</h3><p>Proxy即代理，被广泛应用于计算机领域，主要分为正向代理与反向代理：</p><h3 id="1-4-1、正向代理"><a href="#1-4-1、正向代理" class="headerlink" title="1.4.1、正向代理"></a>1.4.1、正向代理</h3><p>比如X花店代A,B,C,D,E五位男生向Candy女生送匿名的生日鲜花，这里的X花店就是5位顾客的代理，花店代理的是客户，隐藏的是客户。这就是我们常说的代理。</p><p><strong>正向代理隐藏了真实的请求客户端</strong>。服务端不知道真实的客户端是谁，客户端请求的服务都被代理服务器代替来请求，某些科学上网工具扮演的就是典型的正向代理角色。用浏览器访问<a href="http://www.google.com时被墙了，于是你可以在国外搭建一台代理服务器，让代理帮我去请求google.com，代理把请求返回的相应结构再返回给我。" target="_blank" rel="noopener">http://www.google.com时被墙了，于是你可以在国外搭建一台代理服务器，让代理帮我去请求google.com，代理把请求返回的相应结构再返回给我。</a></p><p><a href="68B6D7FE9B274D80921C7818B07A6368" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="68B6D7FE9B274D80921C7818B07A6368" class="lazyload"></a></p><p>当多个客户端访问服务器时服务器不知道真正访问自己的客户端是那一台。正向代理中,proxy和client同属一个LAN,对server透明;</p><p><a href="EA650A1BACF649A99ACCE08E979B031C" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="EA650A1BACF649A99ACCE08E979B031C" class="lazyload"></a></p><h3 id="1-4-2、反向代理"><a href="#1-4-2、反向代理" class="headerlink" title="1.4.2、反向代理"></a>1.4.2、反向代理</h3><p>拨打10086客服电话，接线员可能有很多个，调度器会智能的分配一个接线员与你通话。这里的调度器就是一个代理，只不过他代理的是接线员，客户端不能确定真正与自己通话的人，隐藏与保护的是目标对象。</p><p><strong>反向代理隐藏了真实的服务端</strong>，当我们请求 ww.baidu.com 的时候，就像拨打10086一样，背后可能有成千上万台服务器为我们服务，但具体是哪一台，你不知道，也不需要知道，你只需要知道反向代理服务器是谁就好了，ww.baidu.com 就是我们的反向代理服务器，反向代理服务器会帮我们把请求转发到真实的服务器那里去。Nginx就是性能非常好的反向代理服务器，用来做负载均衡。</p><p><a href="42F044A8FCFF4F958D1360040B858017" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="42F044A8FCFF4F958D1360040B858017" class="lazyload"></a></p><p>反向代理中,proxy和server同属一个LAN,对client透明。</p><p><a href="9EB94628908B4E058157079856FF19D4" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="9EB94628908B4E058157079856FF19D4" class="lazyload"></a></p><p><a href="https://www.zhihu.com/question/24723688" target="_blank" rel="noopener">了解更多关于代理内容请点击这里。</a></p><h3 id="1-5、DDNS"><a href="#1-5、DDNS" class="headerlink" title="1.5、DDNS"></a>1.5、DDNS</h3><p>DDNS即动态域名解析，是<strong>将用户的动态IP地址映射到一个固定的域名解析服务上</strong>，用户每次连接网络的时候，客户端程序就会通过信息传递把该主机的动态IP地址传送给位于服务商主机上的服务器程序，服务程序负责提供DNS服务并实现动态域名解析。就是说DDNS捕获用户每次变化的IP地址，然后将其与域名相对应，这样域名就可以始终解析到非固定IP的服务器上，互联网用户通过本地的域名服务器获得网站域名的IP地址，从而可以访问网站的服务。</p><h3 id="1-6、为什么需要内网穿透"><a href="#1-6、为什么需要内网穿透" class="headerlink" title="1.6、为什么需要内网穿透"></a>1.6、为什么需要内网穿透</h3><p><strong>当内网中的主机没有静态IP地址要被外网稳定访问时可以使用内网穿透</strong></p><p>在互联网中唯一定位一台主机的方法是通过公网的IP地址，但固定IP是一种非常稀缺的资源，不可能给每个公司都分配一个，且许多中小公司不愿意为高昂的费用买单，多数公司直接或间接的拨号上网，电信部门会给接入网络的用户分配IP地址，以前上网用户少的时候基本分配的都是临时的静态IP地址，租约过了之后可能会更换成另一个IP地址，这样外网访问就不稳定，因为内网的静态IP地址一直变化，为了解决这个问题可以使用动态域名解析的办法变换域名指向的静态IP地址。但是现在越来越多的上网用户使得临时分配的静态IP地址也不够用了，电信部门开始分配一些虚拟的静态IP地址，这些IP是公网不能直接访问的，如以125开头的一些IP地址，以前单纯的动态域名解析就不好用了。</p><h3 id="1-7、内网穿透的定义与障碍"><a href="#1-7、内网穿透的定义与障碍" class="headerlink" title="1.7、内网穿透的定义与障碍"></a>1.7、内网穿透的定义与障碍</h3><p><strong>简单来说实现不同局域网内的主机之间通过互联网进行通信的技术叫内网穿透。</strong></p><p><strong>障碍一</strong>：位于局域网内的主机有两套 IP 地址，一套是局域网内的 IP 地址，通常是动态分配的，仅供局域网内的主机间通信使用；一套是经过网关转换后的外网 IP 地址，用于与外网程序进行通信。</p><p><a href="69A07B79D4664CD6855F990F0C909E06" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="69A07B79D4664CD6855F990F0C909E06" class="lazyload"></a></p><p><strong>障碍二</strong>：位于不同局域网内的两台主机，即使是知道了对方的 IP 地址和端口号，“一厢情愿”地将数据包发送过去，对方也是接收不到的。</p><p>因为出于安全起见，除非是主机主动向对方发出了连接请求（这时会在该主机的数据结构中留下一条记录），否则，当主机接收到数据包时，如果在其数据结构中查询不到对应的记录，那些不请自来的数据包将会被丢弃。</p><p><a href="827A49D0A8554955AD7545F87F9C00C5" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="827A49D0A8554955AD7545F87F9C00C5" class="lazyload"></a></p><p><strong>解决办法：要想解决以上两大障碍，我们需要借助一台具有公网 IP 的服务器进行桥接。</strong></p><h1 id="二、常见的内网穿透产品"><a href="#二、常见的内网穿透产品" class="headerlink" title="二、常见的内网穿透产品"></a>二、常见的内网穿透产品</h1><h3 id="2-1、花生壳"><a href="#2-1、花生壳" class="headerlink" title="2.1、花生壳"></a>2.1、花生壳</h3><p>花生壳既是内网穿透软件、内网映射软件,也是端口映射软件。规模最大，较正规，完善。</p><p>收费高，使用简单</p><p>官网：<a href="http://www.oray.com/" target="_blank" rel="noopener">http://www.oray.com/</a></p><p><a href="5B96B046290A43D8863388092F3372FF" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="5B96B046290A43D8863388092F3372FF" class="lazyload"></a></p><h3 id="2-2、Nat123"><a href="#2-2、Nat123" class="headerlink" title="2.2、Nat123"></a>2.2、Nat123</h3><p>nat123是内网端口映射与动态域名解析软件，在内网启动映射后，可在外网访问连接内网网站等应用。整个网站我都没有找到客服电话，网友发了一些反面的评价</p><p>收费，使用简单</p><p>官网：<a href="http://www.nat123.com" target="_blank" rel="noopener">http://www.nat123.com</a></p><p><a href="4B0F818B2E3F4E62972B350D4314602F" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="4B0F818B2E3F4E62972B350D4314602F" class="lazyload"></a></p><p>###2.3、NATAPP<br>NATAPP基于ngrok的国内内网穿透服务，免费版会强制更换域名，临时用一下可以</p><p>收费，使用简单</p><p>官网：<a href="https://natapp.cn/" target="_blank" rel="noopener">https://natapp.cn/</a></p><p><a href="44E177A4213040C694C0D0A1B2BC8457" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="44E177A4213040C694C0D0A1B2BC8457" class="lazyload"></a></p><h3 id="2-4、frp与其它"><a href="#2-4、frp与其它" class="headerlink" title="2.4、frp与其它"></a>2.4、frp与其它</h3><p>frp 是一个高性能的反向代理应用，可以帮助您轻松地进行内网穿透，对外网提供服务，支持 tcp, http, https 等协议类型，并且 web 服务支持根据域名进行路由转发。</p><p>开源免费</p><p>使用相对复杂，需要代理服务器支持</p><p>官网：<a href="https://github.com/fatedier/frp" target="_blank" rel="noopener">https://github.com/fatedier/frp</a></p><p>文档：查看帮助文档，简书示例</p><p>利用处于内网或防火墙后的机器，对外网环境提供 http 或 https 服务。</p><p>对于 http, https 服务支持基于域名的虚拟主机，支持自定义域名绑定，使多个域名可以共用一个80端口。</p><p>利用处于内网或防火墙后的机器，对外网环境提供 tcp 和 udp 服务，例如在家里通过 ssh 访问处于公司内网环境内的主机。</p><p><a href="0B56DA9B6F234F9994895B56DCA3731B" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="0B56DA9B6F234F9994895B56DCA3731B" class="lazyload"></a></p><p>因为frp 仍然处于前期开发阶段，未经充分测试与验证，不推荐用于生产环境，所有我选择了ngrok，资料比较多。</p><p>还有如圣剑内网通、ngrok（开源免费）、<a href="https://post.smzdm.com/p/564494/" target="_blank" rel="noopener">更多办法</a></p><h1 id="三、ngrok"><a href="#三、ngrok" class="headerlink" title="三、ngrok"></a>三、ngrok</h1><p>ngrok是一个反向代理，通过在公共的端点和本地运行的Web服务器之间建立一个安全的通道。ngrok可捕获和分析所有通道上的流量，便于后期分析与响应。</p><p>开源免费</p><p>官网：<a href="https://ngrok.com/" target="_blank" rel="noopener">https://ngrok.com/</a></p><p>源码：<a href="https://github.com/inconshreveable/ngrok" target="_blank" rel="noopener">https://github.com/inconshreveable/ngrok</a></p><p><a href="E968976674174F4FA0CFB4B00BFDF2C3" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="E968976674174F4FA0CFB4B00BFDF2C3" class="lazyload"></a></p><p>ngrok1.x开源，ngrok2.x不开源</p><p>ngrok使用go语言开发，源代码分为客户端与服务器端。</p><p>国内免费服务器：<a href="http://ngrok.ciqiuwl.cn/，更多免费服务器请大家挖掘，资源共享，我随时更新：）" target="_blank" rel="noopener">http://ngrok.ciqiuwl.cn/，更多免费服务器请大家挖掘，资源共享，我随时更新：）</a></p><p>如果有服务器，仅客户端的使用是不复杂的，以上面的免费服务器为示例完成内网穿透</p><p>现在假定我的本地已成功部署了一个网站，访问地址为127.0.0.1，想内网穿透后被公网上的用户访问，一般步骤如下：</p><p><strong>步骤1、下载windows版本的客户端，解压。一般在为你提供代理服务器的网站上找你要下载的客户端</strong>：</p><p><a href="3A2C462626574DBAB583D9E268EB75B7" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="3A2C462626574DBAB583D9E268EB75B7" class="lazyload"></a></p><p><strong>步骤2、在命令（cmd）行下进入到ngrok客户端目录下</strong></p><p><a href="7E69F7DFF2D24E01B550D4DD87E4CEDA" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="7E69F7DFF2D24E01B550D4DD87E4CEDA" class="lazyload"></a></p><p><strong>步骤3、执行 ngrok -config=ngrok.cfg -subdomain xxx 80 //(xxx 是你自定义的域名前缀)，建议批处理</strong></p><p><a href="9685F6FB19094A9BA68AEC600E271C6F" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="9685F6FB19094A9BA68AEC600E271C6F" class="lazyload"></a></p><p>如果连接成功，会提示如下信息：</p><p><a href="07351B0A640041CA91D262D0753AF557" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="07351B0A640041CA91D262D0753AF557" class="lazyload"></a></p><p><strong>这一步如果你认为太麻烦，可以直接运行目录下的start.bat批处理文件就不用进DOS环境了。运行start.bat直接跳过2，3步</strong></p><p><strong>步骤4、如果开启成功 你就可以使用 xxx.ngrok.xiaomiqiu.cn 来访问你本机的 127.0.0.1:80 的服务了，当然你必须确定的是你本机的Web是可以正常访问的。</strong></p><p><a href="655B1027C1C64EA69D7084952CB263A0" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="655B1027C1C64EA69D7084952CB263A0" class="lazyload"></a></p><p>注意：</p><p>如果你自己有顶级域名，想通过自己的域名来访问本机的项目，那么先将自己的顶级域名解析到120.25.161.137(域名需要已备案哦，80端口必须备案)，然后执行 ngrok -config=ngrok.cfg -hostname xxx.xxx.xxx 80 //(xxx.xxx.xxx是你自定义的顶级域名)</p><h1 id="四、ubuntu下生成ngrok服务器主程序"><a href="#四、ubuntu下生成ngrok服务器主程序" class="headerlink" title="四、ubuntu下生成ngrok服务器主程序"></a>四、ubuntu下生成ngrok服务器主程序</h1><h3 id="4-1、步骤与先决条件"><a href="#4-1、步骤与先决条件" class="headerlink" title="4.1、步骤与先决条件"></a>4.1、步骤与先决条件</h3><p>如果你只是临时穿透或调试用，到第三步基本就可以了，但如果想作为稳定的商业服务，用别人的服务器还是受制于人，这里我们准备搭建自己的ngrok服务器。大致的步骤如下：</p><p><a href="962FF6F12F72406884DD234CB2A7BC46" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="962FF6F12F72406884DD234CB2A7BC46" class="lazyload"></a></p><p>ngrok服务器可以是多种平台，如windows、Linux（CentOS、Debian、Ubuntu等）、Mac OS等。</p><p><strong>编译源代码生成应用强烈建议大家使用linux环境，windows肯定可以成功，但非常麻烦，我在windows操作系统上兜了一个大圈圈。</strong></p><p><strong>先决条件</strong>：</p><p>a)、您有一台公网上的服务器，如阿里云的ECS</p><p>b)、您有一个域名，最好ICP备案成功，不然80端口没有办法使用，不过像微信开发是不使用80端口的，可以用nginx代理转换。</p><h3 id="4-2、安装ubuntu操作系统"><a href="#4-2、安装ubuntu操作系统" class="headerlink" title="4.2、安装ubuntu操作系统"></a>4.2、安装ubuntu操作系统</h3><p>在linux环境下编译ngrok的源代码比windows下 方便很多，这里我们选择使用ubuntu，获得ubuntu的方法有如下几种：</p><p>1）、全新安装ubuntu系统</p><p>2）、申请VPS服务器， 阿里云、腾讯云、华为云、百度云、新浪云等，仅编译一下这种方法不错</p><p>3）、在虚拟机中安装ubuntu系统</p><p>综合考虑我选择了在虚拟机中安装ubuntu操作系统</p><p><a href="E2AB70E76091449BAE331FE9C37392CF" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="E2AB70E76091449BAE331FE9C37392CF" class="lazyload"></a></p><h3 id="4-2-1、安装VMware虚拟机"><a href="#4-2-1、安装VMware虚拟机" class="headerlink" title="4.2.1、安装VMware虚拟机"></a>4.2.1、安装VMware虚拟机</h3><p>VMware Workstation是一款功能强大的虚拟机软件，在不影响本机操作系统的情况下，用户可以在虚拟机中同时运行不同版本的操作系统，用于开发、测试以及部署工作。</p><p>VMware Workstation 12 pro下载：VMware-workstation-full-12.1.0-3272444.exe</p><p>序列号：5A02H-AU243-TZJ49-GTC7K-3C61N（商业应用请购买正式版权，这里仅为学习使用）</p><p>1）、双击VMware Workstation 12安装文件，或者右键管理员身份打开，提示是否允许更改，点击是；</p><p>2）、打开VMware安装向导，点击下一步；</p><p><a href="5D1DDC4380914E949ED507F3F975746E" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="5D1DDC4380914E949ED507F3F975746E" class="lazyload"></a></p><p>3）、VMware Workstation 12激活步骤：</p><ul><li>　　方法一、首次开启直接输入上文密钥，即可激活；</li><li>　　方法二、首次开启选择试用，进入试用后按一下步骤激活：</li></ul><p>　　a、打开虚拟机主界面，点击“帮助”—“输入许可证密钥”；<br>　　<br><a href="0DBAE0E80B3A44B3BEA056A3E912E893" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="0DBAE0E80B3A44B3BEA056A3E912E893" class="lazyload"></a></p><p>b、在密钥输入框输入永久许可证密钥5A02H-AU243-TZJ49-GTC7K-3C61N，确定；<a href="http://www.mamicode.com/info-detail-1509515.html" target="_blank" rel="noopener">更多</a></p><h3 id="4-2-2、安装ubuntu到虚拟机"><a href="#4-2-2、安装ubuntu到虚拟机" class="headerlink" title="4.2.2、安装ubuntu到虚拟机"></a>4.2.2、安装ubuntu到虚拟机</h3><p>1)、下载ubuntu操作系统镜像</p><p>下载地址：<a href="https://www.ubuntu.com/download/desktop" target="_blank" rel="noopener">https://www.ubuntu.com/download/desktop</a></p><p>这里我下载的是ubuntu-16.04.3-desktop-amd64.iso</p><p><a href="752C59929F2F4478A49D794CDDD0F85F" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="752C59929F2F4478A49D794CDDD0F85F" class="lazyload"></a></p><p>2)、在VMware中安装ubuntu</p><p>打开VMware点击“创建新的虚拟机”</p><p><a href="4EEFA54B30624B5A8A0E7DA78615CC33" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="4EEFA54B30624B5A8A0E7DA78615CC33" class="lazyload"></a></p><p>向导选择自定义</p><p><a href="D6A423A2F49A48EC800E5208F289171B" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="D6A423A2F49A48EC800E5208F289171B" class="lazyload"></a></p><p>然后下一步再下一步，直到这里，稍后再安装系统</p><p><a href="B18AED600BC74E7EA71A0FFEDD7A7C2C" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="B18AED600BC74E7EA71A0FFEDD7A7C2C" class="lazyload"></a></p><p>后面设置处理器和内存的，电脑配置好的可以试试，否则采用默认的，博主这里是采用默认的，然后下一，直到这里，选择将虚拟机存储为单个磁盘：</p><p><a href="5C6A9F1634C74BFBA75C5505D8606B22" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="5C6A9F1634C74BFBA75C5505D8606B22" class="lazyload"></a></p><p>个人建议至少20G硬盘空间，内存建议给1.5G，当然也要看电脑本身的配置，1G的内存跑起来比较卡。</p><p>其它的步骤比较简单，更多细节可以参考这里，《<a href="http://blog.csdn.net/u013142781/article/details/50529030" target="_blank" rel="noopener">VMware Ubuntu安装详细过程</a>》。</p><h3 id="4-2-3、配置ubuntu系统"><a href="#4-2-3、配置ubuntu系统" class="headerlink" title="4.2.3、配置ubuntu系统"></a>4.2.3、配置ubuntu系统</h3><p>当ubuntu系统安装成功后，在虚拟机中可以启动ubuntu系统，启动后的系统如下：</p><p><a href="5255A726ABB64A549CFAB8762302F3A8" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="5255A726ABB64A549CFAB8762302F3A8" class="lazyload"></a></p><p>ubuntu系统的使用还是有许多内容的，这里需要设置的内容如下：</p><p>a)、设置上网</p><p>就是在ubuntu中可以访问外网，可以使用多种形式</p><p><a href="DBA023A822174FB0A6FA077452F7A904" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="DBA023A822174FB0A6FA077452F7A904" class="lazyload"></a></p><p>b)、设置语言</p><p>可以选择使用中文版的ubuntu语言环境</p><p><a href="B45A03098DF24217AEF6F47D535AC43A" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="B45A03098DF24217AEF6F47D535AC43A" class="lazyload"></a></p><p>c)、设置屏幕分辨率</p><p>如果不设置默认的屏幕比较小</p><p><a href="9316E79558094B0DBCCC7AF5C7AFD4C6" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="9316E79558094B0DBCCC7AF5C7AFD4C6" class="lazyload"></a></p><p>d)、设置以root超级管理员的身份登录</p><p>许多操作要求管理身份</p><p><a href="1F474D045AD5422C89E31D64FBB04ECE" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="1F474D045AD5422C89E31D64FBB04ECE" class="lazyload"></a></p><p>e)、安装VMware Tools工具</p><p>只有在VMware虚拟机中安装好了VMware Tools，才能实现主机与虚拟机之间的文件共享，同时可支持自由拖拽的功能，鼠标也可在虚拟机与主机之间自由移动（不用再按ctrl+alt），且虚拟机屏幕也可实现全屏化。<br>VMware Tools是VMware虚拟机中自带的一种增强工具，相当于VirtualBox中的增强功能（Sun VirtualBox Guest Additions），是VMware提供的增强虚拟显卡和硬盘性能、以及同步虚拟机与主机时钟的驱动程序。</p><p><a href="A9292B0AAFC545A8BF228E7D427D925A" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="A9292B0AAFC545A8BF228E7D427D925A" class="lazyload"></a></p><p>注意如果这里是灰色的需要您将linux.iso镜像加载到虚拟光驱中，一般在VM的安装目录下有，如果没有您需要自行下载。</p><p>说明：ubuntu的使用不是本文的重点，相关操作请大家自行查找。</p><h3 id="4-3、生成ngrok服务器与客户端应用程序"><a href="#4-3、生成ngrok服务器与客户端应用程序" class="headerlink" title="4.3、生成ngrok服务器与客户端应用程序"></a>4.3、生成ngrok服务器与客户端应用程序</h3><p><strong>4.3.1. 导出源代码</strong><br>ngrok的源代码托管在github上，可以先在ubuntu下安装git再将ngrok的源代码克隆到本地。</p><p><a href="F46F4B31CEDC4F9E856A0E3001EF335C" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="F46F4B31CEDC4F9E856A0E3001EF335C" class="lazyload"></a></p><p>其实也可以直接下载到本地后解压，这里使用命令行完成。</p><p>启动ubuntu，开打命令行（终端），如下所示：</p><p><a href="043040F649504CD3833B7C37E6B28A15" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="043040F649504CD3833B7C37E6B28A15" class="lazyload"></a></p><p>以root身份执行如下命令：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mkdir ngrok #创建名称为ngrok的目录</span><br><span class="line"></span><br><span class="line">apt-get update #更新包管理器</span><br><span class="line"></span><br><span class="line">apt-get install git  #安装git</span><br><span class="line"></span><br><span class="line">git clone https://github.com/inconshreveable/ngrok.git ngrok2 #将ngrok源代码克隆回本地</span><br></pre></td></tr></tbody></table></figure></div><p>成功执行后如下所示：</p><p><a href="80A794FED4194D09983E837F856EB4A1" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="80A794FED4194D09983E837F856EB4A1" class="lazyload"></a></p><p>导出成功后的源代码：</p><p><a href="7290BDE28DF946168DF88D47F93DA344" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="7290BDE28DF946168DF88D47F93DA344" class="lazyload"></a></p><p>PS. 直接在服务器上下载的话实在太慢，可以先在本地下载好，然后用ftp放到服务器上去直接用，如果安装了VMware tools直接拖进去就可以了。</p><h3 id="4-3-2-安装Go语言开发环境"><a href="#4-3-2-安装Go语言开发环境" class="headerlink" title="4.3.2. 安装Go语言开发环境"></a>4.3.2. 安装Go语言开发环境</h3><p>直接在命令模式下执行如下指令：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install golang #安装go语言</span><br></pre></td></tr></tbody></table></figure></div><p>执行结果如下：</p><p><a href="76E39DDD873F45C6A03421E8681F5EC1" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="76E39DDD873F45C6A03421E8681F5EC1" class="lazyload"></a></p><h3 id="4-3-3-更改ngrok域名"><a href="#4-3-3-更改ngrok域名" class="headerlink" title="4.3.3. 更改ngrok域名"></a>4.3.3. 更改ngrok域名</h3><p>在自己的域名管理中添加解析A记录，如下所示：</p><p><a href="A79F311B536C48EDB3153E1462DC1743" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="A79F311B536C48EDB3153E1462DC1743" class="lazyload"></a></p><p>将*.ngrok与ngrok都指向您的主机IP。</p><p>默认的域名是ngrok自己的，要替换成您自己的域名</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export GOPATH=/usr/local/ngrok/  #设置环境变量，Go语言的安装位置</span><br><span class="line">export NGROK_DOMAIN="ngrok.yourdomain.com"  #设置环境变量，ngrok域名</span><br></pre></td></tr></tbody></table></figure></div><p>PS. ngrok名称可以任意，推荐名称为ngrok或者tunnel </p><h3 id="4-3-4-为域名生成证书"><a href="#4-3-4-为域名生成证书" class="headerlink" title="4.3.4. 为域名生成证书"></a>4.3.4. 为域名生成证书</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">openssl genrsa -out rootCA.key 2048</span><br><span class="line">openssl req -x509 -new -nodes -key rootCA.key -subj "/CN=$NGROK_DOMAIN" -days 5000 -out rootCA.pem</span><br><span class="line">openssl genrsa -out server.key 2048</span><br><span class="line">openssl req -new -key server.key -subj "/CN=$NGROK_DOMAIN" -out server.csr</span><br><span class="line">openssl x509 -req -in server.csr -CA rootCA.pem -CAkey rootCA.key -CAcreateserial -out server.crt -days 5000</span><br></pre></td></tr></tbody></table></figure></div><p>生成后的结果如下：</p><p><a href="A927F6A6069F4EF486F1B7B623FA87C8" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="A927F6A6069F4EF486F1B7B623FA87C8" class="lazyload"></a></p><p>证书如下：</p><p><a href="CD9D906ADA7F472788EC35C10E58D13C" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="CD9D906ADA7F472788EC35C10E58D13C" class="lazyload"></a></p><h3 id="4-3-5-拷贝证书到指定位置"><a href="#4-3-5-拷贝证书到指定位置" class="headerlink" title="4.3.5. 拷贝证书到指定位置"></a>4.3.5. 拷贝证书到指定位置</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cp rootCA.pem assets/client/tls/ngrokroot.crt  #复制rootCA.pem到assets/client/tls/并更名为ngrokroot.crt</span><br><span class="line">cp server.crt assets/server/tls/snakeoil.crt #复制server.crt到assets/server/tls/并更名为snakeoil.crt</span><br><span class="line">cp server.key assets/server/tls/snakeoil.key #复制server.key到assets/server/tls/并更名为snakeoil.key</span><br></pre></td></tr></tbody></table></figure></div><p>运行结果：</p><p><a href="7DB5BD0F5DC7441A8758163E2BEAE9D4" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="7DB5BD0F5DC7441A8758163E2BEAE9D4" class="lazyload"></a></p><h3 id="4-3-6-编译"><a href="#4-3-6-编译" class="headerlink" title="4.3.6. 编译"></a>4.3.6. 编译</h3><p> 由于go语言的特性，在编译时直接生成机器码，所以在运行过程中并不需要go的环境（非托管应用）。在ngrok目录下，运行一下命令分别生成对应的客户端与服务端。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#win服务端</span><br><span class="line">GOOS=windows GOARCH=386 make release-server </span><br><span class="line">#win客户端</span><br><span class="line">GOOS=windows GOARCH=386 make release-client</span><br><span class="line">#linux服务端</span><br><span class="line">GOOS=linux GOARCH=386 make release-server</span><br><span class="line">#linux客户端</span><br><span class="line">GOOS=linux GOARCH=386 make release-client</span><br></pre></td></tr></tbody></table></figure></div><p>生成完成后，在工作目录的bin文件夹下，产生对应的文件。以编译windows平台为例，会产生“ngrok.exe”与“ngrokd.exe”这两个文件，前者客户端，后者需要运行在公网服务器上。</p><p>因为项目中引用了一些外部资源，生成会耗费一些时间，对网络也有一定的要求，太慢会中短，命令执行下如：</p><p><a href="852E47DFAED64958918332181FF8BD32" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="852E47DFAED64958918332181FF8BD32" class="lazyload"></a></p><p>生成结果：</p><p><a href="9625496141394A5CBE2CB7C7352793DB" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="9625496141394A5CBE2CB7C7352793DB" class="lazyload"></a></p><p>这里我还生成了两个运行在windows服务器与客户端的应用：</p><p><a href="0CDDE2E58BE14672958D63057DB36AFC" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="0CDDE2E58BE14672958D63057DB36AFC" class="lazyload"></a></p><p>ngrok.exe是客户端，ngrokd.exe是服务端，下面是比较连续的操作结果。</p><p><a href="0768FC08675D42D1BF3F5ACDC572DB18" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="0768FC08675D42D1BF3F5ACDC572DB18" class="lazyload"></a></p><p><a href="E3C2971EA9C645F791F77F82AD75023F" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="E3C2971EA9C645F791F77F82AD75023F" class="lazyload"></a></p><h1 id="五、部署服务器端主程序"><a href="#五、部署服务器端主程序" class="headerlink" title="五、部署服务器端主程序"></a>五、部署服务器端主程序</h1><h3 id="5-1、部署到Windows-Server服务器"><a href="#5-1、部署到Windows-Server服务器" class="headerlink" title="5.1、部署到Windows Server服务器"></a>5.1、部署到Windows Server服务器</h3><p>将生成的ngrokd.exe文件复制到windows服务器中，当然如果要部署到linux中也是没有问题的。</p><p>这里我将ngrokd.exe放在c:\grokeServer目录下：</p><p><a href="D6AF149E6E96414B99EBBBB0809DBDF6" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="D6AF149E6E96414B99EBBBB0809DBDF6" class="lazyload"></a></p><p>为了方便，我编写了一个批处理文件：ngrokserver2.bat</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ngrokd.exe -tlsKey="snakeoil.key" -tlsCrt="snakeoil.crt" -domain="ngrok.你的域名.com" -httpAddr=":801" -httpsAddr=":802"</span><br></pre></td></tr></tbody></table></figure></div><p>点击批处理运行结果如下：</p><p><a href="E511D596E9BA4C55BD999E63EBE01BF2" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="E511D596E9BA4C55BD999E63EBE01BF2" class="lazyload"></a></p><p>绑定的域名换成自己的域名，http使用801端口，https使用802端口，供客户端连接的管道端口设置为4443端口，必须前面的域名相同。</p><p>为了安全许多服务器会将端口屏蔽，我使用的是ECS服务器，默认801，802都是关闭的，需要手动开启，在阿里云的后台添加开放的端口就可了：</p><p><a href="0E85CEFC8ABB4AAC9DCC0FBC7D687BB7" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="0E85CEFC8ABB4AAC9DCC0FBC7D687BB7" class="lazyload"></a></p><h3 id="5-2、一键部署ngrok服务器（CentOS、Debian、Ubuntu）"><a href="#5-2、一键部署ngrok服务器（CentOS、Debian、Ubuntu）" class="headerlink" title="5.2、一键部署ngrok服务器（CentOS、Debian、Ubuntu）"></a>5.2、一键部署ngrok服务器（CentOS、Debian、Ubuntu）</h3><p>如果编译生成ngrok的源代码生成应用太麻烦，你可以选择网友写的工具，支持一键部署到安装平台：CentOS、Debian、Ubuntu。</p><p><a href="https://github.com/clangcn/ngrok-one-key-install" target="_blank" rel="noopener">https://github.com/clangcn/ngrok-one-key-install</a></p><h3 id="六、部署ngrok客户端"><a href="#六、部署ngrok客户端" class="headerlink" title="六、部署ngrok客户端"></a>六、部署ngrok客户端</h3><p>这里的客户端就是您的web应用程序所运行的主机，将ubuntu生成的ngrok.exe客户端应用复制到您的系统中：</p><p><a href="34E8DA7BF67A4AA0B329B39F379A86C9" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="34E8DA7BF67A4AA0B329B39F379A86C9" class="lazyload"></a></p><p>添加配置文件ngrok.cfg:</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">server_addr: "ngrok.你的域名.com:4443"</span><br><span class="line">trust_host_root_certs: false</span><br></pre></td></tr></tbody></table></figure></div><p> 添加批处理start.bat，如果只运行一次直接在命令行下输入命令也是一样的效果，内容如下：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ngrok.exe -subdomain kyt -config=ngrok.cfg 8987</span><br></pre></td></tr></tbody></table></figure></div><p>其中8987为端口号，运行成功的结果如下所示： </p><p><a href="A4489CA0156C4DF7A64510A39BE3EF59" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="A4489CA0156C4DF7A64510A39BE3EF59" class="lazyload"></a></p><p>看到这个界面时说明已成功了。</p><h1 id="七、启动客户端并测试"><a href="#七、启动客户端并测试" class="headerlink" title="七、启动客户端并测试"></a>七、启动客户端并测试</h1><p>打开浏览器，输入您映射后的域名就可以穿透内网访问您的web服务器了。</p><p><a href="4EA074CBDAE0428FA977F246F098EDDB" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="4EA074CBDAE0428FA977F246F098EDDB" class="lazyload"></a></p><h1 id="八、总结"><a href="#八、总结" class="headerlink" title="八、总结"></a>八、总结</h1><p>一开始选择错了平台，在windows花了不少时间，在ubuntu下顺利完成。</p><p>无论是客户端还是服务器端最好都做成服务，更方便与稳定。</p><p>由于服务器上同时运行着IIS，故服务端Ngrok启动时无法使用80端口，所以在上面，我使用了801作为Ngrok服务器的http端口，使用IIS的代理功能可以解决这个问题，点击这里。当然也可以使用nginx将80转换成其它端口。</p><p>许多内容都参考了网友的文章。</p><p><strong>如果服务器搭建好了，只运行客户端穿透内网一分钟够了(手动狗头)。</strong></p><p>欢迎您提供更加好的解决方案，欢迎您提供更多的免费代理服务器，我随时更新，谢谢！</p></body></html>]]></content>
      
      
      <categories>
          
          <category> 文件系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 文件系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于Redis解决并发场景下的数据不一致问题</title>
      <link href="/2019/08/28/%E5%9F%BA%E4%BA%8ERedis%E8%A7%A3%E5%86%B3%E5%B9%B6%E5%8F%91%E5%9C%BA%E6%99%AF%E4%B8%8B%E7%9A%84%E6%95%B0%E6%8D%AE%E4%B8%8D%E4%B8%80%E8%87%B4%E9%97%AE%E9%A2%98/"/>
      <url>/2019/08/28/%E5%9F%BA%E4%BA%8ERedis%E8%A7%A3%E5%86%B3%E5%B9%B6%E5%8F%91%E5%9C%BA%E6%99%AF%E4%B8%8B%E7%9A%84%E6%95%B0%E6%8D%AE%E4%B8%8D%E4%B8%80%E8%87%B4%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script></head><body><h1 id="spring-boot-redisson-lock"><a href="#spring-boot-redisson-lock" class="headerlink" title="spring-boot-redisson-lock"></a>spring-boot-redisson-lock</h1><h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><ul><li>JDK 1.8</li><li>Spring boot 2.1.0.RELEASE</li><li>redisson-spring-boot-starter 3.9.1</li><li>spring-data-redis 2.1.2.RELEASE</li></ul><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>我们在做业务的时候进程会碰到并发的问题，比如秒杀，下面我们通过Redis解决这类问题</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">初始化接口：http://192.168.1.145:8080/kill/initBaiKe</span><br><span class="line">用户秒杀抢到的商品数量接口：http://192.168.1.145:8080/kill/successNum</span><br><span class="line">Redisson锁秒杀接口：http://192.168.1.145:8080/kill/redis</span><br><span class="line">事务秒杀接口：http://192.168.1.145:8080/kill/affair</span><br></pre></td></tr></tbody></table></figure></div><p>初始化数据</p><p><a href="https://i.imgur.com/Ir7fjKo.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.imgur.com/Ir7fjKo.jpg" class="lazyload"></a></p><h3 id="通过锁方式秒杀"><a href="#通过锁方式秒杀" class="headerlink" title="通过锁方式秒杀"></a>通过锁方式秒杀</h3><p>我们知道在Redis中官方提供了一个名为Redisson的工具，它的功能非常强大在她的文档中有充分的介绍：<a href="https://github.com/redisson/redisson/wiki/Redisson%E9%A1%B9%E7%9B%AE%E4%BB%8B%E7%BB%8D" target="_blank" rel="noopener">官方文档</a></p><p>我们使用它的<strong>lock</strong>功能，好吧废话不多说上代码</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 秒杀基于Redisson的锁</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/redis"</span>, method = RequestMethod.POST)</span><br><span class="line"><span class="function"><span class="keyword">public</span> MessageResult <span class="title">secKillRedis</span><span class="params">()</span> </span>{</span><br><span class="line">    MessageResult result = MessageResult.ok();</span><br><span class="line">    RLock rLock = redissonClient.getLock(<span class="string">"baike_lock"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> {</span><br><span class="line">        rLock.lock();</span><br><span class="line">        String baikeJson = redisTemplate.opsForValue().get(<span class="string">"baike"</span>);</span><br><span class="line">        Baike baike = JSONUtil.toBean(baikeJson, Baike<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        Integer amount = baike.getAmount();</span><br><span class="line">        amount = amount - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (amount < <span class="number">0</span>) {</span><br><span class="line">            result.setMsg(<span class="string">"库存不足"</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        baike.setAmount(amount);</span><br><span class="line">        redisTemplate.opsForValue().set(<span class="string">"baike"</span>, JSONUtil.toJsonStr(baike));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 用户抢到商品累计</span></span><br><span class="line">        String msg = <span class="string">"减少库存成功,共减少"</span> + successNum.incrementAndGet();</span><br><span class="line">        result.setMsg(msg);</span><br><span class="line">        log.info(msg);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    } <span class="keyword">finally</span> {</span><br><span class="line">        rLock.unlock();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p>我使用jmeter进行测试</p><p><a href="https://i.imgur.com/VB3QINV.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.imgur.com/VB3QINV.jpg" class="lazyload"></a></p><p><a href="https://i.imgur.com/AWsx9Z9.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.imgur.com/AWsx9Z9.jpg" class="lazyload"></a></p><p>从结果可以看出，商品并没有出现超卖的问题<br><a href="https://i.imgur.com/rUaXApp.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.imgur.com/rUaXApp.jpg" class="lazyload"></a></p><p>我们来看看卖出的接口统计的数据，从数据看一切正常，解决超卖问题</p><p><a href="https://i.imgur.com/tZolJkR.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.imgur.com/tZolJkR.jpg" class="lazyload"></a></p><h3 id="Redis事务方式秒杀"><a href="#Redis事务方式秒杀" class="headerlink" title="Redis事务方式秒杀"></a>Redis事务方式秒杀</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 通过事务解决秒杀</span><br><span class="line"> * @return</span><br><span class="line"> */</span><br><span class="line">@RequestMapping(value = "/affair", method = RequestMethod.POST)</span><br><span class="line">public MessageResult affair() {</span><br><span class="line">    MessageResult result = MessageResult.ok();</span><br><span class="line">    redisTemplate.setEnableTransactionSupport(true);</span><br><span class="line"></span><br><span class="line">    // 通过事务解决超卖问题</span><br><span class="line">    List results = redisTemplate.execute(new SessionCallback<list>() {</list></span><br><span class="line">        @Override</span><br><span class="line">        public List execute(RedisOperations operations) throws DataAccessException {</span><br><span class="line">            operations.watch("baike");</span><br><span class="line">            String baikeJson = redisTemplate.opsForValue().get("baike");</span><br><span class="line">            Baike baike = JSONUtil.toBean(baikeJson, Baike.class);</span><br><span class="line">            operations.multi();</span><br><span class="line">            //一定要有空查询</span><br><span class="line">            operations.opsForValue().get("baike");</span><br><span class="line">            Integer amount = baike.getAmount();</span><br><span class="line">            amount = amount - 1;</span><br><span class="line">            if (amount < 0) {</span><br><span class="line">                return null;</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            baike.setAmount(amount);</span><br><span class="line">            redisTemplate.opsForValue().set("baike", JSONUtil.toJsonStr(baike));</span><br><span class="line"></span><br><span class="line">            return operations.exec();</span><br><span class="line">        }</span><br><span class="line">    });</span><br><span class="line"></span><br><span class="line">    if (results != null && !results.isEmpty()) {</span><br><span class="line">        // 用户抢到商品累计</span><br><span class="line">        String msg = "减少库存成功,共减少" + successNum.incrementAndGet();</span><br><span class="line">        result.setMsg(msg);</span><br><span class="line">        log.info(msg);</span><br><span class="line"></span><br><span class="line">        return result;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    result.setMsg("库存不足");</span><br><span class="line">    return result;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p>通过事务的方式比较复杂，但效果和锁的方式是一样的，图我就不贴了，有兴趣的可以去看看代码：<a href="https://github.com/HWYWL/spring-boot-2.x-examples/tree/master/spring-boot-redisson-lock" target="_blank" rel="noopener">代码</a></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>我们推荐用锁的方式进行操作，比较比较简单，不过初期的配置也挺麻烦，<br>我们可以查看官方的文档进行配置：<a href="https://github.com/redisson/redisson/wiki/2.-%E9%85%8D%E7%BD%AE%E6%96%B9%E6%B3%95" target="_blank" rel="noopener">配置文档</a></p><p>他可以配置的模式如下：</p><ul><li>集群模式</li><li>云托管模式</li><li>单Redis节点模式</li><li>哨兵模式</li><li>主从模式</li></ul><h3 id="问题建议"><a href="#问题建议" class="headerlink" title="问题建议"></a>问题建议</h3><ul><li>源码：<a href="https://github.com/HWYWL/spring-boot-2.x-examples/tree/master/spring-boot-redisson-lock" target="_blank" rel="noopener">spring-boot-redisson-lock</a></li><li>联系我的邮箱：<a href="mailto:ilovey_hwy@163.com">ilovey_hwy@163.com</a></li><li>我的博客：<a href="http://www.hwy.ac.cn" target="_blank" rel="noopener">http://www.hwy.ac.cn</a></li><li>GitHub：<a href="https://github.com/HWYWL" target="_blank" rel="noopener">https://github.com/HWYWL</a></li></ul></body></html>]]></content>
      
      
      <categories>
          
          <category> 缓存 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
            <tag> 缓存 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>分布式缓存系统Memcached学习心得</title>
      <link href="/2019/08/18/%E5%88%86%E5%B8%83%E5%BC%8F%E7%BC%93%E5%AD%98%E7%B3%BB%E7%BB%9FMemcached%E5%AD%A6%E4%B9%A0%E5%BF%83%E5%BE%97/"/>
      <url>/2019/08/18/%E5%88%86%E5%B8%83%E5%BC%8F%E7%BC%93%E5%AD%98%E7%B3%BB%E7%BB%9FMemcached%E5%AD%A6%E4%B9%A0%E5%BF%83%E5%BE%97/</url>
      
        <content type="html"><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script></head><body><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line">package com.danga.MemCached.test;    </span><br><span class="line">   </span><br><span class="line">import java.util.Date;    </span><br><span class="line">   </span><br><span class="line">import com.danga.MemCached.MemCachedClient;    </span><br><span class="line">import com.danga.MemCached.SockIOPool;    </span><br><span class="line">   </span><br><span class="line">   </span><br><span class="line">public class Test {        </span><br><span class="line">    protected static MemCachedClient mcc = new MemCachedClient();       </span><br><span class="line">       </span><br><span class="line">    static {       </span><br><span class="line">        String[] servers ={"192.168.40.4:12000"};       </span><br><span class="line">       </span><br><span class="line">        Integer[] weights = { 3 };       </span><br><span class="line">       </span><br><span class="line">        //创建一个实例对象SockIOPool     </span><br><span class="line">        SockIOPool pool = SockIOPool.getInstance();       </span><br><span class="line">       </span><br><span class="line">        // set the servers and the weights    </span><br><span class="line">        //设置Memcached Server    </span><br><span class="line">        pool.setServers( servers );       </span><br><span class="line">        pool.setWeights( weights );       </span><br><span class="line">       </span><br><span class="line">        // set some basic pool settings       </span><br><span class="line">        // 5 initial, 5 min, and 250 max conns       </span><br><span class="line">        // and set the max idle time for a conn       </span><br><span class="line">        // to 6 hours       </span><br><span class="line">        pool.setInitConn( 5 );       </span><br><span class="line">        pool.setMinConn( 5 );       </span><br><span class="line">        pool.setMaxConn( 250 );       </span><br><span class="line">        pool.setMaxIdle( 1000 * 60 * 60 * 6 );       </span><br><span class="line">       </span><br><span class="line">        // set the sleep for the maint thread       </span><br><span class="line">        // it will wake up every x seconds and       </span><br><span class="line">        // maintain the pool size       </span><br><span class="line">        pool.setMaintSleep( 30 );       </span><br><span class="line">       </span><br><span class="line">        // Tcp的规则就是在发送一个包之前，本地机器会等待远程主机    </span><br><span class="line">                  // 对上一次发送的包的确认信息到来；这个方法就可以关闭套接字的缓存，    </span><br><span class="line">                  // 以至这个包准备好了就发；    </span><br><span class="line">                  pool.setNagle( false );       </span><br><span class="line">        //连接建立后对超时的控制    </span><br><span class="line">                  pool.setSocketTO( 3000 );    </span><br><span class="line">        //连接建立时对超时的控制    </span><br><span class="line">                  pool.setSocketConnectTO( 0 );       </span><br><span class="line">       </span><br><span class="line">        // initialize the connection pool       </span><br><span class="line">        //初始化一些值并与MemcachedServer段建立连接    </span><br><span class="line">                  pool.initialize();    </span><br><span class="line">               </span><br><span class="line">       </span><br><span class="line">        // lets set some compression on for the client       </span><br><span class="line">        // compress anything larger than 64k       </span><br><span class="line">        mcc.setCompressEnable( true );       </span><br><span class="line">        mcc.setCompressThreshold( 64 * 1024 );       </span><br><span class="line">    }       </span><br><span class="line">           </span><br><span class="line">    public static void bulidCache(){       </span><br><span class="line">        //set(key,value,Date) ,Date是一个过期时间，如果想让这个过期时间生效的话，这里传递的new Date(long date) 中参数date，需要是个大于或等于1000的值。    </span><br><span class="line">        //因为java client的实现源码里是这样实现的 expiry.getTime() / 1000 ，也就是说，如果 小于1000的值，除以1000以后都是0，即永不过期    </span><br><span class="line">        mcc.set( "test", "This is a test String" ,new Date(11211));   </span><br><span class="line">    //十秒后过期    </span><br><span class="line">              </span><br><span class="line">    }       </span><br><span class="line">      </span><br><span class="line">    public static void output() {       </span><br><span class="line">        //从cache里取值    </span><br><span class="line">        String value = (String) mcc.get( "test" );       </span><br><span class="line">        System.out.println(value);        </span><br><span class="line">    }       </span><br><span class="line">           </span><br><span class="line">    public static void main(String[] args){       </span><br><span class="line">        bulidCache();      </span><br><span class="line">        output();           </span><br><span class="line">    }     </span><br><span class="line">       </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div></body></html>]]></content>
      
      
      <categories>
          
          <category> 缓存 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 缓存 </tag>
            
            <tag> Memcached </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>简单的mybatis多数据源配置</title>
      <link href="/2019/07/15/%E7%AE%80%E5%8D%95%E7%9A%84mybatis%E5%A4%9A%E6%95%B0%E6%8D%AE%E6%BA%90%E9%85%8D%E7%BD%AE/"/>
      <url>/2019/07/15/%E7%AE%80%E5%8D%95%E7%9A%84mybatis%E5%A4%9A%E6%95%B0%E6%8D%AE%E6%BA%90%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script></head><body><h1 id="spring-boot-mybatis-mutiple-datasource"><a href="#spring-boot-mybatis-mutiple-datasource" class="headerlink" title="spring-boot-mybatis-mutiple-datasource"></a>spring-boot-mybatis-mutiple-datasource</h1><h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><ul><li>开发工具：IDEA</li><li>基础工具：Maven+JDK8</li><li>所用技术：SpringBoot 2.1.1.RELEASE、Mybatis </li><li>数据库：MySQL 5.7</li></ul><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>源码：<a href="https://github.com/HWYWL/spring-boot-2.x-examples/tree/master/spring-boot-mybatis-mutiple-datasource" target="_blank" rel="noopener">spring-boot-mybatis-mutiple-datasource</a><br>基于mybatis的多数据源操作，首先我们来看一下目录结构</p><p><a href="https://i.imgur.com/F5lf0Vp.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.imgur.com/F5lf0Vp.jpg" class="lazyload"></a></p><p>在sql目录下有两个数据源的测试SQL可以在自己的数据库中执行方便后续的测试。</p><p>然后再我们<strong>application.properties</strong>配置文件中配置我们数据的数据源</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">server.port=8081</span><br><span class="line"></span><br><span class="line"># 配置第一个数据源</span><br><span class="line">spring.datasource.hikari.db1.jdbc-url=jdbc:mysql://127.0.0.1:3306/baike?useUnicode=true&characterEncoding=utf8&useSSL=true&serverTimezone=GMT%2B8</span><br><span class="line">spring.datasource.hikari.db1.username=root</span><br><span class="line">spring.datasource.hikari.db1.password=</span><br><span class="line">spring.datasource.hikari.db1.driver-class-name=com.mysql.cj.jdbc.Driver</span><br><span class="line"></span><br><span class="line"># 配置第二个数据源</span><br><span class="line">spring.datasource.hikari.db2.jdbc-url=jdbc:mysql://127.0.0.1:3306/script?useUnicode=true&characterEncoding=utf8&useSSL=true&serverTimezone=GMT%2B8</span><br><span class="line">spring.datasource.hikari.db2.username=root</span><br><span class="line">spring.datasource.hikari.db2.password=</span><br><span class="line">spring.datasource.hikari.db2.driver-class-name=com.mysql.cj.jdbc.Driver</span><br></pre></td></tr></tbody></table></figure></div><p>因为两个不同数据库数据源，所以我们不用使用默认的mybatis配置，需要自定义，我们定义两个配置类配置这两个数据源<br><strong>DataSource1Config</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 数据源1配置</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> YI</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018-12-6 09:35:36</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@MapperScan</span>(basePackages = <span class="string">"com.yi.mutiple.datasource.dao.db1"</span>, sqlSessionTemplateRef = <span class="string">"db1SqlSessionTemplate"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataSource1Config</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成数据源.  <span class="doctag">@Primary</span> 注解声明为默认数据源</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"db1DataSource"</span>)</span><br><span class="line">    <span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"spring.datasource.hikari.db1"</span>)</span><br><span class="line">    <span class="meta">@Primary</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">testDataSource</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> DataSourceBuilder.create().build();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建 SqlSessionFactory</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"db1SqlSessionFactory"</span>)</span><br><span class="line">    <span class="meta">@Primary</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SqlSessionFactory <span class="title">testSqlSessionFactory</span><span class="params">(@Qualifier(<span class="string">"db1DataSource"</span>)</span> DataSource dataSource) <span class="keyword">throws</span> Exception </span>{</span><br><span class="line">        SqlSessionFactoryBean bean = <span class="keyword">new</span> SqlSessionFactoryBean();</span><br><span class="line">        bean.setDataSource(dataSource);</span><br><span class="line">        <span class="comment">// 如果使用xml请放开下面配置</span></span><br><span class="line">        <span class="comment">// bean.setMapperLocations(new PathMatchingResourcePatternResolver().getResources("classpath:mybatis/mapper/db1/*.xml"));</span></span><br><span class="line">        <span class="keyword">return</span> bean.getObject();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 配置事务管理</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"db1TransactionManager"</span>)</span><br><span class="line">    <span class="meta">@Primary</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSourceTransactionManager <span class="title">testTransactionManager</span><span class="params">(@Qualifier(<span class="string">"db1DataSource"</span>)</span> DataSource dataSource) </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DataSourceTransactionManager(dataSource);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 配置数据库操作模板</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sqlSessionFactory</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"db1SqlSessionTemplate"</span>)</span><br><span class="line">    <span class="meta">@Primary</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SqlSessionTemplate <span class="title">testSqlSessionTemplate</span><span class="params">(@Qualifier(<span class="string">"db1SqlSessionFactory"</span>)</span> SqlSessionFactory sqlSessionFactory) <span class="keyword">throws</span> Exception </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SqlSessionTemplate(sqlSessionFactory);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p><strong>DataSource2Config</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 数据源2配置</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> YI</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018-12-6 09:35:36</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@MapperScan</span>(basePackages = <span class="string">"com.yi.mutiple.datasource.dao.db2"</span>, sqlSessionTemplateRef = <span class="string">"db2SqlSessionTemplate"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataSource2Config</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成数据源.  <span class="doctag">@Primary</span> 注解声明为默认数据源</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"db2DataSource"</span>)</span><br><span class="line">    <span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"spring.datasource.hikari.db2"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">testDataSource</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> DataSourceBuilder.create().build();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建 SqlSessionFactory</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"db2SqlSessionFactory"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> SqlSessionFactory <span class="title">testSqlSessionFactory</span><span class="params">(@Qualifier(<span class="string">"db2DataSource"</span>)</span> DataSource dataSource) <span class="keyword">throws</span> Exception </span>{</span><br><span class="line">        SqlSessionFactoryBean bean = <span class="keyword">new</span> SqlSessionFactoryBean();</span><br><span class="line">        bean.setDataSource(dataSource);</span><br><span class="line">        <span class="comment">// 如果使用xml请放开下面配置</span></span><br><span class="line">        <span class="comment">//bean.setMapperLocations(new PathMatchingResourcePatternResolver().getResources("classpath:mybatis/mapper/db2/*.xml"));</span></span><br><span class="line">        <span class="keyword">return</span> bean.getObject();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 配置事务管理</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"db2TransactionManager"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSourceTransactionManager <span class="title">testTransactionManager</span><span class="params">(@Qualifier(<span class="string">"db2DataSource"</span>)</span> DataSource dataSource) </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DataSourceTransactionManager(dataSource);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 配置数据库操作模板</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sqlSessionFactory</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"db2SqlSessionTemplate"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> SqlSessionTemplate <span class="title">testSqlSessionTemplate</span><span class="params">(@Qualifier(<span class="string">"db2SqlSessionFactory"</span>)</span> SqlSessionFactory sqlSessionFactory) <span class="keyword">throws</span> Exception </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SqlSessionTemplate(sqlSessionFactory);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p>从配置中我们可以看出还可以xml方式访问，不过我们这里使用注解，如果有需要的可以打开注释即可使用xml。</p><p>接下来还有一个关键的点就是我们dao中每个dao要对应操作的数据源，可以使用<strong>@Qualifier</strong>注解<br><strong>BaiKeDao</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 操作baike对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> YI</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018-12-6 09:40:19</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Qualifier</span>(<span class="string">"db1SqlSessionTemplate"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BaiKeDao</span> </span>{</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据id查找</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id 主键id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Select</span>(<span class="string">"SELECT * FROM baike WHERE id = #{id}"</span>)</span><br><span class="line">    <span class="function">Baike <span class="title">findBaikeById</span><span class="params">(Integer id)</span></span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p><strong>ScriptDao</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 操作Script对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> YI</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018-12-6 09:40:19</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Qualifier</span>(<span class="string">"db2SqlSessionTemplate"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ScriptDao</span> </span>{</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据脚本类型查找</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> type 脚本类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Select</span>(<span class="string">"SELECT * FROM script_info WHERE type = #{type}"</span>)</span><br><span class="line">    <span class="function">List<scriptinfo> <span class="title">findScriptByType</span><span class="params">(Byte type)</span></scriptinfo></span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p>我们使用接口请求看看我们的数据：<br><strong>BaiKeController</strong><br><a href="https://i.imgur.com/aqeqwcQ.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.imgur.com/aqeqwcQ.jpg" class="lazyload"></a></p><p><strong>ScriptController</strong><br><a href="https://i.imgur.com/zWYMMKa.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.imgur.com/zWYMMKa.jpg" class="lazyload"></a></p><p>主要的已经讲解完毕，剩下的细节请阅读代码：<a href="https://github.com/HWYWL/spring-boot-2.x-examples/tree/master/spring-boot-mybatis-mutiple-datasource" target="_blank" rel="noopener">spring-boot-mybatis-mutiple-datasource</a></p><h3 id="问题建议"><a href="#问题建议" class="headerlink" title="问题建议"></a>问题建议</h3><ul><li>联系我的邮箱：<a href="mailto:ilovey_hwy@163.com">ilovey_hwy@163.com</a></li><li>我的博客：<a href="http://www.hwy.ac.cn" target="_blank" rel="noopener">http://www.hwy.ac.cn</a></li><li>GitHub：<a href="https://github.com/HWYWL" target="_blank" rel="noopener">https://github.com/HWYWL</a></li></ul></body></html>]]></content>
      
      
      <categories>
          
          <category> ORM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ORM </tag>
            
            <tag> mybatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flink入门</title>
      <link href="/2019/07/15/Flink%E5%85%A5%E9%97%A8/"/>
      <url>/2019/07/15/Flink%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script></head><body><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>这篇文章只是让你入门接触到流计算的强大。</p><h3 id="下载安装Apache-Flink"><a href="#下载安装Apache-Flink" class="headerlink" title="下载安装Apache Flink"></a>下载安装Apache Flink</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://www.mirrorservice.org/sites/ftp.apache.org/flink/flink-1.8.0/flink-1.8.0-bin-scala_2.12.tgz</span><br></pre></td></tr></tbody></table></figure></div><p>这里以windows为例子，解压后双击start-cluster.bat启动集群模式</p><p><a href="https://i.loli.net/2019/05/14/5cda90be4116957755.png" data-fancybox="group" data-caption="alt" class="fancybox"><img alt="alt" title="alt" data-src="https://i.loli.net/2019/05/14/5cda90be4116957755.png" class="lazyload"></a></p><p>正常情况下，现在访问<strong><a href="http://localhost:8081" target="_blank" rel="noopener">http://localhost:8081</a></strong>就能进入管理界面<br><a href="https://i.loli.net/2019/05/14/5cda911a6bd4919200.png" data-fancybox="group" data-caption="alt" class="fancybox"><img alt="alt" title="alt" data-src="https://i.loli.net/2019/05/14/5cda911a6bd4919200.png" class="lazyload"></a></p><p>好，写下来我们编写我们的代码，我们可以从官方的工程开始，<br>生成Java项目的工程有两种方式，一种是maven生成</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mvn archetype:generate\</span><br><span class="line">  -DarchetypeGroupId=org.apache.flink\</span><br><span class="line">  -DarchetypeArtifactId=flink-quickstart-java\</span><br><span class="line">  -DarchetypeVersion=${1:-1.8.0}\</span><br><span class="line">  -DgroupId=org.myorg.quickstart\</span><br><span class="line">  -DartifactId=$PACKAGE\</span><br><span class="line">  -Dversion=0.1\</span><br><span class="line">  -Dpackage=org.myorg.quickstart\</span><br><span class="line">  -DinteractiveMode=false</span><br></pre></td></tr></tbody></table></figure></div><p>还有一种是使用官方提供的脚本：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl https://flink.apache.org/q/quickstart.sh | bash</span><br></pre></td></tr></tbody></table></figure></div><p>推荐使用第二种，方面快捷，官方负责维护，当然你执行的时候要看看自己flink的版本，因为脚本生成的工程pom.xml中flink的依赖会是最新的，可能不兼容你下载的flink版本。</p><p>我们把生成的工程导入IDEA，她的工程目录如下：<br><a href="https://i.loli.net/2019/05/14/5cda92aa36bab37458.png" data-fancybox="group" data-caption="alt" class="fancybox"><img alt="alt" title="alt" data-src="https://i.loli.net/2019/05/14/5cda92aa36bab37458.png" class="lazyload"></a></p><p>好了我们选择StreamingJob来编写我们的代码，实现监控维基百科词条的更新，不过在此之前我们需要引入维基百科的详情资源。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><dependency></dependency></span><br><span class="line">    <groupid>org.apache.flink</groupid></span><br><span class="line">    <artifactid>flink-connector-wikiedits_2.11</artifactid></span><br><span class="line">    <version>${flink.version}</version></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure></div><p>然一顿骚操作之后编写好我们的代码</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StreamingJob</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>{</span><br><span class="line">        <span class="comment">// 环境信息</span></span><br><span class="line">        <span class="keyword">final</span> StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();</span><br><span class="line"></span><br><span class="line">        DataStreamSource<wikipediaeditevent> edits = env.addSource(<span class="keyword">new</span> WikipediaEditsSource());</wikipediaeditevent></span><br><span class="line"></span><br><span class="line">        <span class="comment">//以用户名为key分组</span></span><br><span class="line">        KeyedStream<wikipediaeditevent, string> keyedStream = edits.keyBy((KeySelector<wikipediaeditevent, string>) WikipediaEditEvent::getUser);</wikipediaeditevent,></wikipediaeditevent,></span><br><span class="line"></span><br><span class="line">        <span class="comment">//时间窗口为5秒</span></span><br><span class="line">        SingleOutputStreamOperator<tuple3<string, integer, stringbuilder>> operator = keyedStream.timeWindow(Time.seconds(<span class="number">15</span>)).aggregate(<span class="keyword">new</span> AggregateFunction<wikipediaeditevent, tuple3<string, integer, stringbuilder>, Tuple3<string, integer, stringbuilder>>() {</string,></wikipediaeditevent,></tuple3<string,></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Tuple3<string, integer, stringbuilder> <span class="title">createAccumulator</span><span class="params">()</span> </string,></span>{</span><br><span class="line">                <span class="comment">//创建ACC</span></span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> Tuple3<>(<span class="string">""</span>, <span class="number">0</span>, <span class="keyword">new</span> StringBuilder());</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Tuple3<string, integer, stringbuilder> <span class="title">add</span><span class="params">(WikipediaEditEvent wikipediaEditEvent, Tuple3<string, integer, stringbuilder> stringIntegerStringBuilderTuple3)</string,></span> </string,></span>{</span><br><span class="line">                StringBuilder sb = stringIntegerStringBuilderTuple3.f2;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//如果是第一条记录，就加个"修改字符数量 ："作为前缀，</span></span><br><span class="line">                <span class="comment">//如果不是第一条记录，就用空格作为分隔符</span></span><br><span class="line">                <span class="keyword">if</span>(StringUtils.isBlank(sb.toString())){</span><br><span class="line">                    sb.append(<span class="string">"修改字符数量 : "</span>);</span><br><span class="line">                }<span class="keyword">else</span> {</span><br><span class="line">                    sb.append(<span class="string">" "</span>);</span><br><span class="line">                }</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> Tuple3<>(wikipediaEditEvent.getUser(),</span><br><span class="line">                        wikipediaEditEvent.getByteDiff() + stringIntegerStringBuilderTuple3.f1,</span><br><span class="line">                        sb.append(wikipediaEditEvent.getByteDiff()));</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Tuple3<string, integer, stringbuilder> <span class="title">getResult</span><span class="params">(Tuple3<string, integer, stringbuilder> stringIntegerStringBuilderTuple3)</string,></span> </string,></span>{</span><br><span class="line">                <span class="keyword">return</span> stringIntegerStringBuilderTuple3;</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Tuple3<string, integer, stringbuilder> <span class="title">merge</span><span class="params">(Tuple3<string, integer, stringbuilder> stringIntegerStringBuilderTuple3, Tuple3<string, integer, stringbuilder> acc1)</string,></string,></span> </string,></span>{</span><br><span class="line">                <span class="comment">//合并窗口的场景才会用到</span></span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> Tuple3<>(stringIntegerStringBuilderTuple3.f0,</span><br><span class="line">                        stringIntegerStringBuilderTuple3.f1 + acc1.f1, stringIntegerStringBuilderTuple3.f2.append(acc1.f2));</span><br><span class="line">            }</span><br><span class="line">        });</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将每个key的聚合结果单独转为字符串，实际应用中这里可以发送到kafka、mysql或者redis中</span></span><br><span class="line">        operator.map((MapFunction<tuple3<string, integer, stringbuilder>, String>) Tuple3::toString).print();</tuple3<string,></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 执行</span></span><br><span class="line">        env.execute(<span class="string">"Flink Streaming Java API Skeleton Start"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p>然后我们使用maven的命令打包</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn clean package -U</span><br></pre></td></tr></tbody></table></figure></div><p>打包好之后回到我们Flink的管理界面上传jar包</p><p><a href="https://i.loli.net/2019/05/14/5cda942cb5d0e74644.png" data-fancybox="group" data-caption="alt" class="fancybox"><img alt="alt" title="alt" data-src="https://i.loli.net/2019/05/14/5cda942cb5d0e74644.png" class="lazyload"></a></p><p>填写类路径，然后提交<br><a href="https://i.loli.net/2019/05/14/5cda945ae8a1b20114.png" data-fancybox="group" data-caption="alt" class="fancybox"><img alt="alt" title="alt" data-src="https://i.loli.net/2019/05/14/5cda945ae8a1b20114.png" class="lazyload"></a></p><p>到这我们已经看到程序已经开始执行了<br><a href="https://i.loli.net/2019/05/14/5cda947adf63983987.png" data-fancybox="group" data-caption="alt" class="fancybox"><img alt="alt" title="alt" data-src="https://i.loli.net/2019/05/14/5cda947adf63983987.png" class="lazyload"></a></p><p>然后打开我们启动start-cluster.bat是弹出的控制台窗口，是不是发现程序已经完美运行了呢<br><a href="https://i.loli.net/2019/05/14/5cda95010b83d12061.png" data-fancybox="group" data-caption="alt" class="fancybox"><img alt="alt" title="alt" data-src="https://i.loli.net/2019/05/14/5cda95010b83d12061.png" class="lazyload"></a></p><p>具体的API使用请查看官方文档。</p></body></html>]]></content>
      
      
      <categories>
          
          <category> 大数据 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大数据 </tag>
            
            <tag> Flink </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>理解注解中的@Inherited</title>
      <link href="/2019/07/03/%E7%90%86%E8%A7%A3%E6%B3%A8%E8%A7%A3%E4%B8%AD%E7%9A%84@Inherited/"/>
      <url>/2019/07/03/%E7%90%86%E8%A7%A3%E6%B3%A8%E8%A7%A3%E4%B8%AD%E7%9A%84@Inherited/</url>
      
        <content type="html"><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script></head><body><h2 id="Inherited："><a href="#Inherited：" class="headerlink" title="@Inherited："></a>@Inherited：</h2><p>   @Inherited 元注解是一个标记注解，@Inherited阐述了某个被标注的类型是被继承的。<br>如果一个使用了@Inherited修饰的annotation类型被用于一个class，则这个annotation将被用于该class的子类。 </p><p><strong>注意</strong>：@Inherited annotation类型是被标注过的class的子类所继承。类并不从它所实现的接口继承annotation， 方法并不从它所重载的方法继承annotation。 </p><p>　　当@Inherited annotation类型标注的annotation的Retention是RetentionPolicy.RUNTIME，则反射API增强了这种继承性。 如果我们使用java.lang.reflect去查询一个@Inherited annotation类型的annotation时，反射代码检查将展开工作： 检查class和其父类，直到发现指定的annotation类型被发现，或者到达类继承结构的顶层。 </p><p>看下面的例子： </p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target</span>(ElementType.TYPE)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> ATable {</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">name</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="meta">@Target</span>(ElementType.TYPE)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> BTable {</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">name</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@ATable</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Super</span> </span>{</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> superx;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">int</span> supery;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Super</span><span class="params">()</span> </span>{</span><br><span class="line">}</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">superX</span><span class="params">()</span></span>{  </span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">    }  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">superY</span><span class="params">()</span></span>{  </span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">    }  </span><br><span class="line">    </span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@BTable</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Sub</span> <span class="keyword">extends</span> <span class="title">Super</span></span>{</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> subx;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">int</span> suby;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">Sub</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{  </span><br><span class="line">}  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Sub</span><span class="params">(<span class="keyword">int</span> i)</span></span>{  </span><br><span class="line">    }  </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">subX</span><span class="params">()</span></span>{  </span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">    }  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">subY</span><span class="params">()</span></span>{  </span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">    }  </span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestMain</span> </span>{</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line"></span><br><span class="line">Class<sub> clazz = Sub<span class="class">.<span class="keyword">class</span></span>;</sub></span><br><span class="line">    </span><br><span class="line">System.out.println(<span class="string">"============================Field==========================="</span>);  </span><br><span class="line">System.out.println(Arrays.toString(clazz.getFields()));</span><br><span class="line">        System.out.println(Arrays.toString(clazz.getDeclaredFields()));  <span class="comment">//all + 自身  </span></span><br><span class="line">        System.out.println(<span class="string">"============================Method==========================="</span>);</span><br><span class="line">        System.out.println(Arrays.toString(clazz.getMethods()));   <span class="comment">//public + 继承  </span></span><br><span class="line">        <span class="comment">//all + 自身  </span></span><br><span class="line">        System.out.println(Arrays.toString(clazz.getDeclaredMethods()));</span><br><span class="line">        System.out.println(<span class="string">"============================Constructor==========================="</span>);  </span><br><span class="line">        System.out.println(Arrays.toString(clazz.getConstructors()));  </span><br><span class="line">                System.out.println(Arrays.toString(clazz.getDeclaredConstructors()));  </span><br><span class="line">        System.out.println(<span class="string">"============================AnnotatedElement==========================="</span>);  </span><br><span class="line">        <span class="comment">//注解DBTable2是否存在于元素上  </span></span><br><span class="line">        System.out.println(clazz.isAnnotationPresent(BTable<span class="class">.<span class="keyword">class</span>))</span>;  </span><br><span class="line">        <span class="comment">//如果存在该元素的指定类型的注释DBTable2，则返回这些注释，否则返回 null。  </span></span><br><span class="line">        System.out.println(clazz.getAnnotation(BTable<span class="class">.<span class="keyword">class</span>))</span>;  </span><br><span class="line">        <span class="comment">//继承  </span></span><br><span class="line">        System.out.println(Arrays.toString(clazz.getAnnotations()));  </span><br><span class="line">        System.out.println(Arrays.toString(clazz.getDeclaredAnnotations()));  <span class="comment">////自身  </span></span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p>分析下这段代码，这里定义了两个annotion，其中ATable使用了@Inherited, BTable没有使用  @Inherited,类Super和类Sub分别使用了ATable和BTable这两个注解，并且Sub类 继承Super类。 </p><p>这段程序的运行结果如下： </p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">============================Field===========================</span><br><span class="line">[<span class="keyword">public</span> <span class="keyword">int</span> annotion.inherit.Sub.suby, <span class="keyword">public</span> <span class="keyword">int</span> annotion.inherit.Super.supery]</span><br><span class="line">[<span class="keyword">private</span> <span class="keyword">int</span> annotion.inherit.Sub.subx, <span class="keyword">public</span> <span class="keyword">int</span> annotion.inherit.Sub.suby]</span><br><span class="line">============================Method===========================</span><br><span class="line">[<span class="keyword">public</span> <span class="keyword">int</span> annotion.inherit.Sub.subY(), <span class="keyword">public</span> <span class="keyword">int</span> annotion.inherit.Super.superY(), <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> java.lang.Object.wait() <span class="keyword">throws</span> java.lang.InterruptedException, <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> java.lang.Object.wait(<span class="keyword">long</span>,<span class="keyword">int</span>) <span class="keyword">throws</span> java.lang.InterruptedException, <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">native</span> <span class="keyword">void</span> java.lang.Object.wait(<span class="keyword">long</span>) <span class="keyword">throws</span> java.lang.InterruptedException, <span class="keyword">public</span> <span class="keyword">boolean</span> java.lang.Object.equals(java.lang.Object), <span class="keyword">public</span> java.lang.String java.lang.Object.toString(), <span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">int</span> java.lang.Object.hashCode(), <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">native</span> java.lang.Class java.lang.Object.getClass(), <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">native</span> <span class="keyword">void</span> java.lang.Object.notify(), <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">native</span> <span class="keyword">void</span> java.lang.Object.notifyAll()]</span><br><span class="line">[<span class="keyword">private</span> <span class="keyword">int</span> annotion.inherit.Sub.subX(), <span class="keyword">public</span> <span class="keyword">int</span> annotion.inherit.Sub.subY()]</span><br><span class="line">============================Constructor===========================</span><br><span class="line">[<span class="keyword">public</span> annotion.inherit.Sub(<span class="keyword">int</span>)]</span><br><span class="line">[<span class="keyword">private</span> annotion.inherit.Sub(), <span class="keyword">public</span> annotion.inherit.Sub(<span class="keyword">int</span>)]</span><br><span class="line">============================AnnotatedElement===========================</span><br><span class="line"><span class="keyword">true</span></span><br><span class="line"><span class="meta">@annotion</span>.inherit.BTable(name=)</span><br><span class="line">[<span class="meta">@annotion</span>.inherit.ATable(name=), <span class="meta">@annotion</span>.inherit.BTable(name=)]</span><br><span class="line">[<span class="meta">@annotion</span>.inherit.BTable(name=)]</span><br></pre></td></tr></tbody></table></figure></div><p>getFields()获得某个类的所有的公共（public）的字段，包括父类。 </p><p>getDeclaredFields()获得某个类的所有申明的字段，即包括public、private和proteced，<br>但是不包括父类的申明字段。 同样类似的还有getConstructors()和getDeclaredConstructors()， getMethods()和getDeclaredMethods()。 </p><p>因此：Field的打印好理解，因为sub是super类的子类，会继承super的类<br>同样method和constructor的打印也是如此。 </p><p>clazz.getAnnotations()可以打印出当前类的注解和父类的注解<br>clazz.getDeclaredAnnotations()只会打印出当前类的注解 </p><p>如果注解ATable把@Inherit去掉。那么后面四行的输出结果为： </p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">true</span></span><br><span class="line"><span class="meta">@annotion</span>.inherit.BTable(name=)</span><br><span class="line">[<span class="meta">@annotion</span>.inherit.BTable(name=)]</span><br><span class="line">[<span class="meta">@annotion</span>.inherit.BTable(name=)]</span><br></pre></td></tr></tbody></table></figure></div><p>*<em>无法获取到@ATable的注解， 也就是说注解和普通类的区别是如果一个子类想获取到父类上的注解信息， 那么必须在父类上使用的注解上面 加上@Inherit关键字 *</em></p></body></html>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 注解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>神级代码注释鉴赏</title>
      <link href="/2019/05/21/%E7%A5%9E%E7%BA%A7%E4%BB%A3%E7%A0%81%E6%B3%A8%E9%87%8A%E9%89%B4%E8%B5%8F/"/>
      <url>/2019/05/21/%E7%A5%9E%E7%BA%A7%E4%BB%A3%E7%A0%81%E6%B3%A8%E9%87%8A%E9%89%B4%E8%B5%8F/</url>
      
        <content type="html"><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script></head><body><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">/***　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　</span><br><span class="line"> *　　　　　　　　　瓦瓦　　　　　　　　　　　　十　　　　　　　　　　　　　</span><br><span class="line"> *　　　　　　　　十齱龠己　　　　　　　　　亅瓦車己　　　　　　　　　　　　</span><br><span class="line"> *　　　　　　　　乙龍龠毋日丶　　　　　　丶乙己毋毋丶　　　　　　　　　　　</span><br><span class="line"> *　　　　　　　　十龠馬鬼車瓦　　　　　　己十瓦毋毋　　　　　　　　　　　　</span><br><span class="line"> *　　　　　　　　　鬼馬龠馬龠十　　　　己己毋車毋瓦　　　　　　　　　　　　</span><br><span class="line"> *　　　　　　　　　毋龠龠龍龠鬼乙丶丶乙車乙毋鬼車己　　　　　　　　　　　　</span><br><span class="line"> *　　　　　　　　　乙龠龍龍鬼龍瓦　十瓦毋乙瓦龠瓦亅　　　　　　　　　　　　</span><br><span class="line"> *　　　　　　　　　　馬齱龍馬鬼十丶日己己己毋車乙丶　　　　　　　　　　　　</span><br><span class="line"> *　　　　　　　　　　己齱馬鬼車十十毋日乙己己乙乙　　　　　　　　　　　　　</span><br><span class="line"> *　　　　　　　　　　　車馬齱齱日乙毋瓦己乙瓦日亅　　　　　　　　　　　　　</span><br><span class="line"> *　　　　　　　　　　　亅車齺龖瓦乙車龖龍乙乙十　　　　　　　　　　　　　　</span><br><span class="line"> *　　　　　　　　　　　　日龠龠十亅車龍毋十十　　　　　　　　　　　　　　　</span><br><span class="line"> *　　　　　　　　　　　　日毋己亅　己己十亅亅　　　　　　　　　　　　　　　</span><br><span class="line"> *　　　　　　　　　　　丶己十十乙　　丶丶丶丶丶　　　　　　　　　　　　　　</span><br><span class="line"> *　　　　　　　　　　　亅己十龍龖瓦　　丶　丶　乙十　　　　　　　　　　　　</span><br><span class="line"> *　　　　　　　　　　　亅己十龠龖毋　丶丶　　丶己鬼鬼瓦亅　　　　　　　　　</span><br><span class="line"> *　　　　　　　　　　　十日十十日亅丶亅丶　丶十日毋鬼馬馬車乙　　　　　　　</span><br><span class="line"> *　　　　　　　　　　　十日乙十亅亅亅丶　　十乙己毋鬼鬼鬼龍齺馬乙　　　　　</span><br><span class="line"> *　　　　　　　　　　　丶瓦己乙十十亅丶亅乙乙乙己毋鬼鬼鬼龍齱齺齺鬼十　　　</span><br><span class="line"> *　　　　　　　　　　　　乙乙十十十亅乙瓦瓦己日瓦毋鬼鬼龠齱齱龍龍齱齱毋丶　</span><br><span class="line"> *　　　　　　　　　　　　亅十十十十乙瓦車毋瓦瓦日車馬龠龍龍龍龍龍龠龠龠馬亅</span><br><span class="line"> *　　　　　　　　　　　　　十十十十己毋車瓦瓦瓦瓦鬼馬龠龍龠龠龍龠龠龠馬龠車</span><br><span class="line"> *　　　　　　　　　　　　　　亅十十日毋瓦日日瓦鬼鬼鬼龠龠馬馬龠龍龍龠馬馬車</span><br><span class="line"> *　　　　　　　　　　　　　　亅亅亅乙瓦瓦毋車車車馬龍龠鬼鬼馬龠龍龍龠馬馬鬼</span><br><span class="line"> *　　　　　　　　　　　　丶丶乙亅亅乙車鬼鬼鬼毋車龍龍龠鬼馬馬龠龍齱齱龍馬鬼</span><br><span class="line"> *　　　　　　　　　　　亅己十十己十日鬼鬼車瓦毋龠龍龠馬馬龠龠龠齱齺齺齱龠鬼</span><br><span class="line"> *　　　　　　　　　　　　亅乙乙乙十車馬車毋馬齱齱龍龠龠龠馬龠龍齱龍龠龠鬼瓦</span><br><span class="line"> *　　　　　　　　　　　　　　　　丶毋龠鬼車瓦車馬龠龍龠龠龍齱齱龠馬馬鬼毋日</span><br><span class="line"> *　　　　　　　　　　　　　　　　十乙己日十　　丶己鬼龍齱齺齱龍馬馬馬車毋己</span><br><span class="line"> *　　　　　　　　　　　　　　丶十己乙亅丶　　　　　　亅瓦馬龠龍龠龠馬毋瓦乙</span><br><span class="line"> *　　　　　　　　　　　　　丶十十乙亅十　　　　　　　　亅己瓦車馬龠鬼車瓦乙</span><br><span class="line"> *　　　　　　　　　　　　　丶十乙十十丶　　　　　　　　　丶丶亅十瓦鬼車瓦己</span><br><span class="line"> *　　　　　　　　　　　　　　丶亅亅丶　　　　　　　　　　　　　　　亅日瓦日</span><br><span class="line"> *　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　丶</span><br><span class="line"> */</span><br></pre></td></tr></tbody></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">/***</span><br><span class="line"> * ┌───┐   ┌───┬───┬───┬───┐ ┌───┬───┬───┬───┐ ┌───┬───┬───┬───┐ ┌───┬───┬───┐</span><br><span class="line"> * │Esc│   │ F1│ F2│ F3│ F4│ │ F5│ F6│ F7│ F8│ │ F9│F10│F11│F12│ │P/S│S L│P/B│  ┌┐    ┌┐    ┌┐</span><br><span class="line"> * └───┘   └───┴───┴───┴───┘ └───┴───┴───┴───┘ └───┴───┴───┴───┘ └───┴───┴───┘  └┘    └┘    └┘</span><br><span class="line"> * ┌───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───────┐ ┌───┬───┬───┐ ┌───┬───┬───┬───┐</span><br><span class="line"> * │~ `│! 1│@ 2│# 3│$ 4│% 5│^ 6│& 7│* 8│( 9│) 0│_ -│+ =│ BacSp │ │Ins│Hom│PUp│ │N L│ / │ * │ - │</span><br><span class="line"> * ├───┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─────┤ ├───┼───┼───┤ ├───┼───┼───┼───┤</span><br><span class="line"> * │ Tab │ Q │ W │ E │ R │ T │ Y │ U │ I │ O │ P │{ [│} ]│ | \ │ │Del│End│PDn│ │ 7 │ 8 │ 9 │   │</span><br><span class="line"> * ├─────┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴─────┤ └───┴───┴───┘ ├───┼───┼───┤ + │</span><br><span class="line"> * │ Caps │ A │ S │ D │ F │ G │ H │ J │ K │ L │: ;│" '│ Enter  │               │ 4 │ 5 │ 6 │   │</span><br><span class="line"> * ├──────┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴────────┤     ┌───┐     ├───┼───┼───┼───┤</span><br><span class="line"> * │ Shift  │ Z │ X │ C │ V │ B │ N │ M │< ,│> .│? /│  Shift   │     │ ↑ │     │ 1 │ 2 │ 3 │   │</span><br><span class="line"> * ├─────┬──┴─┬─┴──┬┴───┴───┴───┴───┴───┴──┬┴───┼───┴┬────┬────┤ ┌───┼───┼───┐ ├───┴───┼───┤ E││</span><br><span class="line"> * │ Ctrl│    │Alt │         Space         │ Alt│    │    │Ctrl│ │ ← │ ↓ │ → │ │   0   │ . │←─┘│</span><br><span class="line"> * └─────┴────┴────┴───────────────────────┴────┴────┴────┴────┘ └───┴───┴───┘ └───────┴───┴───┘</span><br><span class="line"> */</span><br></pre></td></tr></tbody></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">/***</span><br><span class="line"> *                    _ooOoo_</span><br><span class="line"> *                   o8888888o</span><br><span class="line"> *                   88" . "88</span><br><span class="line"> *                   (| -_- |)</span><br><span class="line"> *                    O\ = /O</span><br><span class="line"> *                ____/`---'\____</span><br><span class="line"> *              .   ' \\| |// `.</span><br><span class="line"> *               / \\||| : |||// \</span><br><span class="line"> *             / _||||| -:- |||||- \</span><br><span class="line"> *               | | \\\ - /// | |</span><br><span class="line"> *             | \_| ''\---/'' | |</span><br><span class="line"> *              \ .-\__ `-` ___/-. /</span><br><span class="line"> *           ___`. .' /--.--\ `. . __</span><br><span class="line"> *        ."" '< `.___\_<|>_/___.' >'"".</span><br><span class="line"> *       | | : `- \`.;`\ _ /`;.`/ - ` : | |</span><br><span class="line"> *         \ \ `-. \_ __\ /__ _/ .-` / /</span><br><span class="line"> * ======`-.____`-.___\_____/___.-`____.-'======</span><br><span class="line"> *                    `=---='</span><br><span class="line"> *</span><br><span class="line"> * .............................................</span><br><span class="line"> *          佛祖保佑             永无BUG</span><br><span class="line"> */</span><br></pre></td></tr></tbody></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">/***</span><br><span class="line"> *  佛曰:</span><br><span class="line"> *          写字楼里写字间，写字间里程序员；</span><br><span class="line"> *          程序人员写程序，又拿程序换酒钱。</span><br><span class="line"> *          酒醒只在网上坐，酒醉还来网下眠；</span><br><span class="line"> *          酒醉酒醒日复日，网上网下年复年。</span><br><span class="line"> *          但愿老死电脑间，不愿鞠躬老板前；</span><br><span class="line"> *          奔驰宝马贵者趣，公交自行程序员。</span><br><span class="line"> *          别人笑我忒疯癫，我笑自己命太贱；</span><br><span class="line"> *          不见满街漂亮妹，哪个归得程序员？</span><br><span class="line"> */</span><br></pre></td></tr></tbody></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">/***</span><br><span class="line"> * _ooOoo_</span><br><span class="line"> * o8888888o</span><br><span class="line"> * 88" . "88</span><br><span class="line"> * (| -_- |)</span><br><span class="line"> *  O\ = /O</span><br><span class="line"> * ___/`---'\____</span><br><span class="line"> * .   ' \\| |// `.</span><br><span class="line"> * / \\||| : |||// \</span><br><span class="line"> * / _||||| -:- |||||- \</span><br><span class="line"> * | | \\\ - /// | |</span><br><span class="line"> * | \_| ''\---/'' | |</span><br><span class="line"> * \ .-\__ `-` ___/-. /</span><br><span class="line"> * ___`. .' /--.--\ `. . __</span><br><span class="line"> * ."" '< `.___\_<|>_/___.' >'"".</span><br><span class="line"> * | | : `- \`.;`\ _ /`;.`/ - ` : | |</span><br><span class="line"> * \ \ `-. \_ __\ /__ _/ .-` / /</span><br><span class="line"> * ======`-.____`-.___\_____/___.-`____.-'======</span><br><span class="line"> * `=---='</span><br><span class="line"> *          .............................................</span><br><span class="line"> *           佛曰：bug泛滥，我已瘫痪！</span><br><span class="line"> */</span><br></pre></td></tr></tbody></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">/***</span><br><span class="line"> *</span><br><span class="line"> *   █████▒█    ██  ▄████▄   ██ ▄█▀       ██████╗ ██╗   ██╗ ██████╗</span><br><span class="line"> * ▓██   ▒ ██  ▓██▒▒██▀ ▀█   ██▄█▒        ██╔══██╗██║   ██║██╔════╝</span><br><span class="line"> * ▒████ ░▓██  ▒██░▒▓█    ▄ ▓███▄░        ██████╔╝██║   ██║██║  ███╗</span><br><span class="line"> * ░▓█▒  ░▓▓█  ░██░▒▓▓▄ ▄██▒▓██ █▄        ██╔══██╗██║   ██║██║   ██║</span><br><span class="line"> * ░▒█░   ▒▒█████▓ ▒ ▓███▀ ░▒██▒ █▄       ██████╔╝╚██████╔╝╚██████╔╝</span><br><span class="line"> *  ▒ ░   ░▒▓▒ ▒ ▒ ░ ░▒ ▒  ░▒ ▒▒ ▓▒       ╚═════╝  ╚═════╝  ╚═════╝</span><br><span class="line"> *  ░     ░░▒░ ░ ░   ░  ▒   ░ ░▒ ▒░</span><br><span class="line"> *  ░ ░    ░░░ ░ ░ ░        ░ ░░ ░</span><br><span class="line"> *           ░     ░ ░      ░  ░</span><br><span class="line"> */</span><br></pre></td></tr></tbody></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">/***</span><br><span class="line"> *                    .::::.</span><br><span class="line"> *                  .::::::::.</span><br><span class="line"> *                 :::::::::::  FUCK YOU</span><br><span class="line"> *             ..:::::::::::'</span><br><span class="line"> *           '::::::::::::'</span><br><span class="line"> *             .::::::::::</span><br><span class="line"> *        '::::::::::::::..</span><br><span class="line"> *             ..::::::::::::.</span><br><span class="line"> *           ``::::::::::::::::</span><br><span class="line"> *            ::::``:::::::::'        .:::.</span><br><span class="line"> *           ::::'   ':::::'       .::::::::.</span><br><span class="line"> *         .::::'      ::::     .:::::::'::::.</span><br><span class="line"> *        .:::'       :::::  .:::::::::' ':::::.</span><br><span class="line"> *       .::'        :::::.:::::::::'      ':::::.</span><br><span class="line"> *      .::'         ::::::::::::::'         ``::::.</span><br><span class="line"> *  ...:::           ::::::::::::'              ``::.</span><br><span class="line"> * ```` ':.          ':::::::::'                  ::::..</span><br><span class="line"> *                    '.:::::'                    ':'````..</span><br><span class="line"> */</span><br></pre></td></tr></tbody></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">/***</span><br><span class="line"> *      ┌─┐       ┌─┐</span><br><span class="line"> *   ┌──┘ ┴───────┘ ┴──┐</span><br><span class="line"> *   │                 │</span><br><span class="line"> *   │       ───       │</span><br><span class="line"> *   │  ─┬┘       └┬─  │</span><br><span class="line"> *   │                 │</span><br><span class="line"> *   │       ─┴─       │</span><br><span class="line"> *   │                 │</span><br><span class="line"> *   └───┐         ┌───┘</span><br><span class="line"> *       │         │</span><br><span class="line"> *       │         │</span><br><span class="line"> *       │         │</span><br><span class="line"> *       │         └──────────────┐</span><br><span class="line"> *       │                        │</span><br><span class="line"> *       │                        ├─┐</span><br><span class="line"> *       │                        ┌─┘</span><br><span class="line"> *       │                        │</span><br><span class="line"> *       └─┐  ┐  ┌───────┬──┐  ┌──┘</span><br><span class="line"> *         │ ─┤ ─┤       │ ─┤ ─┤</span><br><span class="line"> *         └──┴──┘       └──┴──┘</span><br><span class="line"> *                神兽保佑</span><br><span class="line"> *               代码无BUG!</span><br><span class="line"> */</span><br></pre></td></tr></tbody></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">/***</span><br><span class="line"> *                  ___====-_  _-====___</span><br><span class="line"> *            _--^^^#####//      \\#####^^^--_</span><br><span class="line"> *         _-^##########// (    ) \\##########^-_</span><br><span class="line"> *        -############//  |\^^/|  \\############-</span><br><span class="line"> *      _/############//   (@::@)   \\############\_</span><br><span class="line"> *     /#############((     \\//     ))#############\</span><br><span class="line"> *    -###############\\    (oo)    //###############-</span><br><span class="line"> *   -#################\\  / VV \  //#################-</span><br><span class="line"> *  -###################\\/      \//###################-</span><br><span class="line"> * _#/|##########/\######(   /\   )######/\##########|\#_</span><br><span class="line"> * |/ |#/\#/\#/\/  \#/\##\  |  |  /##/\#/  \/\#/\#/\#| \|</span><br><span class="line"> * `  |/  V  V  `   V  \#\| |  | |/#/  V   '  V  V  \|  '</span><br><span class="line"> *    `   `  `      `   / | |  | | \   '      '  '   '</span><br><span class="line"> *                     (  | |  | |  )</span><br><span class="line"> *                    __\ | |  | | /__</span><br><span class="line"> *                   (vvv(VVV)(VVV)vvv)                </span><br><span class="line"> *                        神兽保佑</span><br><span class="line"> *                       代码无BUG!</span><br><span class="line"> */</span><br></pre></td></tr></tbody></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">/***</span><br><span class="line"> *</span><br><span class="line"> *</span><br><span class="line"> *                                                    __----~~~~~~~~~~~------___</span><br><span class="line"> *                                   .  .   ~~//====......          __--~ ~~</span><br><span class="line"> *                   -.            \_|//     |||\\  ~~~~~~::::... /~</span><br><span class="line"> *                ___-==_       _-~o~  \/    |||  \\            _/~~-</span><br><span class="line"> *        __---~~~.==~||\=_    -_--~/_-~|-   |\\   \\        _/~</span><br><span class="line"> *    _-~~     .=~    |  \\-_    '-~7  /-   /  ||    \      /</span><br><span class="line"> *  .~       .~       |   \\ -_    /  /-   /   ||      \   /</span><br><span class="line"> * /  ____  /         |     \\ ~-_/  /|- _/   .||       \ /</span><br><span class="line"> * |~~    ~~|--~~~~--_ \     ~==-/   | \~--===~~        .\</span><br><span class="line"> *          '         ~-|      /|    |-~\~~       __--~~</span><br><span class="line"> *                      |-~~-_/ |    |   ~\_   _-~            /\</span><br><span class="line"> *                           /  \     \__   \/~                \__</span><br><span class="line"> *                       _--~ _/ | .-~~____--~-/                  ~~==.</span><br><span class="line"> *                      ((->/~   '.|||' -_|    ~~-/ ,              . _||</span><br><span class="line"> *                                 -_     ~\      ~~---l__i__i__i--~~_/</span><br><span class="line"> *                                 _-~-__   ~)  \--______________--~~</span><br><span class="line"> *                               //.-~~~-~_--~- |-------~~~~~~~~</span><br><span class="line"> *                                      //.-~~~--\</span><br><span class="line"> *                               神兽保佑</span><br><span class="line"> *                              代码无BUG!</span><br><span class="line"> */</span><br></pre></td></tr></tbody></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">/***                              _</span><br><span class="line"> *  _._ _..._ .-',     _.._(`))</span><br><span class="line"> * '-. `     '  /-._.-'    ',/</span><br><span class="line"> *    )         \            '.</span><br><span class="line"> *   / _    _    |             \</span><br><span class="line"> *  |  a    a    /              |</span><br><span class="line"> *  \   .-.                     ;</span><br><span class="line"> *   '-('' ).-'       ,'       ;</span><br><span class="line"> *      '-;           |      .'</span><br><span class="line"> *         \           \    /</span><br><span class="line"> *         | 7  .__  _.-\   \</span><br><span class="line"> *         | |  |  ``/  /`  /</span><br><span class="line"> *        /,_|  |   /,_/   /</span><br><span class="line"> *           /,_/      '`-'</span><br><span class="line"> */</span><br></pre></td></tr></tbody></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">/***</span><br><span class="line"> **************************************************************</span><br><span class="line"> *                                                            *</span><br><span class="line"> *   .=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-.       *</span><br><span class="line"> *    |                     ______                     |      *</span><br><span class="line"> *    |                  .-"      "-.                  |      *</span><br><span class="line"> *    |                 /            \                 |      *</span><br><span class="line"> *    |     _          |              |          _     |      *</span><br><span class="line"> *    |    ( \         |,  .-.  .-.  ,|         / )    |      *</span><br><span class="line"> *    |     > "=._     | )(__/  \__)( |     _.=" <     |      *</span><br><span class="line"> *    |    (_/"=._"=._ |/     /\     \| _.="_.="\_)    |      *</span><br><span class="line"> *    |           "=._"(_     ^^     _)"_.="           |      *</span><br><span class="line"> *    |               "=\__|IIIIII|__/="               |      *</span><br><span class="line"> *    |              _.="| \IIIIII/ |"=._              |      *</span><br><span class="line"> *    |    _     _.="_.="\          /"=._"=._     _    |      *</span><br><span class="line"> *    |   ( \_.="_.="     `--------`     "=._"=._/ )   |      *</span><br><span class="line"> *    |    > _.="                            "=._ <    |      *</span><br><span class="line"> *    |   (_/                                    \_)   |      *</span><br><span class="line"> *    |                                                |      *</span><br><span class="line"> *    '-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-='      *</span><br><span class="line"> *                                                            *</span><br><span class="line"> *           LASCIATE OGNI SPERANZA, VOI CH'ENTRATE           *</span><br><span class="line"> **************************************************************</span><br><span class="line"> */</span><br></pre></td></tr></tbody></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">/***</span><br><span class="line"> *                                         ,s555SB@@&                          </span><br><span class="line"> *                                      :9H####@@@@@Xi                        </span><br><span class="line"> *                                     1@@@@@@@@@@@@@@8                       </span><br><span class="line"> *                                   ,8@@@@@@@@@B@@@@@@8                      </span><br><span class="line"> *                                  :B@@@@X3hi8Bs;B@@@@@Ah,                   </span><br><span class="line"> *             ,8i                  r@@@B:     1S ,M@@@@@@#8;                 </span><br><span class="line"> *            1AB35.i:               X@@8 .   SGhr ,A@@@@@@@@S                </span><br><span class="line"> *            1@h31MX8                18Hhh3i .i3r ,A@@@@@@@@@5               </span><br><span class="line"> *            ;@&i,58r5                 rGSS:     :B@@@@@@@@@@A               </span><br><span class="line"> *             1#i  . 9i                 hX.  .: .5@@@@@@@@@@@1               </span><br><span class="line"> *              sG1,  ,G53s.              9#Xi;hS5 3B@@@@@@@B1                </span><br><span class="line"> *               .h8h.,A@@@MXSs,           #@H1:    3ssSSX@1                  </span><br><span class="line"> *               s ,@@@@@@@@@@@@Xhi,       r#@@X1s9M8    .GA981               </span><br><span class="line"> *               ,. rS8H#@@@@@@@@@@#HG51;.  .h31i;9@r    .8@@@@BS;i;          </span><br><span class="line"> *                .19AXXXAB@@@@@@@@@@@@@@#MHXG893hrX#XGGXM@@@@@@@@@@MS        </span><br><span class="line"> *                s@@MM@@@hsX#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&,      </span><br><span class="line"> *              :GB@#3G@@Brs ,1GM@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@B,     </span><br><span class="line"> *            .hM@@@#@@#MX 51  r;iSGAM@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@8     </span><br><span class="line"> *          :3B@@@@@@@@@@@&9@h :Gs   .;sSXH@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@:    </span><br><span class="line"> *      s&HA#@@@@@@@@@@@@@@M89A;.8S.       ,r3@@@@@@@@@@@@@@@@@@@@@@@@@@@r    </span><br><span class="line"> *   ,13B@@@@@@@@@@@@@@@@@@@5 5B3 ;.         ;@@@@@@@@@@@@@@@@@@@@@@@@@@@i    </span><br><span class="line"> *  5#@@#&@@@@@@@@@@@@@@@@@@9  .39:          ;@@@@@@@@@@@@@@@@@@@@@@@@@@@;    </span><br><span class="line"> *  9@@@X:MM@@@@@@@@@@@@@@@#;    ;31.         H@@@@@@@@@@@@@@@@@@@@@@@@@@:    </span><br><span class="line"> *   SH#@B9.rM@@@@@@@@@@@@@B       :.         3@@@@@@@@@@@@@@@@@@@@@@@@@@5    </span><br><span class="line"> *     ,:.   9@@@@@@@@@@@#HB5                 .M@@@@@@@@@@@@@@@@@@@@@@@@@B    </span><br><span class="line"> *           ,ssirhSM@&1;i19911i,.             s@@@@@@@@@@@@@@@@@@@@@@@@@@S   </span><br><span class="line"> *              ,,,rHAri1h1rh&@#353Sh:          8@@@@@@@@@@@@@@@@@@@@@@@@@#:  </span><br><span class="line"> *            .A3hH@#5S553&@@#h   i:i9S          #@@@@@@@@@@@@@@@@@@@@@@@@@A.</span><br><span class="line"> *</span><br><span class="line"> *</span><br><span class="line"> *    又看源码，看你妹妹呀！</span><br><span class="line"> */</span><br></pre></td></tr></tbody></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">/***</span><br><span class="line"> *_______________#########_______________________</span><br><span class="line"> *______________############_____________________</span><br><span class="line"> *______________#############____________________</span><br><span class="line"> *_____________##__###########___________________</span><br><span class="line"> *____________###__######_#####__________________</span><br><span class="line"> *____________###_#######___####_________________</span><br><span class="line"> *___________###__##########_####________________</span><br><span class="line"> *__________####__###########_####_______________</span><br><span class="line"> *________#####___###########__#####_____________</span><br><span class="line"> *_______######___###_########___#####___________</span><br><span class="line"> *_______#####___###___########___######_________</span><br><span class="line"> *______######___###__###########___######_______</span><br><span class="line"> *_____######___####_##############__######______</span><br><span class="line"> *____#######__#####################_#######_____</span><br><span class="line"> *____#######__##############################____</span><br><span class="line"> *___#######__######_#################_#######___</span><br><span class="line"> *___#######__######_######_#########___######___</span><br><span class="line"> *___#######____##__######___######_____######___</span><br><span class="line"> *___#######________######____#####_____#####____</span><br><span class="line"> *____######________#####_____#####_____####_____</span><br><span class="line"> *_____#####________####______#####_____###______</span><br><span class="line"> *______#####______;###________###______#________</span><br><span class="line"> *________##_______####________####______________</span><br><span class="line"> */</span><br></pre></td></tr></tbody></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">/***</span><br><span class="line"> *           _.._        ,------------.</span><br><span class="line"> *        ,'      `.    ( We want you! )</span><br><span class="line"> *       /  __) __` \    `-,----------'</span><br><span class="line"> *      (  (`-`(-')  ) _.-'</span><br><span class="line"> *      /)  \  = /  (</span><br><span class="line"> *     /'    |--' .  \</span><br><span class="line"> *    (  ,---|  `-.)__`</span><br><span class="line"> *     )(  `-.,--'   _`-.</span><br><span class="line"> *    '/,'          (  Uu",</span><br><span class="line"> *     (_       ,    `/,-' )</span><br><span class="line"> *     `.__,  : `-'/  /`--'</span><br><span class="line"> *       |     `--'  |</span><br><span class="line"> *       `   `-._   /</span><br><span class="line"> *        \        (</span><br><span class="line"> *        /\ .      \.  freebuf</span><br><span class="line"> *       / |` \     ,-\</span><br><span class="line"> *      /  \| .)   /   \</span><br><span class="line"> *     ( ,'|\    ,'     :</span><br><span class="line"> *     | \,`.`--"/      }</span><br><span class="line"> *     `,'    \  |,'    /</span><br><span class="line"> *    / "-._   `-/      |</span><br><span class="line"> *    "-.   "-.,'|     ;</span><br><span class="line"> *   /        _/["---'""]</span><br><span class="line"> *  :        /  |"-     '</span><br><span class="line"> *  '           |      /</span><br><span class="line"> *              `      |</span><br><span class="line"> */</span><br></pre></td></tr></tbody></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">/***</span><br><span class="line"> * http://www.flvcd.com/</span><br><span class="line"> *  .--,       .--,</span><br><span class="line"> * ( (  \.---./  ) )</span><br><span class="line"> *  '.__/o   o\__.'</span><br><span class="line"> *     {=  ^  =}</span><br><span class="line"> *      >  -  <</span><br><span class="line"> *     /       \</span><br><span class="line"> *    //       \\</span><br><span class="line"> *   //|   .   |\\</span><br><span class="line"> *   "'\       /'"_.-~^`'-.</span><br><span class="line"> *      \  _  /--'         `</span><br><span class="line"> *    ___)( )(___</span><br><span class="line"> *   (((__) (__)))    高山仰止,景行行止.虽不能至,心向往之。</span><br><span class="line"> */</span><br></pre></td></tr></tbody></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/***</span><br><span class="line"> * 这个公司没有年终奖的,兄弟别指望了,也别来了,我准备辞职了</span><br><span class="line"> * 另外这个项目有很多*Bug* 你坚持不了多久的,拜拜!</span><br><span class="line"> */</span><br></pre></td></tr></tbody></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">/***</span><br><span class="line"> * 1只羊 == one sheep</span><br><span class="line"> * 2只羊 == two sheeps</span><br><span class="line"> * 3只羊 == three sheeps</span><br><span class="line"> * 4只羊 == four sheeps</span><br><span class="line"> * 5只羊 == five sheeps</span><br><span class="line"> * 6只羊 == six sheeps</span><br><span class="line"> * 7只羊 == seven sheeps</span><br><span class="line"> * 8只羊 == eight sheeps</span><br><span class="line"> * 9只羊 == nine sheeps</span><br><span class="line"> * 10只羊 == ten sheeps</span><br><span class="line"> * 11只羊 == eleven sheeps</span><br><span class="line"> * 12只羊 == twelve sheeps</span><br><span class="line"> * 13只羊 == thirteen sheeps</span><br><span class="line"> * 14只羊 == fourteen sheeps</span><br><span class="line"> * 15只羊 == fifteen sheeps</span><br><span class="line"> * 16只羊 == sixteen sheeps</span><br><span class="line"> * 17只羊 == seventeen sheeps</span><br><span class="line"> * 18只羊 == eighteen sheeps</span><br><span class="line"> * 19只羊 == nineteen sheeps</span><br><span class="line"> * 20只羊 == twenty sheeps</span><br><span class="line"> * 21只羊 == twenty one sheeps</span><br><span class="line"> * 22只羊 == twenty two sheeps</span><br><span class="line"> * 23只羊 == twenty three sheeps</span><br><span class="line"> * 24只羊 == twenty four sheeps</span><br><span class="line"> * 25只羊 == twenty five sheeps</span><br><span class="line"> * 26只羊 == twenty six sheeps</span><br><span class="line"> * 27只羊 == twenty seven sheeps</span><br><span class="line"> * 28只羊 == twenty eight sheeps</span><br><span class="line"> * 29只羊 == twenty nine sheeps</span><br><span class="line"> * 30只羊 == thirty sheeps</span><br><span class="line"> * 现在瞌睡了吧，好了，不要再改下面的代码了，睡觉咯~~</span><br><span class="line"> */</span><br></pre></td></tr></tbody></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">/***</span><br><span class="line"> * 程序员1（于2010年6月7日）：在这个坑临时加入一些调料</span><br><span class="line"> * 程序员2（于2011年5月22日）：临你个屁啊</span><br><span class="line"> * 程序员3（于2012年7月23日）：楼上都是狗屎，鉴定完毕</span><br><span class="line"> * 程序员4（于2013年8月2日）：fuck 楼上，三年了，这坑还在！！！</span><br><span class="line"> * 程序员5（于2014年8月21日）：哈哈哈，这坑居然坑了这么多人，幸好我也不用填了，系统终止运行了，you're died</span><br><span class="line"> */</span><br></pre></td></tr></tbody></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">/***</span><br><span class="line"> * Dear maintainer:</span><br><span class="line"> *</span><br><span class="line"> * Once you are done trying to 'optimize' this routine,</span><br><span class="line"> * and have realized what a terrible mistake that was,</span><br><span class="line"> * please increment the following counter as a warning</span><br><span class="line"> * to the next guy:</span><br><span class="line"> *</span><br><span class="line"> * total_hours_wasted_here = 42</span><br><span class="line"> */</span><br><span class="line">/***</span><br><span class="line"> * 亲爱的维护者：</span><br><span class="line"> *</span><br><span class="line"> * 如果你尝试了对这段程序进行'优化'</span><br><span class="line"> * 下面这个计数器的个数用来对后来人进行警告</span><br><span class="line"> *</span><br><span class="line"> * 浪费在这里的总时间 = 42h</span><br><span class="line"> */</span><br></pre></td></tr></tbody></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">/***</span><br><span class="line"> * When I wrote this, only God and I understood what I was doing</span><br><span class="line"> * Now, God only knows</span><br><span class="line"> */</span><br><span class="line">/***</span><br><span class="line">* 写这段代码的时候，只有上帝和我知道它是干嘛的</span><br><span class="line">* 现在，只有上帝知道</span><br><span class="line">*/</span><br></pre></td></tr></tbody></table></figure></div><p>最后附上一个网站，你想要的他都要：<a href="http://www.asciiworld.com/" target="_blank" rel="noopener">http://www.asciiworld.com/</a></p></body></html>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 其他 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx+Center OS 7.2 开机启动设置</title>
      <link href="/2019/05/16/Nginx+Center%20OS%207.2%20%E5%BC%80%E6%9C%BA%E5%90%AF%E5%8A%A8%E8%AE%BE%E7%BD%AE/"/>
      <url>/2019/05/16/Nginx+Center%20OS%207.2%20%E5%BC%80%E6%9C%BA%E5%90%AF%E5%8A%A8%E8%AE%BE%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script></head><body><p>centos 7以上是用Systemd进行系统初始化的，Systemd 是 Linux 系统中最新的初始化系统（init），它主要的设计目标是克服 sysvinit 固有的缺点，提高系统的启动速度。关于Systemd的详情介绍在<a href="www.yourlink.com">这里</a>。</p><p>Systemd服务文件以.service结尾，比如现在要建立nginx为开机启动，如果用yum install命令安装的，yum命令会自动创建nginx.service文件，直接用命令：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemcel enable nginx.service</span><br></pre></td></tr></tbody></table></figure></div><p>设置开机启动即可。</p><p>在这里我是用源码编译安装的，所以要手动创建nginx.service服务文件。<br>开机没有登陆情况下就能运行的程序，存在系统服务（system）里，即：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/lib/systemd/system/</span><br></pre></td></tr></tbody></table></figure></div><h3 id="在系统服务目录里创建nginx-service文件"><a href="#在系统服务目录里创建nginx-service文件" class="headerlink" title="在系统服务目录里创建nginx.service文件"></a>在系统服务目录里创建nginx.service文件</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /lib/systemd/system/nginx.service</span><br></pre></td></tr></tbody></table></figure></div><p>内容如下:</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=nginx</span><br><span class="line">After=network.target</span><br><span class="line">  </span><br><span class="line">[Service]</span><br><span class="line">Type=forking</span><br><span class="line">ExecStart=/usr/local/nginx/sbin/nginx</span><br><span class="line">ExecReload=/usr/local/nginx/sbin/nginx -s reload</span><br><span class="line">ExecStop=/usr/local/nginx/sbin/nginx -s quit</span><br><span class="line">PrivateTmp=true</span><br><span class="line">  </span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></tbody></table></figure></div><ul><li>[Unit]:服务的说明</li><li>Description:描述服务</li><li>After:描述服务类别</li><li>[Service]服务运行参数的设置</li><li>Type=forking是后台运行的形式</li><li>ExecStart为服务的具体运行命令</li><li>ExecReload为重启命令</li><li>ExecStop为停止命令</li><li>PrivateTmp=True表示给服务分配独立的临时空间</li></ul><p>注意：[Service]的启动、重启、停止命令全部要求使用绝对路径<br>[Install]运行级别下服务安装的相关设置，可设置为多用户，即系统运行级别为3</p><p>保存退出。</p><h3 id="设置开机启动"><a href="#设置开机启动" class="headerlink" title="设置开机启动"></a>设置开机启动</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl enable nginx.service</span><br></pre></td></tr></tbody></table></figure></div><h3 id="其他命令"><a href="#其他命令" class="headerlink" title="其他命令"></a>其他命令</h3><p>启动nginx服务</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start nginx.service</span><br></pre></td></tr></tbody></table></figure></div><p>设置开机自启动</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl enable nginx.service</span><br></pre></td></tr></tbody></table></figure></div><p>停止开机自启动</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl disable nginx.service</span><br></pre></td></tr></tbody></table></figure></div><p>查看服务当前状态</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl status nginx.service</span><br></pre></td></tr></tbody></table></figure></div><p>重新启动服务</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart nginx.service</span><br></pre></td></tr></tbody></table></figure></div><p>查看所有已启动的服务</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl list-units --type=service</span><br></pre></td></tr></tbody></table></figure></div><h3 id="Systemd-命令和-sysvinit-命令的对照表"><a href="#Systemd-命令和-sysvinit-命令的对照表" class="headerlink" title="Systemd 命令和 sysvinit 命令的对照表"></a>Systemd 命令和 sysvinit 命令的对照表</h3><p><a href="https://i.loli.net/2019/05/16/5cdd17a24c56278117.png" data-fancybox="group" data-caption="alt" class="fancybox"><img alt="alt" title="alt" data-src="https://i.loli.net/2019/05/16/5cdd17a24c56278117.png" class="lazyload"></a></p><h3 id="Sysvinit-运行级别和-systemd-目标的对应表"><a href="#Sysvinit-运行级别和-systemd-目标的对应表" class="headerlink" title="Sysvinit 运行级别和 systemd 目标的对应表"></a>Sysvinit 运行级别和 systemd 目标的对应表</h3><p><a href="https://i.loli.net/2019/05/16/5cdd17b62eaf678001.png" data-fancybox="group" data-caption="alt" class="fancybox"><img alt="alt" title="alt" data-src="https://i.loli.net/2019/05/16/5cdd17b62eaf678001.png" class="lazyload"></a></p></body></html>]]></content>
      
      
      <categories>
          
          <category> Nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>大白话解说，半分钟就懂 --- 分布式与集群是什么 ？ 区别是什么？</title>
      <link href="/2019/04/06/%E5%A4%A7%E7%99%BD%E8%AF%9D%E8%A7%A3%E8%AF%B4%EF%BC%8C%E5%8D%8A%E5%88%86%E9%92%9F%E5%B0%B1%E6%87%82%20---%20%E5%88%86%E5%B8%83%E5%BC%8F%E4%B8%8E%E9%9B%86%E7%BE%A4%E6%98%AF%E4%BB%80%E4%B9%88%20%EF%BC%9F%20%E5%8C%BA%E5%88%AB%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F/"/>
      <url>/2019/04/06/%E5%A4%A7%E7%99%BD%E8%AF%9D%E8%A7%A3%E8%AF%B4%EF%BC%8C%E5%8D%8A%E5%88%86%E9%92%9F%E5%B0%B1%E6%87%82%20---%20%E5%88%86%E5%B8%83%E5%BC%8F%E4%B8%8E%E9%9B%86%E7%BE%A4%E6%98%AF%E4%BB%80%E4%B9%88%20%EF%BC%9F%20%E5%8C%BA%E5%88%AB%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F/</url>
      
        <content type="html"><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script></head><body><p>PS：这篇文章算是笔记，仅部分文字是原创，相当内容只是收集、整理、提炼、总结别人写的。</p><p>没有标为原创 是出于对部分内容原作者的尊重和感谢</p><h2 id="一、大白话解说，半分钟就懂，用生活中的例子来说明："><a href="#一、大白话解说，半分钟就懂，用生活中的例子来说明：" class="headerlink" title="一、大白话解说，半分钟就懂，用生活中的例子来说明："></a>一、大白话解说，半分钟就懂，用生活中的例子来说明：</h2><p>小饭店原来只有一个厨师，切菜洗菜备料炒菜全干。</p><p>后来客人多了，厨房一个厨师忙不过来，又请了个厨师，两个厨师都能炒一样的菜，两个厨师的关系是集群。</p><p>为了让厨师专心炒菜，把菜做到极致，再请了个配菜师负责切菜，备菜，备料 …  厨师和配菜师的关系是分布式。</p><p>一个配菜师也忙不过来了，又请了个配菜师，两个配菜师关系是集群。</p><p>一个配菜师因故请假了，但是其余的配菜师还是该啥就干啥，只是没请假的配菜师任务均匀的加量了，但他们的任务和职责是不变的，这是集群。</p><p><strong>集群：多个人在一起作同样的事 。</strong></p><p><strong>分布式 ：多个人在一起作不同的事 。</strong></p><h2 id="二、图解："><a href="#二、图解：" class="headerlink" title="二、图解："></a>二、图解：</h2><p><a href="https://i.loli.net/2019/04/16/5cb54e9244f5b.png" data-fancybox="group" data-caption="alt" class="fancybox"><img alt="alt" title="alt" data-src="https://i.loli.net/2019/04/16/5cb54e9244f5b.png" class="lazyload"></a></p><h2 id="三、区别联系-（其实上面的内容应该已经让你理解2者了）"><a href="#三、区别联系-（其实上面的内容应该已经让你理解2者了）" class="headerlink" title="三、区别联系 （其实上面的内容应该已经让你理解2者了）"></a>三、区别联系 （其实上面的内容应该已经让你理解2者了）</h2><p>1、我记得在一本讲 tcp/ip 的书上有这样一句话：分布式是指 多个系统协同合作完成一个特定任务的系统。</p><p>分布式是解决中心化管理的问题，把所有的任务叠加到一个节点处理，太慢了。</p><p>所以把一个大的问题拆分为多个小的问题，并分别解决，最终协同合作。分布式的主要工作是分解任务，将职能拆解。</p><p>2、集群主要的使用场景是为了分担请求的压力，也就是在几个服务器上部署相同的应用程序，来分担客户端请求。</p><p>当压力进一步增大的时候，可能在需要存储的部分，mysql无法面对很多的写压力。因为在mysql做成集群之后，主要的写压力还是在master的机器上面，其他slave机器无法分担写压力，从而这个时候，也就引出来分布式。</p><p>分布式的主要应用场景是单台机器已经无法满足这种性能的要求，必须要融合多个节点，并且节点之间是相关之间有交互的。相当于在写mysql的时候，每个节点存储部分数据，也就是分布式存储的由来。在存储一些非结构化数据：静态文件、图片、pdf、小视频 … 这些也就是分布式文件系统的由来。</p><p>3、集群主要是简单加机器解决问题，对于问题本身不做任何分解；</p><p>布式处理里必然包含任务分解与答案归并。分布式中的某个子任务节点，可能由一个集群来代替；集群中任一节点，都是做一个完整的任务。</p><p>集群和分布式都是由多个节点组成，但是集群之间的通信协调基本不需要；而分布式各个节点的通信协调必不可少。</p><hr><p><strong>将一套系统拆分成不同子系统部署在不同服务器上（这叫分布式），然后部署多个相同的子系统在不同的服务器上（这叫集群），部署在不同服务器上的同一个子系统应做负载均衡。</strong></p><p><strong>_分布式：一个业务拆分为多个子业务，部署在多个服务器上 。 _</strong></p><p>_<strong>集群：同一个业务，部署在多个服务器上 。</strong><br>_</p></body></html>]]></content>
      
      
      <categories>
          
          <category> 分布式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 高并发 </tag>
            
            <tag> 分布式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spring boot直接使用https访问</title>
      <link href="/2019/03/11/spring%20boot%E7%9B%B4%E6%8E%A5%E4%BD%BF%E7%94%A8https%E8%AE%BF%E9%97%AE/"/>
      <url>/2019/03/11/spring%20boot%E7%9B%B4%E6%8E%A5%E4%BD%BF%E7%94%A8https%E8%AE%BF%E9%97%AE/</url>
      
        <content type="html"><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script></head><body><h1 id="spring-boot-https"><a href="#spring-boot-https" class="headerlink" title="spring-boot-https"></a>spring-boot-https</h1><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>我们使用spring boot配置https证书，打到反向代理访问https的效果。由于现在手里没有可用的证书，所以我们使用jdk帮我们生成一个：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">keytool -genkey -alias tomcat -keypass 123456 -keyalg RSA -keysize 1024 -validity 365 -keystore D:/tomcat.keystore -storepass 123456</span><br></pre></td></tr></tbody></table></figure></div><p>上面代码我们在D盘生成一个<strong>密码为：123456</strong>，<strong>名称为tomcat.keystore</strong>的证书<br><a href="https://i.imgur.com/Zb4NU4L.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.imgur.com/Zb4NU4L.png" class="lazyload"></a></p><p>接下来我们新建一个spring boot 工程把证书拷贝到resources目录下，配置application.properties文件：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># https端口号</span><br><span class="line">server.port=443</span><br><span class="line">http.port=8888</span><br><span class="line"># 证书的路径</span><br><span class="line">server.ssl.key-store=classpath:tomcat.keystore</span><br><span class="line"># 证书密码，请修改为您自己证书的密码</span><br><span class="line">server.ssl.key-password=123456</span><br><span class="line"># 秘钥库类型</span><br><span class="line">server.ssl.key-store-type=JKS</span><br><span class="line"># 证书别名</span><br><span class="line">server.ssl.key-alias=tomcat</span><br></pre></td></tr></tbody></table></figure></div><p><a href="https://i.imgur.com/H9wB6cm.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.imgur.com/H9wB6cm.png" class="lazyload"></a></p><p>然后我们自定义一个Tomcat配置类如下：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yi.https.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.apache.catalina.Context;</span><br><span class="line"><span class="keyword">import</span> org.apache.catalina.connector.Connector;</span><br><span class="line"><span class="keyword">import</span> org.apache.tomcat.util.descriptor.web.SecurityCollection;</span><br><span class="line"><span class="keyword">import</span> org.apache.tomcat.util.descriptor.web.SecurityConstraint;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * http转https配置</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> YI</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019-3-11 22:31:28</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpsConfig</span> </span>{</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 监听的http请求的端口,需要在application配置中添加http.port=端口号  如80</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"${http.port}"</span>)</span><br><span class="line">    Integer httpPort;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 正常启用的https端口 如443</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"${server.port}"</span>)</span><br><span class="line">    Integer httpsPort;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 配置内置的servlet容器工厂为tomcat.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> TomcatServletWebServerFactory <span class="title">servletContainer</span><span class="params">()</span> </span>{</span><br><span class="line">        TomcatServletWebServerFactory tomcat = <span class="keyword">new</span> TomcatServletWebServerFactory() {</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">postProcessContext</span><span class="params">(Context context)</span> </span>{</span><br><span class="line">                SecurityConstraint constraint = <span class="keyword">new</span> SecurityConstraint();</span><br><span class="line">                constraint.setUserConstraint(<span class="string">"CONFIDENTIAL"</span>);</span><br><span class="line">                SecurityCollection collection = <span class="keyword">new</span> SecurityCollection();</span><br><span class="line">                collection.addPattern(<span class="string">"/*"</span>);</span><br><span class="line">                constraint.addCollection(collection);</span><br><span class="line">                context.addConstraint(constraint);</span><br><span class="line">            }</span><br><span class="line">        };</span><br><span class="line">        tomcat.addAdditionalTomcatConnectors(initiateHttpConnector());</span><br><span class="line">        <span class="keyword">return</span> tomcat;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 配置一个http连接信息.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Connector <span class="title">initiateHttpConnector</span><span class="params">()</span> </span>{</span><br><span class="line">        Connector connector = <span class="keyword">new</span> Connector(<span class="string">"org.apache.coyote.http11.Http11NioProtocol"</span>);</span><br><span class="line">        connector.setScheme(<span class="string">"http"</span>);</span><br><span class="line">        connector.setPort(httpPort);</span><br><span class="line">        connector.setSecure(<span class="keyword">false</span>);</span><br><span class="line">        connector.setRedirectPort(httpsPort);</span><br><span class="line">        <span class="keyword">return</span> connector;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p>好了核心代码和配置大功告成，接下来我们访问一下吧：<a href="http://localhost:8888" target="_blank" rel="noopener">http://localhost:8888</a> 随后他会自动跳到我们配置的443端口</p><p><a href="https://i.imgur.com/XhriQWg.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.imgur.com/XhriQWg.png" class="lazyload"></a><br>因为我们不是安全的证书，所以点击高级那里，然后点击继续前往</p><p><a href="https://i.imgur.com/6IQ0rXp.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.imgur.com/6IQ0rXp.png" class="lazyload"></a></p><p>比较简单，具体看代码吧<br><a href="https://github.com/HWYWL/spring-boot-2.x-examples/tree/master/spring-boot-https" target="_blank" rel="noopener">https://github.com/HWYWL/spring-boot-2.x-examples/tree/master/spring-boot-https</a></p><h3 id="问题建议"><a href="#问题建议" class="headerlink" title="问题建议"></a>问题建议</h3><ul><li>联系我的邮箱：<a href="mailto:ilovey_hwy@163.com">ilovey_hwy@163.com</a></li><li>我的博客：<a href="http://www.hwy.ac.cn" target="_blank" rel="noopener">http://www.hwy.ac.cn</a></li><li>GitHub：<a href="https://github.com/HWYWL" target="_blank" rel="noopener">https://github.com/HWYWL</a></li></ul></body></html>]]></content>
      
      
      <categories>
          
          <category> Spring Boot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Boot </tag>
            
            <tag> https </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Cloud微服务注册中心Eureka 2.x停止维护了咋办？</title>
      <link href="/2019/02/27/Spring%20Cloud%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83Eureka%202.x%E5%81%9C%E6%AD%A2%E7%BB%B4%E6%8A%A4%E4%BA%86%E5%92%8B%E5%8A%9E%EF%BC%9F/"/>
      <url>/2019/02/27/Spring%20Cloud%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83Eureka%202.x%E5%81%9C%E6%AD%A2%E7%BB%B4%E6%8A%A4%E4%BA%86%E5%92%8B%E5%8A%9E%EF%BC%9F/</url>
      
        <content type="html"><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script></head><body><h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><h3 id="1、Eureka官方宣布2-x不再开源"><a href="#1、Eureka官方宣布2-x不再开源" class="headerlink" title="1、Eureka官方宣布2.x不再开源"></a>1、Eureka官方宣布2.x不再开源</h3><p>如果对Spring Cloud微服务技术体系有一定了解了之后，肯定就知道Spring Cloud最开始原生支持和推荐的服务注册中心是国外的一个视频网站Netflix开源的Eureka。</p><p>这个Eureka呢，又分成了所谓的1.x版本和2.x版本，之前在国内比较常用在生产环境中的都是Eureka的1.x版本。</p><p>然后Netflix这个公司本身一直在做Eureka 2.x版本，结果做着做着，大家万众瞩目很期待的时候。。。</p><p><strong>2018年7月，人家官方就突然宣布Eureka 2.x停止开源计划了，具体如下：</strong><br><a href="https://i.loli.net/2019/02/27/5c75e3dab6232.png" data-fancybox="group" data-caption="alt" class="fancybox"><img alt="alt" title="alt" data-src="https://i.loli.net/2019/02/27/5c75e3dab6232.png" class="lazyload"></a></p><p>用中文给大家翻译一下，这里的意思就是说：<strong>Eureka 2.0的开源工作已经停止了，如果你要用Eureka 2.x版本的代码来部署到生产环境的话，一切后果请自负。</strong></p><p>大概就是这个意思，就是不打算把这个事儿做大做强下去了。</p><p>当然现在其实Eureka 1.x的版本也有不少公司在生产环境用，而且基本也还算能用的状态，基本功能还算正常，应付很多常规的场景也足够了。</p><p>但是现实就是这个声明发出来，让大伙都心里一凉，怎么感觉这个这个Eureka有点不太靠谱了呢，咱还敢继续用么，没错，很多小伙伴就是这感觉。</p><h3 id="2、互联网大厂的基础架构：自研服务注册中心"><a href="#2、互联网大厂的基础架构：自研服务注册中心" class="headerlink" title="2、互联网大厂的基础架构：自研服务注册中心"></a>2、互联网大厂的基础架构：自研服务注册中心</h3><p>这里给大家说一句题外话，BAT、TMD等一线互联网公司，包括一些有一定研发实力的中大型互联网公司，都是自研了微服务技术架构中的服务注册中心。或者是基于开源的Eureka之类的项目来做二次开发，自行优化里面的架构，解决遇到的问题。</p><p>所以对于有基础架构团队的公司而言，这个问题相对来说还没那么严重。</p><p>因为大厂的基础架构团队，完全可以把常见的开源服务注册中心的源码都深入看一遍，然后经过大量严谨的测试找到各个开源技术的优点和缺点。最后决定是从0开始自研一个服务注册中心，还是说基于某个开源的技术来进行二次开发和优化。</p><p>比如说Eureka 1.x作为一个服务注册中心，有一个<strong>非常典型的架构问题</strong>。</p><p>虽然他可以部署集群架构，但是集群中每个Eureka实例都是对等的。每个Eureka实例都包含了全部的服务注册表，每个Eureka实例接收到了服务注册/下线等请求的时候，会同步转发给集群中其他的Eureka实例，实现集群数据同步。</p><p>大家看下面的图，大概就是一个示意。<br><a href="https://i.loli.net/2019/02/27/5c75e44b78aac.png" data-fancybox="group" data-caption="alt" class="fancybox"><img alt="alt" title="alt" data-src="https://i.loli.net/2019/02/27/5c75e44b78aac.png" class="lazyload"></a></p><p><strong>那么这里就有一个问题了</strong>：如果是支持超大规模的服务集群，这样的模式能行么？</p><p>每台机器的内存是有限的，集群里的服务数量越来越多，可能有几十万个服务实例在运行，那么服务注册表越来越大，最后超过单机内存支撑的极限怎么办？</p><p>这个时候如果自己研发服务注册中心，就可以参考大数据领域的Hadoop的架构思想。</p><p>Hadoop的设计思想是把注册表分片存储，分布式存储在多台机器上，每台机器存储部分注册表数据。</p><p>然后每个Server可以加上一个从节点做热备份，避免单机挂掉导致注册 表数据丢失。</p><p>我们来看看架构图，如下所示：<br><a href="https://i.loli.net/2019/02/27/5c75e47bd6e91.png" data-fancybox="group" data-caption="alt" class="fancybox"><img alt="alt" title="alt" data-src="https://i.loli.net/2019/02/27/5c75e47bd6e91.png" class="lazyload"></a></p><p>实际在生产环境使用Eureka的时候，你还会碰到很多现实的问题。</p><p>比如说上面讲了，Eureka本身是基于简单的同步机制实现集群架构的，但是这里在集群之间进行同步的时候，其实是异步进行的，采用的是最终一致性的协议。</p><p>这就可能会导致说，你某个服务注册到了一个Eureka Server实例上去，但是他需要异步复制到其他的Eureka Server，这中间是需要时间的。</p><p>所以可能导致其他的Eureka Server是看不到那个刚新注册的服务实例的。</p><p>大家看下面的图，就示意了这个问题：</p><p><a href="https://i.loli.net/2019/02/27/5c75e49cd6b00.png" data-fancybox="group" data-caption="alt" class="fancybox"><img alt="alt" title="alt" data-src="https://i.loli.net/2019/02/27/5c75e49cd6b00.png" class="lazyload"></a></p><p>但是如果是采取了类似Hadoop的那种数据分片思想的话，一个注册表数据分片就在一台机器上，由这台机器负责提供服务的注册和发现，那么此时就可以实现<strong>强一致的效果</strong>。</p><p>也就是说，只要你注册了，立马就会被别人发现，如下图。<br><a href="https://i.loli.net/2019/02/27/5c75e4b3c1d37.png" data-fancybox="group" data-caption="alt" class="fancybox"><img alt="alt" title="alt" data-src="https://i.loli.net/2019/02/27/5c75e4b3c1d37.png" class="lazyload"></a></p><p>这里只是说其中几个例子罢了，改造开源系统的思路是很多的，实际上大厂完全可以对开源技术做很多的自研、定制和改造，解决线上的生产问题，让服务注册中心朝着他们心里期望的效果去发展，所以对他们来说其实问题并不大。</p><h3 id="3、中小公司的其他选择：Consul"><a href="#3、中小公司的其他选择：Consul" class="headerlink" title="3、中小公司的其他选择：Consul"></a>3、中小公司的其他选择：Consul</h3><p>只是对于很多中小型公司而言，可能本身没有基础架构团队的支撑，或者是没有过多的人力物力投入到自研中间件、开源系统二次开发中去。</p><p>那么此时就可以考虑选择其他的开源服务注册中心的技术了，比如Spring Cloud同样支持的Consul就是目前很多公司的选择。</p><p>这儿咱们简单介绍一下Consul，后面可以考虑再写文章介绍介绍Consul的架构原理和使用什么的，大家看一下，可以作为一个服务注册中心技术选型的参考：</p><ul><li><p><strong>服务注册与发现</strong></p></li><li><p>Consul当然是可以作为服务注册中心的了，可以用做微服务架构的服务注册和发现。</p></li><li><p>同时这里可以先给大家说一下，Consul的服务注册机制选择的是基于Daft协议的强一致，没有像Eureka那样使用最终一致的效果。</p></li><li><p><strong>健康检查</strong></p></li><li><p>Consul可以支持非常强大的健康检查的功能，啥叫健康检查？</p></li><li><p>简单来说就是不停的发请求给你的服务检查他到底死了没有，目前是否还健康，这个就是叫做健康检查。</p></li><li><p><strong>kv存储</strong></p></li><li><p>Consul不光支持服务注册和发现，居然还可以支持简单的kv存储。</p></li><li><p>他可以让你用key-value对的形式存放一些信息以及提取查询，是不是很神奇？</p></li><li><p><strong>安全的服务通信</strong></p></li><li><p>Consul支持让你的服务之间进行授权来限制哪些服务可以通信和连接</p></li><li><p><strong>多数据中心支持</strong></p></li></ul><p>其实说实话，在做技术选型的时候，非常关键的一点，就是看社区是否活跃。</p><p>所以虽然上面说了很多，但是其实大家完全可以看一眼下面的Eureka Github和Consul Github的更新活跃度的对比。</p><p>我们明显会发现，Eureka 1.x版本最近的更新都在几个月前甚至几年前，但是Consul最近的更新很多都是几天前的。</p><p>所以本身Spring Cloud官方技术栈也是支持Consul的，Eureka开源社区慢慢不再活跃之后，自然很多中小公司开始选择使用功能更加强大，而且社区更新也更加活跃的Consul作为服务注册中心了，这也是一个不错的选择。</p><p><a href="https://juejin.im/post/5c7431f2f265da2db0739755" target="_blank" rel="noopener">转载自石杉码农</a></p></body></html>]]></content>
      
      
      <categories>
          
          <category> 分布式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 其他 </tag>
            
            <tag> 高并发 </tag>
            
            <tag> 分布式 </tag>
            
            <tag> Spring Cloud </tag>
            
            <tag> Eureka </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux常用但我记不住的命令</title>
      <link href="/2019/02/26/Linux%E5%B8%B8%E7%94%A8%E4%BD%86%E6%88%91%E8%AE%B0%E4%B8%8D%E4%BD%8F%E7%9A%84%E5%91%BD%E4%BB%A4/"/>
      <url>/2019/02/26/Linux%E5%B8%B8%E7%94%A8%E4%BD%86%E6%88%91%E8%AE%B0%E4%B8%8D%E4%BD%8F%E7%9A%84%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script></head><body><p>Linux如何查看端口</p><p>1、lsof -i:端口号 用于查看某一端口的占用情况，比如查看8000端口使用情况，lsof -i:8000</p><a id="more"></a><p>Linux如何查看端口</p><p>1、lsof -i:端口号 用于查看某一端口的占用情况，比如查看8000端口使用情况，lsof -i:8000</p><div class="cnblogs_code" style="margin: 5px 0px; padding: 5px; background-color: rgb(245, 245, 245); border: 1px solid rgb(204, 204, 204); overflow: auto; font-family: " courier new" !important; font-size: 12px !important;">  <pre style="margin-bottom: 0px; padding: 0px; white-space: pre-wrap; font-family: " courier new" !important; font-size: 12px !important;"># lsof -i:<span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">8000</span> <span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(0, 0, 0);">COMMAND   PID USER   FD   TYPE  DEVICE SIZE</span>/<span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(0, 0, 0);">OFF NODE NAME  lwfs</span> <span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">22065</span> root    <span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">6u</span>  IPv4 <span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">4395053</span>      0t0  TCP *:irdmi (LISTEN)</pre></div><p>可以看到8000端口已经被轻量级文件系统转发服务lwfs占用</p><p>2、netstat -tunlp |grep 端口号，用于查看指定的端口号的进程情况，如查看8000端口的情况，netstat -tunlp |grep 8000</p><div class="cnblogs_code" style="margin: 5px 0px; padding: 5px; background-color: rgb(245, 245, 245); border: 1px solid rgb(204, 204, 204); overflow: auto; font-family: " courier new" !important; font-size: 12px !important;">  <div class="cnblogs_code_toolbar" style="margin: 5px 0px 0px; padding: 0px;"><span class="cnblogs_code_copy" style="margin: 0px; padding: 0px 5px 0px 0px; line-height: 1.8;"><a title="复制代码" style="margin: 0px; padding: 0px; color: rgb(0, 0, 0); border: none !important; background-color: rgb(245, 245, 245) !important;">![复制代码](https://common.cnblogs.com/images/copycode.gif)</a></span></div><pre style="margin-bottom: 0px; padding: 0px; white-space: pre-wrap; font-family: " courier new" !important; font-size: 12px !important;"># netstat -<span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(0, 0, 0);">tunlp Active Internet connections (only servers)Proto Recv</span>-Q Send-Q Local Address               Foreign Address             State       PID/<span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(0, 0, 0);">Program name   tcp</span> <span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">0</span>      <span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">0</span> <span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">0.0</span>.<span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">0.0</span>:<span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">111</span>                 <span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">0.0</span>.<span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">0.0</span>:*                   LISTEN      <span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">4814</span>/<span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(0, 0, 0);">rpcbind        tcp</span> <span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">0</span>      <span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">0</span> <span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">0.0</span>.<span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">0.0</span>:<span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">5908</span>                <span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">0.0</span>.<span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">0.0</span>:*                   LISTEN      <span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">25492</span>/qemu-<span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(0, 0, 0);">kvm      tcp</span> <span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">0</span>      <span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">0</span> <span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">0.0</span>.<span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">0.0</span>:<span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">6996</span>                <span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">0.0</span>.<span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">0.0</span>:*                   LISTEN      <span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">22065</span>/<span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(0, 0, 0);">lwfs          tcp</span> <span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">0</span>      <span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">0</span> <span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">192.168</span>.<span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">122.1</span>:<span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">53</span>            <span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">0.0</span>.<span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">0.0</span>:*                   LISTEN      <span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">38296</span>/<span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(0, 0, 0);">dnsmasq       tcp</span> <span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">0</span>      <span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">0</span> <span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">0.0</span>.<span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">0.0</span>:<span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">22</span>                  <span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">0.0</span>.<span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">0.0</span>:*                   LISTEN      <span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">5278</span>/<span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(0, 0, 0);">sshd           tcp</span> <span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">0</span>      <span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">0</span> <span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">127.0</span>.<span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">0.1</span>:<span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">631</span>               <span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">0.0</span>.<span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">0.0</span>:*                   LISTEN      <span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">5013</span>/<span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(0, 0, 0);">cupsd          tcp</span> <span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">0</span>      <span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">0</span> <span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">127.0</span>.<span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">0.1</span>:<span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">25</span>                <span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">0.0</span>.<span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">0.0</span>:*                   LISTEN      <span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">5962</span>/<span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(0, 0, 0);">master         tcp</span> <span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">0</span>      <span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">0</span> <span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">0.0</span>.<span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">0.0</span>:<span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">8666</span>                <span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">0.0</span>.<span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">0.0</span>:*                   LISTEN      <span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">44868</span>/<span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(0, 0, 0);">lwfs          tcp</span> <span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">0</span>      <span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">0</span> <span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">0.0</span>.<span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">0.0</span>:<span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">8000</span>                <span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">0.0</span>.<span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">0.0</span>:*                   LISTEN      <span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">22065</span>/lwfs        </pre><div class="cnblogs_code_toolbar" style="margin: 5px 0px 0px; padding: 0px;"><span class="cnblogs_code_copy" style="margin: 0px; padding: 0px 5px 0px 0px; line-height: 1.8;"><a title="复制代码" style="margin: 0px; padding: 0px; color: rgb(0, 0, 0); border: none !important; background-color: rgb(245, 245, 245) !important;">![复制代码](https://common.cnblogs.com/images/copycode.gif)</a></span></div></div><div class="cnblogs_code" style="margin: 5px 0px; padding: 5px; background-color: rgb(245, 245, 245); border: 1px solid rgb(204, 204, 204); overflow: auto; font-family: " courier new" !important; font-size: 12px !important;">  <pre style="margin-bottom: 0px; padding: 0px; white-space: pre-wrap; font-family: " courier new" !important; font-size: 12px !important;"># netstat -tunlp | <span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(0, 0, 255);">grep</span> <span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">8000</span> <span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(0, 0, 0);">tcp</span> <span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">0</span>      <span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">0</span> <span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">0.0</span>.<span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">0.0</span>:<span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">8000</span>                <span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">0.0</span>.<span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">0.0</span>:*                   LISTEN      <span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(128, 0, 128);">22065</span>/lwfs          </pre></div><p>说明一下几个参数的含义：</p><div class="cnblogs_code" style="margin: 5px 0px; padding: 5px; background-color: rgb(245, 245, 245); border: 1px solid rgb(204, 204, 204); overflow: auto; font-family: " courier new" !important; font-size: 12px !important;">  <div class="cnblogs_code_toolbar" style="margin: 5px 0px 0px; padding: 0px;"><span class="cnblogs_code_copy" style="margin: 0px; padding: 0px 5px 0px 0px; line-height: 1.8;"><a title="复制代码" style="margin: 0px; padding: 0px; color: rgb(0, 0, 0); border: none !important; background-color: rgb(245, 245, 245) !important;">![复制代码](https://common.cnblogs.com/images/copycode.gif)</a></span></div><pre style="margin-bottom: 0px; padding: 0px; white-space: pre-wrap; font-family: " courier new" !important; font-size: 12px !important;"> <span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(255, 0, 0);">-t (tcp) 仅显示tcp相关选项                                 -u (udp)仅显示udp相关选项                                 -n 拒绝显示别名，能显示数字的全部转化为数字                                 -l 仅列出在Listen(监听)的服务状态                                 -</span><span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(0, 0, 0);"><span style="margin: 0px; padding: 0px; line-height: 1.8; color: rgb(255, 0, 0);">p 显示建立相关链接的程序名</span></span> </pre><div class="cnblogs_code_toolbar" style="margin: 5px 0px 0px; padding: 0px;"><span class="cnblogs_code_copy" style="margin: 0px; padding: 0px 5px 0px 0px; line-height: 1.8;"><a title="复制代码" style="margin: 0px; padding: 0px; color: rgb(0, 0, 0); border: none !important; background-color: rgb(245, 245, 245) !important;">![复制代码](https://common.cnblogs.com/images/copycode.gif)</a></span></div></div><p>后台启动一个jar：</p><div class="cnblogs_code" style="margin: 5px 0px; padding: 5px; background-color: rgb(245, 245, 245); border: 1px solid rgb(204, 204, 204); overflow: auto; font-family: " courier new" !important; font-size: 12px !important;">  <pre style="padding: 0px; margin-bottom: 0px; line-height: 1.42857; white-space: pre-wrap; font-family: " courier new" !important; font-size: 12px !important;">nohup java -jar xxx.jar &    </pre></div><p><span style="font-family: " helvetica neue", helvetica, "pingfang sc", "hiragino sans gb", "microsoft yahei", "noto cjk "wenquanyi micro hei", arial, sans-serif; font-size: 13px;">tail 命令可用于查看文件的内容，有一个常用的参数</span> <span class="marked" style="border: 0px; margin: 0px; padding: 0.2em; background-color: rgb(236, 234, 230); border-radius: 3px; font-weight: bold; font-family: SFMono-Regular, Consolas, " liberation mono", menlo, courier, monospace; font-size: 13px;">-f</span> <span style="font-family: " helvetica neue", helvetica, "pingfang sc", "hiragino sans gb", "microsoft yahei", "noto cjk "wenquanyi micro hei", arial, sans-serif; font-size: 13px;">常用于查阅正在改变的日志文件。</span></p><div class="cnblogs_code" style="margin: 5px 0px; padding: 5px; background-color: rgb(245, 245, 245); border: 1px solid rgb(204, 204, 204); overflow: auto; font-family: " courier new" !important; font-size: 12px !important;">  <pre style="padding: 0px; margin-bottom: 0px; line-height: 1.42857; white-space: pre-wrap; font-family: " courier new" !important; font-size: 12px !important;">  **命令格式：**  <pre class="prettyprint prettyprinted" style="border-left-width: 4px; border-color: rgb(221, 221, 221); margin: 15px auto; padding: 10px 15px; font-variant-numeric: normal; font-variant-east-asian: normal; font-stretch: normal; font-size: 12px; line-height: 20px; font-family: Menlo, Monaco, Consolas, " andale mono", "lucida console", "courier new", monospace; white-space: pre-wrap; background: url(" images codecolorer_bg.gif") center top rgb(251, 251, 251);"><span class="pln" style="border: 0px; margin: 0px; padding: 0px; color: rgb(0, 0, 0);">tail</span> <span class="pun" style="border: 0px; margin: 0px; padding: 0px; color: rgb(102, 102, 0);">[参数]</span> <span class="pln" style="border: 0px; margin: 0px; padding: 0px; color: rgb(0, 0, 0);"></span> <span class="pun" style="border: 0px; margin: 0px; padding: 0px; color: rgb(102, 102, 0);">[文件]</span> <span class="pln" style="border: 0px; margin: 0px; padding: 0px; color: rgb(0, 0, 0);"></span> </pre><p></p></pre></div><p><strong>参数：</strong></p><div class="cnblogs_code" style="margin: 5px 0px; padding: 5px; background-color: rgb(245, 245, 245); border: 1px solid rgb(204, 204, 204); overflow: auto; font-family: " courier new" !important; font-size: 12px !important;">  <pre style="padding: 0px; margin-bottom: 0px; line-height: 1.42857; white-space: pre-wrap; font-family: " courier new" !important; font-size: 12px !important;">   _-f 循环读取_   -q 不显示处理信息   _-v 显示详细的处理信息_   -c<数目> 显示的字节数   _-n<行数> 显示行数_   --pid=PID 与-f合用,表示在进程ID,PID死掉之后结束.   _-q, --quiet, --silent 从不输出给出文件名的首部_   -s, --sleep-interval=S 与-f合用,表示在每次反复的间隔休眠S秒  </pre></div><p><strong>实例</strong></p><p>要显示 notes.log 文件的最后 10 行，请输入以下命令：</p><pre class="prettyprint prettyprinted" style="border-left-width: 4px; border-color: rgb(221, 221, 221); margin: 15px auto; padding: 10px 15px; font-variant-numeric: normal; font-variant-east-asian: normal; font-stretch: normal; font-size: 12px; line-height: 20px; font-family: Menlo, Monaco, Consolas, " andale mono", "lucida console", "courier new", monospace; white-space: pre-wrap; background: url(" images codecolorer_bg.gif") center top rgb(251, 251, 251);"><span class="pln" style="border: 0px; margin: 0px; padding: 0px; color: rgb(0, 0, 0);">tail notes</span><span class="pun" style="border: 0px; margin: 0px; padding: 0px; color: rgb(102, 102, 0);">.</span><span class="pln" style="border: 0px; margin: 0px; padding: 0px; color: rgb(0, 0, 0);">log</span></pre><p>要跟踪名为 notes.log 的文件的增长情况，请输入以下命令：</p><pre class="prettyprint prettyprinted" style="border-left-width: 4px; border-color: rgb(221, 221, 221); margin: 15px auto; padding: 10px 15px; font-variant-numeric: normal; font-variant-east-asian: normal; font-stretch: normal; font-size: 12px; line-height: 20px; font-family: Menlo, Monaco, Consolas, " andale mono", "lucida console", "courier new", monospace; white-space: pre-wrap; background: url(" images codecolorer_bg.gif") center top rgb(251, 251, 251);"><span class="pln" style="border: 0px; margin: 0px; padding: 0px; color: rgb(0, 0, 0);">tail</span> <span class="pun" style="border: 0px; margin: 0px; padding: 0px; color: rgb(102, 102, 0);">-</span><span class="pln" style="border: 0px; margin: 0px; padding: 0px; color: rgb(0, 0, 0);">f notes</span><span class="pun" style="border: 0px; margin: 0px; padding: 0px; color: rgb(102, 102, 0);">.</span><span class="pln" style="border: 0px; margin: 0px; padding: 0px; color: rgb(0, 0, 0);">log</span></pre><p>此命令显示 notes.log 文件的最后 10 行。当将某些行添加至 notes.log 文件时，tail 命令会继续显示这些行。 显示一直继续，直到您按下（Ctrl-C）组合键停止显示。</p><p>vmstat - 虚拟内存统计</p><p>vmstat 命令报告有关进程、内存、分页、块 IO、中断和 CPU 活动等信息。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># vmstat 3</span><br></pre></td></tr></tbody></table></figure></div><p>输出示例：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">procs -----------memory---------- ---swap-- -----io---- --system-- -----cpu------</span><br><span class="line"> r b swpd free buff cache si so bi bo in cs us sy id wa st</span><br><span class="line"> 0 0 0 2540988 522188 5130400 0 0 2 32 4 2 4 1 96 0 0</span><br><span class="line"> 1 0 0 2540988 522188 5130400 0 0 0 720 1199 665 1 0 99 0 0</span><br><span class="line"> 0 0 0 2540956 522188 5130400 0 0 0 0 1151 1569 4 1 95 0 0</span><br><span class="line"> 0 0 0 2540956 522188 5130500 0 0 0 6 1117 439 1 0 99 0 0</span><br><span class="line"> 0 0 0 2540940 522188 5130512 0 0 0 536 1189 932 1 0 98 0 0</span><br><span class="line"> 0 0 0 2538444 522188 5130588 0 0 0 0 1187 1417 4 1 96 0 0</span><br><span class="line"> 0 0 0 2490060 522188 5130640 0 0 0 18 1253 1123 5 1 94 0 0</span><br></pre></td></tr></tbody></table></figure></div><p>2.找出占用内存资源最多的前 10 个进程</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -auxf | sort -nr -k 4 | head -10</span><br></pre></td></tr></tbody></table></figure></div><p>3.找出占用 CPU 资源最多的前 10 个进程</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -auxf | sort -nr -k 3 | head -10</span><br></pre></td></tr></tbody></table></figure></div><h3 id="常用私活"><a href="#常用私活" class="headerlink" title="常用私活"></a>常用私活</h3><p>查找文件<strong>all-server.log</strong>中含<strong>deviceId</strong>有的内容并显示出来</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find -type f -name 'all-server.log'|xargs grep "deviceId"</span><br></pre></td></tr></tbody></table></figure></div><p>统计<strong>aaa</strong>在文件<strong>all-server.log</strong>出现的次数</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat all-server.log |grep "aaa"|wc -l</span><br></pre></td></tr></tbody></table></figure></div></body></html>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 操作系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>写代码怎能不会这些Linux命令</title>
      <link href="/2019/02/26/%E5%86%99%E4%BB%A3%E7%A0%81%E6%80%8E%E8%83%BD%E4%B8%8D%E4%BC%9A%E8%BF%99%E4%BA%9BLinux%E5%91%BD%E4%BB%A4/"/>
      <url>/2019/02/26/%E5%86%99%E4%BB%A3%E7%A0%81%E6%80%8E%E8%83%BD%E4%B8%8D%E4%BC%9A%E8%BF%99%E4%BA%9BLinux%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script></head><body><p> 这篇文章翻译自 <a href="http://www.thegeekstuff.com/2010/11/50-linux-commands" target="_blank" rel="noopener">http://www.thegeekstuff.com/2010/11/50-linux-commands</a> 这些都是一些很常用的命令，这篇文章中每个命令都有一些简单的示例说明它的用法， 对于想学习Unix/Linux的人，这些命令基本上都是需要掌握的。</p><a id="more"></a><article class="markdown-body"><blockquote><p>这篇文章翻译自 <a href="http://www.thegeekstuff.com/2010/11/50-linux-commands/" target="_blank" rel="noopener">http://www.thegeekstuff.com/2010/11/50-linux-commands</a> 这些都是一些很常用的命令，这篇文章中每个命令都有一些简单的示例说明它的用法， 对于想学习Unix/Linux的人，这些命令基本上都是需要掌握的。</p></blockquote><p>同时我也做了一张简易版的图例：</p><p><a href="https://i.loli.net/2017/08/22/599b9b3ca5bb7.png" target="_blank" rel="noopener"><img alt="Linux命令表" title="Linux命令表" data-src="https://i.loli.net/2017/08/22/599b9b3ca5bb7.png" class="lazyload"></a></p><h2 id="1-tar"><a href="#1-tar" class="headerlink" title="1. tar"></a>1. tar</h2><p>创建一个新的tar文件</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ tar cvf archive_name.tar dirname/</code></pre></div></div><p>解压tar文件</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ tar xvf archive_name.tar</code></pre></div></div><p>查看tar文件</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ tar tvf archive_name.tar</code></pre></div></div><p>更多示例：<a href="http://www.thegeekstuff.com/2010/04/unix-tar-command-examples/" target="_blank" rel="noopener">The Ultimate Tar Command Tutorial with 10 Practical Examples</a></p><h2 id="2-grep"><a href="#2-grep" class="headerlink" title="2. grep"></a>2. grep</h2><p>在文件中查找字符串(不区分大小写)</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ grep -i "the" demo_file</code></pre></div></div><p>输出成功匹配的行，以及该行之后的三行</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ grep -A 3 -i "example" demo_text</code></pre></div></div><p>在一个文件夹中递归查询包含指定字符串的文件</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ grep -r "ramesh" *</code></pre></div></div><p>更多示例：<a href="http://www.thegeekstuff.com/2009/03/15-practical-unix-grep-command-examples/" target="_blank" rel="noopener">Get a Grip on the Grep! – 15 Practical Grep Command Examples</a></p><h2 id="3-find"><a href="#3-find" class="headerlink" title="3. find"></a>3. find</h2><p>查找指定文件名的文件(不区分大小写)</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ find -iname "MyProgram.c"</code></pre></div></div><p>对找到的文件执行某个命令</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ find -iname "MyProgram.c" -exec md5sum {} \;</code></pre></div></div><p>查找home目录下的所有空文件</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ find ~ -empty</code></pre></div></div><p>更多示例：<a href="http://www.thegeekstuff.com/2009/03/15-practical-linux-find-command-examples/" target="_blank" rel="noopener">Mommy, I found it! — 15 Practical Linux Find Command Examples</a></p><h2 id="4-ssh"><a href="#4-ssh" class="headerlink" title="4. ssh"></a>4. ssh</h2><p>登录到远程主机</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ ssh -l jsmith remotehost.example.com</code></pre></div></div><p>调试ssh客户端</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ ssh -v -l jsmith remotehost.example.com</code></pre></div></div><p>显示ssh客户端版本</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ ssh -V</code></pre></div></div><p>更多示例：<a href="http://www.thegeekstuff.com/2008/05/5-basic-linux-ssh-client-commands/" target="_blank" rel="noopener">5 Basic Linux SSH Client Commands</a></p><h2 id="5-sed"><a href="#5-sed" class="headerlink" title="5. sed"></a>5. sed</h2><p>当你将Dos系统中的文件复制到Unix/Linux后，这个文件每行都会以\r\n结尾，sed可以轻易将其转换为Unix格式的文件，使用\n结尾的文件</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ sed 's/.$//' filename</code></pre></div></div><p>反转文件内容并输出</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ sed -n '1!G; h; p' filename</code></pre></div></div><p>为非空行添加行号</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ sed '/./=' thegeekstuff.txt | sed 'N; s/\n/ /'</code></pre></div></div><p>更多示例：<a href="http://www.thegeekstuff.com/2009/10/unix-sed-tutorial-advanced-sed-substitution-examples/" target="_blank" rel="noopener">Advanced Sed Substitution Examples</a></p><h2 id="6-awk"><a href="#6-awk" class="headerlink" title="6. awk"></a>6. awk</h2><p>删除重复行</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ awk '!($0 in array) { array[$0]; print}' temp</code></pre></div></div><p>打印/etc/passwd中所有包含同样的uid和gid的行</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ awk -F ':' '$3=$4' /etc/passwd</code></pre></div></div><p>打印文件中的指定部分的字段</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ awk '{print $2,$5;}' employee.txt</code></pre></div></div><p>更多示例：<a href="http://www.thegeekstuff.com/2010/01/8-powerful-awk-built-in-variables-fs-ofs-rs-ors-nr-nf-filename-fnr/" target="_blank" rel="noopener">8 Powerful Awk Built-in Variables – FS, OFS, RS, ORS, NR, NF, FILENAME, FNR</a></p><h2 id="7-vim"><a href="#7-vim" class="headerlink" title="7. vim"></a>7. vim</h2><p>打开文件并跳到第10行</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ vim +10 filename.txt</code></pre></div></div><p>打开文件跳到第一个匹配的行</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ vim +/search-term filename.txt</code></pre></div></div><p>以只读模式打开文件</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ vim -R /etc/passwd</code></pre></div></div><p>更多示例：<a href="http://www.thegeekstuff.com/2009/01/vi-and-vim-macro-tutorial-how-to-record-and-play/" target="_blank" rel="noopener">How To Record and Play in Vim Editor</a></p><h2 id="8-diff"><a href="#8-diff" class="headerlink" title="8. diff"></a>8. diff</h2><p>比较的时候忽略空白符</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ diff -w name_list.txt name_list_new.txt</code></pre></div></div><h2 id="9-sort"><a href="#9-sort" class="headerlink" title="9. sort"></a>9. sort</h2><p>以升序对文件内容排序</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ sort names.txt</code></pre></div></div><p>以降序对文件内容排序</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ sort -r names.txt</code></pre></div></div><p>以第三个字段对/etc/passwd的内容排序</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ sort -t: -k 3n /etc/passwd | more</code></pre></div></div><h2 id="10-export"><a href="#10-export" class="headerlink" title="10. export"></a>10. export</h2><p>输出跟字符串oracle匹配的环境变量</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ export | grep ORCALEdeclare -x ORACLE_BASE="/u01/app/oracle"declare -x ORACLE_HOME="/u01/app/oracle/product/10.2.0"declare -x ORACLE_SID="med"declare -x ORACLE_TERM="xterm"</code></pre></div></div><p>设置全局环境变量</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ export ORACLE_HOME=/u01/app/oracle/product/10.2.0</code></pre></div></div><h2 id="11-xargs"><a href="#11-xargs" class="headerlink" title="11. xargs"></a>11. xargs</h2><p>将所有图片文件拷贝到外部驱动器</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ ls *.jpg | xargs -n1 -i cp {} /external-hard-drive/directory</code></pre></div></div><p>将系统中所有jpd文件压缩打包</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ find / -name *.jpg -type f -print | xargs tar -cvzf images.tar.gz</code></pre></div></div><p>下载文件中列出的所有url对应的页面</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ cat url-list.txt | xargs wget –c</code></pre></div></div><h2 id="12-ls"><a href="#12-ls" class="headerlink" title="12. ls"></a>12. ls</h2><p>以易读的方式显示文件大小(显示为MB,GB…)</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ ls -lh-rw-r----- 1 ramesh team-dev 8.9M Jun 12 15:27 arch-linux.txt.gz</code></pre></div></div><p>以最后修改时间升序列出文件</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ ls -ltr</code></pre></div></div><p>在文件名后面显示文件类型</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ ls -F</code></pre></div></div><p>更多示例：<a href="http://www.thegeekstuff.com/2009/07/linux-ls-command-examples/" target="_blank" rel="noopener">Unix LS Command: 15 Practical Examples</a></p><h2 id="13-pwd"><a href="#13-pwd" class="headerlink" title="13. pwd"></a>13. pwd</h2><p>输出当前工作目录</p><h2 id="14-cd"><a href="#14-cd" class="headerlink" title="14. cd"></a>14. cd</h2><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>cd -可以在最近工作的两个目录间切换</code></pre></div></div><p>使用 <strong>shopt -s cdspell</strong> 可以设置自动对 cd 命令进行拼写检查</p><p>更多示例：<a href="http://www.thegeekstuff.com/2008/10/6-awesome-linux-cd-command-hacks-productivity-tip3-for-geeks/" target="_blank" rel="noopener">6 Awesome Linux cd command Hacks</a></p><h2 id="15-gzip"><a href="#15-gzip" class="headerlink" title="15. gzip"></a>15. gzip</h2><p>创建一个 <code>*.gz</code> 的压缩文件</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ gzip test.txt</code></pre></div></div><p>解压 <code>*.gz</code> 文件</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ gzip -d test.txt.gz</code></pre></div></div><p>显示压缩的比率</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ gzip -l *.gz     compressed        uncompressed  ratio uncompressed_name          23709               97975  75.8% asp-patch-rpms.txt</code></pre></div></div><h2 id="16-bzip2"><a href="#16-bzip2" class="headerlink" title="16. bzip2"></a>16. bzip2</h2><p>创建 <code>*.bz2</code> 压缩文件</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ bzip2 test.txt</code></pre></div></div><p>解压 <code>*.bz2</code> 文件</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>bzip2 -d test.txt.bz2</code></pre></div></div><p>更多示例：<a href="http://www.thegeekstuff.com/2010/10/bzcommand-examples/" target="_blank" rel="noopener">BZ is Eazy! bzip2, bzgrep, bzcmp, bzdiff, bzcat, bzless, bzmore examples</a></p><h2 id="17-uzip"><a href="#17-uzip" class="headerlink" title="17. uzip"></a>17. uzip</h2><p>解压 <code>*.zip</code> 文件</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ unzip test.zip</code></pre></div></div><p>查看 <code>*.zip</code> 文件的内容</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ unzip -l jasper.zipArchive:  jasper.zipLength     Date   Time    Name--------    ----   ----    ----40995  11-30-98 23:50   META-INF/MANIFEST.MF32169  08-25-98 21:07   classes_15964  08-25-98 21:07   classes_names10542  08-25-98 21:07   classes_ncomp</code></pre></div></div><h2 id="18-shutdown"><a href="#18-shutdown" class="headerlink" title="18. shutdown"></a>18. shutdown</h2><p>关闭系统并立即关机</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ shutdown -h now</code></pre></div></div><p>10分钟后关机</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ shutdown -h +10</code></pre></div></div><p>重启</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ shutdown -r now</code></pre></div></div><p>重启期间强制进行系统检查</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ shutdown -Fr now</code></pre></div></div><h2 id="19-ftp"><a href="#19-ftp" class="headerlink" title="19. ftp"></a>19. ftp</h2><p>ftp命令和sftp命令的用法基本相似连接ftp服务器并下载多个文件</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ ftp IP/hostnameftp> mget *.html</code></pre></div></div><p>显示远程主机上文件列表</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>ftp> mls *.html -/ftptest/features.html/ftptest/index.html/ftptest/othertools.html/ftptest/samplereport.html/ftptest/usage.html</code></pre></div></div><p>更多示例：<a href="http://www.thegeekstuff.com/2010/06/ftp-sftp-tutorial/" target="_blank" rel="noopener">FTP and SFTP Beginners Guide with 10 Examples</a></p><h2 id="20-crontab"><a href="#20-crontab" class="headerlink" title="20. crontab"></a>20. crontab</h2><p>查看某个用户的 <code>crontab</code> 入口</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ crontab -u john -l</code></pre></div></div><p>设置一个每十分钟执行一次的计划任务</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>*/10 * * * * /home/ramesh/check-disk-space</code></pre></div></div><p>更多示例：<a href="http://www.thegeekstuff.com/2009/06/15-practical-crontab-examples/" target="_blank" rel="noopener">Linux Crontab: 15 Awesome Cron Job Examples</a></p><h2 id="21-service"><a href="#21-service" class="headerlink" title="21. service"></a>21. service</h2><p>service 命令用于运行 System V init 脚本，这些脚本一般位于/etc/init.d文件下，这个命令可以直接运行这个文件夹里面的脚本，而不用加上路径</p><p>查看服务状态</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ service ssh status</code></pre></div></div><p>查看所有服务状态</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ service --status-all</code></pre></div></div><p>重启服务</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ service ssh restart</code></pre></div></div><h2 id="22-ps"><a href="#22-ps" class="headerlink" title="22. ps"></a>22. ps</h2><p>ps命令用于显示正在运行中的进程的信息，ps命令有很多选项，这里只列出了几个</p><p>查看当前正在运行的所有进程</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ ps -ef | more</code></pre></div></div><p>以树状结构显示当前正在运行的进程，H选项表示显示进程的层次结构</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ ps -efH | more</code></pre></div></div><h2 id="23-free"><a href="#23-free" class="headerlink" title="23. free"></a>23. free</h2><p>这个命令用于显示系统当前内存的使用情况，包括已用内存、可用内存和交换内存的情况</p><p>默认情况下free会以字节为单位输出内存的使用量</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ free             total       used       free     shared    buffers     cachedMem:       3566408    1580220    1986188          0     203988     902960-/+ buffers/cache:     473272    3093136Swap:      4000176          0    4000176</code></pre></div></div><p>如果你想以其他单位输出内存的使用量，需要加一个选项，-g为GB，-m为MB，-k为KB，-b为字节</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ free -g             total       used       free     shared    buffers     cachedMem:             3          1          1          0          0          0-/+ buffers/cache:          0          2Swap:            3          0          3</code></pre></div></div><p>如果你想查看所有内存的汇总，请使用-t选项，使用这个选项会在输出中加一个汇总行</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>ramesh@ramesh-laptop:~$ free -t             total       used       free     shared    buffers     cachedMem:       3566408    1592148    1974260          0     204260     912556-/+ buffers/cache:     475332    3091076Swap:      4000176          0    4000176Total:     7566584    1592148    5974436</code></pre></div></div><h2 id="24-top"><a href="#24-top" class="headerlink" title="24. top"></a>24. top</h2><p>top命令会显示当前系统中占用资源最多的一些进程（默认以CPU占用率排序）如果你想改变排序方式，可以在结果列表中点击O（大写字母O）会显示所有可用于排序的列，这个时候你就可以选择你想排序的列</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>Current Sort Field:  P  for window 1:DefSelect sort field via field letter, type any other key to return  a: PID        = Process Id              v: nDRT       = Dirty Pages count  d: UID        = User Id                 y: WCHAN      = Sleeping in Function  e: USER       = User Name               z: Flags      = Task Flags  ........</code></pre></div></div><p>如果只想显示某个特定用户的进程，可以使用-u选项</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ top -u oracle</code></pre></div></div><p>更多示例：<a href="http://www.thegeekstuff.com/2010/01/15-practical-unix-linux-top-command-examples/" target="_blank" rel="noopener">Can You Top This? 15 Practical Linux Top Command Examples</a></p><h2 id="25-df"><a href="#25-df" class="headerlink" title="25. df"></a>25. df</h2><p>显示文件系统的磁盘使用情况，默认情况下df -k 将以字节为单位输出磁盘的使用量</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ df -kFilesystem           1K-blocks      Used Available Use% Mounted on/dev/sda1             29530400   3233104  24797232  12% //dev/sda2            120367992  50171596  64082060  44% /home</code></pre></div></div><p>使用 <code>-h</code> 选项可以以更符合阅读习惯的方式显示磁盘使用量</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ df -hFilesystem                  Size   Used  Avail Capacity  iused      ifree %iused  Mounted on/dev/disk0s2               232Gi   84Gi  148Gi    37% 21998562   38864868   36%   /devfs                      187Ki  187Ki    0Bi   100%      648          0  100%   /devmap -hosts                   0Bi    0Bi    0Bi   100%        0          0  100%   /netmap auto_home                0Bi    0Bi    0Bi   100%        0          0  100%   /home/dev/disk0s4               466Gi   45Gi  421Gi    10%   112774  440997174    0%   /Volumes/BOOTCAMP//app@izenesoft.cn/public  2.7Ti  1.3Ti  1.4Ti    48%        0 18446744073709551615    0%   /Volumes/public</code></pre></div></div><p>使用 <code>-T</code> 选项显示文件系统类型</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ df -TFilesystem    Type   1K-blocks      Used Available Use% Mounted on/dev/sda1     ext4    29530400   3233120  24797216  12% //dev/sda2     ext4   120367992  50171596  64082060  44% /home</code></pre></div></div><h2 id="26-kill"><a href="#26-kill" class="headerlink" title="26. kill"></a>26. kill</h2><p>kill 用于终止一个进程。一般我们会先用ps -ef查找某个进程得到它的进程号，然后再使用kill -9 进程号终止该进程。你还可以使用killall、pkill、xkill来终止进程</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ ps -ef | grep vimramesh    7243  7222  9 22:43 pts/2    00:00:00 vim$ kill -9 7243</code></pre></div></div><p>更多示例：<a href="http://www.thegeekstuff.com/2009/12/4-ways-to-kill-a-process-kill-killall-pkill-xkill/" target="_blank" rel="noopener">4 Ways to Kill a Process – kill, killall, pkill, xkill</a></p><h2 id="27-rm"><a href="#27-rm" class="headerlink" title="27. rm"></a>27. rm</h2><p>删除文件前先确认</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ rm -i filename.txt</code></pre></div></div><p>在文件名中使用shell的元字符会非常有用。删除文件前先打印文件名并进行确认</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ rm -i file*</code></pre></div></div><p>递归删除文件夹下所有文件，并删除该文件夹</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ rm -r example</code></pre></div></div><h2 id="28-cp"><a href="#28-cp" class="headerlink" title="28. cp"></a>28. cp</h2><p>拷贝文件1到文件2，并保持文件的权限、属主和时间戳</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ cp -p file1 file2</code></pre></div></div><p>拷贝file1到file2，如果file2存在会提示是否覆盖</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ cp -i file1 file2</code></pre></div></div><h2 id="29-mv"><a href="#29-mv" class="headerlink" title="29. mv"></a>29. mv</h2><p>将文件名file1重命名为file2，如果file2存在则提示是否覆盖</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ mv -i file1 file2</code></pre></div></div><p>注意如果使用-f选项则不会进行提示</p><p>-v会输出重命名的过程，当文件名中包含通配符时，这个选项会非常方便</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ mv -v file1 file2</code></pre></div></div><h2 id="30-cat"><a href="#30-cat" class="headerlink" title="30. cat"></a>30. cat</h2><p>你可以一次查看多个文件的内容，下面的命令会先打印file1的内容，然后打印file2的内容</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ cat file1 file2</code></pre></div></div><p>-n命令可以在每行的前面加上行号</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ cat -n /etc/logrotate.conf/var/log/btmp {missingok3        monthly4        create 0660 root utmp5        rotate 16 }</code></pre></div></div><h2 id="31-mount"><a href="#31-mount" class="headerlink" title="31. mount"></a>31. mount</h2><p>如果要挂载一个文件系统，需要先创建一个目录，然后将这个文件系统挂载到这个目录上</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code># mkdir /u01# mount /dev/sdb1 /u01</code></pre></div></div><p>也可以把它添加到fstab中进行自动挂载，这样任何时候系统重启的时候，文件系统都会被加载</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>/dev/sdb1 /u01 ext2 defaults 0 2</code></pre></div></div><h2 id="32-chmod"><a href="#32-chmod" class="headerlink" title="32. chmod"></a>32. chmod</h2><p>chmod用于改变文件和目录的权限</p><p>给指定文件的属主和属组所有权限(包括读、写、执行)</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ chmod ug+rwx file.txt</code></pre></div></div><p>删除指定文件的属组的所有权限</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ chmod g-rwx file.txt</code></pre></div></div><p>修改目录的权限，以及递归修改目录下面所有文件和子目录的权限</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ chmod -R ug+rwx file.txt</code></pre></div></div><p>更多示例：<a href="http://www.thegeekstuff.com/2010/06/chmod-command-examples/" target="_blank" rel="noopener">7 Chmod Command Examples for Beginners</a></p><h2 id="33-chown"><a href="#33-chown" class="headerlink" title="33. chown"></a>33. chown</h2><p>chown用于改变文件属主和属组</p><p>同时将某个文件的属主改为oracle，属组改为db</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ chown oracle:dba dbora.sh</code></pre></div></div><p>使用-R选项对目录和目录下的文件进行递归修改</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ chown -R oracle:dba /home/oracle</code></pre></div></div><h2 id="34-passwd"><a href="#34-passwd" class="headerlink" title="34. passwd"></a>34. passwd</h2><p>passwd用于在命令行修改密码，使用这个命令会要求你先输入旧密码，然后输入新密码</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ passwd</code></pre></div></div><p>超级用户可以用这个命令修改其他用户的密码，这个时候不需要输入用户的密码</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code># passwd USERNAME</code></pre></div></div><p>passwd还可以删除某个用户的密码，这个命令只有root用户才能操作，删除密码后，这个用户不需要输入密码就可以登录到系统</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code># passwd -d USERNAME</code></pre></div></div><h2 id="35-mkdir"><a href="#35-mkdir" class="headerlink" title="35. mkdir"></a>35. mkdir</h2><p>在home目录下创建一个名为temp的目录</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ mkdir ~/temp</code></pre></div></div><p>使用-p选项可以创建一个路径上所有不存在的目录</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ mkdir -p dir1/dir2/dir3/dir4/</code></pre></div></div><h2 id="36-ifconfig"><a href="#36-ifconfig" class="headerlink" title="36. ifconfig"></a>36. ifconfig</h2><p>ifconfig用于查看和配置Linux系统的网络接口</p><p>查看所有网络接口及其状态</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ ifconfig -a</code></pre></div></div><p>使用up和down命令启动或停止某个接口</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ ifconfig eth0 up$ ifconfig eth0 down</code></pre></div></div><p>更多示例：<a href="http://www.thegeekstuff.com/2009/03/ifconfig-7-examples-to-configure-network-interface/" target="_blank" rel="noopener">Ifconfig: 7 Examples To Configure Network Interface</a></p><h2 id="37-uname"><a href="#37-uname" class="headerlink" title="37. uname"></a>37. uname</h2><p>uname可以显示一些重要的系统信息，例如内核名称、主机名、内核版本号、处理器类型之类的信息</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ uname -aLinux john-laptop 2.6.32-24-generic #41-Ubuntu SMP Thu Aug 19 01:12:52 UTC 2010 i686 GNU/Linux</code></pre></div></div><h2 id="38-whereis"><a href="#38-whereis" class="headerlink" title="38. whereis"></a>38. whereis</h2><p>当你不知道某个命令的位置时可以使用whereis命令，下面使用whereis查找ls的位置</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ whereis lsls: /bin/ls /usr/share/man/man1/ls.1.gz /usr/share/man/man1p/ls.1p.gz</code></pre></div></div><p>当你想查找某个可执行程序的位置，但这个程序又不在whereis的默认目录下，你可以使用-B选项，并指定目录作为这个选项的参数。下面的命令在/tmp目录下查找lsmk命令</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ whereis -u -B /tmp -f lsmklsmk: /tmp/lsmk</code></pre></div></div><h2 id="39-whatis"><a href="#39-whatis" class="headerlink" title="39. whatis"></a>39. whatis</h2><p>wathis显示某个命令的描述信息</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ whatis lsls        (1)  - list directory contents$ whatis ifconfigifconfig (8)         - configure a network interface</code></pre></div></div><h2 id="40-locate"><a href="#40-locate" class="headerlink" title="40. locate"></a>40. locate</h2><p>locate命名可以显示某个指定文件（或一组文件）的路径，它会使用由updatedb创建的数据库</p><p>下面的命令会显示系统中所有包含crontab字符串的文件</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ locate crontab/etc/anacrontab/etc/crontab/usr/bin/crontab/usr/share/doc/cron/examples/crontab2english.pl.gz/usr/share/man/man1/crontab.1.gz/usr/share/man/man5/anacrontab.5.gz/usr/share/man/man5/crontab.5.gz/usr/share/vim/vim72/syntax/crontab.vim</code></pre></div></div><h2 id="41-man"><a href="#41-man" class="headerlink" title="41. man"></a>41. man</h2><p>显示某个命令的man页面</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ man crontab</code></pre></div></div><p>有些命令可能会有多个man页面，每个man页面对应一种命令类型</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ man SECTION-NUMBER commandname</code></pre></div></div><p>man页面一般可以分为8种命令类型</p><ol><li>用户命令</li><li>系统调用</li><li>c库函数</li><li>设备与网络接口</li><li>文件格式</li><li>游戏与屏保</li><li>环境、表、宏</li><li>系统管理员命令和后台运行命令</li></ol><p>例如，我们执行 <code>whatis crontab</code>，你可以看到 <code>crontab</code> 有两个命令类型1和5，所以我们可以通过下面的命令查看命令类型5的man页面</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ whatis crontabcrontab (1)          - maintain crontab files for individual users (V3)crontab (5)          - tables for driving cron$ man 5 crontab</code></pre></div></div><h2 id="42-tail"><a href="#42-tail" class="headerlink" title="42. tail"></a>42. tail</h2><p>tail命令默认显示文件最后的10行文本</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ tail filename.txt</code></pre></div></div><p>你可以使用-n选项指定要显示的行数</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ tail -n N filename.txt</code></pre></div></div><p>你也可以使用-f选项进行实时查看，这个命令执行后会等待，如果有新行添加到文件尾部，它会继续输出新的行，在查看日志时这个选项会非常有用。你可以通过CTRL-C终止命令的执行</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ tail -f log-file</code></pre></div></div><p>更多示例：<a href="http://www.thegeekstuff.com/2009/09/multitail-to-view-tail-f-output-of-multiple-log-files-in-one-terminal/" target="_blank" rel="noopener">3 Methods To View tail -f output of Multiple Log Files in One Terminal</a></p><h2 id="43-less"><a href="#43-less" class="headerlink" title="43. less"></a>43. less</h2><p>这个命名可以在不加载整个文件的前提下显示文件内容，在查看大型日志文件的时候这个命令会非常有用</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ less huge-log-file.log</code></pre></div></div><p>当你用less命令打开某个文件时，下面两个按键会给你带来很多帮助，他们用于向前和向后滚屏</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>CTRL+F – forward one windowCTRL+B – backward one window</code></pre></div></div><p>更多示例：<a href="http://www.thegeekstuff.com/2010/02/unix-less-command-10-tips-for-effective-navigation/" target="_blank" rel="noopener">Unix Less Command: 10 Tips for Effective Navigation</a></p><h2 id="44-su"><a href="#44-su" class="headerlink" title="44. su"></a>44. su</h2><p>su命令用于切换用户账号，超级用户使用这个命令可以切换到任何其他用户而不用输入密码</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ su - USERNAME</code></pre></div></div><p>用另外一个用户名执行一个命令下面的示例中用户john使用raj用户名执行ls命令，执行完后返回john的账号</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>[john@dev-server]$ su - raj -c 'ls'[john@dev-server]$</code></pre></div></div><p>用指定用户登录，并且使用指定的shell程序，而不用默认的</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ su -s 'SHELLNAME' USERNAME</code></pre></div></div><h2 id="45-mysql"><a href="#45-mysql" class="headerlink" title="45. mysql"></a>45. mysql</h2><p>mysql可能是Linux上使用最广泛的数据库，即使你没有在你的服务器上安装mysql，你也可以使用mysql客户端连接到远程的mysql服务器</p><p>连接一个远程数据库，需要输入密码</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ mysql -u root -p -h 192.168.1.2</code></pre></div></div><p>连接本地数据库</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ mysql -u root -p</code></pre></div></div><p>你也可以在命令行中输入数据库密码，只需要在-p后面加上密码作为参数，可以直接写在p后面而不用加空格</p><h2 id="46-yum"><a href="#46-yum" class="headerlink" title="46. yum"></a>46. yum</h2><p>使用yum安装apache</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ yum install httpd</code></pre></div></div><p>更新apache</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ yum update httpd</code></pre></div></div><p>卸载/删除apache</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ yum remove httpd</code></pre></div></div><h2 id="47-rpm"><a href="#47-rpm" class="headerlink" title="47. rpm"></a>47. rpm</h2><p>使用rpm安装apache</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code># rpm -ivh httpd-2.2.3-22.0.1.el5.i386.rpm</code></pre></div></div><p>更新apache</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code># rpm -uvh httpd-2.2.3-22.0.1.el5.i386.rpm</code></pre></div></div><p>卸载/删除apache</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code># rpm -ev httpd</code></pre></div></div><p>更多示例：<a href="http://www.thegeekstuff.com/2010/07/rpm-command-examples/" target="_blank" rel="noopener">RPM Command: 15 Examples to Install, Uninstall, Upgrade, Query RPM Packages</a></p><h2 id="48-ping"><a href="#48-ping" class="headerlink" title="48. ping"></a>48. ping</h2><p>ping一个远程主机，只发5个数据包</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ ping -c 5 gmail.com</code></pre></div></div><p>更多示例：<a href="http://www.thegeekstuff.com/2009/11/ping-tutorial-13-effective-ping-command-examples/" target="_blank" rel="noopener">Ping Tutorial: 15 Effective Ping Command Examples</a></p><h2 id="49-date"><a href="#49-date" class="headerlink" title="49. date"></a>49. date</h2><p>设置系统日期</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code># date -s "01/31/2010 23:59:53"</code></pre></div></div><p>当你修改了系统时间，你需要同步硬件时间和系统时间</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code># hwclock –systohc# hwclock --systohc –utc</code></pre></div></div><h2 id="50-wget"><a href="#50-wget" class="headerlink" title="50. wget"></a>50. wget</h2><p>使用wget从网上下载软件、音乐、视频</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ wget http://prdownloads.sourceforge.net/sourceforge/nagios/nagios-3.2.1.tar.gz</code></pre></div></div><p>下载文件并以指定的文件名保存文件</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre><code>$ wget -O taglist.zip http://www.vim.org/scripts/download_script.php?src_id=7701</code></pre></div></div><p>更多示例：<a href="http://www.thegeekstuff.com/2009/09/the-ultimate-wget-download-guide-with-15-awesome-examples/" target="_blank" rel="noopener">The Ultimate Wget Download Guide With 15 Awesome Examples</a></p><div class="copy-right"><p>本文由 <a href="javascript:void(0);">王爵nice</a> 创作， 采用 <a href="https://creativecommons.org/licenses/by/4.0/deed.zh" target="_blank" rel="noopener">知识共享署名4.0</a> 国际许可协议进行许可。</p><p>本站文章除注明转载/出处外，均为本站原创或翻译，转载前请务必署名。</p></div></article></body></html>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 操作系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nginx之proxy_pass指令完全拆解</title>
      <link href="/2019/02/18/nginx%E4%B9%8Bproxy_pass%E6%8C%87%E4%BB%A4%E5%AE%8C%E5%85%A8%E6%8B%86%E8%A7%A3/"/>
      <url>/2019/02/18/nginx%E4%B9%8Bproxy_pass%E6%8C%87%E4%BB%A4%E5%AE%8C%E5%85%A8%E6%8B%86%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script></head><body><h3 id="一、proxy-pass的nginx官方指南"><a href="#一、proxy-pass的nginx官方指南" class="headerlink" title="一、proxy_pass的nginx官方指南"></a>一、proxy_pass的nginx官方指南</h3><p>nginx中有两个模块都有proxy_pass指令。</p><ul><li><p>ngx_http_proxy_module的proxy_pass：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">语法: proxy_pass URL;</span><br><span class="line">场景: location, if in location, limit_except</span><br><span class="line">说明: 设置后端代理服务器的协议(protocol)和地址(address),以及location中可以匹配的一个可选的URI。协议可以是"http"或"https"。地址可以是一个域名或ip地址和端口，或者一个 unix-domain socket 路径。  </span><br><span class="line">详见官方文档: http://nginx.org/en/docs/http/ngx_http_proxy_module.html#proxy_pass</span><br><span class="line">URI的匹配，本文第四部分重点讨论。</span><br></pre></td></tr></tbody></table></figure></div></li><li><p>ngx_stream_proxy_module的proxy_pass：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">语法: proxy_pass address;</span><br><span class="line">场景: server</span><br><span class="line">说明: 设置后端代理服务器的地址。这个地址(address)可以是一个域名或ip地址和端口，或者一个 unix-domain socket路径。  </span><br><span class="line">详见官方文档: http://nginx.org/en/docs/stream/ngx_stream_proxy_module.html#proxy_pass</span><br></pre></td></tr></tbody></table></figure></div></li></ul><h3 id="二、两个proxy-pass的关系和区别"><a href="#二、两个proxy-pass的关系和区别" class="headerlink" title="二、两个proxy_pass的关系和区别"></a>二、两个proxy_pass的关系和区别</h3><p>在两个模块中，两个proxy_pass都是用来做后端代理的指令。<br><strong>ngx_stream_proxy_module</strong>模块的proxy_pass指令只能在server段使用使用, 只需要提供域名或ip地址和端口。可以理解为端口转发，可以是tcp端口，也可以是udp端口。</p><p><strong>ngx_http_proxy_module</strong>模块的proxy_pass指令需要在location段，location中的if段，limit_except段中使用，处理需要提供域名或ip地址和端口外，还需要提供协议，如”http”或”https”，还有一个可选的uri可以配置。</p><h3 id="三、proxy-pass的具体用法"><a href="#三、proxy-pass的具体用法" class="headerlink" title="三、proxy_pass的具体用法"></a>三、proxy_pass的具体用法</h3><p>ngx_stream_proxy_module模块的proxy_pass指令</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">nginx</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight nginx"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> {</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">127.0.0.1:12345</span>;</span><br><span class="line">    <span class="attribute">proxy_pass</span> <span class="number">127.0.0.1:8080</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="section">server</span> {</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">12345</span>;</span><br><span class="line">    <span class="attribute">proxy_connect_timeout</span> <span class="number">1s</span>;</span><br><span class="line">    <span class="attribute">proxy_timeout</span> <span class="number">1m</span>;</span><br><span class="line">    <span class="attribute">proxy_pass</span> example.com:<span class="number">12345</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="section">server</span> {</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">53</span> udp;</span><br><span class="line">    <span class="attribute">proxy_responses</span> <span class="number">1</span>;</span><br><span class="line">    <span class="attribute">proxy_timeout</span> <span class="number">20s</span>;</span><br><span class="line">    <span class="attribute">proxy_pass</span> dns.example.com:<span class="number">53</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="section">server</span> {</span><br><span class="line">    <span class="attribute">listen</span> [::<span class="number">1</span>]:<span class="number">12345</span>;</span><br><span class="line">    <span class="attribute">proxy_pass</span> unix:/tmp/stream.socket;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p>ngx_http_proxy_module模块的proxy_pass指令</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">nginx</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight nginx"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> {</span><br><span class="line">    <span class="attribute">listen</span>      <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span> www.test.com;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 正常代理，不修改后端url的</span></span><br><span class="line">    <span class="attribute">location</span> /some/path/ {</span><br><span class="line">        <span class="attribute">proxy_pass</span> http://127.0.0.1;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 修改后端url地址的代理（本例后端地址中，最后带了一个斜线)</span></span><br><span class="line">    <span class="attribute">location</span> /testb {</span><br><span class="line">        <span class="attribute">proxy_pass</span> http://www.other.com:8801/;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 使用 if in location</span></span><br><span class="line">    <span class="attribute">location</span> /google {</span><br><span class="line">        <span class="attribute">if</span> ( <span class="variable">$geoip_country_code</span> <span class="regexp">~ (RU|CN)</span> ) {</span><br><span class="line">            <span class="attribute">proxy_pass</span> http://www.google.hk;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="attribute">location</span> /yongfu/ {</span><br><span class="line">        <span class="comment"># 没有匹配 limit_except 的，代理到 unix:/tmp/backend.socket:/uri/</span></span><br><span class="line">        proxy_pass http://unix:/tmp/backend.socket:/uri/;;</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 匹配到请求方法为: PUT or DELETE, 代理到9080</span></span><br><span class="line">        <span class="attribute">limit_except</span> PUT DELETE {</span><br><span class="line">            <span class="attribute">proxy_pass</span> http://127.0.0.1:9080;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><h3 id="四、proxy-pass后，后端服务器的url-request-uri-情况分析"><a href="#四、proxy-pass后，后端服务器的url-request-uri-情况分析" class="headerlink" title="四、proxy_pass后，后端服务器的url(request_uri)情况分析"></a>四、proxy_pass后，后端服务器的url(request_uri)情况分析</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">nginx</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight nginx"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> {</span><br><span class="line">    <span class="attribute">listen</span>      <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span> www.test.com;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 情形A</span></span><br><span class="line">    <span class="comment"># 访问 http://www.test.com/testa/aaaa</span></span><br><span class="line">    <span class="comment"># 后端的request_uri为: /testa/aaaa</span></span><br><span class="line">    <span class="attribute">location</span><span class="regexp"> ^~</span> /testa/ {</span><br><span class="line">        <span class="attribute">proxy_pass</span> http://127.0.0.1:8801;</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 情形B</span></span><br><span class="line">    <span class="comment"># 访问 http://www.test.com/testb/bbbb</span></span><br><span class="line">    <span class="comment"># 后端的request_uri为: /bbbb</span></span><br><span class="line">    <span class="attribute">location</span><span class="regexp"> ^~</span> /testb/ {</span><br><span class="line">        <span class="attribute">proxy_pass</span> http://127.0.0.1:8801/;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 情形C</span></span><br><span class="line">    <span class="comment"># 下面这段location是正确的</span></span><br><span class="line">    <span class="attribute">location</span> <span class="regexp">~ /testc</span> {</span><br><span class="line">        <span class="attribute">proxy_pass</span> http://127.0.0.1:8801;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 情形D</span></span><br><span class="line">    <span class="comment"># 下面这段location是错误的</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment"># nginx -t 时，会报如下错误: </span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment"># nginx: [emerg] "proxy_pass" cannot have URI part in location given by regular </span></span><br><span class="line">    <span class="comment"># expression, or inside named location, or inside "if" statement, or inside </span></span><br><span class="line">    <span class="comment"># "limit_except" block in /opt/app/nginx/conf/vhost/test.conf:17</span></span><br><span class="line">    <span class="comment"># </span></span><br><span class="line">    <span class="comment"># 当location为正则表达式时，proxy_pass 不能包含URI部分。本例中包含了"/"</span></span><br><span class="line">    <span class="attribute">location</span> <span class="regexp">~ /testd</span> {</span><br><span class="line">        <span class="attribute">proxy_pass</span> http://127.0.0.1:8801/;   <span class="comment"># 记住，location为正则表达式时，不能这样写！！！</span></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 情形E</span></span><br><span class="line">    <span class="comment"># 访问 http://www.test.com/ccc/bbbb</span></span><br><span class="line">    <span class="comment"># 后端的request_uri为: /aaa/ccc/bbbb</span></span><br><span class="line">    <span class="attribute">location</span> /ccc/ {</span><br><span class="line">        <span class="attribute">proxy_pass</span> http://127.0.0.1:8801/aaa<span class="variable">$request_uri</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 情形F</span></span><br><span class="line">    <span class="comment"># 访问 http://www.test.com/namea/ddd</span></span><br><span class="line">    <span class="comment"># 后端的request_uri为: /yongfu?namea=ddd</span></span><br><span class="line">    <span class="attribute">location</span> /namea/ {</span><br><span class="line">        <span class="attribute">rewrite</span>    /namea/([^/]+) /yongfu?namea=<span class="variable">$1</span> <span class="literal">break</span>;</span><br><span class="line">        <span class="attribute">proxy_pass</span> http://127.0.0.1:8801;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 情形G</span></span><br><span class="line">    <span class="comment"># 访问 http://www.test.com/nameb/eee</span></span><br><span class="line">    <span class="comment"># 后端的request_uri为: /yongfu?nameb=eee</span></span><br><span class="line">    <span class="attribute">location</span> /nameb/ {</span><br><span class="line">        <span class="attribute">rewrite</span>    /nameb/([^/]+) /yongfu?nameb=<span class="variable">$1</span> <span class="literal">break</span>;</span><br><span class="line">        <span class="attribute">proxy_pass</span> http://127.0.0.1:8801/;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="attribute">access_log</span> /data/logs/www/www.test.com.log;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="section">server</span> {</span><br><span class="line">    <span class="attribute">listen</span>      <span class="number">8801</span>;</span><br><span class="line">    <span class="attribute">server_name</span> www.test.com;</span><br><span class="line">    </span><br><span class="line">    <span class="attribute">root</span>        /data/www/test;</span><br><span class="line">    <span class="attribute">index</span>       index.php index.html;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">rewrite</span><span class="regexp"> ^(.*)$</span> /test.php?u=<span class="variable">$1</span> <span class="literal">last</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">location</span> <span class="regexp">~ \.php$</span> {</span><br><span class="line">        <span class="attribute">try_files</span> <span class="variable">$uri</span> =<span class="number">404</span>;</span><br><span class="line">        <span class="attribute">fastcgi_pass</span> unix:/tmp/php-cgi.sock;</span><br><span class="line">        <span class="attribute">fastcgi_index</span> index.php;</span><br><span class="line">        <span class="attribute">include</span> fastcgi.conf;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="attribute">access_log</span> /data/logs/www/www.test.com.<span class="number">8801</span>.log;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><ul><li>情形A和情形B进行对比，可以知道proxy_pass后带一个URI,可以是斜杠(/)也可以是其他uri，对后端request_uri变量的影响。</li><li>情形D说明，当location为正则表达式时，proxy_pass不能包含URI部分。</li><li>情形E通过变量($request_uri, 也可以是其他变量)，对后端的request_uri进行改写。</li><li>情形F和情形G通过rewrite配合break标志,对url进行改写，并改写后端的request_uri。需要注意，proxy_pass地址的URI部分在情形G中无效，不管如何设置，都会被忽略。</li></ul></body></html>]]></content>
      
      
      <categories>
          
          <category> Nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nginx之proxy_pass代理后端https请求完全拆解</title>
      <link href="/2019/02/18/nginx%E4%B9%8Bproxy_pass%E4%BB%A3%E7%90%86%E5%90%8E%E7%AB%AFhttps%E8%AF%B7%E6%B1%82%E5%AE%8C%E5%85%A8%E6%8B%86%E8%A7%A3/"/>
      <url>/2019/02/18/nginx%E4%B9%8Bproxy_pass%E4%BB%A3%E7%90%86%E5%90%8E%E7%AB%AFhttps%E8%AF%B7%E6%B1%82%E5%AE%8C%E5%85%A8%E6%8B%86%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script></head><body><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本文解释了怎么对nginx和后端服务器组或代理服务器进行加密http通信。</p><h3 id="获取SSL服务端证书"><a href="#获取SSL服务端证书" class="headerlink" title="获取SSL服务端证书"></a>获取SSL服务端证书</h3><p>你可以从一个可信证书颁发机构(CA)购买一个服务器证书, 或者你可以使用openssl库创建一个内部CA， 并给自己颁发证书。这个服务器端证书和私钥需要部署在后端的每一个服务器上。</p><h3 id="获取SSL客户端证书"><a href="#获取SSL客户端证书" class="headerlink" title="获取SSL客户端证书"></a>获取SSL客户端证书</h3><p>nignx使用一个SSL客户端证书来对后端服务器组来标识自己。这个客户端证书必须是被一个可信CA签名的，并且和相匹配的私钥一起部署在nginx中。<br>你还需要在后端服务器上配置好所有的来源SSL连接都需要客户端证书，并信任这个CA颁发的nginx客户端证书。 然后当nginx连接后端时，将提供客户端证书，并且后端将会接收这个连接。</p><h3 id="配置nginx"><a href="#配置nginx" class="headerlink" title="配置nginx"></a>配置nginx</h3><p>首先，改变相应URL到支持SSL连接的后端服务器组。在nginx的配置文件中，指明proxy_pass指令在代理服务器或后端服务器组中使用”https”协议:</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">nginx</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight nginx"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">location</span> /upstream {</span><br><span class="line">    <span class="attribute">proxy_pass</span> https://backend.example.com;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p>增加客户端证书和私钥，用于验证nginx和每个后端服务器。使用proxy_ssl_certificate 和 proxy_ssl_certificate_key指令:</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">nginx</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight nginx"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">location</span> /upstream {  </span><br><span class="line">    <span class="attribute">proxy_pass</span>                https://backend.example.com;  </span><br><span class="line">    <span class="attribute">proxy_ssl_certificate</span>     /etc/nginx/client.pem;  </span><br><span class="line">    <span class="attribute">proxy_ssl_certificate_key</span> /etc/nginx/client.key  </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p>如果你在后端服务器使用了自签名证书或者使用了自建CA，你需要配置proxy_ssl_trusted_certificate. 这个文件必须是PEM格式的。另外还可以配置proxy_ssl_verify和proxy_ssl_verfiy_depth指令， 用来验证安全证书：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">nginx</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight nginx"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">location</span> /upstream {</span><br><span class="line">    ...</span><br><span class="line">    <span class="attribute">proxy_ssl_trusted_certificate</span> /etc/nginx/trusted_ca_cert.crt;</span><br><span class="line">    <span class="attribute">proxy_ssl_verify</span>       <span class="literal">on</span>;</span><br><span class="line">    <span class="attribute">proxy_ssl_verify_depth</span> <span class="number">2</span>;</span><br><span class="line">    ...</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p>每一个新的SSL连接都需要在服务端和客户端进行一个完整的SSL握手过程，这非常耗费CPU计算资源。为了是nignx代理预先协商连接参数，使用一种简略的握手过程，增加proxy_ssl_session_reuse指令配置:</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">nginx</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight nginx"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">location</span> /upstream {</span><br><span class="line">    ...</span><br><span class="line">    <span class="attribute">proxy_ssl_session_reuse</span> <span class="literal">on</span>;</span><br><span class="line">    ...</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p>可选的，你也可以配置使用的SSL协议和SSL秘钥算法:</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">nginx</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight nginx"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">location</span> /upstream {</span><br><span class="line">        ...</span><br><span class="line">        <span class="attribute">proxy_ssl_protocols</span> TLSv1 TLSv1.<span class="number">1</span> TLSv1.<span class="number">2</span>;</span><br><span class="line">        <span class="attribute">proxy_ssl_ciphers</span>   HIGH:!aNULL:!MD5;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><h3 id="配置后端服务器"><a href="#配置后端服务器" class="headerlink" title="配置后端服务器"></a>配置后端服务器</h3><p>每一个后端服务器都必须配置成接受https连接。每一个后端服务器需要使用ssl_certificate和ssl_certificate_key指令来指定服务器证书和私钥的文件路径:</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">nginx</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight nginx"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> {</span><br><span class="line">    <span class="attribute">listen</span>              <span class="number">443</span> ssl;</span><br><span class="line">    <span class="attribute">server_name</span>         backend1.example.com;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">ssl_certificate</span>     /etc/ssl/certs/server.crt;</span><br><span class="line">    <span class="attribute">ssl_certificate_key</span> /etc/ssl/certs/server.key;</span><br><span class="line">    ...</span><br><span class="line">    <span class="attribute">location</span> /yourapp {</span><br><span class="line">        <span class="attribute">proxy_pass</span> http://url_to_app.com;</span><br><span class="line">        ...</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p>使用ssl_client_certificat指令来设定客户端证书的文件路径:</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">nginx</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight nginx"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> {</span><br><span class="line">    ...</span><br><span class="line">    <span class="attribute">ssl_client_certificate</span> /etc/ssl/certs/ca.crt;</span><br><span class="line">    <span class="attribute">ssl_verify_client</span>      <span class="literal">off</span>;</span><br><span class="line">    ...</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><h3 id="完整示例"><a href="#完整示例" class="headerlink" title="完整示例"></a>完整示例</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">nginx</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight nginx"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">http</span> {</span><br><span class="line">    ...</span><br><span class="line">    <span class="attribute">upstream</span> backend.example.com {</span><br><span class="line">        <span class="attribute">server</span> backend1.example.com:<span class="number">443</span>;</span><br><span class="line">        <span class="attribute">server</span> backend2.example.com:<span class="number">443</span>;</span><br><span class="line">   }</span><br><span class="line"></span><br><span class="line">    <span class="section">server</span> {</span><br><span class="line">        <span class="attribute">listen</span>      <span class="number">80</span>;</span><br><span class="line">        <span class="attribute">server_name</span> www.example.com;</span><br><span class="line">        ...</span><br><span class="line"></span><br><span class="line">        <span class="attribute">location</span> /upstream {</span><br><span class="line">            <span class="attribute">proxy_pass</span>                    https://backend.example.com;</span><br><span class="line">            <span class="attribute">proxy_ssl_certificate</span>         /etc/nginx/client.pem;</span><br><span class="line">            <span class="attribute">proxy_ssl_certificate_key</span>     /etc/nginx/client.key</span><br><span class="line">            proxy_ssl_protocols           TLSv1 TLSv1.<span class="number">1</span> TLSv1.<span class="number">2</span>;</span><br><span class="line">            <span class="attribute">proxy_ssl_ciphers</span>             HIGH:!aNULL:!MD5;</span><br><span class="line">            <span class="attribute">proxy_ssl_trusted_certificate</span> /etc/nginx/trusted_ca_cert.crt;</span><br><span class="line"></span><br><span class="line">            <span class="attribute">proxy_ssl_verify</span>        <span class="literal">on</span>;</span><br><span class="line">            <span class="attribute">proxy_ssl_verify_depth</span>  <span class="number">2</span>;</span><br><span class="line">            <span class="attribute">proxy_ssl_session_reuse</span> <span class="literal">on</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="section">server</span> {</span><br><span class="line">        <span class="attribute">listen</span>      <span class="number">443</span> ssl;</span><br><span class="line">        <span class="attribute">server_name</span> backend1.example.com;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">ssl_certificate</span>        /etc/ssl/certs/server.crt;</span><br><span class="line">        <span class="attribute">ssl_certificate_key</span>    /etc/ssl/certs/server.key;</span><br><span class="line">        <span class="attribute">ssl_client_certificate</span> /etc/ssl/certs/ca.crt;</span><br><span class="line">        <span class="attribute">ssl_verify_client</span>      <span class="literal">off</span>;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">location</span> /yourapp {</span><br><span class="line">            <span class="attribute">proxy_pass</span> http://url_to_app.com;</span><br><span class="line">        ...</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">    <span class="section">server</span> {</span><br><span class="line">        <span class="attribute">listen</span>      <span class="number">443</span> ssl;</span><br><span class="line">        <span class="attribute">server_name</span> backend2.example.com;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">ssl_certificate</span>        /etc/ssl/certs/server.crt;</span><br><span class="line">        <span class="attribute">ssl_certificate_key</span>    /etc/ssl/certs/server.key;</span><br><span class="line">        <span class="attribute">ssl_client_certificate</span> /etc/ssl/certs/ca.crt;</span><br><span class="line">        <span class="attribute">ssl_verify_client</span>      <span class="literal">off</span>;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">location</span> /yourapp {</span><br><span class="line">            <span class="attribute">proxy_pass</span> http://url_to_app.com;</span><br><span class="line">        ...</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p>在这个示例中， proxy_pass指令设置使用了”https”协议，所以nginx转发到后端服务器的流量是安全的。</p><p>当一个安全的连接第一次从nginx转发到后端服务器，将会实施一次完整的握手过程。</p><ul><li>proxy_ssl_certificate指令设置了后端服务器需要的PEM格式证书的文件位置。</li><li>proxy_ssl_certificate_key指令设置了证书的私钥位置。proxy_ssl_protocols和</li><li>proxy_ssl_ciphers指令控制使用的协议和秘钥算法。</li></ul><p>因为proxy_ssl_session_reuse指令配置，当下一次nginx转发一个连接到后端服务器时，会话参数会被重复使用，从而更快的建立安全连接。</p><p><strong>proxy_ssl_trusted_certificate</strong>指令设置的那个可信CA证书文件是用来验证后端服务器的证书。</p><p><strong>proxy_ssl_verify_depth</strong>指令指定了证书链检查的深度。proxy_ssl_verify指令验证证书的有效性。</p></body></html>]]></content>
      
      
      <categories>
          
          <category> Nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL史上最全SQL优化方案</title>
      <link href="/2019/01/30/MySQL%E5%8F%B2%E4%B8%8A%E6%9C%80%E5%85%A8SQL%E4%BC%98%E5%8C%96%E6%96%B9%E6%A1%88/"/>
      <url>/2019/01/30/MySQL%E5%8F%B2%E4%B8%8A%E6%9C%80%E5%85%A8SQL%E4%BC%98%E5%8C%96%E6%96%B9%E6%A1%88/</url>
      
        <content type="html"><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script></head><body><h1 id="史上最全SQL优化方案"><a href="#史上最全SQL优化方案" class="headerlink" title="史上最全SQL优化方案"></a>史上最全SQL优化方案</h1><p>在进行MySQL的优化之前，必须要了解的就是MySQL的查询过程，很多查询优化工作实际上就是遵循一些原则，让MySQL的优化器能够按照预想的合理方式运行而已。<br><a href="https://i.imgur.com/2q4bunY.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.imgur.com/2q4bunY.png" class="lazyload"></a></p><h2 id="1、优化的哲学"><a href="#1、优化的哲学" class="headerlink" title="1、优化的哲学"></a>1、优化的哲学</h2><p>注：优化有风险，涉足需谨慎</p><h3 id="a优化可能带来的问题？"><a href="#a优化可能带来的问题？" class="headerlink" title="a优化可能带来的问题？"></a>a优化可能带来的问题？</h3><ul><li><p>优化不总是对一个单纯的环境进行，还很可能是一个复杂的已投产的系统；</p></li><li><p>优化手段本来就有很大的风险，只不过你没能力意识到和预见到；</p></li><li><p>任何的技术可以解决一个问题，但必然存在带来一个问题的风险；</p></li><li><p>对于优化来说解决问题而带来的问题，控制在可接受的范围内才是有成果；</p></li><li><p>保持现状或出现更差的情况都是失败！</p></li></ul><h3 id="b优化的需求？"><a href="#b优化的需求？" class="headerlink" title="b优化的需求？"></a>b优化的需求？</h3><ul><li><p>稳定性和业务可持续性，通常比性能更重要；</p></li><li><p>优化不可避免涉及到变更，变更就有风险；</p></li><li><p>优化使性能变好，维持和变差是等概率事件；</p></li><li><p>切记优化，应该是各部门协同，共同参与的工作，任何单一部门都不能对数据库进行优化！</p></li></ul><p>所以优化工作，是由业务需要驱使的！</p><h2 id="2、优化思路"><a href="#2、优化思路" class="headerlink" title="2、优化思路"></a>2、优化思路</h2><h3 id="a优化什么？"><a href="#a优化什么？" class="headerlink" title="a优化什么？"></a>a优化什么？</h3><p>在数据库优化上有两个主要方面：即安全与性能。</p><ul><li><p>安全->数据可持续性；</p></li><li><p>性能->数据的高性能访问。</p></li></ul><h3 id="b优化的范围有哪些？"><a href="#b优化的范围有哪些？" class="headerlink" title="b优化的范围有哪些？"></a>b优化的范围有哪些？</h3><p><strong>存储、主机和操作系统方面：</strong></p><ul><li><p>主机架构稳定性；</p></li><li><p>I/O规划及配置；</p></li><li><p>Swap交换分区；</p></li><li><p>OS内核参数和网络问题。</p></li></ul><p><strong>应用程序方面：</strong></p><ul><li><p>应用程序稳定性；</p></li><li><p>SQL语句性能；</p></li><li><p>串行访问资源；</p></li><li><p>性能欠佳会话管理；</p></li><li><p>这个应用适不适合用MySQL。</p></li></ul><p><strong>数据库优化方面：</strong></p><ul><li><p>内存；</p></li><li><p>数据库结构（物理&逻辑）；</p></li><li><p>实例配置。</p></li></ul><p>说明：不管是设计系统、定位问题还是优化，都可以按照这个顺序执行。</p><h3 id="c优化维度？"><a href="#c优化维度？" class="headerlink" title="c优化维度？"></a>c优化维度？</h3><p><strong>数据库优化维度有四个：</strong><br>硬件、系统配置、数据库表结构、SQL及索引。<br><a href="https://i.imgur.com/UkvYZ6t.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.imgur.com/UkvYZ6t.png" class="lazyload"></a></p><p><strong>优化选择：</strong></p><ul><li><p>优化成本：硬件>系统配置>数据库表结构>SQL及索引。</p></li><li><p>优化效果：硬件<系统配置<数据库表结构<sql及索引。< p></sql及索引。<></p></li></ul><h2 id="1、优化工具有啥？"><a href="#1、优化工具有啥？" class="headerlink" title="1、优化工具有啥？"></a>1、优化工具有啥？</h2><h3 id="a数据库层面？"><a href="#a数据库层面？" class="headerlink" title="a数据库层面？"></a>a数据库层面？</h3><p>检查问题常用工具：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">1）MySQL</span><br><span class="line"></span><br><span class="line">2）msyqladmin：MySQL客户端，可进行管理操作</span><br><span class="line"></span><br><span class="line">3）mysqlshow：功能强大的查看shell命令</span><br><span class="line"></span><br><span class="line">4）show [SESSION | GLOBAL] variables：查看数据库参数信息</span><br><span class="line"></span><br><span class="line">5）SHOW [SESSION | GLOBAL] STATUS：查看数据库的状态信息</span><br><span class="line"></span><br><span class="line">6）information_schema：获取元数据的方法</span><br><span class="line"></span><br><span class="line">7）SHOW ENGINE INNODB STATUS：Innodb引擎的所有状态</span><br><span class="line"></span><br><span class="line">8）SHOW PROCESSLIST：查看当前所有连接session状态</span><br><span class="line"></span><br><span class="line">9）explain：获取查询语句的执行计划</span><br><span class="line"></span><br><span class="line">10）show index：查看表的索引信息</span><br><span class="line"></span><br><span class="line">11）slow-log：记录慢查询语句</span><br><span class="line"></span><br><span class="line">12）mysqldumpslow：分析slowlog文件的</span><br></pre></td></tr></tbody></table></figure></div><p>不常用但好用的工具：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">1）Zabbix：监控主机、系统、数据库（部署zabbix监控平台）</span><br><span class="line"></span><br><span class="line">2）pt-query-digest：分析慢日志</span><br><span class="line"></span><br><span class="line">3）MySQL slap：分析慢日志</span><br><span class="line"></span><br><span class="line">4）sysbench：压力测试工具</span><br><span class="line"></span><br><span class="line">5）MySQL profiling：统计数据库整体状态工具    </span><br><span class="line"></span><br><span class="line">6）Performance Schema：MySQL性能状态统计的数据</span><br><span class="line"></span><br><span class="line">7）workbench：管理、备份、监控、分析、优化工具（比较费资源）</span><br></pre></td></tr></tbody></table></figure></div><h3 id="b数据库层面问题解决思路？"><a href="#b数据库层面问题解决思路？" class="headerlink" title="b数据库层面问题解决思路？"></a>b数据库层面问题解决思路？</h3><p>一般应急调优的思路：针对突然的业务办理卡顿，无法进行正常的业务处理，需要立马解决的场景。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">1）show processlist；</span><br><span class="line"></span><br><span class="line">2）explain  select id ,name from stu where name='clsn'; # ALL  id name age  sex；</span><br><span class="line"></span><br><span class="line">select id,name from stu  where id=2-1 函数 结果集>30；show index from table；</span><br><span class="line"></span><br><span class="line">3）通过执行计划判断，索引问题（有没有、合不合理）或者语句本身问题；</span><br><span class="line"></span><br><span class="line">4）show status  like '%lock%';    # 查询锁状态</span><br><span class="line"></span><br><span class="line">kill SESSION_ID;   # 杀掉有问题的session。</span><br></pre></td></tr></tbody></table></figure></div><p>常规调优思路：针对业务周期性的卡顿，例如在每天10-11点业务特别慢，但是还能够使用，过了这段时间就好了。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1）查看slowlog，分析slowlog，分析出查询慢的语句；</span><br><span class="line"></span><br><span class="line">2）按照一定优先级，一个一个排查所有慢语句；</span><br><span class="line"></span><br><span class="line">3）分析top SQL，进行explain调试，查看语句执行时间；</span><br><span class="line"></span><br><span class="line">4）调整索引或语句本身。</span><br></pre></td></tr></tbody></table></figure></div><h3 id="c系统层面？"><a href="#c系统层面？" class="headerlink" title="c系统层面？"></a>c系统层面？</h3><p><strong>Cpu方面：</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vmstat、sar top、htop、nmon、mpstat；</span><br></pre></td></tr></tbody></table></figure></div><p><strong>内存：</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">free、ps-aux；</span><br></pre></td></tr></tbody></table></figure></div><p><strong>IO设备（磁盘、网络）：</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iostat、ss、netstat、iptraf、iftop、lsof；</span><br></pre></td></tr></tbody></table></figure></div><p><strong>vmstat命令说明：</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">1）Procs：r显示有多少进程正在等待CPU时间。b显示处于不可中断的休眠的进程数量。在等待I/O。</span><br><span class="line"></span><br><span class="line">2）Memory：swpd显示被交换到磁盘的数据块的数量。未被使用的数据块，用户缓冲数据块，用于操作系统的数据块的数量。</span><br><span class="line"></span><br><span class="line">3）Swap：操作系统每秒从磁盘上交换到内存和从内存交换到磁盘的数据块的数量。s1和s0最好是0。</span><br><span class="line"></span><br><span class="line">4）Io：每秒从设备中读入b1的写入到设备b0的数据块的数量。反映了磁盘I/O。</span><br><span class="line"></span><br><span class="line">5）System：显示了每秒发生中断的数量（in）和上下文交换（cs）的数量。</span><br><span class="line"></span><br><span class="line">6）Cpu：显示用于运行用户代码，系统代码，空闲，等待I/O的Cpu时间。</span><br></pre></td></tr></tbody></table></figure></div><p><strong>iostat命令说明：</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">实例命令：iostat -dk 1 5</span><br><span class="line"></span><br><span class="line">　　　　   iostat -d -k -x 5 （查看设备使用率（%util）和响应时间（await））</span><br><span class="line"></span><br><span class="line">1）tps：该设备每秒的传输次数。“一次传输”意思是“一次I/O请求”。多个逻辑请求可能会被合并为“一次I/O请求”。</span><br><span class="line"></span><br><span class="line">2）iops ：硬件出厂的时候，厂家定义的一个每秒最大的IO次数</span><br><span class="line"></span><br><span class="line">3）"一次传输"请求的大小是未知的。</span><br><span class="line"></span><br><span class="line">4）kB_read/s：每秒从设备（drive expressed）读取的数据量；</span><br><span class="line"></span><br><span class="line">5）KB_wrtn/s：每秒向设备（drive expressed）写入的数据量；</span><br><span class="line"></span><br><span class="line">6）kB_read：读取的总数据量；</span><br><span class="line"></span><br><span class="line">7）kB_wrtn：写入的总数量数据量；这些单位都为Kilobytes。</span><br></pre></td></tr></tbody></table></figure></div><h3 id="d系统层面问题解决办法？"><a href="#d系统层面问题解决办法？" class="headerlink" title="d系统层面问题解决办法？"></a>d系统层面问题解决办法？</h3><p>你认为到底负载高好，还是低好呢？在实际的生产中，一般认为Cpu只要不超过90%都没什么问题。<br>当然不排除下面这些特殊情况：<br><strong>Cpu负载高，IO负载低：</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">1）内存不够；</span><br><span class="line"></span><br><span class="line">2）磁盘性能差；</span><br><span class="line"></span><br><span class="line">3）SQL问题--->去数据库层，进一步排查SQL 问题；</span><br><span class="line"></span><br><span class="line">4）IO出问题了（磁盘到临界了、raid设计不好、raid降级、锁、在单位时间内tps过高）；</span><br><span class="line"></span><br><span class="line">5）tps过高：大量的小数据IO、大量的全表扫描。</span><br></pre></td></tr></tbody></table></figure></div><p><strong>IO负载高，Cpu负载低：</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1）大量小的IO写操作：</span><br><span class="line"></span><br><span class="line">autocommit，产生大量小IO；IO/PS，磁盘的一个定值，硬件出厂的时候，厂家定义的一个每秒最大的IO次数。</span><br><span class="line"></span><br><span class="line">2）大量大的IO 写操作：SQL问题的几率比较大</span><br></pre></td></tr></tbody></table></figure></div><p><strong>IO和cpu负载都很高：</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">硬件不够了或SQL存在问题。</span><br></pre></td></tr></tbody></table></figure></div><h2 id="4、基础优化"><a href="#4、基础优化" class="headerlink" title="4、基础优化"></a>4、基础优化</h2><h3 id="a优化思路？"><a href="#a优化思路？" class="headerlink" title="a优化思路？"></a>a优化思路？</h3><p><strong>定位问题点吮吸：</strong>硬件–>系统–>应用–>数据库–>架构（高可用、读写分离、分库分表）。</p><p><strong>处理方向：</strong>明确优化目标、性能和安全的折中、防患未然。</p><h3 id="b硬件优化？"><a href="#b硬件优化？" class="headerlink" title="b硬件优化？"></a>b硬件优化？</h3><p><strong>主机方面：</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">根据数据库类型，主机CPU选择、内存容量选择、磁盘选择：</span><br><span class="line"></span><br><span class="line">1）平衡内存和磁盘资源；</span><br><span class="line"></span><br><span class="line">2）随机的I/O和顺序的I/O；</span><br><span class="line"></span><br><span class="line">3）主机 RAID卡的BBU（Battery Backup Unit）关闭。</span><br></pre></td></tr></tbody></table></figure></div><p><strong>CPU的选择：</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">CPU的两个关键因素：核数、主频</span><br><span class="line"></span><br><span class="line">根据不同的业务类型进行选择：</span><br><span class="line"></span><br><span class="line">1）CPU密集型：计算比较多，OLTP - 主频很高的cpu、核数还要多</span><br><span class="line"></span><br><span class="line">2）IO密集型：查询比较，OLAP - 核数要多，主频不一定高的</span><br></pre></td></tr></tbody></table></figure></div><p><strong>内存的选择：</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">OLAP类型数据库，需要更多内存，和数据获取量级有关。</span><br><span class="line"></span><br><span class="line">OLTP类型数据一般内存是Cpu核心数量的2倍到4倍，没有最佳实践。</span><br></pre></td></tr></tbody></table></figure></div><p><strong>存储方面：</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">1）根据存储数据种类的不同，选择不同的存储设备；</span><br><span class="line"></span><br><span class="line">2）配置合理的RAID级别（raid5、raid10、热备盘）；</span><br><span class="line"></span><br><span class="line">3）对与操作系统来讲，不需要太特殊的选择，最好做好冗余（raid1）（ssd、sas、sata）。</span><br><span class="line"></span><br><span class="line">4）raid卡：</span><br><span class="line"></span><br><span class="line">       主机raid卡选择：</span><br><span class="line"></span><br><span class="line">           实现操作系统磁盘的冗余（raid1）；</span><br><span class="line"></span><br><span class="line">           平衡内存和磁盘资源；</span><br><span class="line"></span><br><span class="line">           随机的I/O和顺序的I/O；</span><br><span class="line"></span><br><span class="line">           主机raid卡的BBU（Battery Backup Unit）要关闭。</span><br></pre></td></tr></tbody></table></figure></div><p><strong>网络设备方面：</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">使用流量支持更高的网络设备（交换机、路由器、网线、网卡、HBA卡）</span><br></pre></td></tr></tbody></table></figure></div><p>注意：以上这些规划应该在初始设计系统时就应该考虑好。</p><h3 id="c服务器硬件优化？"><a href="#c服务器硬件优化？" class="headerlink" title="c服务器硬件优化？"></a>c服务器硬件优化？</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1）物理状态灯</span><br><span class="line"></span><br><span class="line">2）自带管理设备：远程控制卡（FENCE设备：ipmi ilo idarc）、开关机、硬件监控。</span><br><span class="line"></span><br><span class="line">3）第三方的监控软件、设备（snmp、agent）对物理设施进行监控。</span><br><span class="line"></span><br><span class="line">4）存储设备：自带的监控平台。EMC2（hp收购了）、 日立（hds）、IBM低端OEM hds、高端存储是自己技术，华为存储。</span><br></pre></td></tr></tbody></table></figure></div><h3 id="d系统优化？"><a href="#d系统优化？" class="headerlink" title="d系统优化？"></a>d系统优化？</h3><p><strong>Cpu：</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">基本不需要调整，在硬件选择方面下功夫即可。</span><br></pre></td></tr></tbody></table></figure></div><p><strong>内存：</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">基本不需要调整，在硬件选择方面下功夫即可。</span><br></pre></td></tr></tbody></table></figure></div><p><strong>SWAP：</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">MySQL尽量避免使用swap。</span><br><span class="line"></span><br><span class="line">阿里云的服务器中默认swap为0。</span><br></pre></td></tr></tbody></table></figure></div><p><strong>IO ：</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">raid、no lvm、ext4或xfs、ssd、IO调度策略。</span><br></pre></td></tr></tbody></table></figure></div><p><strong>Swap调整(不使用swap分区)</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/proc/sys/vm/swappiness的内容改成0（临时），/etc/sysctl. conf上添加vm.swappiness=0（永久）</span><br></pre></td></tr></tbody></table></figure></div><p>这个参数决定了Linux是倾向于使用swap，还是倾向于释放文件系统cache。在内存紧张的情况下，数值越低越倾向于释放文件系统cache。</p><p>当然，这个参数只能减少使用swap的概率，并不能避免Linux使用swap。</p><p><strong>修改MySQL的配置参数innodb_flush_ method，开启O_DIRECT模式：</strong><br>这种情况下，InnoDB的buffer pool会直接绕过文件系统cache来访问磁盘，但是redo log依旧会使用文件系统cache。<br>值得注意的是，Redo log是覆写模式的，即使使用了文件系统的cache，也不会占用太多。</p><p><strong>IO调度策略：</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#echo deadline>/sys/block/sda/queue/scheduler   临时修改为deadline</span><br></pre></td></tr></tbody></table></figure></div><p>永久修改</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vi /boot/grub/grub.conf</span><br><span class="line">更改到如下内容:</span><br><span class="line">kernel /boot/vmlinuz-2.6.18-8.el5 ro root=LABEL=/ elevator=deadline rhgb quiet</span><br></pre></td></tr></tbody></table></figure></div><h3 id="e系统参数调整？"><a href="#e系统参数调整？" class="headerlink" title="e系统参数调整？"></a>e系统参数调整？</h3><p><strong>Linux系统内核参数优化：</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">vim/etc/sysctl.conf</span><br><span class="line"></span><br><span class="line">net.ipv4.ip_local_port_range = 1024 65535：# 用户端口范围</span><br><span class="line"></span><br><span class="line">net.ipv4.tcp_max_syn_backlog = 4096 </span><br><span class="line"></span><br><span class="line">net.ipv4.tcp_fin_timeout = 30 </span><br><span class="line"></span><br><span class="line">fs.file-max=65535：# 系统最大文件句柄，控制的是能打开文件最大数量</span><br></pre></td></tr></tbody></table></figure></div><p><strong>用户限制参数（MySQL可以不设置以下配置）：</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">vim/etc/security/limits.conf </span><br><span class="line"></span><br><span class="line">* soft nproc 65535</span><br><span class="line"></span><br><span class="line">* hard nproc 65535</span><br><span class="line"></span><br><span class="line">* soft nofile 65535</span><br><span class="line"></span><br><span class="line">* hard nofile 65535</span><br></pre></td></tr></tbody></table></figure></div><h3 id="f应用优化？"><a href="#f应用优化？" class="headerlink" title="f应用优化？"></a>f应用优化？</h3><p>业务应用和数据库应用独立；<br><strong>防火墙：</strong>iptables、selinux等其他无用服务（关闭）：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">chkconfig --level 23456 acpid off</span><br><span class="line"></span><br><span class="line">chkconfig --level 23456 anacron off</span><br><span class="line"></span><br><span class="line">chkconfig --level 23456 autofs off</span><br><span class="line"></span><br><span class="line">chkconfig --level 23456 avahi-daemon off</span><br><span class="line"></span><br><span class="line">chkconfig --level 23456 bluetooth off</span><br><span class="line"></span><br><span class="line">chkconfig --level 23456 cups off</span><br><span class="line"></span><br><span class="line">chkconfig --level 23456 firstboot off</span><br><span class="line"></span><br><span class="line">chkconfig --level 23456 haldaemon off</span><br><span class="line"></span><br><span class="line">chkconfig --level 23456 hplip off</span><br><span class="line"></span><br><span class="line">chkconfig --level 23456 ip6tables off</span><br><span class="line"></span><br><span class="line">chkconfig --level 23456 iptables  off</span><br><span class="line"></span><br><span class="line">chkconfig --level 23456 isdn off</span><br><span class="line"></span><br><span class="line">chkconfig --level 23456 pcscd off</span><br><span class="line"></span><br><span class="line">chkconfig --level 23456 sendmail  off</span><br><span class="line"></span><br><span class="line">chkconfig --level 23456 yum-updatesd  off</span><br></pre></td></tr></tbody></table></figure></div><p>安装图形界面的服务器不要启动图形界面runlevel 3。<br>另外，思考将来我们的业务是否真的需要MySQL，还是使用其他种类的数据库。用数据库的最高境界就是不用数据库。</p><h2 id="5、数据库优化"><a href="#5、数据库优化" class="headerlink" title="5、数据库优化"></a>5、数据库优化</h2><p><strong>SQL优化方向：</strong>执行计划、索引、SQL改写。<br><strong>架构优化方向：</strong>高可用架构、高性能架构、分库分表。</p><h3 id="a数据库参数优化？"><a href="#a数据库参数优化？" class="headerlink" title="a数据库参数优化？"></a>a数据库参数优化？</h3><p><strong>调整</strong><br>实例整体（高级优化，扩展）：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">thread_concurrency：# 并发线程数量个数</span><br><span class="line"></span><br><span class="line">sort_buffer_size：# 排序缓存</span><br><span class="line"></span><br><span class="line">read_buffer_size：# 顺序读取缓存</span><br><span class="line"></span><br><span class="line">read_rnd_buffer_size：# 随机读取缓存</span><br><span class="line"></span><br><span class="line">key_buffer_size：# 索引缓存</span><br><span class="line"></span><br><span class="line">thread_cache_size：# (1G—>8, 2G—>16, 3G—>32, >3G—>64)</span><br></pre></td></tr></tbody></table></figure></div><p><strong>连接层（基础优化）</strong><br>设置合理的连接客户和连接方式：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">max_connections           # 最大连接数，看交易笔数设置    </span><br><span class="line"></span><br><span class="line">max_connect_errors        # 最大错误连接数，能大则大</span><br><span class="line"></span><br><span class="line">connect_timeout           # 连接超时</span><br><span class="line"></span><br><span class="line">max_user_connections      # 最大用户连接数</span><br><span class="line"></span><br><span class="line">skip-name-resolve         # 跳过域名解析</span><br><span class="line"></span><br><span class="line">wait_timeout              # 等待超时</span><br><span class="line"></span><br><span class="line">back_log                  # 可以在堆栈中的连接数量</span><br></pre></td></tr></tbody></table></figure></div><p><strong>SQL层（基础优化）</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">query_cache_size： 查询缓存  >>>  OLAP类型数据库,需要重点加大此内存缓存，但是一般不会超过GB。</span><br><span class="line"></span><br><span class="line">对于经常被修改的数据，缓存会立马失效。</span><br><span class="line"></span><br><span class="line">我们可以实用内存数据库（redis、memecache），替代他的功能。</span><br></pre></td></tr></tbody></table></figure></div><h3 id="b存储引擎层（innodb基础优化参数）？"><a href="#b存储引擎层（innodb基础优化参数）？" class="headerlink" title="b存储引擎层（innodb基础优化参数）？"></a>b存储引擎层（innodb基础优化参数）？</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">default-storage-engine</span><br><span class="line"></span><br><span class="line">innodb_buffer_pool_size       # 没有固定大小，50%测试值，看看情况再微调。但是尽量设置不要超过物理内存70%</span><br><span class="line"></span><br><span class="line">innodb_file_per_table=(1,0)</span><br><span class="line"></span><br><span class="line">innodb_flush_log_at_trx_commit=(0,1,2) # 1是最安全的，0是性能最高，2折中</span><br><span class="line"></span><br><span class="line">binlog_sync</span><br><span class="line"></span><br><span class="line">Innodb_flush_method=(O_DIRECT, fdatasync)</span><br><span class="line"></span><br><span class="line">innodb_log_buffer_size           # 100M以下</span><br><span class="line"></span><br><span class="line">innodb_log_file_size               # 100M 以下</span><br><span class="line"></span><br><span class="line">innodb_log_files_in_group       # 5个成员以下,一般2-3个够用（iblogfile0-N）</span><br><span class="line"></span><br><span class="line">innodb_max_dirty_pages_pct   # 达到百分之75的时候刷写 内存脏页到磁盘。</span><br><span class="line"></span><br><span class="line">log_bin</span><br><span class="line"></span><br><span class="line">max_binlog_cache_size                     # 可以不设置</span><br><span class="line"></span><br><span class="line">max_binlog_size                               # 可以不设置</span><br><span class="line"></span><br><span class="line">innodb_additional_mem_pool_size     #小于2G内存的机器，推荐值是20M。32G内存以上100M</span><br></pre></td></tr></tbody></table></figure></div><p>谈谈项目中常用的MySQL优化方法，共19条，具体如下：<br><strong>1、EXPLAIN</strong><br>做MySQL优化，我们要善用EXPLAIN查看SQL执行计划。</p><p>下面来个简单的示例，标注（1、2、3、4、5）我们要重点关注的数据：</p><p><a href="https://i.imgur.com/TWfKAPb.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.imgur.com/TWfKAPb.png" class="lazyload"></a></p><p>type列，连接类型。一个好的SQL语句至少要达到range级别。杜绝出现all级别。<br>key列，使用到的索引名。如果没有选择索引，值是NULL。可以采取强制索引方式。<br>key_len列，索引长度。<br>rows列，扫描行数。该值是个预估值。<br>extra列，详细说明。注意，常见的不太友好的值，如下：Using filesort，Using temporary。</p><p><strong>2、SQL语句中IN包含的值不应过多</strong><br>MySQL对于IN做了相应的优化，即将IN中的常量全部存储在一个数组里面，而且这个数组是排好序的。但是如果数值较多，产生的消耗也是比较大的。再例如：select id from t where num in(1,2,3) 对于连续的数值，能用between就不要用in了；再或者使用连接来替换。</p><p><strong>3、SELECT语句务必指明字段名称</strong><br>SELECT*增加很多不必要的消耗（CPU、IO、内存、网络带宽）；增加了使用覆盖索引的可能性；当表结构发生改变时，前断也需要更新。所以要求直接在select后面接上字段名。</p><p><strong>4、当只需要一条数据的时候，使用limit 1</strong><br>这是为了使EXPLAIN中type列达到const类型</p><p><strong>5、如果排序字段没有用到索引，就尽量少排序</strong></p><p><strong>6、如果限制条件中其他字段没有索引，尽量少用or</strong><br>or两边的字段中，如果有一个不是索引字段，而其他条件也不是索引字段，会造成该查询不走索引的情况。很多时候使用union all或者是union（必要的时候）的方式来代替“or”会得到更好的效果。</p><p><strong>7、尽量用union all代替union</strong><br>union和union all的差异主要是前者需要将结果集合并后再进行唯一性过滤操作，这就会涉及到排序，增加大量的CPU运算，加大资源消耗及延迟。当然，union all的前提条件是两个结果集没有重复数据。</p><p><strong>8、不使用ORDER BY RAND()</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sql</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">id</span> <span class="keyword">from</span> <span class="string">`dynamic`</span> <span class="keyword">order</span> <span class="keyword">by</span> <span class="keyword">rand</span>() <span class="keyword">limit</span> <span class="number">1000</span>;</span><br></pre></td></tr></tbody></table></figure></div><p>上面的SQL语句，可优化为：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sql</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">id</span> <span class="keyword">from</span> <span class="string">`dynamic`</span> t1 <span class="keyword">join</span> (<span class="keyword">select</span> <span class="keyword">rand</span>() * (<span class="keyword">select</span> <span class="keyword">max</span>(<span class="keyword">id</span>) <span class="keyword">from</span> <span class="string">`dynamic`</span>) <span class="keyword">as</span> nid) t2 <span class="keyword">on</span> t1.id > t2.nidlimit <span class="number">1000</span>;</span><br></pre></td></tr></tbody></table></figure></div><p><strong>9、区分in和exists、not in和not exists</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sql</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> 表A <span class="keyword">where</span> <span class="keyword">id</span> <span class="keyword">in</span> (<span class="keyword">select</span> <span class="keyword">id</span> <span class="keyword">from</span> 表B)</span><br></pre></td></tr></tbody></table></figure></div><p>上面SQL语句相当于</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sql</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> 表A <span class="keyword">where</span> <span class="keyword">exists</span>(<span class="keyword">select</span> * <span class="keyword">from</span> 表B <span class="keyword">where</span> 表B.id=表A.id)</span><br></pre></td></tr></tbody></table></figure></div><p>区分in和exists主要是造成了驱动顺序的改变（这是性能变化的关键），如果是exists，那么以外层表为驱动表，先被访问，如果是IN，那么先执行子查询。所以IN适合于外表大而内表小的情况；EXISTS适合于外表小而内表大的情况。</p><p>关于not in和not exists，推荐使用not exists，不仅仅是效率问题，not in可能存在逻辑问题。如何高效的写出一个替代not exists的SQL语句？</p><p>原SQL语句：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sql</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> colname … <span class="keyword">from</span> A表 <span class="keyword">where</span> a.id <span class="keyword">not</span> <span class="keyword">in</span> (<span class="keyword">select</span> b.id <span class="keyword">from</span> B表)</span><br></pre></td></tr></tbody></table></figure></div><p>高效的SQL语句：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sql</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> colname … <span class="keyword">from</span> A表 <span class="keyword">Left</span> <span class="keyword">join</span> B表 <span class="keyword">on</span> <span class="keyword">where</span> a.id = b.id <span class="keyword">where</span> b.id <span class="keyword">is</span> <span class="literal">null</span></span><br></pre></td></tr></tbody></table></figure></div><p>取出的结果集如下图表示，A表不在B表中的数据：<br><a href="https://i.imgur.com/FULvDCo.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.imgur.com/FULvDCo.png" class="lazyload"></a></p><p><strong>10、使用合理的分页方式以提高分页的效率</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sql</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">id</span>,<span class="keyword">name</span> <span class="keyword">from</span> product <span class="keyword">limit</span> <span class="number">866613</span>, <span class="number">20</span></span><br></pre></td></tr></tbody></table></figure></div><p>使用上述SQL语句做分页的时候，可能有人会发现，随着表数据量的增加，直接使用limit分页查询会越来越慢。<br><strong>优化的方法如下：</strong><br>可以取前一页的最大行数的id，然后根据这个最大的id来限制下一页的起点。比如此列中，上一页最大的id是866612。<br><strong>SQL可以采用如下的写法：</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sql</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">id</span>,<span class="keyword">name</span> <span class="keyword">from</span> product <span class="keyword">where</span> <span class="keyword">id</span>> <span class="number">866612</span> <span class="keyword">limit</span> <span class="number">20</span></span><br></pre></td></tr></tbody></table></figure></div><p><strong>11、分段查询</strong><br>在一些用户选择页面中，可能一些用户选择的时间范围过大，造成查询缓慢。主要的原因是扫描行数过多。这个时候可以通过程序，分段进行查询，循环遍历，将结果合并处理进行展示。</p><p>如下图这个SQL语句，扫描的行数成百万级以上的时候就可以使用分段查询：<br><a href="https://i.imgur.com/XDCI9bK.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.imgur.com/XDCI9bK.png" class="lazyload"></a></p><p><strong>12、避免在where子句中对字段进行null值判断</strong><br>对于null的判断会导致引擎放弃使用索引而进行全表扫描。</p><p><strong>13、不建议使用%前缀模糊查询</strong><br>例如LIKE“%name”或者LIKE“%name%”，这种查询会导致索引失效而进行全表扫描。但是可以使用LIKE “name%”。<br>那如何查询%name%？<br>如下图所示，虽然给secret字段添加了索引，但在explain结果并没有使用：<br><a href="https://i.imgur.com/E9YS8j4.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.imgur.com/E9YS8j4.png" class="lazyload"></a><br>那么如何解决这个问题呢，答案：使用全文索引。</p><p>在我们查询中经常会用到<strong>select id,fnum,fdst from dynamic_201606 where user_name like ‘%zhangsan%’;</strong> 。这样的语句，普通索引是无法满足查询需求的。庆幸的是在MySQL中，有全文索引来帮助我们。</p><p><strong>创建全文索引的SQL语法是：</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sql</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="string">`dynamic_201606`</span> <span class="keyword">ADD</span> FULLTEXT <span class="keyword">INDEX</span> <span class="string">`idx_user_name`</span> (<span class="string">`user_name`</span>);</span><br></pre></td></tr></tbody></table></figure></div><p><strong>使用全文索引的SQL语句是：</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sql</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">id</span>,fnum,fdst <span class="keyword">from</span> dynamic_201606 <span class="keyword">where</span> <span class="keyword">match</span>(user_name) against(<span class="string">'zhangsan'</span> <span class="keyword">in</span> <span class="built_in">boolean</span> <span class="keyword">mode</span>);</span><br></pre></td></tr></tbody></table></figure></div><p>注意：在需要创建全文索引之前，请联系DBA确定能否创建。同时需要注意的是查询语句的写法与普通索引的区别。</p><p><strong>14、避免在where子句中对字段进行表达式操作</strong><br>比如：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sql</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> user_id,user_project <span class="keyword">from</span> user_base <span class="keyword">where</span> age*<span class="number">2</span>=<span class="number">36</span>;</span><br></pre></td></tr></tbody></table></figure></div><p>中对字段就行了算术运算，这会造成引擎放弃使用索引，建议改成：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sql</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> user_id,user_project <span class="keyword">from</span> user_base <span class="keyword">where</span> age=<span class="number">36</span>/<span class="number">2</span>;</span><br></pre></td></tr></tbody></table></figure></div><p><strong>15、避免隐式类型转换</strong><br>where子句中出现column字段的类型和传入的参数类型不一致的时候发生的类型转换，建议先确定where中的参数类型。</p><p><strong>16、对于联合索引来说，要遵守最左前缀法则</strong><br>举列来说索引含有字段id、name、school，可以直接用id字段，也可以id、name这样的顺序，但是name;school都无法使用这个索引。所以在创建联合索引的时候一定要注意索引字段顺序，常用的查询字段放在最前面。</p><p><strong>17、必要时可以使用force index来强制查询走某个索引</strong><br>有的时候MySQL优化器采取它认为合适的索引来检索SQL语句，但是可能它所采用的索引并不是我们想要的。这时就可以采用forceindex来强制优化器使用我们制定的索引。</p><p><strong>18、注意范围查询语句</strong><br>对于联合索引来说，如果存在范围查询，比如between、>、<等条件时，会造成后面的索引字段失效。</p><p><strong>19、关于JOIN优化</strong><br><a href="https://i.imgur.com/QOcz25x.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.imgur.com/QOcz25x.png" class="lazyload"></a></p><p>LEFT JOIN A表为驱动表，INNER JOIN MySQL会自动找出那个数据少的表作用驱动表，RIGHT JOIN B表为驱动表。</p><p><strong>注意：</strong><br>1）MySQL中没有full join，可以用以下方式来解决：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sql</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> A <span class="keyword">left</span> <span class="keyword">join</span> B <span class="keyword">on</span> B.name = A.namewhere B.name <span class="keyword">is</span> nullunion allselect * <span class="keyword">from</span> B;</span><br></pre></td></tr></tbody></table></figure></div><p>2）尽量使用inner join，避免left join：<br>参与联合查询的表至少为2张表，一般都存在大小之分。如果连接方式是inner join，在没有其他过滤条件的情况下MySQL会自动选择小表作为驱动表，但是left join在驱动表的选择上遵循的是左边驱动右边的原则，即left join左边的表名为驱动表。</p><p>3）合理利用索引：<br>被驱动表的索引字段作为on的限制字段。</p><p>4）利用小表去驱动大表：<br><a href="https://i.imgur.com/lYmzIyp.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.imgur.com/lYmzIyp.png" class="lazyload"></a></p><p>从原理图能够直观的看出如果能够减少驱动表的话，减少嵌套循环中的循环次数，以减少 IO总量及CPU运算的次数。</p><p>5）巧用STRAIGHT_JOIN：<br>inner join是由MySQL选择驱动表，但是有些特殊情况需要选择另个表作为驱动表，比如有group by、order by等「Using filesort」、「Using temporary」时。STRAIGHT_JOIN来强制连接顺序，在STRAIGHT_JOIN左边的表名就是驱动表，右边则是被驱动表。在使用STRAIGHT_JOIN有个前提条件是该查询是内连接，也就是inner join。其他链接不推荐使用STRAIGHT_JOIN，否则可能造成查询结果不准确。</p><p><a href="https://i.imgur.com/baYubFP.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.imgur.com/baYubFP.png" class="lazyload"></a></p><p>这个方式有时能减少3倍的时间。<br>以上19条MySQL优化方法希望对大家有所帮助！</p></body></html>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>go-fastdfs 小巧灵活的文件系统</title>
      <link href="/2019/01/29/go-fastdfs%20%E5%B0%8F%E5%B7%A7%E7%81%B5%E6%B4%BB%E7%9A%84%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/"/>
      <url>/2019/01/29/go-fastdfs%20%E5%B0%8F%E5%B7%A7%E7%81%B5%E6%B4%BB%E7%9A%84%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script></head><body><h1 id="spring-boot-go-fastdfs"><a href="#spring-boot-go-fastdfs" class="headerlink" title="spring-boot-go-fastdfs"></a>spring-boot-go-fastdfs</h1><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>go-fastdfs是一个基于go语言开发的开源文件系统，go-fastdfs（类fastdfs）在运维管理等方面优于fastdfs，更人性化。<br>执行程序：<a href="https://github.com/sjqzhang/go-fastdfs/releases" target="_blank" rel="noopener">https://github.com/sjqzhang/go-fastdfs/releases</a><br>源码：<a href="https://github.com/sjqzhang/go-fastdfs" target="_blank" rel="noopener">https://github.com/sjqzhang/go-fastdfs</a></p><h3 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h3><ul><li>支持curl命令上传</li><li>支持浏览器上传</li><li>支持HTTP下载</li><li>支持多机自动同步</li><li>类fastdfs</li><li>高性能 （使用leveldb作为kv库）</li><li>高可靠（设计极其简单，使用成熟组件）</li><li>无中心设计</li></ul><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ul><li>无依赖(单一文件）</li><li>自动同步</li><li>失败自动修复</li><li>按天分目录方便维护</li><li>支持不同的场景</li><li>文件自动去重</li><li>支持目录自定义</li><li>支持保留原文件名</li><li>支持自动生成唯一文件名</li><li>支持浏览器上传</li><li>支持查看集群文件信息</li><li>支持集群监控邮件告警</li><li>支持token下载　token=md5(file_md5+timestamp)</li><li>运维简单，只有一个角色（不像fastdfs有三个角色Tracker Server,Storage Server,Client），配置自动生成</li><li>每个节点对等（简化运维）</li><li>所有节点都可以同时读写</li></ul><h3 id="启动文件服务器"><a href="#启动文件服务器" class="headerlink" title="启动文件服务器"></a>启动文件服务器</h3><blockquote><p>linux：./fileserver<br>windows：双击fileserver.exe</p></blockquote><p>具体代码实现请看源码，比较简单，但问价那系统也存在一些问题，比如说没有删除的功能这一点就显得优点蛋疼了。</p><p>上传结果：<br><a href="https://i.imgur.com/HLYNp1I.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.imgur.com/HLYNp1I.png" class="lazyload"></a></p><p>源码地址：<a href="https://github.com/HWYWL/spring-boot-2.x-examples/tree/master/spring-boot-go-fastdfs" target="_blank" rel="noopener">源码</a></p><h3 id="问题建议"><a href="#问题建议" class="headerlink" title="问题建议"></a>问题建议</h3><ul><li>联系我的邮箱：<a href="mailto:ilovey_hwy@163.com">ilovey_hwy@163.com</a></li><li>我的博客：<a href="https://www.hwy.ac.cn" target="_blank" rel="noopener">https://www.hwy.ac.cn</a></li><li>GitHub：<a href="https://github.com/HWYWL" target="_blank" rel="noopener">https://github.com/HWYWL</a></li></ul></body></html>]]></content>
      
      
      <categories>
          
          <category> 文件系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 文件系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>69 个经典 Spring 面试题和答案</title>
      <link href="/2019/01/27/69%20%E4%B8%AA%E7%BB%8F%E5%85%B8%20Spring%20%E9%9D%A2%E8%AF%95%E9%A2%98%E5%92%8C%E7%AD%94%E6%A1%88/"/>
      <url>/2019/01/27/69%20%E4%B8%AA%E7%BB%8F%E5%85%B8%20Spring%20%E9%9D%A2%E8%AF%95%E9%A2%98%E5%92%8C%E7%AD%94%E6%A1%88/</url>
      
        <content type="html"><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script></head><body><h3 id="1-什么是spring"><a href="#1-什么是spring" class="headerlink" title="1. 什么是spring?"></a>1. 什么是spring?</h3><p>Spring 是个java企业级应用的开源开发框架。Spring主要用来开发Java应用，但是有些扩展是针对构建J2EE平台的web应用。Spring 框架目标是简化Java企业级应用开发，并通过POJO为基础的编程模型促进良好的编程习惯。</p><h3 id="2-使用Spring框架的好处是什么？"><a href="#2-使用Spring框架的好处是什么？" class="headerlink" title="2. 使用Spring框架的好处是什么？"></a>2. 使用Spring框架的好处是什么？</h3><ul><li>轻量：Spring 是轻量的，基本的版本大约2MB</li><li>控制反转：Spring通过控制反转实现了松散耦合，对象们给出它们的依赖，而不是创建或查找依赖的对象们</li><li>面向切面的编程(AOP)：Spring支持面向切面的编程，并且把应用业务逻辑和系统服务分开</li><li>容器：Spring 包含并管理应用中对象的生命周期和配置</li><li>MVC框架：Spring的WEB框架是个精心设计的框架，是Web框架的一个很好的替代品</li><li>事务管理：Spring 提供一个持续的事务管理接口，可以扩展到上至本地事务下至全局事务（JTA）</li><li>异常处理：Spring 提供方便的API把具体技术相关的异常（比如由JDBC，Hibernate or JDO抛出的）转化为一致的unchecked 异常</li></ul><h3 id="3-Spring由哪些模块组成？"><a href="#3-Spring由哪些模块组成？" class="headerlink" title="3.  Spring由哪些模块组成？"></a>3.  Spring由哪些模块组成？</h3><p>以下是Spring 框架的基本模块：</p><ul><li>Core module</li><li>Bean module</li><li>Context module</li><li>Expression Language module</li><li>JDBC module</li><li>ORM module</li><li>OXM module</li><li>Java Messaging Service(JMS) module</li><li>Transaction module</li><li>Web module</li><li>Web-Servlet module</li><li>Web-Struts module</li><li>Web-Portlet module</li></ul><h3 id="4-核心容器（应用上下文-模块"><a href="#4-核心容器（应用上下文-模块" class="headerlink" title="4. 核心容器（应用上下文) 模块"></a>4. 核心容器（应用上下文) 模块</h3><p>这是基本的Spring模块，提供spring 框架的基础功能，BeanFactory 是 任何以spring为基础的应用的核心。Spring 框架建立在此模块之上，它使Spring成为一个容器。</p><h3 id="5-BeanFactory-–-BeanFactory-实现举例"><a href="#5-BeanFactory-–-BeanFactory-实现举例" class="headerlink" title="5. BeanFactory – BeanFactory 实现举例"></a>5. BeanFactory – BeanFactory 实现举例</h3><p>Bean 工厂是工厂模式的一个实现，提供了控制反转功能，用来把应用的配置和依赖从正真的应用代码中分离。<br>最常用的BeanFactory 实现是XmlBeanFactory 类。</p><h3 id="6-XMLBeanFactory"><a href="#6-XMLBeanFactory" class="headerlink" title="6. XMLBeanFactory"></a>6. XMLBeanFactory</h3><p>最常用的就是org.springframework.beans.factory.xml.XmlBeanFactory ，它根据XML文件中的定义加载beans。该容器从XML 文件读取配置元数据并用它去创建一个完全配置的系统或应用。</p><h3 id="7-解释AOP模块"><a href="#7-解释AOP模块" class="headerlink" title="7. 解释AOP模块"></a>7. 解释AOP模块</h3><p>AOP模块用于发给我们的Spring应用做面向切面的开发， 很多支持由AOP联盟提供，这样就确保了Spring和其他AOP框架的共通性。这个模块将元数据编程引入Spring。</p><h3 id="8-解释JDBC抽象和DAO模块"><a href="#8-解释JDBC抽象和DAO模块" class="headerlink" title="8. 解释JDBC抽象和DAO模块"></a>8. 解释JDBC抽象和DAO模块</h3><p>通过使用JDBC抽象和DAO模块，保证数据库代码的简洁，并能避免数据库资源错误关闭导致的问题，它在各种不同的数据库的错误信息之上，提供了一个统一的异常访问层。它还利用Spring的AOP 模块给Spring应用中的对象提供事务管理服务。</p><h3 id="9-解释对象-关系映射集成模块"><a href="#9-解释对象-关系映射集成模块" class="headerlink" title="9. 解释对象/关系映射集成模块"></a>9. 解释对象/关系映射集成模块</h3><p>Spring 通过提供ORM模块，支持我们在直接JDBC之上使用一个对象/关系映射映射(ORM)工具，Spring 支持集成主流的ORM框架，如Hiberate,JDO和 iBATIS SQL Maps。Spring的事务管理同样支持以上所有ORM框架及JDBC。</p><h3 id="10-解释WEB-模块"><a href="#10-解释WEB-模块" class="headerlink" title="10.  解释WEB 模块"></a>10.  解释WEB 模块</h3><p>Spring的WEB模块是构建在application context 模块基础之上，提供一个适合web应用的上下文。这个模块也包括支持多种面向web的任务，如透明地处理多个文件上传请求和程序级请求参数的绑定到你的业务对象。它也有对Jakarta Struts的支持。</p><h3 id="12-Spring配置文件"><a href="#12-Spring配置文件" class="headerlink" title="12.  Spring配置文件"></a>12.  Spring配置文件</h3><p>Spring配置文件是个XML 文件，这个文件包含了类信息，描述了如何配置它们，以及如何相互调用。</p><h3 id="13-什么是Spring-IOC-容器？"><a href="#13-什么是Spring-IOC-容器？" class="headerlink" title="13.  什么是Spring IOC 容器？"></a>13.  什么是Spring IOC 容器？</h3><p>Spring IOC 负责创建对象，管理对象（通过依赖注入（DI），装配对象，配置对象，并且管理这些对象的整个生命周期。</p><h3 id="14-IOC的优点是什么？"><a href="#14-IOC的优点是什么？" class="headerlink" title="14.  IOC的优点是什么？"></a>14.  IOC的优点是什么？</h3><p>IOC 或 依赖注入把应用的代码量降到最低。它使应用容易测试，单元测试不再需要单例和JNDI查找机制。最小的代价和最小的侵入性使松散耦合得以实现。IOC容器支持加载服务时的饿汉式初始化和懒加载。</p><h3 id="15-ApplicationContext通常的实现是什么？"><a href="#15-ApplicationContext通常的实现是什么？" class="headerlink" title="15. ApplicationContext通常的实现是什么？"></a>15. ApplicationContext通常的实现是什么？</h3><ul><li>FileSystemXmlApplicationContext ：此容器从一个XML文件中加载beans的定义，XML Bean 配置文件的全路径名必须提供给它的构造函数。</li><li>ClassPathXmlApplicationContext：此容器也从一个XML文件中加载beans的定义，这里，你需要正确设置classpath因为这个容器将在classpath里找bean配置。</li><li>WebXmlApplicationContext：此容器加载一个XML文件，此文件定义了一个WEB应用的所有bean。</li></ul><h3 id="16-Bean-工厂和-Application-contexts-有什么区别？"><a href="#16-Bean-工厂和-Application-contexts-有什么区别？" class="headerlink" title="16. Bean 工厂和 Application contexts  有什么区别？"></a>16. Bean 工厂和 Application contexts  有什么区别？</h3><p>Application contexts提供一种方法处理文本消息，一个通常的做法是加载文件资源（比如镜像），它们可以向注册为监听器的bean发布事件。另外，在容器或容器内的对象上执行的那些不得不由bean工厂以程序化方式处理的操作，可以在Application contexts中以声明的方式处理。Application contexts实现了MessageSource接口，该接口的实现以可插拔的方式提供获取本地化消息的方法。</p><h3 id="17-一个Spring的应用看起来象什么？"><a href="#17-一个Spring的应用看起来象什么？" class="headerlink" title="17. 一个Spring的应用看起来象什么？"></a>17. 一个Spring的应用看起来象什么？</h3><ul><li>一个定义了一些功能的接口</li><li>这实现包括属性，它的Setter ， getter 方法和函数等</li><li>Spring AOP</li><li>Spring 的XML 配置文件</li><li>使用以上功能的客户端程序</li></ul><h1 id="依赖注入"><a href="#依赖注入" class="headerlink" title="依赖注入"></a>依赖注入</h1><h3 id="18-什么是Spring的依赖注入？"><a href="#18-什么是Spring的依赖注入？" class="headerlink" title="18. 什么是Spring的依赖注入？"></a>18. 什么是Spring的依赖注入？</h3><p>依赖注入，是IOC的一个方面，是个通常的概念，它有多种解释。这概念是说你不用创建对象，而只需要描述它如何被创建。你不在代码里直接组装你的组件和服务，但是要在配置文件里描述哪些组件需要哪些服务，之后一个容器（IOC容器）负责把他们组装起来。</p><h3 id="19-有哪些不同类型的IOC（依赖注入）方式？"><a href="#19-有哪些不同类型的IOC（依赖注入）方式？" class="headerlink" title="19.  有哪些不同类型的IOC（依赖注入）方式？"></a>19.  有哪些不同类型的IOC（依赖注入）方式？</h3><p>构造器依赖注入：构造器依赖注入通过容器触发一个类的构造器来实现的，该类有一系列参数，每个参数代表一个对其他类的依赖。<br>Setter方法注入：Setter方法注入是容器通过调用无参构造器或无参static工厂 方法实例化bean之后，调用该bean的setter方法，即实现了基于setter的依赖注入。</p><h3 id="20-哪种依赖注入方式你建议使用，构造器注入，还是-Setter方法注入？"><a href="#20-哪种依赖注入方式你建议使用，构造器注入，还是-Setter方法注入？" class="headerlink" title="20. 哪种依赖注入方式你建议使用，构造器注入，还是 Setter方法注入？"></a>20. 哪种依赖注入方式你建议使用，构造器注入，还是 Setter方法注入？</h3><p>你两种依赖方式都可以使用，构造器注入和Setter方法注入。最好的解决方案是用构造器参数实现强制依赖，setter方法实现可选依赖。</p><h1 id="Spring-Beans"><a href="#Spring-Beans" class="headerlink" title="Spring Beans"></a>Spring Beans</h1><h3 id="21-什么是Spring-beans？"><a href="#21-什么是Spring-beans？" class="headerlink" title="21.什么是Spring beans？"></a>21.什么是Spring beans？</h3><p>Spring beans 是那些形成Spring应用的主干的java对象。它们被Spring IOC容器初始化，装配，和管理。这些beans通过容器中配置的元数据创建。比如，以XML文件中<bean> 的形式定义。<br>Spring 框架定义的beans都是单件beans。在bean tag中有个属性”singleton”，如果它被赋为TRUE，bean 就是单件，否则就是一个 prototype bean。默认是TRUE，所以所有在Spring框架中的beans 缺省都是单件。</bean></p><h3 id="22-一个-Spring-Bean-定义-包含什么？"><a href="#22-一个-Spring-Bean-定义-包含什么？" class="headerlink" title="22. 一个 Spring Bean 定义 包含什么？"></a>22. 一个 Spring Bean 定义 包含什么？</h3><p>一个Spring Bean 的定义包含容器必知的所有配置元数据，包括如何创建一个bean，它的生命周期详情及它的依赖。</p><h3 id="23-如何给Spring-容器提供配置元数据？"><a href="#23-如何给Spring-容器提供配置元数据？" class="headerlink" title="23. 如何给Spring 容器提供配置元数据？"></a>23. 如何给Spring 容器提供配置元数据？</h3><p>这里有三种重要的方法给Spring 容器提供配置元数据。</p><ul><li>XML配置文件。</li><li>基于注解的配置。</li><li>基于java的配置。</li></ul><h3 id="24-你怎样定义类的作用域？"><a href="#24-你怎样定义类的作用域？" class="headerlink" title="24. 你怎样定义类的作用域？"></a>24. 你怎样定义类的作用域？</h3><p>当定义一个<bean> 在Spring里，我们还能给这个bean声明一个作用域。它可以通过bean 定义中的scope属性来定义。如，当Spring要在需要的时候每次生产一个新的bean实例，bean的scope属性被指定为prototype。另一方面，一个bean每次使用的时候必须返回同一个实例，这个bean的scope 属性 必须设为 singleton。</bean></p><h3 id="25-解释Spring支持的几种bean的作用域"><a href="#25-解释Spring支持的几种bean的作用域" class="headerlink" title="25. 解释Spring支持的几种bean的作用域"></a>25. 解释Spring支持的几种bean的作用域</h3><p>Spring框架支持以下五种bean的作用域：</p><ul><li>singleton : bean在每个Spring ioc 容器中只有一个实例。</li><li>prototype：一个bean的定义可以有多个实例。</li><li>request：每次http请求都会创建一个bean，该作用域仅在基于web的Spring ApplicationContext情形下有效。</li><li>session：在一个HTTP Session中，一个bean定义对应一个实例。该作用域仅在基于web的Spring ApplicationContext情形下有效。</li><li>global-session：在一个全局的HTTP Session中，一个bean定义对应一个实例。该作用域仅在基于web的Spring ApplicationContext情形下有效。<br>缺省的Spring bean 的作用域是Singleton。</li></ul><h3 id="26-Spring框架中的单例bean是线程安全的吗？"><a href="#26-Spring框架中的单例bean是线程安全的吗？" class="headerlink" title="26. Spring框架中的单例bean是线程安全的吗？"></a>26. Spring框架中的单例bean是线程安全的吗？</h3><p>不，Spring框架中的单例bean不是线程安全的。</p><h3 id="27-解释Spring框架中bean的生命周期"><a href="#27-解释Spring框架中bean的生命周期" class="headerlink" title="27. 解释Spring框架中bean的生命周期"></a>27. 解释Spring框架中bean的生命周期</h3><ul><li>Spring容器 从XML 文件中读取bean的定义，并实例化bean。</li><li>Spring根据bean的定义填充所有的属性。</li><li>如果bean实现了BeanNameAware 接口，Spring 传递bean 的ID 到 setBeanName方法。</li><li>如果Bean 实现了 BeanFactoryAware 接口， Spring传递beanfactory 给setBeanFactory 方法。</li><li>如果有任何与bean相关联的BeanPostProcessors，Spring会在postProcesserBeforeInitialization()方法内调用它们。</li><li>如果bean实现IntializingBean了，调用它的afterPropertySet方法，如果bean声明了初始化方法，调用此初始化方法。</li><li>如果有BeanPostProcessors 和bean 关联，这些bean的postProcessAfterInitialization() 方法将被调用。</li><li>如果bean实现了 DisposableBean，它将调用destroy()方法。</li></ul><h3 id="28-哪些是重要的bean生命周期方法？-你能重载它们吗？"><a href="#28-哪些是重要的bean生命周期方法？-你能重载它们吗？" class="headerlink" title="28.  哪些是重要的bean生命周期方法？ 你能重载它们吗？"></a>28.  哪些是重要的bean生命周期方法？ 你能重载它们吗？</h3><p>有两个重要的bean 生命周期方法，第一个是setup ， 它是在容器加载bean的时候被调用。第二个方法是 teardown  它是在容器卸载类的时候被调用。<br>The bean 标签有两个重要的属性（init-method和destroy-method）。用它们你可以自己定制初始化和注销方法。它们也有相应的注解（@PostConstruct和@PreDestroy）。</p><h3 id="29-什么是Spring的内部bean？"><a href="#29-什么是Spring的内部bean？" class="headerlink" title="29. 什么是Spring的内部bean？"></a>29. 什么是Spring的内部bean？</h3><p>当一个bean仅被用作另一个bean的属性时，它能被声明为一个内部bean，为了定义inner bean，在Spring 的 基于XML的 配置元数据中，可以在 <property>或 <constructor-arg> 元素内使用<bean> 元素，内部bean通常是匿名的，它们的Scope一般是prototype。</bean></constructor-arg></property></p><h3 id="30-在-Spring中如何注入一个java集合？"><a href="#30-在-Spring中如何注入一个java集合？" class="headerlink" title="30. 在 Spring中如何注入一个java集合？"></a>30. 在 Spring中如何注入一个java集合？</h3><p>Spring提供以下几种集合的配置元素：</p><ul><li><list>类型用于注入一列值，允许有相同的值。</list></li><li><set> 类型用于注入一组值，不允许有相同的值。</set></li><li><map> 类型用于注入一组键值对，键和值都可以为任意类型。</map></li><li><props>类型用于注入一组键值对，键和值都只能为String类型。</props></li></ul><h3 id="31-什么是bean装配？"><a href="#31-什么是bean装配？" class="headerlink" title="31. 什么是bean装配？"></a>31. 什么是bean装配？</h3><p>装配，或bean 装配是指在Spring 容器中把bean组装到一起，前提是容器需要知道bean的依赖关系，如何通过依赖注入来把它们装配到一起。</p><h3 id="32-什么是bean的自动装配？"><a href="#32-什么是bean的自动装配？" class="headerlink" title="32. 什么是bean的自动装配？"></a>32. 什么是bean的自动装配？</h3><p>Spring 容器能够自动装配相互合作的bean，这意味着容器不需要<constructor-arg>和<property>配置，能通过Bean工厂自动处理bean之间的协作。</property></constructor-arg></p><h3 id="33-解释不同方式的自动装配"><a href="#33-解释不同方式的自动装配" class="headerlink" title="33. 解释不同方式的自动装配"></a>33. 解释不同方式的自动装配</h3><p>有五种自动装配的方式，可以用来指导Spring容器用自动装配方式来进行依赖注入</p><ul><li>no：默认的方式是不进行自动装配，通过显式设置ref 属性来进行装配。</li><li>byName：通过参数名 自动装配，Spring容器在配置文件中发现bean的autowire属性被设置成byname，之后容器试图匹配、装配和该bean的属性具有相同名字的bean。</li><li>byType：通过参数类型自动装配，Spring容器在配置文件中发现bean的autowire属性被设置成byType，之后容器试图匹配、装配和该bean的属性具有相同类型的bean。如果有多个bean符合条件，则抛出错误。</li><li>constructor：这个方式类似于byType， 但是要提供给构造器参数，如果没有确定的带参数的构造器参数类型，将会抛出异常。</li><li>autodetect：首先尝试使用constructor来自动装配，如果无法工作，则使用byType方式。</li></ul><h3 id="34-自动装配有哪些局限性？"><a href="#34-自动装配有哪些局限性？" class="headerlink" title="34.自动装配有哪些局限性？"></a>34.自动装配有哪些局限性？</h3><p>自动装配的局限性是：</p><ul><li>重写：你仍需用 <constructor-arg>和 <property> 配置来定义依赖，意味着总要重写自动装配。</property></constructor-arg></li><li>基本数据类型：你不能自动装配简单的属性，如基本数据类型，String字符串，和类。</li><li>模糊特性：自动装配不如显式装配精确，如果有可能，建议使用显式装配。</li></ul><h3 id="35-你可以在Spring中注入一个null-和一个空字符串吗？"><a href="#35-你可以在Spring中注入一个null-和一个空字符串吗？" class="headerlink" title="35. 你可以在Spring中注入一个null 和一个空字符串吗？"></a>35. 你可以在Spring中注入一个null 和一个空字符串吗？</h3><p>可以。</p><h1 id="Spring注解"><a href="#Spring注解" class="headerlink" title="Spring注解"></a>Spring注解</h1><h3 id="36-什么是基于Java的Spring注解配置-给一些注解的例子"><a href="#36-什么是基于Java的Spring注解配置-给一些注解的例子" class="headerlink" title="36. 什么是基于Java的Spring注解配置? 给一些注解的例子"></a>36. 什么是基于Java的Spring注解配置? 给一些注解的例子</h3><p>基于Java的配置，允许你在少量的Java注解的帮助下，进行你的大部分Spring配置而非通过XML文件。<br>以@Configuration 注解为例，它用来标记类可以当做一个bean的定义，被Spring IOC容器使用。另一个例子是@Bean注解，它表示此方法将要返回一个对象，作为一个bean注册进Spring应用上下文。</p><h3 id="37-什么是基于注解的容器配置？"><a href="#37-什么是基于注解的容器配置？" class="headerlink" title="37. 什么是基于注解的容器配置？"></a>37. 什么是基于注解的容器配置？</h3><p>相对于XML文件，注解型的配置依赖于通过字节码元数据装配组件，而非尖括号的声明。<br>开发者通过在相应的类，方法或属性上使用注解的方式，直接组件类中进行配置，而不是使用xml表述bean的装配关系。</p><h3 id="38-怎样开启注解装配？"><a href="#38-怎样开启注解装配？" class="headerlink" title="38. 怎样开启注解装配？"></a>38. 怎样开启注解装配？</h3><p>注解装配在默认情况下是不开启的，为了使用注解装配，我们必须在Spring配置文件中配置 <a href="context:annotation-config/">context:annotation-config/</a>元素。</p><h3 id="39-Required-注解"><a href="#39-Required-注解" class="headerlink" title="39. @Required  注解"></a>39. @Required  注解</h3><p>这个注解表明bean的属性必须在配置的时候设置，通过一个bean定义的显式的属性值或通过自动装配，若@Required注解的bean属性未被设置，容器将抛出BeanInitializationException。</p><h3 id="40-Autowired-注解"><a href="#40-Autowired-注解" class="headerlink" title="40. @Autowired 注解"></a>40. @Autowired 注解</h3><p>@Autowired 注解提供了更细粒度的控制，包括在何处以及如何完成自动装配。它的用法和@Required一样，修饰setter方法、构造器、属性或者具有任意名称和/或多个参数的PN方法。</p><h3 id="41-Qualifier-注解"><a href="#41-Qualifier-注解" class="headerlink" title="41. @Qualifier 注解"></a>41. @Qualifier 注解</h3><p>当有多个相同类型的bean却只有一个需要自动装配时，将@Qualifier 注解和@Autowire 注解结合使用以消除这种混淆，指定需要装配的确切的bean。</p><h1 id="Spring数据访问"><a href="#Spring数据访问" class="headerlink" title="Spring数据访问"></a>Spring数据访问</h1><h3 id="42-在Spring框架中如何更有效地使用JDBC？"><a href="#42-在Spring框架中如何更有效地使用JDBC？" class="headerlink" title="42.在Spring框架中如何更有效地使用JDBC？"></a>42.在Spring框架中如何更有效地使用JDBC？</h3><p>使用SpringJDBC 框架，资源管理和错误处理的代价都会被减轻。所以开发者只需写statements 和 queries从数据存取数据，JDBC也可以在Spring框架提供的模板类的帮助下更有效地被使用，这个模板叫JdbcTemplate （例子见这里here）</p><h3 id="43-JdbcTemplate"><a href="#43-JdbcTemplate" class="headerlink" title="43. JdbcTemplate"></a>43. JdbcTemplate</h3><p>JdbcTemplate 类提供了很多便利的方法解决诸如把数据库数据转变成基本数据类型或对象，执行写好的或可调用的数据库操作语句，提供自定义的数据错误处理。</p><h3 id="44-Spring对DAO的支持"><a href="#44-Spring对DAO的支持" class="headerlink" title="44. Spring对DAO的支持"></a>44. Spring对DAO的支持</h3><p>Spring对数据访问对象（DAO）的支持旨在简化它和数据访问技术如JDBC，Hibernate or JDO 结合使用。这使我们可以方便切换持久层。编码时也不用担心会捕获每种技术特有的异常。</p><h3 id="45-使用Spring通过什么方式访问Hibernate？"><a href="#45-使用Spring通过什么方式访问Hibernate？" class="headerlink" title="45. 使用Spring通过什么方式访问Hibernate？"></a>45. 使用Spring通过什么方式访问Hibernate？</h3><p>在Spring中有两种方式访问Hibernate：</p><ul><li>控制反转  Hibernate Template和 Callback</li><li>继承 HibernateDAOSupport提供一个AOP 拦截器</li></ul><h3 id="46-Spring支持的ORM"><a href="#46-Spring支持的ORM" class="headerlink" title="46. Spring支持的ORM"></a>46. Spring支持的ORM</h3><ul><li>Spring支持以下ORM：</li><li>Hibernate</li><li>iBatis</li><li>JPA (Java Persistence API)</li><li>TopLink</li><li>JDO (Java Data Objects)</li><li>OJB</li></ul><h3 id="47-如何通过HibernateDaoSupport将Spring和Hibernate结合起来？"><a href="#47-如何通过HibernateDaoSupport将Spring和Hibernate结合起来？" class="headerlink" title="47.如何通过HibernateDaoSupport将Spring和Hibernate结合起来？"></a>47.如何通过HibernateDaoSupport将Spring和Hibernate结合起来？</h3><p>用Spring的 SessionFactory 调用 LocalSessionFactory。集成过程分三步：</p><ul><li>配置the Hibernate SessionFactory</li><li>继承HibernateDaoSupport实现一个DAO</li><li>在AOP支持的事务中装配</li></ul><h3 id="48-Spring支持的事务管理类型"><a href="#48-Spring支持的事务管理类型" class="headerlink" title="48. Spring支持的事务管理类型"></a>48. Spring支持的事务管理类型</h3><p>Spring支持两种类型的事务管理：</p><ul><li>编程式事务管理：这意味你通过编程的方式管理事务，给你带来极大的灵活性，但是难维护。</li><li>声明式事务管理：这意味着你可以将业务代码和事务管理分离，你只需用注解和XML配置来管理事务。</li></ul><h3 id="49-Spring框架的事务管理有哪些优点？"><a href="#49-Spring框架的事务管理有哪些优点？" class="headerlink" title="49. Spring框架的事务管理有哪些优点？"></a>49. Spring框架的事务管理有哪些优点？</h3><ul><li>它为不同的事务API  如 JTA，JDBC，Hibernate，JPA 和JDO，提供一个不变的编程模式。</li><li>它为编程式事务管理提供了一套简单的API而不是一些复杂的事务API如</li><li>它支持声明式事务管理。</li><li>它和Spring各种数据访问抽象层很好得集成。</li></ul><h3 id="50-你更倾向用那种事务管理类型？"><a href="#50-你更倾向用那种事务管理类型？" class="headerlink" title="50. 你更倾向用那种事务管理类型？"></a>50. 你更倾向用那种事务管理类型？</h3><p>大多数Spring框架的用户选择声明式事务管理，因为它对应用代码的影响最小，因此更符合一个无侵入的轻量级容器的思想。声明式事务管理要优于编程式事务管理，虽然比编程式事务管理（这种方式允许你通过代码控制事务）少了一点灵活性。</p><h1 id="Spring面向切面编程（AOP）"><a href="#Spring面向切面编程（AOP）" class="headerlink" title="Spring面向切面编程（AOP）"></a>Spring面向切面编程（AOP）</h1><h3 id="51-解释AOP"><a href="#51-解释AOP" class="headerlink" title="51.  解释AOP"></a>51.  解释AOP</h3><p>面向切面的编程，或AOP， 是一种编程技术，允许程序模块化横向切割关注点，或横切典型的责任划分，如日志和事务管理。</p><h3 id="52-Aspect-切面"><a href="#52-Aspect-切面" class="headerlink" title="52. Aspect 切面"></a>52. Aspect 切面</h3><p>AOP核心就是切面，它将多个类的通用行为封装成可重用的模块，该模块含有一组API提供横切功能。比如，一个日志模块可以被称作日志的AOP切面。根据需求的不同，一个应用程序可以有若干切面。在Spring AOP中，切面通过带有@Aspect注解的类实现。</p><h3 id="52-在Spring-AOP-中，关注点和横切关注的区别是什么？"><a href="#52-在Spring-AOP-中，关注点和横切关注的区别是什么？" class="headerlink" title="52. 在Spring AOP 中，关注点和横切关注的区别是什么？"></a>52. 在Spring AOP 中，关注点和横切关注的区别是什么？</h3><p>关注点是应用中一个模块的行为，一个关注点可能会被定义成一个我们想实现的一个功能。<br>横切关注点是一个关注点，此关注点是整个应用都会使用的功能，并影响整个应用，比如日志，安全和数据传输，几乎应用的每个模块都需要的功能。因此这些都属于横切关注点。</p><h3 id="54-连接点"><a href="#54-连接点" class="headerlink" title="54. 连接点"></a>54. 连接点</h3><p>连接点代表一个应用程序的某个位置，在这个位置我们可以插入一个AOP切面，它实际上是个应用程序执行Spring AOP的位置。</p><h3 id="55-通知"><a href="#55-通知" class="headerlink" title="55. 通知"></a>55. 通知</h3><p>通知是个在方法执行前或执行后要做的动作，实际上是程序执行时要通过SpringAOP框架触发的代码段。<br>Spring切面可以应用五种类型的通知：</p><ul><li>before：前置通知，在一个方法执行前被调用</li><li>after：在方法执行之后调用的通知，无论方法执行是否成功</li><li>after-returning：仅当方法成功完成后执行的通知</li><li>after-throwing：在方法抛出异常退出时执行的通知</li><li>around：在方法执行之前和之后调用的通知</li></ul><h3 id="56-切点"><a href="#56-切点" class="headerlink" title="56. 切点"></a>56. 切点</h3><p>切入点是一个或一组连接点，通知将在这些位置执行。可以通过表达式或匹配的方式指明切入点。</p><h3 id="57-什么是引入？"><a href="#57-什么是引入？" class="headerlink" title="57. 什么是引入？"></a>57. 什么是引入？</h3><p>引入允许我们在已存在的类中增加新的方法和属性。</p><h3 id="58-什么是目标对象？"><a href="#58-什么是目标对象？" class="headerlink" title="58. 什么是目标对象？"></a>58. 什么是目标对象？</h3><p>被一个或者多个切面所通知的对象。它通常是一个代理对象。也指被通知（advised）对象。</p><h3 id="59-什么是代理？"><a href="#59-什么是代理？" class="headerlink" title="59. 什么是代理？"></a>59. 什么是代理？</h3><p>代理是通知目标对象后创建的对象。从客户端的角度看，代理对象和目标对象是一样的。</p><h3 id="60-有几种不同类型的自动代理？"><a href="#60-有几种不同类型的自动代理？" class="headerlink" title="60. 有几种不同类型的自动代理？"></a>60. 有几种不同类型的自动代理？</h3><ul><li>BeanNameAutoProxyCreator</li><li>DefaultAdvisorAutoProxyCreator</li><li>Metadata autoproxying</li></ul><h3 id="61-什么是织入。什么是织入应用的不同点？"><a href="#61-什么是织入。什么是织入应用的不同点？" class="headerlink" title="61. 什么是织入。什么是织入应用的不同点？"></a>61. 什么是织入。什么是织入应用的不同点？</h3><p>织入是将切面和到其他应用类型或对象连接或创建一个被通知对象的过程。<br>织入可以在编译时，加载时，或运行时完成。</p><h3 id="62-解释基于XML-Schema方式的切面实现"><a href="#62-解释基于XML-Schema方式的切面实现" class="headerlink" title="62. 解释基于XML Schema方式的切面实现"></a>62. 解释基于XML Schema方式的切面实现</h3><p>在这种情况下，切面由常规类以及基于XML的配置实现。</p><h3 id="63-解释基于注解的切面实现"><a href="#63-解释基于注解的切面实现" class="headerlink" title="63. 解释基于注解的切面实现"></a>63. 解释基于注解的切面实现</h3><p>在这种情况下(基于@AspectJ的实现)，涉及到的切面声明的风格与带有java5标注的普通java类一致。</p><h1 id="Spring-的MVC"><a href="#Spring-的MVC" class="headerlink" title="Spring 的MVC"></a>Spring 的MVC</h1><h3 id="64-什么是Spring的MVC框架？"><a href="#64-什么是Spring的MVC框架？" class="headerlink" title="64. 什么是Spring的MVC框架？"></a>64. 什么是Spring的MVC框架？</h3><p>Spring 配备构建Web 应用的全功能MVC框架。Spring可以很便捷地和其他MVC框架集成，如Struts，Spring 的MVC框架用控制反转把业务对象和控制逻辑清晰地隔离。它也允许以声明的方式把请求参数和业务对象绑定。</p><h3 id="65-DispatcherServlet"><a href="#65-DispatcherServlet" class="headerlink" title="65. DispatcherServlet"></a>65. DispatcherServlet</h3><p>Spring的MVC框架是围绕DispatcherServlet来设计的，它用来处理所有的HTTP请求和响应。</p><h3 id="66-WebApplicationContext"><a href="#66-WebApplicationContext" class="headerlink" title="66. WebApplicationContext"></a>66. WebApplicationContext</h3><p>WebApplicationContext 继承了ApplicationContext  并增加了一些WEB应用必备的特有功能，它不同于一般的ApplicationContext ，因为它能处理主题，并找到被关联的servlet。</p><h3 id="67-什么是Spring-MVC框架的控制器？"><a href="#67-什么是Spring-MVC框架的控制器？" class="headerlink" title="67. 什么是Spring MVC框架的控制器？"></a>67. 什么是Spring MVC框架的控制器？</h3><p>控制器提供一个访问应用程序的行为，此行为通常通过服务接口实现。控制器解析用户输入并将其转换为一个由视图呈现给用户的模型。Spring用一个非常抽象的方式实现了一个控制层，允许用户创建多种用途的控制器。</p><h3 id="68-Controller-注解"><a href="#68-Controller-注解" class="headerlink" title="68. @Controller 注解"></a>68. @Controller 注解</h3><p>该注解表明该类扮演控制器的角色，Spring不需要你继承任何其他控制器基类或引用Servlet API。</p><h3 id="69-RequestMapping-注解"><a href="#69-RequestMapping-注解" class="headerlink" title="69. @RequestMapping 注解"></a>69. @RequestMapping 注解</h3><p>该注解是用来映射一个URL到一个类或一个特定的方处理法上。</p></body></html>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Dubbo重启一年，尚能饭否？</title>
      <link href="/2019/01/23/Dubbo%E9%87%8D%E5%90%AF%E4%B8%80%E5%B9%B4%EF%BC%8C%E5%B0%9A%E8%83%BD%E9%A5%AD%E5%90%A6%EF%BC%9F/"/>
      <url>/2019/01/23/Dubbo%E9%87%8D%E5%90%AF%E4%B8%80%E5%B9%B4%EF%BC%8C%E5%B0%9A%E8%83%BD%E9%A5%AD%E5%90%A6%EF%BC%9F/</url>
      
        <content type="html"><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script></head><body><p><a href="https://i.imgur.com/WDop93m.png" data-fancybox="group" data-caption="来源：开源中国 | 嘉宾：北纬" class="fancybox"><img alt="来源：开源中国 | 嘉宾：北纬" title="来源：开源中国 | 嘉宾：北纬" data-src="https://i.imgur.com/WDop93m.png" class="lazyload"></a></p><p>本文来源：开源中国；嘉宾介绍：北纬，开源中国社区昵称：beiwei30，Apache Dubbo™ PPMC，阿里巴巴高级技术专家，专注于大规模分布式系统、RPC 框架和微服务领域。</p><p>Dubbo 去年宣布重启维护，到现在已经一年有余，当初重启的消息在开发者中引起了强烈的反响，很多人看好，也有人持怀疑的态度，甚至到今天，还是有不少人认为 Dubbo 早已死去，回不了魂。</p><p>质疑声中，Dubbo 将首要目标定位于重新激活社区，赢回开发者的信任。在这个过程中，Dubbo 发布了多个版本，并逐渐从一个 RPC 框架向微服务生态系统转变；团队 “把 Dubbo 打造成一个国际化与现代化项目”的探索目前来看也有所呼应，比如年初 Dubbo 入驻 Apache 软件基金会孵化器，比如它在特性中提供了更加全面的异步支持；而目前 GitHub 上的 star 数也已经有 2.4w+。</p><p>期间还有 Dubbo 3.0 的消息放出，3.0 将会是一个变革的版本，它去一切阻塞的变化甚至将影响到阿里 10 多年积累的中间件。</p><p>不难看出，目前 Dubbo 还活着。近期 Dubbo 将发布重启后的第一个里程碑版本 2.7.0，而且还预告了项目即将从 Apache 软件基金会毕业，借此机会，我们采访了 Dubbo 的项目负责人北纬，请他为开发者梳理了重启维护这一年多 Dubbo 的进展，并分享了接下来的计划。</p><h3 id="开源中国："><a href="#开源中国：" class="headerlink" title="开源中国："></a>开源中国：</h3><p>2.7.0 新版本最值得关注的地方在哪里?</p><h3 id="北纬："><a href="#北纬：" class="headerlink" title="北纬："></a>北纬：</h3><p>Dubbo 2.7.0 添加了社区呼声很高的异步化支持、以及注册中心与配置中心分离这两个特性。</p><p>与 2.6 及以前的版本相比，异步化支持不再局限于基于 Future 接口的异步，也不再仅仅局限于只能在客户端异步。具体来说，Dubbo 2.7.0 版本全面拥抱 JDK8，在客户端开始支持基于 CompletableFuture 的异步编程范式，在服务端支持基于 AsyncContext 的异步模型。</p><p>2.6 及以前的版本，元数据全部存储在 URL 上，配置信息和注册信息只能存储在注册中心上，注册中心的容量和扩展成为瓶颈。这个限制在使用 ZooKeeper 作为注册中心的大规模 Dubbo 应用场景下尤为突出。</p><p>在 2.7.0 中，通过对 URL 的改造，将注册中心拆分成了三个中心，分别是注册中心、配置中心和元数据中心，三者各司其责，不仅有效地解决了上述容量问题，而且很好地适应了微服务的技术架构，用户可以开始自由选择适合自己场景的注册中心和配置中心。</p><p>2.7.0 将内建支持 ZooKeeper、Nacos 和 Apollo 等第三方注册和配置中心，在后续的版本中，还会进一步提供对 Consul 和 etcd 的支持。另外，通过引入一个全新的元数据中心，将与注册配置无关的服务信息单独存储，除了减轻配置中心与注册中心的工作压力之外，还为将来更丰富的服务治理打下基础。未来，Dubbo 会基于元数据中心提供服务测试、服务 Mock 以及服务 API 管理等特性。</p><p>针对三个中心的分离，Dubbo 还会配套发布全新设计的 Dubbo Ops 控制台。</p><p>另外，2.7.x 会是 Dubbo 在 Apache 软件基金会毕业的版本，安装包包名正式切换到了 org.apache.dubbo，为了保证向前的兼容性，我们还在这个版本中提供了 com.alibaba.dubbo 的兼容包。</p><h3 id="开源中国：-1"><a href="#开源中国：-1" class="headerlink" title="开源中国："></a>开源中国：</h3><p>多语言支持现在看只有一个 PHP 版本对齐得比较完善，Python 和 Node 版本是提供了一个客户端去配合实现功能。在语言支持这方面，现在进展是怎么样，有什么计划？</p><h3 id="北纬：-1"><a href="#北纬：-1" class="headerlink" title="北纬："></a>北纬：</h3><p>除了 PHP 版本对齐得比较好以外，Node 版本也值得推荐。目前生态中的 Node 实现有两个版本，分别是千米网贡献的 dubbo2.js 和蚂蚁金服 egg 团队贡献的 egg-dubbo-rpc。这些语言的实现都是在生产系统里验证过的，其中 egg 的实现既支持客户端也支持服务端。</p><p>除了 PHP 和 Node，Dubbo 还提供了 Go 和 Python 支持。其中 Python 版本支持客户端与服务端互通，走的是 json-rpc 协议，Go 版本将支持原生 Dubbo 协议，并计划同时提供客户端和服务端。</p><p>需要强调的是，除了多语言客户端的支持，Dubbo 基于标准的 Java REST API——JAX-RS 2.0实现了 REST 调用支持，具体的使用方法可以参照这里：</p><p><a href="http://dubbo.apache.org/zh-cn/docs/user/references/protocol/rest.html" target="_blank" rel="noopener">http://dubbo.apache.org/zh-cn/docs/user/references/protocol/rest.html</a></p><p>总的来说，相比于服务端，客户端是 Dubbo 多语言支持的重点。从实用的角度来讲，社区大量的诉求集中在如何用多语言调用后台的 Dubbo 服务。当然，目前多语言的支持还处于起步阶段，一方面是主流语言覆盖不够，比如 .NET 还没有可用版本，另一方面是因为各个语言的成熟度参差不齐，社区投入不够。</p><p>虽然 Service Mesh 的方案在这两年发展得如火如荼，但我们也发现原生多语言客户端在大量的场景中还会持续存在很长的时间，因此我们十分重视原生多语言客户端的建设。后面总体的思路是定义 Dubbo 原生客户端最小功能集，以及成熟度评估标准，持续运营社区，吸引更多的多语言志愿者加入。</p><h3 id="开源中国：-2"><a href="#开源中国：-2" class="headerlink" title="开源中国："></a>开源中国：</h3><p>重启维护这一年来主要的工作是关于哪些方面的？实质进展如何？</p><h3 id="北纬：-2"><a href="#北纬：-2" class="headerlink" title="北纬："></a>北纬：</h3><p>说到这个，其实 Dubbo 最近才刚刚在开源中国发起的“最受欢迎中国开源软件评选”中取得了第三名（Java 类第一名）的好成绩，感谢开发者们对 Dubbo 的信任，也感谢开源中国发起的这项活动。</p><p>自重启维护以来，到 2.7.0 发布，Dubbo 已经累计发布了 13 个版本。在这个过程中从零开始搭建 Dubbo EcoSystem，目前生态初具规模：</p><p>逐步提供了 Node、Python、Go 和 PHP 语言客户端实现、开发工具及配套(Initializr、Benchmark、IDE plugin) 与 samples；</p><p>丰富了核心 SPI 的扩展实现，包括 Hessian、Avro、Protobuf、HTTP/2、Thrift、JMS、etcd3、Sentinel、Nacos、Apollo、K8S 与 Docker；</p><p>改造并重新实现了 Dubbo Ops；</p><p>孵化了 27 个子项目；</p><p>同时，不少微服务开源项目开始主动对接 Dubbo，包括 Zipkin、spring-cloud-slueth、SkyWalking、Pinpoint 和 Jboot 等。</p><p>社区方面，GitHub 上 star 数已经突破 2.3w，增长 150%，在 GitHub Java 项目中排名前十，目前已有 25 位 PPMC 和 committer、162 位 contributor (自重启开源以来增长了 250%），共举办了 5 场 meetup，现场参与人数 2300+，线上参与人数 35000+。</p><p>下边 star 的增长数据可以大致看出 Dubbo 的成长：<br><a href="https://i.imgur.com/yLLZDDa.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.imgur.com/yLLZDDa.png" class="lazyload"></a></p><p>目前 Dubbo 正在 Apache 软件基金会进行孵化，预计在未来的几个月将毕业成为顶级项目。</p><p>当然，这些并不是炫耀 Dubbo 重启开源后所取得的成绩，而是说在社区的共同努力下，Dubbo 正发挥着其更大的技术价值，让成千上万的开发者收益，这也是 Dubbo 团队成就感的最大来源。</p><p>我们除了感激社区的信赖之外，心中也充满了敬畏。因为 Dubbo 在国内的用户之多，已远超我们的想象。在“谁在使用 Dubbo”的调研中，目前已有 124 名用户提供了自己的使用场景，其中不乏著名的互联网公司和大型国企。我们相信这里收集的只是国内用户中的一小部分，只有更加努力，不断让 Dubbo 变得更好，才能不辜负使用者对 Dubbo 的信赖。</p><p>谁在使用 Dubbo：</p><p><a href="https://github.com/apache/incubator-dubbo/issues/1012" target="_blank" rel="noopener">https://github.com/apache/incubator-dubbo/issues/1012</a></p><p>过去这一年，团队的目标是重新激活社区和生态。通过线下开发者沙龙、开发者访谈、社区的 issues、pull request 以及邮件组的互动等方式来倾听社区的声音，同时，我们把 Dubbo 捐献给 Apache 进行孵化，积极发展外部的 committer 和 PPMC member，严格按照 Apache 之道来运作。通过这些努力，重新赢得了社区的信任。</p><p>接下来我们会更加关注核心能力的演进，2.7.0 版本是一个里程碑。这个版本准备了与微服务及云原生环境中基础设施对接的技术基础，未来，Dubbo 将会提供对应的适配，使得 Dubbo 可以更好地融入到微服务和云原生体系中去。</p><p>这里也顺便预告一下，近期我们 2019 年的第一场 meetup 也快来了，欢迎关注：</p><p><a href="http://t.cn/Ebyekd6。" target="_blank" rel="noopener">http://t.cn/Ebyekd6。</a></p><h3 id="开源中国：-3"><a href="#开源中国：-3" class="headerlink" title="开源中国："></a>开源中国：</h3><p>去年年初透露的 3.0 目前是个什么情况？当初甚至说 3.0 去一切阻塞的变化将影响到阿里 10 年来积累的中间件，那现在具体情况如何？（2.7 中提到的实现全异步编程跟这个去阻塞有什么不同？）另一方面，3.0 中的 Service Mesh 建设现在如何了？其它方面呢？</p><h3 id="北纬：-3"><a href="#北纬：-3" class="headerlink" title="北纬："></a>北纬：</h3><p>过去一年多工作的重心是激活社区和生态。目前，我们已经开始把工作的重心逐步转向核心建设，目标就是提供现代化的技术核心，解决好微服务、容器化与云原生等问题。已经发布的 2.7.0 是第一个里程碑，3.0 同步进入开发阶段。</p><p>这里要指出的是，3.0 中规划的去阻塞和 2.7 中提供的异步是两个层面的特性。2.7 中的异步是建立在传统 RPC 中 request – response 会话模型上的，而 3.0 中的异步将会从通讯协议层面由下向上构建，关注的是跨进程、全链路的异步问题。</p><p>通过底层协议开始支持 streaming 方式，不单单可以支持多种会话模型，还可以在协议层面开始支持反压、限流等特性，使得整个分布式体系更具有弹性。所以，2.7 关注的异步更局限在点对点的异步（一个 consumer 调用一个 provider），而 3.0 关注的异步化，宽度上则关注整个调用链上的异步，高度上则向上又可以包装成 Rx 的编程模型。</p><p>有趣的是，Spring 5.0 发布了对 Flux 的支持，随后开始解决跨进程的异步问题，有兴趣的开发者可以关注一下目前 RSocket 的发展情况。</p><p>3.0 中受到关注的还有 Dubbo Mesh 的发展。我们希望 Dubbo Mesh 未来可以进入 Envoy 社区，目前 Dubbo 协议已经被 Envoy 支持。当然，Dubbo Mesh 离真正可用还有很长一段距离，其在选址、负载均衡和服务治理方面的工作需要继续在数据面建设，另外，控制面板的建设在社区也没有提上日程。</p><p>最后值得一提的是，Dubbo 3.0 定下了内外融合的策略，也就是说 3.0 的核心最终会在阿里巴巴的生产系统中部署，相信通过大流量、大规模的考验，Dubbo 用户可以获得一个性能、稳定、服务治理实践各方面俱佳的核心，用户在生产系统中采用 3.0 也会更加放心。</p><h3 id="开源中国：-4"><a href="#开源中国：-4" class="headerlink" title="开源中国："></a>开源中国：</h3><p>接下来 Dubbo 将会从 Apache 孵化器毕业，除了有个名誉，具体对项目之后的维护、发展有什么影响？</p><h3 id="北纬：-4"><a href="#北纬：-4" class="headerlink" title="北纬："></a>北纬：</h3><p>Apache 孵化器主席 Justin Mclean 每次来中国都会分享什么是“Apache 之道”，它提倡公益使命、实用主义、社区胜于代码、公开透明与共识政策和任人唯贤，具体可以参照这篇 Apache 孵化器主席 Justin Mclean 的分享：</p><p><a href="https://mp.weixin.qq.com/s/ULea2-uDEG5HRbRewuZjIg" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/ULea2-uDEG5HRbRewuZjIg</a></p><p>Dubbo 进入 Apache 进行孵化，目的就是遵循 Apache 之道来规范化地发展 Dubbo。同时，通过孵化，Dubbo 团队的所有成员，对于如何运营好一个开源项目，建设好一个开源社区有了更深的体验，也就是说，孵化过程就是 Dubbo 团队自我学习和进阶的过程。</p><p>从孵化器毕业是一种荣誉，但这并不是结束，而是另一种开始。这有点像求学，毕业并不意味着学习上的中断，而是发挥更大社会价值的开始。毕业也更像是一个成人礼，意味着 Dubbo 团队已经符合 Apache 对一个成熟开源项目的要求，并开始具备独立发展的能力。</p><p>Dubbo 自从加入 Apache 的那一天起，就不再属于阿里巴巴。Dubbo 变得更好，是因为已经有越来越多来自社区的开发者参与到 Dubbo 的共建中。例如，Dubbo 目前的 162 位 contributor 中，有接近 90% 都是来自非阿里巴巴的开发者，这个比例在未来应该会更高。</p><h3 id="开源中国：-5"><a href="#开源中国：-5" class="headerlink" title="开源中国："></a>开源中国：</h3><p>最近 Netflix 官方表示不再继续开发 Hystrix，用户被迫迁移，前一阵子 Netflix 也同样宣布了 Eureka 2.0 不再维护。而实际上，Spring 官方近期也表明 Netflix 相关项目进入维护模式（Maintenance Mode），即 Spring Cloud 团队不会再向 Netflix 模块添加新功能。这让开发者对 Netflix 产生质疑，有些人觉得 Spring Cloud 中的 Netflix 组件实现再用下去会不会有什么风险，不少开发者表示要另寻高明。而此时阿里正在建设的 Dubbo EcoSystem 与开源不久的 Spring Cloud Alibaba 正好进入大家的视野。但是开发者也在观望，不知道 Dubbo EcoSystem 与 Spring Cloud Alibaba 是否可以及时地接过大旗。</p><h3 id="北纬：-5"><a href="#北纬：-5" class="headerlink" title="北纬："></a>北纬：</h3><p>正如大家所看到的，今年发生在 Netflix 上的事情，对 Spring 生态产生了不小的影响，但作为开发者我们应该感谢 Netflix 在过去以及现在正在做的对开源的贡献。</p><p>做开源的技术人都有一种技术情怀，但仅凭情怀，很难将开源坚持下去，最终还是要回归到技术和商业的本质关系，即技术可以推动商业发展，但也需要商业来赋能技术前行。如果一家企业的战略主航道上，技术并不是其发展方向之一，那么其开源项目要维持下去的难度就很大。因此，在开源领域，我更看好技术服务型的企业，即对外输出技术和相关服务是企业的主营业务之一。</p><p>阿里巴巴在服务化改造和微服务领域实践多年，几乎涵盖了微服务技术栈的所有产品和组件，例如 Spring Cloud Alibaba 满足了在 Spring Cloud 体系中使用阿里巴巴技术栈的需求，Nacos 提供了注册中心和配置中心方面的功能，Sentinel 则解决了因高流量等访问行为带来的架构可靠性的问题。另外，作为已经成为 Apache 顶级项目的 RocketMQ，近期发布的首个社区子项目 RocketMQ-Spring-Boot，实现了 Spring 体系中通过 RocketMQ 进行分布式事务的回查和事务消息的发送。</p><p>其实，在微服务开发的领域，除了 RPC 和服务注册发现，开发者还需要更多的能力，例如 API 网关、分布式监控和分布式事务等，在这些方面由于没有事实上推荐的方案，开发者在调研和选型的过程通常都比较痛苦，甚至会遇到个别开源项目不再继续维护的窘境。</p><p>如何通过 Dubbo 把这些微服务领域的其它能力整合起来，形成一套完整的解决方案，成为一个亟待解决的问题。</p><p>像前边提到的，我们计划并已经着手围绕 Dubbo 打造一个微服务生态，它包含一系列开源项目，涵盖微服务开发中的各个方面。这里面的项目都是经过 Dubbo 社区共同评估过，和 Dubbo 进行了高度集成的，在生产中得到过验证的项目，且具有兼容性保障。这些项目不仅来自阿里巴巴自己的开源项目，也来自其它公司或社区。我们把它称之为 Apache Dubbo EcoSystem，希望通过这个生态帮助使用者更轻松、更快速地搭建微服务。</p><blockquote><p>本文来源：<a href="http://www.oschina.net/question/3820517_2302528" target="_blank" rel="noopener">www.oschina.net/question/3820517_2302528</a></p></blockquote></body></html>]]></content>
      
      
      <categories>
          
          <category> 分布式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 其他 </tag>
            
            <tag> 高并发 </tag>
            
            <tag> 分布式 </tag>
            
            <tag> dubbo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Anima 是一款牛逼的数据库框架</title>
      <link href="/2019/01/23/Anima%20%E6%98%AF%E4%B8%80%E6%AC%BE%E7%89%9B%E9%80%BC%E7%9A%84%E6%95%B0%E6%8D%AE%E5%BA%93%E6%A1%86%E6%9E%B6/"/>
      <url>/2019/01/23/Anima%20%E6%98%AF%E4%B8%80%E6%AC%BE%E7%89%9B%E9%80%BC%E7%9A%84%E6%95%B0%E6%8D%AE%E5%BA%93%E6%A1%86%E6%9E%B6/</url>
      
        <content type="html"><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script></head><body><h1 id="spring-boot-anima"><a href="#spring-boot-anima" class="headerlink" title="spring-boot-anima"></a>spring-boot-anima</h1><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>Anima 是一款操作数据库的框架，它支持MySQL、SQLite、H2、Oracle、SqlServer等数据库，非常方便的对数据库进行操作。</p><p><a href="https://github.com/biezhi/anima/wiki/%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8" target="_blank" rel="noopener">快速入门</a></p><p><a href="https://github.com/biezhi/anima/wiki/%E5%88%9B%E5%BB%BA-Model" target="_blank" rel="noopener">创建 Model</a></p><p><a href="https://github.com/biezhi/anima/wiki/%E6%9F%A5%E8%AF%A2%E6%95%B0%E6%8D%AE" target="_blank" rel="noopener">查询数据</a></p><p><a href="https://github.com/biezhi/anima/wiki/%E4%BF%9D%E5%AD%98%E6%95%B0%E6%8D%AE" target="_blank" rel="noopener">保存数据</a></p><p><a href="https://github.com/biezhi/anima/wiki/%E6%9B%B4%E6%96%B0%E5%92%8C%E5%88%A0%E9%99%A4" target="_blank" rel="noopener">更新和删除</a></p><p><a href="https://github.com/biezhi/anima/wiki/%E4%BA%8B%E5%8A%A1%E6%93%8D%E4%BD%9C" target="_blank" rel="noopener">事务操作</a></p><p><a href="https://github.com/biezhi/anima/wiki/%E5%9C%A8-Spring-%E6%A1%86%E6%9E%B6%E4%B8%AD%E4%BD%BF%E7%94%A8" target="_blank" rel="noopener">在 Spring 框架中使用</a></p><p><a href="https://github.com/biezhi/anima/wiki/%E9%AB%98%E7%BA%A7%E7%94%A8%E6%B3%95" target="_blank" rel="noopener">高级用法</a></p><p>本例程是在spring boot的基础上集成Anima操作MySQL数据库，代码进行了简单的CRUD操作：</p><p>接口：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义实现类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> YI</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018-11-27 14:40:31</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IBaiKeService</span> </span>{</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据id查询数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Baike <span class="title">selectById</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过自定义sql查询</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">List<baike> <span class="title">selectListBySQL</span><span class="params">()</span></baike></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询所有数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">List<baike> <span class="title">selectListAll</span><span class="params">()</span></baike></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据条件查询，点赞数大于等于 good的数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> good 点赞数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">List<baike> <span class="title">selectListByGood</span><span class="params">(<span class="keyword">int</span> good)</span></baike></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> baike 百科数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">save</span><span class="params">(Baike baike)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 批量保存</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> baikes 百科数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">saveBatch</span><span class="params">(List<baike> baikes)</baike></span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更新</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> baike 百科数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(Baike baike)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据id删除</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">deleteById</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p>实现类：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义实现类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> YI</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018-11-27 14:40:31</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IBaiKeServiceImpl</span> <span class="keyword">implements</span> <span class="title">IBaiKeService</span> </span>{</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Baike <span class="title">selectById</span><span class="params">(<span class="keyword">int</span> id)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> select().from(Baike<span class="class">.<span class="keyword">class</span>).<span class="title">byId</span>(<span class="title">id</span>)</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">save</span><span class="params">(Baike baike)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> baike.save().asInt();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveBatch</span><span class="params">(List<baike> baikes)</baike></span> </span>{</span><br><span class="line">        Anima.saveBatch(baikes);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(Baike baike)</span> </span>{</span><br><span class="line">        baike.update();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteById</span><span class="params">(<span class="keyword">int</span> id)</span> </span>{</span><br><span class="line">        Anima.deleteById(Baike<span class="class">.<span class="keyword">class</span>, <span class="title">id</span>)</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List<baike> <span class="title">selectListBySQL</span><span class="params">()</span> </baike></span>{</span><br><span class="line">        return select().bySQL(Baike.class, "select * from baike limit ?", 3).all();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List<baike> <span class="title">selectListAll</span><span class="params">()</span> </baike></span>{</span><br><span class="line">        <span class="keyword">return</span> select().from(Baike<span class="class">.<span class="keyword">class</span>).<span class="title">all</span>()</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List<baike> <span class="title">selectListByGood</span><span class="params">(<span class="keyword">int</span> good)</span> </baike></span>{</span><br><span class="line">        return select().from(Baike.class).gte("age", good).all();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p>具体请看测试用例。</p><p>GitHub地址：<a href="https://github.com/HWYWL/spring-boot-2.x-examples/tree/master/spring-boot-anima" target="_blank" rel="noopener">https://github.com/HWYWL/spring-boot-2.x-examples/tree/master/spring-boot-anima</a></p><h3 id="问题建议"><a href="#问题建议" class="headerlink" title="问题建议"></a>问题建议</h3><ul><li>联系我的邮箱：<a href="mailto:ilovey_hwy@163.com">ilovey_hwy@163.com</a></li><li>我的博客：<a href="https://www.hwy.ac.cn" target="_blank" rel="noopener">https://www.hwy.ac.cn</a></li><li>GitHub：<a href="https://github.com/HWYWL" target="_blank" rel="noopener">https://github.com/HWYWL</a></li></ul></body></html>]]></content>
      
      
      <categories>
          
          <category> ORM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Anima </tag>
            
            <tag> ORM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java8中的Stream，一行代码，让集合操作飞起来！</title>
      <link href="/2019/01/13/Java8%E4%B8%AD%E7%9A%84Stream%EF%BC%8C%E4%B8%80%E8%A1%8C%E4%BB%A3%E7%A0%81%EF%BC%8C%E8%AE%A9%E9%9B%86%E5%90%88%E6%93%8D%E4%BD%9C%E9%A3%9E%E8%B5%B7%E6%9D%A5%EF%BC%81/"/>
      <url>/2019/01/13/Java8%E4%B8%AD%E7%9A%84Stream%EF%BC%8C%E4%B8%80%E8%A1%8C%E4%BB%A3%E7%A0%81%EF%BC%8C%E8%AE%A9%E9%9B%86%E5%90%88%E6%93%8D%E4%BD%9C%E9%A3%9E%E8%B5%B7%E6%9D%A5%EF%BC%81/</url>
      
        <content type="html"><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script></head><body><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>java8也出来好久了，接口默认方法，lambda表达式，函数式接口，Date API等特性还是有必要去了解一下。比如在项目中经常用到集合，遍历集合可以试下lambda表达式，经常还要对集合进行过滤和排序，Stream就派上用场了。用习惯了，不得不说真的很好用。</p><p>Stream作为java8的新特性，基于lambda表达式，是对集合对象功能的增强，它专注于对集合对象进行各种高效、便利的聚合操作或者大批量的数据操作，提高了编程效率和代码可读性。</p><p>Stream的原理：将要处理的元素看做一种流，流在管道中传输，并且可以在管道的节点上处理，包括过滤筛选、去重、排序、聚合等。元素流在管道中经过中间操作的处理，最后由最终操作得到前面处理的结果。</p><p>集合有两种方式生成流：</p><ul><li>stream() − 为集合创建串行流</li><li>parallelStream() - 为集合创建并行流</li></ul><p><a href="00A4764C88EB41819AAB9C696DCAF249" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="00A4764C88EB41819AAB9C696DCAF249" class="lazyload"></a></p><p>上图中是Stream类的类结构图，里面包含了大部分的中间和终止操作。</p><p>中间操作主要有以下方法（此类型方法返回的都是Stream）：map (mapToInt, flatMap 等)、 filter、 distinct、 sorted、 peek、 limit、 skip、 parallel、 sequential、 unordered</p><p>终止操作主要有以下方法：forEach、 forEachOrdered、 toArray、 reduce、 collect、 min、 max、 count、 anyMatch、 allMatch、 noneMatch、 findFirst、 findAny、 iterator</p><h2 id="举例说明"><a href="#举例说明" class="headerlink" title="举例说明"></a>举例说明</h2><p>首先为了说明Stream对对象集合的操作，新建一个Student类（学生类）,覆写了equals()和hashCode()方法</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span> </span>{}</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(Long id, String name, <span class="keyword">int</span> age, String address)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.address = address;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Student{"</span> +</span><br><span class="line">                <span class="string">"id="</span> + id +</span><br><span class="line">                <span class="string">", name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", age="</span> + age +</span><br><span class="line">                <span class="string">", address='"</span> + address + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">'}'</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span> == o) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="keyword">null</span> || getClass() != o.getClass()) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        Student student = (Student) o;</span><br><span class="line">        <span class="keyword">return</span> age == student.age &&</span><br><span class="line">                Objects.equals(id, student.id) &&</span><br><span class="line">                Objects.equals(name, student.name) &&</span><br><span class="line">                Objects.equals(address, student.address);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> Objects.hash(id, name, age, address);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><h3 id="filter（筛选）"><a href="#filter（筛选）" class="headerlink" title="filter（筛选）"></a>filter（筛选）</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String [] args)</span> </span>{</span><br><span class="line">    Student s1 = <span class="keyword">new</span> Student(<span class="number">1L</span>, <span class="string">"肖战"</span>, <span class="number">15</span>, <span class="string">"浙江"</span>);</span><br><span class="line">    Student s2 = <span class="keyword">new</span> Student(<span class="number">2L</span>, <span class="string">"王一博"</span>, <span class="number">15</span>, <span class="string">"湖北"</span>);</span><br><span class="line">    Student s3 = <span class="keyword">new</span> Student(<span class="number">3L</span>, <span class="string">"杨紫"</span>, <span class="number">17</span>, <span class="string">"北京"</span>);</span><br><span class="line">    Student s4 = <span class="keyword">new</span> Student(<span class="number">4L</span>, <span class="string">"李现"</span>, <span class="number">17</span>, <span class="string">"浙江"</span>);</span><br><span class="line">    List<student> students = <span class="keyword">new</span> ArrayList<>();</student></span><br><span class="line">    students.add(s1);</span><br><span class="line">    students.add(s2);</span><br><span class="line">    students.add(s3);</span><br><span class="line">    students.add(s4);</span><br><span class="line"></span><br><span class="line">    List<student> streamStudents = testFilter(students);</student></span><br><span class="line">    streamStudents.forEach(System.out::println);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 集合的筛选</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> students</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> List<student> <span class="title">testFilter</span><span class="params">(List<student> students)</student></span> </student></span>{</span><br><span class="line">    <span class="comment">//筛选年龄大于15岁的学生</span></span><br><span class="line"><span class="comment">//        return students.stream().filter(s -> s.getAge()>15).collect(Collectors.toList());</span></span><br><span class="line">    <span class="comment">//筛选住在浙江省的学生</span></span><br><span class="line">    <span class="keyword">return</span> students.stream().filter(s -><span class="string">"浙江"</span>.equals(s.getAddress())).collect(Collectors.toList());</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p>运行结果：<br><a href="064F89CEBBDC4437B44DD3125529A4DA" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="064F89CEBBDC4437B44DD3125529A4DA" class="lazyload"></a></p><p>这里我们创建了四个学生，经过filter的筛选，筛选出地址是浙江的学生集合。</p><h3 id="map-转换"><a href="#map-转换" class="headerlink" title="map(转换)"></a>map(转换)</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String [] args)</span> </span>{</span><br><span class="line">    Student s1 = <span class="keyword">new</span> Student(<span class="number">1L</span>, <span class="string">"肖战"</span>, <span class="number">15</span>, <span class="string">"浙江"</span>);</span><br><span class="line">    Student s2 = <span class="keyword">new</span> Student(<span class="number">2L</span>, <span class="string">"王一博"</span>, <span class="number">15</span>, <span class="string">"湖北"</span>);</span><br><span class="line">    Student s3 = <span class="keyword">new</span> Student(<span class="number">3L</span>, <span class="string">"杨紫"</span>, <span class="number">17</span>, <span class="string">"北京"</span>);</span><br><span class="line">    Student s4 = <span class="keyword">new</span> Student(<span class="number">4L</span>, <span class="string">"李现"</span>, <span class="number">17</span>, <span class="string">"浙江"</span>);</span><br><span class="line">    List<student> students = <span class="keyword">new</span> ArrayList<>();</student></span><br><span class="line">    students.add(s1);</span><br><span class="line">    students.add(s2);</span><br><span class="line">    students.add(s3);</span><br><span class="line">    students.add(s4);</span><br><span class="line"></span><br><span class="line">    testMap(students);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 集合转换</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> students</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testMap</span><span class="params">(List<student> students)</student></span> </span>{</span><br><span class="line">    <span class="comment">//在地址前面加上部分信息，只获取地址输出</span></span><br><span class="line">    List<string> addresses = students.stream().map(s -><span class="string">"住址:"</span>+s.getAddress()).collect(Collectors.toList());</string></span><br><span class="line">    addresses.forEach(a ->System.out.println(a));</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p>运行结果</p><p><a href="6D2F8F77F11549D1967417EB622A3D8A" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="6D2F8F77F11549D1967417EB622A3D8A" class="lazyload"></a></p><p>map就是将对应的元素按照给定的方法进行转换。</p><h3 id="distinct-去重"><a href="#distinct-去重" class="headerlink" title="distinct(去重)"></a>distinct(去重)</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String [] args) {</span><br><span class="line">  testDistinct1();</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 集合去重（基本类型）</span><br><span class="line"> */</span><br><span class="line">private static void testDistinct1() {</span><br><span class="line">    //简单字符串的去重</span><br><span class="line">    List<string> list = Arrays.asList("111","222","333","111","222");</string></span><br><span class="line">    list.stream().distinct().forEach(System.out::println);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p>运行结果：<br><a href="F06DD4734C914CD29A6E1A270DE26D6B" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="F06DD4734C914CD29A6E1A270DE26D6B" class="lazyload"></a></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String [] args) {</span><br><span class="line">  testDistinct2();</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 集合去重（引用对象）</span><br><span class="line"> */</span><br><span class="line">private static void testDistinct2() {</span><br><span class="line">    //引用对象的去重，引用对象要实现hashCode和equal方法，否则去重无效</span><br><span class="line">    Student s1 = new Student(1L, "肖战", 15, "浙江");</span><br><span class="line">    Student s2 = new Student(2L, "王一博", 15, "湖北");</span><br><span class="line">    Student s3 = new Student(3L, "杨紫", 17, "北京");</span><br><span class="line">    Student s4 = new Student(4L, "李现", 17, "浙江");</span><br><span class="line">    Student s5 = new Student(1L, "肖战", 15, "浙江");</span><br><span class="line">    List<student> students = new ArrayList<>();</student></span><br><span class="line">    students.add(s1);</span><br><span class="line">    students.add(s2);</span><br><span class="line">    students.add(s3);</span><br><span class="line">    students.add(s4);</span><br><span class="line">    students.add(s5);</span><br><span class="line">    students.stream().distinct().forEach(System.out::println);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p>运行结果：</p><p><a href="C11539ADDC1E430F8ED438AE06020BE2" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="C11539ADDC1E430F8ED438AE06020BE2" class="lazyload"></a></p><p>可以看出，两个重复的“肖战”同学进行了去重，这不仅因为使用了distinct()方法，而且因为Student对象重写了equals和hashCode()方法，否则去重是无效的。</p><h3 id="sorted-排序"><a href="#sorted-排序" class="headerlink" title="sorted(排序)"></a>sorted(排序)</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String [] args) {</span><br><span class="line">    testSort1();</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 集合排序（默认排序）</span><br><span class="line"> */</span><br><span class="line">private static void testSort1() {</span><br><span class="line">    List<string> list = Arrays.asList("333","222","111");</string></span><br><span class="line">    list.stream().sorted().forEach(System.out::println);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p>运行结果：</p><p><a href="9A7919666C0F47CE9E5BD3EB8E9290C0" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="9A7919666C0F47CE9E5BD3EB8E9290C0" class="lazyload"></a></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String [] args) {</span><br><span class="line">    testSort2();</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 集合排序（指定排序规则）</span><br><span class="line"> */</span><br><span class="line">private static void testSort2() {</span><br><span class="line">    Student s1 = new Student(1L, "肖战", 15, "浙江");</span><br><span class="line">    Student s2 = new Student(2L, "王一博", 15, "湖北");</span><br><span class="line">    Student s3 = new Student(3L, "杨紫", 17, "北京");</span><br><span class="line">    Student s4 = new Student(4L, "李现", 17, "浙江");</span><br><span class="line">    List<student> students = new ArrayList<>();</student></span><br><span class="line">    students.add(s1);</span><br><span class="line">    students.add(s2);</span><br><span class="line">    students.add(s3);</span><br><span class="line">    students.add(s4);</span><br><span class="line">    students.stream()</span><br><span class="line">            .sorted((stu1,stu2) ->Long.compare(stu2.getId(), stu1.getId()))</span><br><span class="line">            .sorted((stu1,stu2) -> Integer.compare(stu2.getAge(),stu1.getAge()))</span><br><span class="line">            .forEach(System.out::println);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p>运行结果：</p><p><a href="81C4A1F144444D94A87D790C4D5AD75D" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="81C4A1F144444D94A87D790C4D5AD75D" class="lazyload"></a></p><p>上面指定排序规则，先按照学生的id进行降序排序，再按照年龄进行降序排序</p><h3 id="limit（限制返回个数）"><a href="#limit（限制返回个数）" class="headerlink" title="limit（限制返回个数）"></a>limit（限制返回个数）</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String [] args) {</span><br><span class="line">    testLimit();</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 集合limit，返回前几个元素</span><br><span class="line"> */</span><br><span class="line">private static void testLimit() {</span><br><span class="line">    List<string> list = Arrays.asList("333","222","111");</string></span><br><span class="line">    list.stream().limit(2).forEach(System.out::println);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p>运行结果：</p><p><a href="19C0E0221FDE405D8E0ED0CCA3E6BF58" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="19C0E0221FDE405D8E0ED0CCA3E6BF58" class="lazyload"></a></p><h3 id="skip-删除元素"><a href="#skip-删除元素" class="headerlink" title="skip(删除元素)"></a>skip(删除元素)</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String [] args) {</span><br><span class="line">    testSkip();</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 集合skip，删除前n个元素</span><br><span class="line"> */</span><br><span class="line">private static void testSkip() {</span><br><span class="line">    List<string> list = Arrays.asList("333","222","111");</string></span><br><span class="line">    list.stream().skip(2).forEach(System.out::println);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p>运行结果：</p><p><a href="D06818C8704B4C80AEA807013CCBBA9F" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="D06818C8704B4C80AEA807013CCBBA9F" class="lazyload"></a></p><h3 id="reduce-聚合"><a href="#reduce-聚合" class="headerlink" title="reduce(聚合)"></a>reduce(聚合)</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String [] args) {</span><br><span class="line">    testReduce();</span><br><span class="line">}</span><br><span class="line">/**</span><br><span class="line"> * 集合reduce,将集合中每个元素聚合成一条数据</span><br><span class="line"> */</span><br><span class="line">private static void testReduce() {</span><br><span class="line">    List<string> list = Arrays.asList("欢","迎","你");</string></span><br><span class="line">    String appendStr = list.stream().reduce("北京",(a,b) -> a+b);</span><br><span class="line">    System.out.println(appendStr);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p>运行结果：</p><p><a href="A9E5293DA8754B658839A11CBB609BEF" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="A9E5293DA8754B658839A11CBB609BEF" class="lazyload"></a></p><h3 id="min-求最小值"><a href="#min-求最小值" class="headerlink" title="min(求最小值)"></a>min(求最小值)</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String [] args) {</span><br><span class="line">    testMin();</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 求集合中元素的最小值</span><br><span class="line"> */</span><br><span class="line">private static void testMin() {</span><br><span class="line">    Student s1 = new Student(1L, "肖战", 14, "浙江");</span><br><span class="line">    Student s2 = new Student(2L, "王一博", 15, "湖北");</span><br><span class="line">    Student s3 = new Student(3L, "杨紫", 17, "北京");</span><br><span class="line">    Student s4 = new Student(4L, "李现", 17, "浙江");</span><br><span class="line">    List<student> students = new ArrayList<>();</student></span><br><span class="line">    students.add(s1);</span><br><span class="line">    students.add(s2);</span><br><span class="line">    students.add(s3);</span><br><span class="line">    students.add(s4);</span><br><span class="line">    Student minS = students.stream().min((stu1,stu2) ->Integer.compare(stu1.getAge(),stu2.getAge())).get();</span><br><span class="line">    System.out.println(minS.toString());</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p>运行结果：</p><p><a href="D7E4271D589941F99438A5D5A63FF2D3" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="D7E4271D589941F99438A5D5A63FF2D3" class="lazyload"></a><br>上面是求所有学生中年龄最小的一个，max同理，求最大值。</p><h3 id="anyMatch-allMatch-noneMatch（匹配）"><a href="#anyMatch-allMatch-noneMatch（匹配）" class="headerlink" title="anyMatch/allMatch/noneMatch（匹配）"></a>anyMatch/allMatch/noneMatch（匹配）</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String [] args) {</span><br><span class="line">    testMatch();</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">private static void testMatch() {</span><br><span class="line">    Student s1 = new Student(1L, "肖战", 15, "浙江");</span><br><span class="line">    Student s2 = new Student(2L, "王一博", 15, "湖北");</span><br><span class="line">    Student s3 = new Student(3L, "杨紫", 17, "北京");</span><br><span class="line">    Student s4 = new Student(4L, "李现", 17, "浙江");</span><br><span class="line">    List<student> students = new ArrayList<>();</student></span><br><span class="line">    students.add(s1);</span><br><span class="line">    students.add(s2);</span><br><span class="line">    students.add(s3);</span><br><span class="line">    students.add(s4);</span><br><span class="line">    Boolean anyMatch = students.stream().anyMatch(s ->"湖北".equals(s.getAddress()));</span><br><span class="line">    if (anyMatch) {</span><br><span class="line">        System.out.println("有湖北人");</span><br><span class="line">    }</span><br><span class="line">    Boolean allMatch = students.stream().allMatch(s -> s.getAge()>=15);</span><br><span class="line">    if (allMatch) {</span><br><span class="line">        System.out.println("所有学生都满15周岁");</span><br><span class="line">    }</span><br><span class="line">    Boolean noneMatch = students.stream().noneMatch(s -> "杨洋".equals(s.getName()));</span><br><span class="line">    if (noneMatch) {</span><br><span class="line">        System.out.println("没有叫杨洋的同学");</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p>运行结果：</p><p><a href="B0478494832B4B2B8A4DAB6D063E4448" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="B0478494832B4B2B8A4DAB6D063E4448" class="lazyload"></a></p><p>anyMatch：Stream 中任意一个元素符合传入的 predicate，返回 true</p><p>allMatch：Stream 中全部元素符合传入的 predicate，返回 true</p><p>noneMatch：Stream 中没有一个元素符合传入的 predicate，返回 true</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>上面介绍了Stream常用的一些方法，虽然对集合的遍历和操作可以用以前常规的方式，但是当业务逻辑复杂的时候，你会发现代码量很多，可读性很差，明明一行代码解决的事情，你却写了好几行。试试lambda表达式，试试Stream，你会有不一样的体验。</p></body></html>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> lambda </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AI核心代码，估值一个亿</title>
      <link href="/2019/01/04/AI%E6%A0%B8%E5%BF%83%E4%BB%A3%E7%A0%81%EF%BC%8C%E4%BC%B0%E5%80%BC%E4%B8%80%E4%B8%AA%E4%BA%BF/"/>
      <url>/2019/01/04/AI%E6%A0%B8%E5%BF%83%E4%BB%A3%E7%A0%81%EF%BC%8C%E4%BC%B0%E5%80%BC%E4%B8%80%E4%B8%AA%E4%BA%BF/</url>
      
        <content type="html"><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script></head><body><p><a href="https://i.imgur.com/Pgr8a16.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.imgur.com/Pgr8a16.jpg" class="lazyload"></a></p></body></html>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 其他 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>通过整合dubbo 和 zookeeper 到Spring Boot中实现服务治理</title>
      <link href="/2019/01/03/%E9%80%9A%E8%BF%87%E6%95%B4%E5%90%88dubbo%20%E5%92%8C%20zookeeper%20%E5%88%B0Spring%20Boot%E4%B8%AD%E5%AE%9E%E7%8E%B0%E6%9C%8D%E5%8A%A1%E6%B2%BB%E7%90%86/"/>
      <url>/2019/01/03/%E9%80%9A%E8%BF%87%E6%95%B4%E5%90%88dubbo%20%E5%92%8C%20zookeeper%20%E5%88%B0Spring%20Boot%E4%B8%AD%E5%AE%9E%E7%8E%B0%E6%9C%8D%E5%8A%A1%E6%B2%BB%E7%90%86/</url>
      
        <content type="html"><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script></head><body><h1 id="spring-boot-dubbo-zookeeper"><a href="#spring-boot-dubbo-zookeeper" class="headerlink" title="spring-boot-dubbo-zookeeper"></a>spring-boot-dubbo-zookeeper</h1><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>通过整合dubbo-spring-boot 和 zookeeper 到Spring Boot中实现服务治理</p><p>项目为聚合项目，通过一下几个子项目模块提供服务：</p><pre><code>基础公共接口：spring-boot-dubbo-zookeeper-base-interface服务提供者：spring-boot-dubbo-zookeeper-provider服务消费者：spring-boot-dubbo-zookeeper-consumer</code></pre><p>在application.yml中配置zookeeper的地址可以单击也可以集群。</p><p>项目启动我们可以通过打印的日志或者Dubbo Admin查看，日志打印即可查看，我展示一下Dubbo Admin的显示：<br><a href="https://i.imgur.com/WCaVKxU.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.imgur.com/WCaVKxU.jpg" class="lazyload"></a></p><p>服务治理：提供者<br><a href="https://i.imgur.com/jFB8P56.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.imgur.com/jFB8P56.jpg" class="lazyload"></a></p><p>服务治理：消费者<br><a href="https://i.imgur.com/ZFXgkNK.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.imgur.com/ZFXgkNK.jpg" class="lazyload"></a></p><p>项目启动之后请求：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:9091/hello/xiaohua</span><br><span class="line">http://localhost:9091/hello/goodbye/meinv</span><br></pre></td></tr></tbody></table></figure></div><h3 id="项目源码地址"><a href="#项目源码地址" class="headerlink" title="项目源码地址"></a>项目源码地址</h3><p><a href="https://github.com/HWYWL/spring-boot-2.x-examples/tree/master/spring-boot-dubbo-zookeeper" target="_blank" rel="noopener">spring-boot-dubbo-zookeeper</a></p><h3 id="问题建议"><a href="#问题建议" class="headerlink" title="问题建议"></a>问题建议</h3><ul><li>联系我的邮箱：<a href="mailto:ilovey_hwy@163.com">ilovey_hwy@163.com</a></li><li>我的博客：<a href="https://www.hwy.ac.cn" target="_blank" rel="noopener">https://www.hwy.ac.cn</a></li><li>GitHub：<a href="https://github.com/HWYWL" target="_blank" rel="noopener">https://github.com/HWYWL</a></li></ul></body></html>]]></content>
      
      
      <categories>
          
          <category> 分布式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Boot </tag>
            
            <tag> 高并发 </tag>
            
            <tag> 分布式 </tag>
            
            <tag> dubbo </tag>
            
            <tag> zookeeper </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java 11 已发布，String 还能这样玩！</title>
      <link href="/2018/12/14/Java%2011%20%E5%B7%B2%E5%8F%91%E5%B8%83%EF%BC%8CString%20%E8%BF%98%E8%83%BD%E8%BF%99%E6%A0%B7%E7%8E%A9%EF%BC%81/"/>
      <url>/2018/12/14/Java%2011%20%E5%B7%B2%E5%8F%91%E5%B8%83%EF%BC%8CString%20%E8%BF%98%E8%83%BD%E8%BF%99%E6%A0%B7%E7%8E%A9%EF%BC%81/</url>
      
        <content type="html"><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script></head><body><h3 id="Java-11-增加了一系列的字符串处理方法，如以下所示。"><a href="#Java-11-增加了一系列的字符串处理方法，如以下所示。" class="headerlink" title="Java 11 增加了一系列的字符串处理方法，如以下所示。"></a>Java 11 增加了一系列的字符串处理方法，如以下所示。</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 判断字符串是否为空白</span></span><br><span class="line"><span class="string">" "</span>.isBlank();                <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 去除首尾空格</span></span><br><span class="line"><span class="string">" Javastack "</span>.strip();          <span class="comment">// "Javastack"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 去除尾部空格 </span></span><br><span class="line"><span class="string">" Javastack "</span>.stripTrailing();  <span class="comment">// " Javastack"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 去除首部空格 </span></span><br><span class="line"><span class="string">" Javastack "</span>.stripLeading();   <span class="comment">// "Javastack "</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 复制字符串</span></span><br><span class="line"><span class="string">"Java"</span>.repeat(<span class="number">3</span>);             <span class="comment">// "JavaJavaJava"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 行数统计</span></span><br><span class="line"><span class="string">"A\nB\nC"</span>.lines().count();    <span class="comment">// 3</span></span><br></pre></td></tr></tbody></table></figure></div><p>最有意思的是 *<em>repeat *</em>和 *<em>lines *</em>方法了，来看下还能怎么玩！</p><h3 id="repeat"><a href="#repeat" class="headerlink" title="repeat"></a>repeat</h3><p>repeat 方法的作用就是重复一个字符串 N 遍，可以用来代替工具类：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">org.apache.commons.lang3.StringUtils#repeat(java.lang.String, int)</span><br></pre></td></tr></tbody></table></figure></div><p>来看下 repeat 的源码。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">repeat</span><span class="params">(<span class="keyword">int</span> count)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span> (count < <span class="number">0</span>) {</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"count is negative: "</span> + count);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span> (count == <span class="number">1</span>) {</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> len = value.length;</span><br><span class="line">    <span class="keyword">if</span> (len == <span class="number">0</span> || count == <span class="number">0</span>) {</span><br><span class="line">        <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span> (len == <span class="number">1</span>) {</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">byte</span>[] single = <span class="keyword">new</span> <span class="keyword">byte</span>[count];</span><br><span class="line">        Arrays.fill(single, value[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> String(single, coder);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span> (Integer.MAX_VALUE / count < len) {</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> OutOfMemoryError(<span class="string">"Repeating "</span> + len + <span class="string">" bytes String "</span> + count +</span><br><span class="line">                <span class="string">" times will produce a String exceeding maximum size."</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> limit = len * count;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">byte</span>[] multiple = <span class="keyword">new</span> <span class="keyword">byte</span>[limit];</span><br><span class="line">    System.arraycopy(value, <span class="number">0</span>, multiple, <span class="number">0</span>, len);</span><br><span class="line">    <span class="keyword">int</span> copied = len;</span><br><span class="line">    <span class="keyword">for</span> (; copied < limit - copied; copied <<= <span class="number">1</span>) {</span><br><span class="line">        System.arraycopy(multiple, <span class="number">0</span>, multiple, copied, copied);</span><br><span class="line">    }</span><br><span class="line">    System.arraycopy(multiple, <span class="number">0</span>, multiple, copied, limit - copied);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> String(multiple, coder);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p>来看下更多的用法。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">String str = <span class="string">"Java"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 小于0：java.lang.IllegalArgumentException</span></span><br><span class="line">System.out.println(str.repeat(-<span class="number">2</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 等于0：空白串（""）</span></span><br><span class="line">System.out.println(str.repeat(<span class="number">0</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// JavaJavaJava</span></span><br><span class="line">System.out.println(str.repeat(<span class="number">3</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// java.lang.OutOfMemoryError</span></span><br><span class="line">System.out.println(str.repeat(Integer.MAX_VALUE));</span><br></pre></td></tr></tbody></table></figure></div><p>所以说 repeat 并不是可以无限增长的，有使用限制的，达到一定量就会报内存溢出异常。</p><h3 id="lines"><a href="#lines" class="headerlink" title="lines"></a>lines</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Stream<string> <span class="title">lines</span><span class="params">()</span> </string></span>{</span><br><span class="line">    <span class="keyword">return</span> isLatin1() ? StringLatin1.lines(value)</span><br><span class="line">                      : StringUTF16.lines(value);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p>lines 方法返回一个字符串 Stream, 可以识别 \n 和 \r 换行符换行。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 4</span></span><br><span class="line">System.out.println(<span class="string">"A\nB\nC\rD"</span>.lines().count());</span><br></pre></td></tr></tbody></table></figure></div><p>是不是很好？在将来肯定有武之地！如批量读取文件内容到一个 Stream 中，就能很好的识别行结束符了。</p></body></html>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用IDEA插件Alibaba Cloud Toolkit工具一键部署本地应用到ECS服务器</title>
      <link href="/2018/12/13/%E4%BD%BF%E7%94%A8IDEA%E6%8F%92%E4%BB%B6Alibaba%20Cloud%20Toolkit%E5%B7%A5%E5%85%B7%E4%B8%80%E9%94%AE%E9%83%A8%E7%BD%B2%E6%9C%AC%E5%9C%B0%E5%BA%94%E7%94%A8%E5%88%B0ECS%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
      <url>/2018/12/13/%E4%BD%BF%E7%94%A8IDEA%E6%8F%92%E4%BB%B6Alibaba%20Cloud%20Toolkit%E5%B7%A5%E5%85%B7%E4%B8%80%E9%94%AE%E9%83%A8%E7%BD%B2%E6%9C%AC%E5%9C%B0%E5%BA%94%E7%94%A8%E5%88%B0ECS%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script></head><body><h1 id="使用IDEA插件Alibaba-Cloud-Toolkit工具一键部署本地应用到ECS服务器"><a href="#使用IDEA插件Alibaba-Cloud-Toolkit工具一键部署本地应用到ECS服务器" class="headerlink" title="使用IDEA插件Alibaba Cloud Toolkit工具一键部署本地应用到ECS服务器"></a>使用IDEA插件Alibaba Cloud Toolkit工具一键部署本地应用到ECS服务器</h1><p>最近看到阿里云发布了一款名为 Alibaba Cloud Toolkit 的插件，可以帮助开发者高效开发并部署适合在云端运行的应用，瞬间击中了我的小心脏，这个对于个人开发者来说超级棒啊，终于不需要再手动 scp/ftp 上传应用到服务器了，连启动的命令都是可以自行编写的，棒棒！<br>PS：个人开发者项目不多也不大，如果使用jenkins等工具会比较麻烦，不如直接用手扔来得直接。</p><h2 id="什么是-Alibaba-Cloud-Toolkit"><a href="#什么是-Alibaba-Cloud-Toolkit" class="headerlink" title="什么是 Alibaba Cloud Toolkit"></a>什么是 Alibaba Cloud Toolkit</h2><p>Alibaba Cloud Toolkit （后文简称 Cloud Toolkit）是阿里云针对 IDE 平台为开发者提供的一款插件，用于帮助开发者高效开发并部署适合在云端运行的应用。<br>您在本地完成应用程序的开发、调试和测试后，可以使用在 IED （如 Eclipse 或 IntelliJ）中安装的 Cloud Toolkit 插件，通过图形配置的方式连接到云端部署环境并将应用程序快如部署到云端。<br>说明：目前 Cloud Toolkit 仅支持 Eclipse、Intellij 等其它开发环境开发中，请您持续关注 Cloud Tookit 动态。<br>官方有提供简单版的文档说明，小伙伴也可以参考下面链接：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://help.aliyun.com/product/29966.html</span><br></pre></td></tr></tbody></table></figure></div><h2 id="使用IDEA安装和配置Cloud-Toolkit"><a href="#使用IDEA安装和配置Cloud-Toolkit" class="headerlink" title="使用IDEA安装和配置Cloud Toolkit"></a>使用IDEA安装和配置Cloud Toolkit</h2><p>作者手动在idea上安装了一下这个工具，并测试完成，对这个工具可以说非常满意，下面是安装和配置的流程，主要有以下几步：</p><ul><li>在idea上安装Alibaba Cloud Toolkit插件</li><li>重启idea应用</li><li>配置Cloud Toolkit插件中的Accout信息</li><li>在阿里云中获取用户AccessKey相关信息（AccessKey ID、    Access Key Secret）</li><li>配置发布到ECS的相关服务器及命令信息</li><li>测试并成功发布</li></ul><p>主要流程为以上6步，下面我们一步步来配置，上图：<br><a href="https://i.imgur.com/hPX0T0T.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.imgur.com/hPX0T0T.jpg" class="lazyload"></a></p><p>如果插件下载速度比较慢，稍等一会，作者测试时也下载失败了一次，下载完成后需要重启idea应用后生效。</p><p>首先，需要先配置Alibaba Cloud Toolkit的Account，位置见下图：<br><a href="https://i.imgur.com/e2NM5oN.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.imgur.com/e2NM5oN.jpg" class="lazyload"></a></p><p><a href="https://i.imgur.com/4BDmwJN.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.imgur.com/4BDmwJN.jpg" class="lazyload"></a></p><p>上图中的AccessKey需要在阿里云的控制台中配置，如果是新用户，需要手动创建一个AccessKey，如下图：<br><a href="https://i.imgur.com/V7KK3kf.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.imgur.com/V7KK3kf.jpg" class="lazyload"></a></p><p>创建完成并配置好Account后，就可以着手配置对应的项目发布到ECS信息，官方文档见以下链接：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://help.aliyun.com/document_detail/98762.html</span><br></pre></td></tr></tbody></table></figure></div><p><a href="https://i.imgur.com/1uSOgIR.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.imgur.com/1uSOgIR.jpg" class="lazyload"></a></p><p>如果你的Account配置没有问题，则会自动账户显示对应的ECS服务器，在发布时，需要手动选择某台服务器，一定要选择哦！</p><p>对于Command的编写，可以参考官方文档（点击下图中的蓝色字体：Learn Sample直达）：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://yq.aliyun.com/articles/665693</span><br></pre></td></tr></tbody></table></figure></div><p><a href="https://i.imgur.com/RRd7HIQ.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.imgur.com/RRd7HIQ.jpg" class="lazyload"></a></p><p>配置成功后，可以点击Run运行程序，此时会自动为我们编译并上传到阿里云服务器中，发布到地址就是上图中的Deploy Location中的路径，发布前如果需要Maven执行，一定不要忘记配置上图中Maven的命令，中间的Command是在上传到服务器成功后执行的命令，主要用于应用的启动停止重启等。<br>下面是发布成功的示例：</p><p><a href="https://i.imgur.com/s9dr40F.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.imgur.com/s9dr40F.jpg" class="lazyload"></a></p><p>服务器的显示结果如下：</p><p><a href="https://i.imgur.com/25pm03e.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.imgur.com/25pm03e.jpg" class="lazyload"></a></p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>以上是对IDEA插件Alibaba Cloud Toolkit的安装配置及使用案例，如果小伙伴还有遇到其他的问题，可以根据一下链接，加入Alibaba Cloud Toolkit 官方唯一指定支持群，提交你的需求&Bug哦。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://yq.aliyun.com/articles/656292</span><br></pre></td></tr></tbody></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">作者：YClimb</span><br><span class="line">链接：https://juejin.im/post/5c0a748ff265da610f6389a8</span><br><span class="line">来源：掘金</span><br><span class="line">著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</span><br></pre></td></tr></tbody></table></figure></div></body></html>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IDEA </tag>
            
            <tag> Alibaba Cloud Toolkit </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>openVPN多配置文件管理</title>
      <link href="/2018/12/06/openVPN%E5%A4%9A%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86/"/>
      <url>/2018/12/06/openVPN%E5%A4%9A%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script></head><body><p>我们在使用openVPN的时候可能会有好几个不同的配置，此时如果需要切换使用默认会显得很麻烦，我们可以手动修改配置文件达到一键切换的目的。</p><p>首先把不同的配置按文件夹分类归类好，把其所在的<strong>config.ovpn</strong>文件<strong>移动</strong>到文件夹外面，如下：</p><p><a href="https://i.imgur.com/aFvnCwR.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.imgur.com/aFvnCwR.jpg" class="lazyload"></a></p><p>文件夹里面装的是我们生存的配置文件，比如我的那个经典网络文件A级里面：</p><p><a href="https://i.imgur.com/0WPJQMF.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.imgur.com/0WPJQMF.jpg" class="lazyload"></a></p><p>之后我们需要修改移动出来的<strong>xxx.ovpn文件</strong>，用记事本打开可能不会自动格式化就一行显示，看着不方便，所以我用Sunlime Text软件打开，把每个修改为如下的样子</p><p><a href="https://i.imgur.com/6Z8r8eH.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.imgur.com/6Z8r8eH.jpg" class="lazyload"></a></p><p>然后我们启动<strong>OpenVPN GUI</strong>就可以选择我们所需要的网络了</p><p><a href="https://i.imgur.com/WISrKsq.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.imgur.com/WISrKsq.jpg" class="lazyload"></a></p><p>我使用的是Windows 7系统 其他系统不知道信不信，需要自己测试。</p></body></html>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> openVPN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL 基本语法</title>
      <link href="/2018/11/19/MySQL%20%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/"/>
      <url>/2018/11/19/MySQL%20%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><!-- GFM-TOC --></head><body><ul><li><a href="#一基础">一、基础</a></li><li><a href="#二创建表">二、创建表</a></li><li><a href="#三修改表">三、修改表</a></li><li><a href="#四插入">四、插入</a></li><li><a href="#五更新">五、更新</a></li><li><a href="#六删除">六、删除</a></li><li><a href="#七查询">七、查询</a></li><li><a href="#八排序">八、排序</a></li><li><a href="#九过滤">九、过滤</a></li><li><a href="#十通配符">十、通配符</a></li><li><a href="#十一计算字段">十一、计算字段</a></li><li><a href="#十二函数">十二、函数</a></li><li><a href="#十三分组">十三、分组</a></li><li><a href="#十四子查询">十四、子查询</a></li><li><a href="#十五连接">十五、连接</a></li><li><a href="#十六组合查询">十六、组合查询</a></li><li><a href="#十七视图">十七、视图</a></li><li><a href="#十八存储过程">十八、存储过程</a></li><li><a href="#十九游标">十九、游标</a></li><li><a href="#二十触发器">二十、触发器</a></li><li><a href="#二十一事务管理">二十一、事务管理</a></li><li><a href="#二十二字符集">二十二、字符集</a></li><li><a href="#二十三权限管理">二十三、权限管理</a></li><li><a href="#参考资料">参考资料</a><!-- GFM-TOC --></li></ul><h1 id="一、基础"><a href="#一、基础" class="headerlink" title="一、基础"></a>一、基础</h1><p>模式定义了数据如何存储、存储什么样的数据以及数据如何分解等信息，数据库和表都有模式。</p><p>主键的值不允许修改，也不允许复用（不能使用已经删除的主键值赋给新数据行的主键）。</p><p>SQL（Structured Query Language)，标准 SQL 由 ANSI 标准委员会管理，从而称为 ANSI SQL。各个 DBMS 都有自己的实现，如 PL/SQL、Transact-SQL 等。</p><p>SQL 语句不区分大小写，但是数据库表名、列名和值是否区分依赖于具体的 DBMS 以及配置。</p><p>SQL 支持以下三种注释：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sql</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 注释</span></span><br><span class="line"><span class="keyword">SELECT</span> *</span><br><span class="line"><span class="keyword">FROM</span> mytable; <span class="comment">-- 注释</span></span><br><span class="line"><span class="comment">/* 注释1</span></span><br><span class="line"><span class="comment">   注释2 */</span></span><br></pre></td></tr></tbody></table></figure></div><p>数据库创建与使用：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sql</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> <span class="keyword">test</span>;</span><br><span class="line"><span class="keyword">USE</span> <span class="keyword">test</span>;</span><br></pre></td></tr></tbody></table></figure></div><h1 id="二、创建表"><a href="#二、创建表" class="headerlink" title="二、创建表"></a>二、创建表</h1><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sql</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> mytable (</span><br><span class="line">  <span class="keyword">id</span> <span class="built_in">INT</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  col1 <span class="built_in">INT</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">1</span>,</span><br><span class="line">  col2 <span class="built_in">VARCHAR</span>(<span class="number">45</span>) <span class="literal">NULL</span>,</span><br><span class="line">  col3 <span class="built_in">DATE</span> <span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>));</span><br></pre></td></tr></tbody></table></figure></div><h1 id="三、修改表"><a href="#三、修改表" class="headerlink" title="三、修改表"></a>三、修改表</h1><p>添加列</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sql</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> mytable</span><br><span class="line"><span class="keyword">ADD</span> <span class="keyword">col</span> <span class="built_in">CHAR</span>(<span class="number">20</span>);</span><br></pre></td></tr></tbody></table></figure></div><p>删除列</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sql</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> mytable</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">COLUMN</span> <span class="keyword">col</span>;</span><br></pre></td></tr></tbody></table></figure></div><p>删除表</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sql</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> mytable;</span><br></pre></td></tr></tbody></table></figure></div><h1 id="四、插入"><a href="#四、插入" class="headerlink" title="四、插入"></a>四、插入</h1><p>普通插入</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sql</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> mytable(col1, col2)</span><br><span class="line"><span class="keyword">VALUES</span>(val1, val2);</span><br></pre></td></tr></tbody></table></figure></div><p>插入检索出来的数据</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sql</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> mytable1(col1, col2)</span><br><span class="line"><span class="keyword">SELECT</span> col1, col2</span><br><span class="line"><span class="keyword">FROM</span> mytable2;</span><br></pre></td></tr></tbody></table></figure></div><p>将一个表的内容插入到一个新表</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sql</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> newtable <span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> mytable;</span><br></pre></td></tr></tbody></table></figure></div><h1 id="五、更新"><a href="#五、更新" class="headerlink" title="五、更新"></a>五、更新</h1><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sql</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> mytable</span><br><span class="line"><span class="keyword">SET</span> <span class="keyword">col</span> = val</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">id</span> = <span class="number">1</span>;</span><br></pre></td></tr></tbody></table></figure></div><h1 id="六、删除"><a href="#六、删除" class="headerlink" title="六、删除"></a>六、删除</h1><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sql</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> mytable</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">id</span> = <span class="number">1</span>;</span><br></pre></td></tr></tbody></table></figure></div><p><strong>TRUNCATE TABLE</strong>  可以清空表，也就是删除所有行。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sql</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">TRUNCATE</span> <span class="keyword">TABLE</span> mytable;</span><br></pre></td></tr></tbody></table></figure></div><p>使用更新和删除操作时一定要用 WHERE 子句，不然会把整张表的数据都破坏。可以先用 SELECT 语句进行测试，防止错误删除。</p><h1 id="七、查询"><a href="#七、查询" class="headerlink" title="七、查询"></a>七、查询</h1><h2 id="DISTINCT"><a href="#DISTINCT" class="headerlink" title="DISTINCT"></a>DISTINCT</h2><p>相同值只会出现一次。它作用于所有列，也就是说所有列的值都相同才算相同。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sql</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> col1, col2</span><br><span class="line"><span class="keyword">FROM</span> mytable;</span><br></pre></td></tr></tbody></table></figure></div><h2 id="LIMIT"><a href="#LIMIT" class="headerlink" title="LIMIT"></a>LIMIT</h2><p>限制返回的行数。可以有两个参数，第一个参数为起始行，从 0 开始；第二个参数为返回的总行数。</p><p>返回前 5 行：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sql</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> *</span><br><span class="line"><span class="keyword">FROM</span> mytable</span><br><span class="line"><span class="keyword">LIMIT</span> <span class="number">5</span>;</span><br></pre></td></tr></tbody></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sql</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> *</span><br><span class="line"><span class="keyword">FROM</span> mytable</span><br><span class="line"><span class="keyword">LIMIT</span> <span class="number">0</span>, <span class="number">5</span>;</span><br></pre></td></tr></tbody></table></figure></div><p>返回第 3 ~ 5 行：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sql</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> *</span><br><span class="line"><span class="keyword">FROM</span> mytable</span><br><span class="line"><span class="keyword">LIMIT</span> <span class="number">2</span>, <span class="number">3</span>;</span><br></pre></td></tr></tbody></table></figure></div><h1 id="八、排序"><a href="#八、排序" class="headerlink" title="八、排序"></a>八、排序</h1><ul><li><strong>ASC</strong> ：升序（默认）</li><li><strong>DESC</strong> ：降序</li></ul><p>可以按多个列进行排序，并且为每个列指定不同的排序方式：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sql</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> *</span><br><span class="line"><span class="keyword">FROM</span> mytable</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> col1 <span class="keyword">DESC</span>, col2 <span class="keyword">ASC</span>;</span><br></pre></td></tr></tbody></table></figure></div><h1 id="九、过滤"><a href="#九、过滤" class="headerlink" title="九、过滤"></a>九、过滤</h1><p>不进行过滤的数据非常大，导致通过网络传输了多余的数据，从而浪费了网络带宽。因此尽量使用 SQL 语句来过滤不必要的数据，而不是传输所有的数据到客户端中然后由客户端进行过滤。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sql</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> *</span><br><span class="line"><span class="keyword">FROM</span> mytable</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">col</span> <span class="keyword">IS</span> <span class="literal">NULL</span>;</span><br></pre></td></tr></tbody></table></figure></div><p>下表显示了 WHERE 子句可用的操作符</p><table><thead><tr><th align="center">操作符</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">=</td><td align="center">等于</td></tr><tr><td align="center"><</td><td align="center">小于</td></tr><tr><td align="center">></td><td align="center">大于</td></tr><tr><td align="center"><> !=</td><td align="center">不等于</td></tr><tr><td align="center"><= !></td><td align="center">小于等于</td></tr><tr><td align="center">>= !<</td><td align="center">大于等于</td></tr><tr><td align="center">BETWEEN</td><td align="center">在两个值之间</td></tr><tr><td align="center">IS NULL</td><td align="center">为 NULL 值</td></tr></tbody></table><p>应该注意到，NULL 与 0、空字符串都不同。</p><p><strong>AND 和 OR</strong>  用于连接多个过滤条件。优先处理 AND，当一个过滤表达式涉及到多个 AND 和 OR 时，可以使用 () 来决定优先级，使得优先级关系更清晰。</p><p><strong>IN</strong>  操作符用于匹配一组值，其后也可以接一个 SELECT 子句，从而匹配子查询得到的一组值。</p><p><strong>NOT</strong>  操作符用于否定一个条件。</p><h1 id="十、通配符"><a href="#十、通配符" class="headerlink" title="十、通配符"></a>十、通配符</h1><p>通配符也是用在过滤语句中，但它只能用于文本字段。</p><ul><li><p><strong>%</strong>  匹配 >=0 个任意字符；</p></li><li><p><strong>_</strong>  匹配 ==1 个任意字符；</p></li><li><p><strong>[ ]</strong>  可以匹配集合内的字符，例如 [ab] 将匹配字符 a 或者 b。用脱字符 ^ 可以对其进行否定，也就是不匹配集合内的字符。</p></li></ul><p>使用 Like 来进行通配符匹配。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sql</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> *</span><br><span class="line"><span class="keyword">FROM</span> mytable</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">col</span> <span class="keyword">LIKE</span> <span class="string">'[^AB]%'</span>; <span class="comment">-- 不以 A 和 B 开头的任意文本</span></span><br></pre></td></tr></tbody></table></figure></div><p>不要滥用通配符，通配符位于开头处匹配会非常慢。</p><h1 id="十一、计算字段"><a href="#十一、计算字段" class="headerlink" title="十一、计算字段"></a>十一、计算字段</h1><p>在数据库服务器上完成数据的转换和格式化的工作往往比客户端上快得多，并且转换和格式化后的数据量更少的话可以减少网络通信量。</p><p>计算字段通常需要使用  <strong>AS</strong>  来取别名，否则输出的时候字段名为计算表达式。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sql</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> col1 * col2 <span class="keyword">AS</span> <span class="keyword">alias</span></span><br><span class="line"><span class="keyword">FROM</span> mytable;</span><br></pre></td></tr></tbody></table></figure></div><p><strong>CONCAT()</strong>  用于连接两个字段。许多数据库会使用空格把一个值填充为列宽，因此连接的结果会出现一些不必要的空格，使用 <strong>TRIM()</strong> 可以去除首尾空格。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sql</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">CONCAT</span>(<span class="keyword">TRIM</span>(col1), <span class="string">'('</span>, <span class="keyword">TRIM</span>(col2), <span class="string">')'</span>) <span class="keyword">AS</span> concat_col</span><br><span class="line"><span class="keyword">FROM</span> mytable;</span><br></pre></td></tr></tbody></table></figure></div><h1 id="十二、函数"><a href="#十二、函数" class="headerlink" title="十二、函数"></a>十二、函数</h1><p>各个 DBMS 的函数都是不相同的，因此不可移植，以下主要是 MySQL 的函数。</p><h2 id="汇总"><a href="#汇总" class="headerlink" title="汇总"></a>汇总</h2><table><thead><tr><th align="center">函 数</th><th align="center">说 明</th></tr></thead><tbody><tr><td align="center">AVG()</td><td align="center">返回某列的平均值</td></tr><tr><td align="center">COUNT()</td><td align="center">返回某列的行数</td></tr><tr><td align="center">MAX()</td><td align="center">返回某列的最大值</td></tr><tr><td align="center">MIN()</td><td align="center">返回某列的最小值</td></tr><tr><td align="center">SUM()</td><td align="center">返回某列值之和</td></tr></tbody></table><p>AVG() 会忽略 NULL 行。</p><p>使用 DISTINCT 可以让汇总函数值汇总不同的值。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sql</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">AVG</span>(<span class="keyword">DISTINCT</span> col1) <span class="keyword">AS</span> avg_col</span><br><span class="line"><span class="keyword">FROM</span> mytable;</span><br></pre></td></tr></tbody></table></figure></div><h2 id="文本处理"><a href="#文本处理" class="headerlink" title="文本处理"></a>文本处理</h2><table><thead><tr><th align="center">函数</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">LEFT()</td><td align="center">左边的字符</td></tr><tr><td align="center">RIGHT()</td><td align="center">右边的字符</td></tr><tr><td align="center">LOWER()</td><td align="center">转换为小写字符</td></tr><tr><td align="center">UPPER()</td><td align="center">转换为大写字符</td></tr><tr><td align="center">LTRIM()</td><td align="center">去除左边的空格</td></tr><tr><td align="center">RTRIM()</td><td align="center">去除右边的空格</td></tr><tr><td align="center">LENGTH()</td><td align="center">长度</td></tr><tr><td align="center">SOUNDEX()</td><td align="center">转换为语音值</td></tr></tbody></table><p>其中， <strong>SOUNDEX()</strong>  可以将一个字符串转换为描述其语音表示的字母数字模式。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sql</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> *</span><br><span class="line"><span class="keyword">FROM</span> mytable</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">SOUNDEX</span>(col1) = <span class="keyword">SOUNDEX</span>(<span class="string">'apple'</span>)</span><br></pre></td></tr></tbody></table></figure></div><h2 id="日期和时间处理"><a href="#日期和时间处理" class="headerlink" title="日期和时间处理"></a>日期和时间处理</h2><ul><li>日期格式：YYYY-MM-DD</li><li>时间格式：HH:MM:SS</li></ul><table><thead><tr><th align="center">函 数</th><th align="center">说 明</th></tr></thead><tbody><tr><td align="center">AddDate()</td><td align="center">增加一个日期（天、周等）</td></tr><tr><td align="center">AddTime()</td><td align="center">增加一个时间（时、分等）</td></tr><tr><td align="center">CurDate()</td><td align="center">返回当前日期</td></tr><tr><td align="center">CurTime()</td><td align="center">返回当前时间</td></tr><tr><td align="center">Date()</td><td align="center">返回日期时间的日期部分</td></tr><tr><td align="center">DateDiff()</td><td align="center">计算两个日期之差</td></tr><tr><td align="center">Date_Add()</td><td align="center">高度灵活的日期运算函数</td></tr><tr><td align="center">Date_Format()</td><td align="center">返回一个格式化的日期或时间串</td></tr><tr><td align="center">Day()</td><td align="center">返回一个日期的天数部分</td></tr><tr><td align="center">DayOfWeek()</td><td align="center">对于一个日期，返回对应的星期几</td></tr><tr><td align="center">Hour()</td><td align="center">返回一个时间的小时部分</td></tr><tr><td align="center">Minute()</td><td align="center">返回一个时间的分钟部分</td></tr><tr><td align="center">Month()</td><td align="center">返回一个日期的月份部分</td></tr><tr><td align="center">Now()</td><td align="center">返回当前日期和时间</td></tr><tr><td align="center">Second()</td><td align="center">返回一个时间的秒部分</td></tr><tr><td align="center">Time()</td><td align="center">返回一个日期时间的时间部分</td></tr><tr><td align="center">Year()</td><td align="center">返回一个日期的年份部分</td></tr></tbody></table><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang"></div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql> SELECT NOW();</span><br></pre></td></tr></tbody></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2018-4-14 20:25:11</span><br></pre></td></tr></tbody></table></figure></div><h2 id="数值处理"><a href="#数值处理" class="headerlink" title="数值处理"></a>数值处理</h2><table><thead><tr><th align="center">函数</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">SIN()</td><td align="center">正弦</td></tr><tr><td align="center">COS()</td><td align="center">余弦</td></tr><tr><td align="center">TAN()</td><td align="center">正切</td></tr><tr><td align="center">ABS()</td><td align="center">绝对值</td></tr><tr><td align="center">SQRT()</td><td align="center">平方根</td></tr><tr><td align="center">MOD()</td><td align="center">余数</td></tr><tr><td align="center">EXP()</td><td align="center">指数</td></tr><tr><td align="center">PI()</td><td align="center">圆周率</td></tr><tr><td align="center">RAND()</td><td align="center">随机数</td></tr></tbody></table><h1 id="十三、分组"><a href="#十三、分组" class="headerlink" title="十三、分组"></a>十三、分组</h1><p>分组就是把具有相同的数据值的行放在同一组中。</p><p>可以对同一分组数据使用汇总函数进行处理，例如求分组数据的平均值等。</p><p>指定的分组字段除了能按该字段进行分组，也会自动按该字段进行排序。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sql</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">col</span>, <span class="keyword">COUNT</span>(*) <span class="keyword">AS</span> <span class="keyword">num</span></span><br><span class="line"><span class="keyword">FROM</span> mytable</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> <span class="keyword">col</span>;</span><br></pre></td></tr></tbody></table></figure></div><p>GROUP BY 自动按分组字段进行排序，ORDER BY 也可以按汇总字段来进行排序。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sql</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">col</span>, <span class="keyword">COUNT</span>(*) <span class="keyword">AS</span> <span class="keyword">num</span></span><br><span class="line"><span class="keyword">FROM</span> mytable</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> <span class="keyword">col</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="keyword">num</span>;</span><br></pre></td></tr></tbody></table></figure></div><p>WHERE 过滤行，HAVING 过滤分组，行过滤应当先于分组过滤。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sql</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">col</span>, <span class="keyword">COUNT</span>(*) <span class="keyword">AS</span> <span class="keyword">num</span></span><br><span class="line"><span class="keyword">FROM</span> mytable</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">col</span> > <span class="number">2</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> <span class="keyword">col</span></span><br><span class="line"><span class="keyword">HAVING</span> <span class="keyword">num</span> >= <span class="number">2</span>;</span><br></pre></td></tr></tbody></table></figure></div><p>分组规定：</p><ul><li>GROUP BY 子句出现在 WHERE 子句之后，ORDER BY 子句之前；</li><li>除了汇总字段外，SELECT 语句中的每一字段都必须在 GROUP BY 子句中给出；</li><li>NULL 的行会单独分为一组；</li><li>大多数 SQL 实现不支持 GROUP BY 列具有可变长度的数据类型。</li></ul><h1 id="十四、子查询"><a href="#十四、子查询" class="headerlink" title="十四、子查询"></a>十四、子查询</h1><p>子查询中只能返回一个字段的数据。</p><p>可以将子查询的结果作为 WHRER 语句的过滤条件：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sql</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> *</span><br><span class="line"><span class="keyword">FROM</span> mytable1</span><br><span class="line"><span class="keyword">WHERE</span> col1 <span class="keyword">IN</span> (<span class="keyword">SELECT</span> col2</span><br><span class="line">               <span class="keyword">FROM</span> mytable2);</span><br></pre></td></tr></tbody></table></figure></div><p>下面的语句可以检索出客户的订单数量，子查询语句会对第一个查询检索出的每个客户执行一次：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sql</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> cust_name, (<span class="keyword">SELECT</span> <span class="keyword">COUNT</span>(*)</span><br><span class="line">                   <span class="keyword">FROM</span> Orders</span><br><span class="line">                   <span class="keyword">WHERE</span> Orders.cust_id = Customers.cust_id)</span><br><span class="line">                   <span class="keyword">AS</span> orders_num</span><br><span class="line"><span class="keyword">FROM</span> Customers</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> cust_name;</span><br></pre></td></tr></tbody></table></figure></div><h1 id="十五、连接"><a href="#十五、连接" class="headerlink" title="十五、连接"></a>十五、连接</h1><p>连接用于连接多个表，使用 JOIN 关键字，并且条件语句使用 ON 而不是 WHERE。</p><p>连接可以替换子查询，并且比子查询的效率一般会更快。</p><p>可以用 AS 给列名、计算字段和表名取别名，给表名取别名是为了简化 SQL 语句以及连接相同表。</p><h2 id="内连接"><a href="#内连接" class="headerlink" title="内连接"></a>内连接</h2><p>内连接又称等值连接，使用 INNER JOIN 关键字。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sql</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> A.value, B.value</span><br><span class="line"><span class="keyword">FROM</span> tablea <span class="keyword">AS</span> A <span class="keyword">INNER</span> <span class="keyword">JOIN</span> tableb <span class="keyword">AS</span> B</span><br><span class="line"><span class="keyword">ON</span> A.key = B.key;</span><br></pre></td></tr></tbody></table></figure></div><p>可以不明确使用 INNER JOIN，而使用普通查询并在 WHERE 中将两个表中要连接的列用等值方法连接起来。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sql</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> A.value, B.value</span><br><span class="line"><span class="keyword">FROM</span> tablea <span class="keyword">AS</span> A, tableb <span class="keyword">AS</span> B</span><br><span class="line"><span class="keyword">WHERE</span> A.key = B.key;</span><br></pre></td></tr></tbody></table></figure></div><p>在没有条件语句的情况下返回笛卡尔积。</p><h2 id="自连接"><a href="#自连接" class="headerlink" title="自连接"></a>自连接</h2><p>自连接可以看成内连接的一种，只是连接的表是自身而已。</p><p>一张员工表，包含员工姓名和员工所属部门，要找出与 Jim 处在同一部门的所有员工姓名。</p><p>子查询版本</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sql</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">name</span></span><br><span class="line"><span class="keyword">FROM</span> employee</span><br><span class="line"><span class="keyword">WHERE</span> department = (</span><br><span class="line">      <span class="keyword">SELECT</span> department</span><br><span class="line">      <span class="keyword">FROM</span> employee</span><br><span class="line">      <span class="keyword">WHERE</span> <span class="keyword">name</span> = <span class="string">"Jim"</span>);</span><br></pre></td></tr></tbody></table></figure></div><p>自连接版本</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sql</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> e1.name</span><br><span class="line"><span class="keyword">FROM</span> employee <span class="keyword">AS</span> e1 <span class="keyword">INNER</span> <span class="keyword">JOIN</span> employee <span class="keyword">AS</span> e2</span><br><span class="line"><span class="keyword">ON</span> e1.department = e2.department</span><br><span class="line">      <span class="keyword">AND</span> e2.name = <span class="string">"Jim"</span>;</span><br></pre></td></tr></tbody></table></figure></div><h2 id="自然连接"><a href="#自然连接" class="headerlink" title="自然连接"></a>自然连接</h2><p>自然连接是把同名列通过等值测试连接起来的，同名列可以有多个。</p><p>内连接和自然连接的区别：内连接提供连接的列，而自然连接自动连接所有同名列。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sql</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> A.value, B.value</span><br><span class="line"><span class="keyword">FROM</span> tablea <span class="keyword">AS</span> A <span class="keyword">NATURAL</span> <span class="keyword">JOIN</span> tableb <span class="keyword">AS</span> B;</span><br></pre></td></tr></tbody></table></figure></div><h2 id="外连接"><a href="#外连接" class="headerlink" title="外连接"></a>外连接</h2><p>外连接保留了没有关联的那些行。分为左外连接，右外连接以及全外连接，左外连接就是保留左表没有关联的行。</p><p>检索所有顾客的订单信息，包括还没有订单信息的顾客。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sql</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Customers.cust_id, Orders.order_num</span><br><span class="line"><span class="keyword">FROM</span> Customers <span class="keyword">LEFT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> Orders</span><br><span class="line"><span class="keyword">ON</span> Customers.cust_id = Orders.cust_id;</span><br></pre></td></tr></tbody></table></figure></div><p>customers 表：</p><table><thead><tr><th align="center">cust_id</th><th align="center">cust_name</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">a</td></tr><tr><td align="center">2</td><td align="center">b</td></tr><tr><td align="center">3</td><td align="center">c</td></tr></tbody></table><p>orders 表：</p><table><thead><tr><th align="center">order_id</th><th align="center">cust_id</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">1</td></tr><tr><td align="center">2</td><td align="center">1</td></tr><tr><td align="center">3</td><td align="center">3</td></tr><tr><td align="center">4</td><td align="center">3</td></tr></tbody></table><p>结果：</p><table><thead><tr><th align="center">cust_id</th><th align="center">cust_name</th><th align="center">order_id</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">a</td><td align="center">1</td></tr><tr><td align="center">1</td><td align="center">a</td><td align="center">2</td></tr><tr><td align="center">3</td><td align="center">c</td><td align="center">3</td></tr><tr><td align="center">3</td><td align="center">c</td><td align="center">4</td></tr><tr><td align="center">2</td><td align="center">b</td><td align="center">Null</td></tr></tbody></table><h1 id="十六、组合查询"><a href="#十六、组合查询" class="headerlink" title="十六、组合查询"></a>十六、组合查询</h1><p>使用  <strong>UNION</strong>  来组合两个查询，如果第一个查询返回 M 行，第二个查询返回 N 行，那么组合查询的结果一般为 M+N 行。</p><p>每个查询必须包含相同的列、表达式和聚集函数。</p><p>默认会去除相同行，如果需要保留相同行，使用 UNION ALL。</p><p>只能包含一个 ORDER BY 子句，并且必须位于语句的最后。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sql</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">col</span></span><br><span class="line"><span class="keyword">FROM</span> mytable</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">col</span> = <span class="number">1</span></span><br><span class="line"><span class="keyword">UNION</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">col</span></span><br><span class="line"><span class="keyword">FROM</span> mytable</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">col</span> =<span class="number">2</span>;</span><br></pre></td></tr></tbody></table></figure></div><h1 id="十七、视图"><a href="#十七、视图" class="headerlink" title="十七、视图"></a>十七、视图</h1><p>视图是虚拟的表，本身不包含数据，也就不能对其进行索引操作。</p><p>对视图的操作和对普通表的操作一样。</p><p>视图具有如下好处：</p><ul><li>简化复杂的 SQL 操作，比如复杂的连接；</li><li>只使用实际表的一部分数据；</li><li>通过只给用户访问视图的权限，保证数据的安全性；</li><li>更改数据格式和表示。</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sql</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> myview <span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">Concat</span>(col1, col2) <span class="keyword">AS</span> concat_col, col3*col4 <span class="keyword">AS</span> compute_col</span><br><span class="line"><span class="keyword">FROM</span> mytable</span><br><span class="line"><span class="keyword">WHERE</span> col5 = val;</span><br></pre></td></tr></tbody></table></figure></div><h1 id="十八、存储过程"><a href="#十八、存储过程" class="headerlink" title="十八、存储过程"></a>十八、存储过程</h1><p>存储过程可以看成是对一系列 SQL 操作的批处理。</p><p>使用存储过程的好处：</p><ul><li>代码封装，保证了一定的安全性；</li><li>代码复用；</li><li>由于是预先编译，因此具有很高的性能。</li></ul><p>命令行中创建存储过程需要自定义分隔符，因为命令行是以 ; 为结束符，而存储过程中也包含了分号，因此会错误把这部分分号当成是结束符，造成语法错误。</p><p>包含 in、out 和 inout 三种参数。</p><p>给变量赋值都需要用 select into 语句。</p><p>每次只能给一个变量赋值，不支持集合的操作。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sql</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">delimiter //</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> myprocedure( <span class="keyword">out</span> ret <span class="built_in">int</span> )</span><br><span class="line">    <span class="keyword">begin</span></span><br><span class="line">        <span class="keyword">declare</span> y <span class="built_in">int</span>;</span><br><span class="line">        <span class="keyword">select</span> <span class="keyword">sum</span>(col1)</span><br><span class="line">        <span class="keyword">from</span> mytable</span><br><span class="line">        <span class="keyword">into</span> y;</span><br><span class="line">        <span class="keyword">select</span> y*y <span class="keyword">into</span> ret;</span><br><span class="line">    <span class="keyword">end</span> //</span><br><span class="line"></span><br><span class="line">delimiter ;</span><br></pre></td></tr></tbody></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sql</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">call</span> myprocedure(@ret);</span><br><span class="line"><span class="keyword">select</span> @ret;</span><br></pre></td></tr></tbody></table></figure></div><h1 id="十九、游标"><a href="#十九、游标" class="headerlink" title="十九、游标"></a>十九、游标</h1><p>在存储过程中使用游标可以对一个结果集进行移动遍历。</p><p>游标主要用于交互式应用，其中用户需要对数据集中的任意行进行浏览和修改。</p><p>使用游标的四个步骤：</p><ol><li>声明游标，这个过程没有实际检索出数据；</li><li>打开游标；</li><li>取出数据；</li><li>关闭游标；</li></ol><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sql</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">delimiter //</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> myprocedure(<span class="keyword">out</span> ret <span class="built_in">int</span>)</span><br><span class="line">    <span class="keyword">begin</span></span><br><span class="line">        <span class="keyword">declare</span> done <span class="built_in">boolean</span> <span class="keyword">default</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">declare</span> mycursor <span class="keyword">cursor</span> <span class="keyword">for</span></span><br><span class="line">        <span class="keyword">select</span> col1 <span class="keyword">from</span> mytable;</span><br><span class="line">        <span class="comment"># 定义了一个 continue handler，当 sqlstate '02000' 这个条件出现时，会执行 set done = 1</span></span><br><span class="line">        <span class="keyword">declare</span> continue <span class="keyword">handler</span> <span class="keyword">for</span> <span class="keyword">sqlstate</span> <span class="string">'02000'</span> <span class="keyword">set</span> done = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        open mycursor;</span><br><span class="line"></span><br><span class="line">        repeat</span><br><span class="line">            fetch mycursor into ret;</span><br><span class="line">            <span class="keyword">select</span> ret;</span><br><span class="line">        until done <span class="keyword">end</span> <span class="keyword">repeat</span>;</span><br><span class="line"></span><br><span class="line">        close mycursor;</span><br><span class="line">    <span class="keyword">end</span> //</span><br><span class="line"> delimiter ;</span><br></pre></td></tr></tbody></table></figure></div><h1 id="二十、触发器"><a href="#二十、触发器" class="headerlink" title="二十、触发器"></a>二十、触发器</h1><p>触发器会在某个表执行以下语句时而自动执行：DELETE、INSERT、UPDATE。</p><p>触发器必须指定在语句执行之前还是之后自动执行，之前执行使用 BEFORE 关键字，之后执行使用 AFTER 关键字。BEFORE 用于数据验证和净化，AFTER 用于审计跟踪，将修改记录到另外一张表中。</p><p>INSERT 触发器包含一个名为 NEW 的虚拟表。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sql</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TRIGGER</span> mytrigger <span class="keyword">AFTER</span> <span class="keyword">INSERT</span> <span class="keyword">ON</span> mytable</span><br><span class="line"><span class="keyword">FOR</span> <span class="keyword">EACH</span> <span class="keyword">ROW</span> <span class="keyword">SELECT</span> NEW.col <span class="keyword">into</span> @<span class="keyword">result</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> @<span class="keyword">result</span>; <span class="comment">-- 获取结果</span></span><br></pre></td></tr></tbody></table></figure></div><p>DELETE 触发器包含一个名为 OLD 的虚拟表，并且是只读的。</p><p>UPDATE 触发器包含一个名为 NEW 和一个名为 OLD 的虚拟表，其中 NEW 是可以被修改的，而 OLD 是只读的。</p><p>MySQL 不允许在触发器中使用 CALL 语句，也就是不能调用存储过程。</p><h1 id="二十一、事务管理"><a href="#二十一、事务管理" class="headerlink" title="二十一、事务管理"></a>二十一、事务管理</h1><p>基本术语：</p><ul><li>事务（transaction）指一组 SQL 语句；</li><li>回退（rollback）指撤销指定 SQL 语句的过程；</li><li>提交（commit）指将未存储的 SQL 语句结果写入数据库表；</li><li>保留点（savepoint）指事务处理中设置的临时占位符（placeholder），你可以对它发布回退（与回退整个事务处理不同）。</li></ul><p>不能回退 SELECT 语句，回退 SELECT 语句也没意义；也不能回退 CREATE 和 DROP 语句。</p><p>MySQL 的事务提交默认是隐式提交，每执行一条语句就把这条语句当成一个事务然后进行提交。当出现 START TRANSACTION 语句时，会关闭隐式提交；当 COMMIT 或 ROLLBACK 语句执行后，事务会自动关闭，重新恢复隐式提交。</p><p>通过设置 autocommit 为 0 可以取消自动提交；autocommit 标记是针对每个连接而不是针对服务器的。</p><p>如果没有设置保留点，ROLLBACK 会回退到 START TRANSACTION 语句处；如果设置了保留点，并且在 ROLLBACK 中指定该保留点，则会回退到该保留点。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sql</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">START</span> <span class="keyword">TRANSACTION</span></span><br><span class="line">// ...</span><br><span class="line"><span class="keyword">SAVEPOINT</span> delete1</span><br><span class="line">// ...</span><br><span class="line"><span class="keyword">ROLLBACK</span> <span class="keyword">TO</span> delete1</span><br><span class="line">// ...</span><br><span class="line"><span class="keyword">COMMIT</span></span><br></pre></td></tr></tbody></table></figure></div><h1 id="二十二、字符集"><a href="#二十二、字符集" class="headerlink" title="二十二、字符集"></a>二十二、字符集</h1><p>基本术语：</p><ul><li>字符集为字母和符号的集合；</li><li>编码为某个字符集成员的内部表示；</li><li>校对字符指定如何比较，主要用于排序和分组。</li></ul><p>除了给表指定字符集和校对外，也可以给列指定：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sql</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> mytable</span><br><span class="line">(<span class="keyword">col</span> <span class="built_in">VARCHAR</span>(<span class="number">10</span>) <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> latin <span class="keyword">COLLATE</span> latin1_general_ci )</span><br><span class="line"><span class="keyword">DEFAULT</span> <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> hebrew <span class="keyword">COLLATE</span> hebrew_general_ci;</span><br></pre></td></tr></tbody></table></figure></div><p>可以在排序、分组时指定校对：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sql</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> *</span><br><span class="line"><span class="keyword">FROM</span> mytable</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="keyword">col</span> <span class="keyword">COLLATE</span> latin1_general_ci;</span><br></pre></td></tr></tbody></table></figure></div><h1 id="二十三、权限管理"><a href="#二十三、权限管理" class="headerlink" title="二十三、权限管理"></a>二十三、权限管理</h1><p>MySQL 的账户信息保存在 mysql 这个数据库中。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sql</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">USE</span> mysql;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">user</span> <span class="keyword">FROM</span> <span class="keyword">user</span>;</span><br></pre></td></tr></tbody></table></figure></div><p><strong>创建账户</strong> </p><p>新创建的账户没有任何权限。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sql</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> myuser <span class="keyword">IDENTIFIED</span> <span class="keyword">BY</span> <span class="string">'mypassword'</span>;</span><br></pre></td></tr></tbody></table></figure></div><p><strong>修改账户名</strong> </p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sql</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">RENAME</span> myuser <span class="keyword">TO</span> newuser;</span><br></pre></td></tr></tbody></table></figure></div><p><strong>删除账户</strong> </p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sql</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">USER</span> myuser;</span><br></pre></td></tr></tbody></table></figure></div><p><strong>查看权限</strong> </p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sql</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">GRANTS</span> <span class="keyword">FOR</span> myuser;</span><br></pre></td></tr></tbody></table></figure></div><p><strong>授予权限</strong> </p><p>账户用 username@host 的形式定义，username@% 使用的是默认主机名。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sql</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GRANT</span> <span class="keyword">SELECT</span>, <span class="keyword">INSERT</span> <span class="keyword">ON</span> mydatabase.* <span class="keyword">TO</span> myuser;</span><br></pre></td></tr></tbody></table></figure></div><p><strong>删除权限</strong> </p><p>GRANT 和 REVOKE 可在几个层次上控制访问权限：</p><ul><li>整个服务器，使用 GRANT ALL 和 REVOKE ALL；</li><li>整个数据库，使用 ON database.*；</li><li>特定的表，使用 ON database.table；</li><li>特定的列；</li><li>特定的存储过程。</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sql</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">REVOKE</span> <span class="keyword">SELECT</span>, <span class="keyword">INSERT</span> <span class="keyword">ON</span> mydatabase.* <span class="keyword">FROM</span> myuser;</span><br></pre></td></tr></tbody></table></figure></div><p><strong>更改密码</strong> </p><p>必须使用 Password() 函数</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sql</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SET</span> PASSWROD <span class="keyword">FOR</span> myuser = <span class="keyword">Password</span>(<span class="string">'new_password'</span>);</span><br></pre></td></tr></tbody></table></figure></div><h1 id="Mysql如何为表字段添加索引"><a href="#Mysql如何为表字段添加索引" class="headerlink" title="Mysql如何为表字段添加索引"></a>Mysql如何为表字段添加索引</h1><p>1.添加PRIMARY KEY（主键索引）</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sql</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="string">`table_name`</span> <span class="keyword">ADD</span> PRIMARY <span class="keyword">KEY</span> ( <span class="string">`column`</span> )</span><br></pre></td></tr></tbody></table></figure></div><p>2.添加UNIQUE(唯一索引)</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sql</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="string">`table_name`</span> <span class="keyword">ADD</span> <span class="keyword">UNIQUE</span> ( <span class="string">`column`</span> )</span><br></pre></td></tr></tbody></table></figure></div><p>3.添加INDEX(普通索引)</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sql</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="string">`table_name`</span> <span class="keyword">ADD</span> <span class="keyword">INDEX</span> index_name ( <span class="string">`column`</span> )</span><br></pre></td></tr></tbody></table></figure></div><p>4.添加FULLTEXT(全文索引)</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sql</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="string">`table_name`</span> <span class="keyword">ADD</span> FULLTEXT ( <span class="string">`column`</span>)</span><br></pre></td></tr></tbody></table></figure></div><p>5.添加多列索引</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sql</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="string">`table_name`</span> <span class="keyword">ADD</span> <span class="keyword">INDEX</span> index_name ( <span class="string">`column1`</span>, <span class="string">`column2`</span>, <span class="string">`column3`</span> )</span><br></pre></td></tr></tbody></table></figure></div><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul><li>BenForta. SQL 必知必会 [M]. 人民邮电出版社, 2013.</li></ul></body></html>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>超详细 Nginx 极简教程</title>
      <link href="/2018/11/15/%E8%B6%85%E8%AF%A6%E7%BB%86%20Nginx%20%E6%9E%81%E7%AE%80%E6%95%99%E7%A8%8B/"/>
      <url>/2018/11/15/%E8%B6%85%E8%AF%A6%E7%BB%86%20Nginx%20%E6%9E%81%E7%AE%80%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script></head><body><h1 id="超详细-Nginx-极简教程"><a href="#超详细-Nginx-极简教程" class="headerlink" title="超详细 Nginx 极简教程"></a>超详细 Nginx 极简教程</h1><h3 id="什么是Nginx"><a href="#什么是Nginx" class="headerlink" title="什么是Nginx?"></a>什么是Nginx?</h3><p>Nginx (engine x) 是一款轻量级的Web 服务器 、反向代理服务器及电子邮件（IMAP/POP3）代理服务器。</p><h3 id="什么是反向代理？"><a href="#什么是反向代理？" class="headerlink" title="什么是反向代理？"></a>什么是反向代理？</h3><p>反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个反向代理服务器。</p><p><a href="https://i.imgur.com/A4ix0XJ.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.imgur.com/A4ix0XJ.jpg" class="lazyload"></a></p><h2 id="安装与使用"><a href="#安装与使用" class="headerlink" title="安装与使用"></a>安装与使用</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>nginx官网下载地址：<a href="http://nginx.org，发布版本分为" target="_blank" rel="noopener">http://nginx.org，发布版本分为</a> Linux 和 windows 版本。<br>也可以下载源码，编译后运行。</p><h3 id="从源代码编译-Nginx"><a href="#从源代码编译-Nginx" class="headerlink" title="从源代码编译 Nginx"></a>从源代码编译 Nginx</h3><p>把源码解压缩之后，在终端里运行如下命令：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd C:</span><br><span class="line">cd C: ginx-0.8.54   start nginx</span><br></pre></td></tr></tbody></table></figure></div><p>Nginx / Win32 是运行在一个控制台程序，而非 windows 服务方式的。服务器方式目前还是开发尝试中。</p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>nginx 的使用比较简单，就是几条命令。<br>常用到的命令如下：</p><ul><li><p>nginx -s stop ：快速关闭Nginx，可能不保存相关信息，并迅速终止web服务。</p></li><li><p>nginx -s quit ：平稳关闭Nginx，保存相关信息，有安排的结束web服务。</p></li><li><p>nginx -s reload ：因改变了Nginx相关配置，需要重新加载配置而重载。</p></li><li><p>nginx -s reopen ：重新打开日志文件。</p></li><li><p>nginx -c filename ：为 Nginx 指定一个配置文件，来代替缺省的。</p></li><li><p>nginx -t ：不运行，而仅仅测试配置文件。nginx 将检查配置文件的语法的正确性，并尝试打开配置文件中所引用到的文件。</p></li><li><p>nginx -v：显示 nginx 的版本。</p></li><li><p>nginx -V：显示 nginx 的版本，编译器版本和配置参数。</p></li></ul><p>如果不想每次都敲命令，可以在nginx安装目录下新添一个启动批处理文件startup.bat，双击即可运行。内容如下：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">@echo off</span><br><span class="line">rem 如果启动前已经启动nginx并记录下pid文件，会kill指定进程</span><br><span class="line">nginx.exe -s stop</span><br><span class="line"></span><br><span class="line">rem 测试配置文件语法正确性</span><br><span class="line">nginx.exe -t -c conf/nginx.conf</span><br><span class="line"></span><br><span class="line">rem 显示版本信息</span><br><span class="line">nginx.exe -v</span><br><span class="line"></span><br><span class="line">rem 按照指定配置去启动nginx</span><br><span class="line">nginx.exe -c conf/nginx.conf</span><br></pre></td></tr></tbody></table></figure></div><p>如果是运行在 Linux 下，写一个 shell 脚本，大同小异。</p><h3 id="nginx-配置实战"><a href="#nginx-配置实战" class="headerlink" title="nginx 配置实战"></a>nginx 配置实战</h3><p>我始终认为，各种开发工具的配置还是结合实战来讲述，会让人更易理解。</p><h3 id="http反向代理配置"><a href="#http反向代理配置" class="headerlink" title="http反向代理配置"></a>http反向代理配置</h3><p>我们先实现一个小目标：不考虑复杂的配置，仅仅是完成一个 http 反向代理。</p><h3 id="nginx-conf-配置文件如下："><a href="#nginx-conf-配置文件如下：" class="headerlink" title="nginx.conf 配置文件如下："></a>nginx.conf 配置文件如下：</h3><p>注：conf / nginx.conf 是 nginx 的默认配置文件。你也可以使用 nginx -c 指定你的配置文件</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line">#运行用户</span><br><span class="line">#user somebody;</span><br><span class="line"></span><br><span class="line">#启动进程,通常设置成和cpu的数量相等</span><br><span class="line">worker_processes  1;</span><br><span class="line"></span><br><span class="line">#全局错误日志</span><br><span class="line">error_log  D:/Tools/nginx-1.10.1/logs/error.log;</span><br><span class="line">error_log  D:/Tools/nginx-1.10.1/logs/notice.log  notice;</span><br><span class="line">error_log  D:/Tools/nginx-1.10.1/logs/info.log  info;</span><br><span class="line"></span><br><span class="line">#PID文件，记录当前启动的nginx的进程ID</span><br><span class="line">pid        D:/Tools/nginx-1.10.1/logs/nginx.pid;</span><br><span class="line"></span><br><span class="line">#工作模式及连接数上限</span><br><span class="line">events {</span><br><span class="line">   worker_connections 1024;    #单个后台worker process进程的最大并发链接数</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">#设定http服务器，利用它的反向代理功能提供负载均衡支持</span><br><span class="line">http {</span><br><span class="line">   #设定mime类型(邮件支持类型),类型由mime.types文件定义</span><br><span class="line">   include       D:/Tools/nginx-1.10.1/conf/mime.types;</span><br><span class="line">   default_type  application/octet-stream;</span><br><span class="line">   </span><br><span class="line">   #设定日志</span><br><span class="line">   log_format  main  '[$remote_addr] - [$remote_user] [$time_local] "$request" '</span><br><span class="line">                     '$status $body_bytes_sent "$http_referer" '</span><br><span class="line">                     '"$http_user_agent" "$http_x_forwarded_for"';</span><br><span class="line">                     </span><br><span class="line">   access_log    D:/Tools/nginx-1.10.1/logs/access.log main;</span><br><span class="line">   rewrite_log     on;</span><br><span class="line">   </span><br><span class="line">   #sendfile 指令指定 nginx 是否调用 sendfile 函数（zero copy 方式）来输出文件，对于普通应用，</span><br><span class="line">   #必须设为 on,如果用来进行下载等应用磁盘IO重负载应用，可设置为 off，以平衡磁盘与网络I/O处理速度，降低系统的uptime.</span><br><span class="line">   sendfile        on;</span><br><span class="line">   #tcp_nopush     on;</span><br><span class="line"></span><br><span class="line">   #连接超时时间</span><br><span class="line">   keepalive_timeout  120;</span><br><span class="line">   tcp_nodelay        on;</span><br><span class="line">   </span><br><span class="line">   #gzip压缩开关</span><br><span class="line">   #gzip  on;</span><br><span class="line"></span><br><span class="line">   #设定实际的服务器列表 </span><br><span class="line">   upstream zp_server1{</span><br><span class="line">       server 127.0.0.1:8089;</span><br><span class="line">   }</span><br><span class="line"></span><br><span class="line">   #HTTP服务器</span><br><span class="line">   server {</span><br><span class="line">       #监听80端口，80端口是知名端口号，用于HTTP协议</span><br><span class="line">       listen       80;</span><br><span class="line">       </span><br><span class="line">       #定义使用www.xx.com访问</span><br><span class="line">       server_name  www.javastack.cn;</span><br><span class="line">       </span><br><span class="line">       #首页</span><br><span class="line">       index index.html</span><br><span class="line">       </span><br><span class="line">       #指向webapp的目录</span><br><span class="line">       root D:_WorkspaceProjectgithubzpSpringNotesspring-securityspring-shirosrcmainwebapp;</span><br><span class="line">       </span><br><span class="line">       #编码格式</span><br><span class="line">       charset utf-8;</span><br><span class="line">       </span><br><span class="line">       #代理配置参数</span><br><span class="line">       proxy_connect_timeout 180;</span><br><span class="line">       proxy_send_timeout 180;</span><br><span class="line">       proxy_read_timeout 180;</span><br><span class="line">       proxy_set_header Host $host;</span><br><span class="line">       proxy_set_header X-Forwarder-For $remote_addr;</span><br><span class="line"></span><br><span class="line">       #反向代理的路径（和upstream绑定），location 后面设置映射的路径</span><br><span class="line">       location / {</span><br><span class="line">           proxy_pass http://zp_server1;</span><br><span class="line">       } </span><br><span class="line"></span><br><span class="line">       #静态文件，nginx自己处理</span><br><span class="line">       location ~ ^/(images|javascript|js|css|flash|media|static)/ {</span><br><span class="line">           root D:_WorkspaceProjectgithubzpSpringNotesspring-securityspring-shirosrcmainwebappiews;</span><br><span class="line">           #过期30天，静态文件不怎么更新，过期可以设大一点，如果频繁更新，则可以设置得小一点。</span><br><span class="line">           expires 30d;</span><br><span class="line">       }</span><br><span class="line">   </span><br><span class="line">       #设定查看Nginx状态的地址</span><br><span class="line">       location /NginxStatus {</span><br><span class="line">           stub_status           on;</span><br><span class="line">           access_log            on;</span><br><span class="line">           auth_basic            "NginxStatus";</span><br><span class="line">           auth_basic_user_file  conf/htpasswd;</span><br><span class="line">       }</span><br><span class="line">   </span><br><span class="line">       #禁止访问 .htxxx 文件</span><br><span class="line">       location ~ /.ht {</span><br><span class="line">           deny all;</span><br><span class="line">       }</span><br><span class="line">       </span><br><span class="line">       #错误处理页面（可选择性配置）</span><br><span class="line">       #error_page   404              /404.html;</span><br><span class="line">       #error_page   500 502 503 504  /50x.html;</span><br><span class="line">       #location = /50x.html {</span><br><span class="line">       #    root   html;</span><br><span class="line">       #}</span><br><span class="line">   }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p>好了，让我们来试试吧：</p><p>启动 webapp，注意启动绑定的端口要和nginx中的 upstream 设置的端口保持一致。</p><p>更改 host：</p><p>在 C:Windows\System32\drivers\etc 目录下的host文件中添加一条DNS 记录127.0.0.1 <a href="http://www.javastack.cn" target="_blank" rel="noopener">www.javastack.cn</a> 启动前文中 startup.bat 的命令</p><p>在浏览器中访问 <a href="http://www.javastack.cn，不出意外，已经可以访问了。" target="_blank" rel="noopener">www.javastack.cn，不出意外，已经可以访问了。</a></p><h3 id="负载均衡配置"><a href="#负载均衡配置" class="headerlink" title="负载均衡配置"></a>负载均衡配置</h3><p>上一个例子中，代理仅仅指向一个服务器。</p><p>但是，网站在实际运营过程中，多半都是有多台服务器运行着同样的app，这时需要使用负载均衡来分流。</p><p>nginx也可以实现简单的负载均衡功能。</p><p>假设这样一个应用场景：将应用部署在 192.168.1.11:80、192.168.1.12:80、192.168.1.13:80 三台linux环境的服务器上。网站域名叫 <a href="http://www.javastack.cn，公网IP为" target="_blank" rel="noopener">www.javastack.cn，公网IP为</a> 192.168.1.11。在公网IP所在的服务器上部署 nginx，对所有请求做负载均衡处理。</p><p>nginx.conf 配置如下：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">http {</span><br><span class="line">    #设定mime类型,类型由mime.type文件定义</span><br><span class="line">   include       /etc/nginx/mime.types;</span><br><span class="line">   default_type  application/octet-stream;</span><br><span class="line"><span class="meta">   #</span><span class="bash">设定日志格式</span></span><br><span class="line">   access_log    /var/log/nginx/access.log;</span><br><span class="line"></span><br><span class="line"><span class="meta">   #</span><span class="bash">设定负载均衡的服务器列表</span></span><br><span class="line">   upstream load_balance_server {</span><br><span class="line">       #weigth参数表示权值，权值越高被分配到的几率越大</span><br><span class="line">       server 192.168.1.11:80   weight=5;</span><br><span class="line">       server 192.168.1.12:80   weight=1;</span><br><span class="line">       server 192.168.1.13:80   weight=6;</span><br><span class="line">   }</span><br><span class="line"></span><br><span class="line"><span class="meta">  #</span><span class="bash">HTTP服务器</span></span><br><span class="line">  server {</span><br><span class="line">       #侦听80端口</span><br><span class="line">       listen       80;</span><br><span class="line">       </span><br><span class="line">       #定义使用www.xx.com访问</span><br><span class="line">       server_name  www.javastack.cn;</span><br><span class="line"></span><br><span class="line">       #对所有请求进行负载均衡请求</span><br><span class="line">       location / {</span><br><span class="line">           root        /root;                 #定义服务器的默认网站根目录位置</span><br><span class="line">           index       index.html index.htm;  #定义首页索引文件的名称</span><br><span class="line">           proxy_pass  http://load_balance_server ;#请求转向load_balance_server 定义的服务器列表</span><br><span class="line"></span><br><span class="line">           #以下是一些反向代理的配置(可选择性配置)</span><br><span class="line">           #proxy_redirect off;</span><br><span class="line">           proxy_set_header Host $host;</span><br><span class="line">           proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">           #后端的Web服务器可以通过X-Forwarded-For获取用户真实IP</span><br><span class="line">           proxy_set_header X-Forwarded-For $remote_addr;</span><br><span class="line">           proxy_connect_timeout 90;          #nginx跟后端服务器连接超时时间(代理连接超时)</span><br><span class="line">           proxy_send_timeout 90;             #后端服务器数据回传时间(代理发送超时)</span><br><span class="line">           proxy_read_timeout 90;             #连接成功后，后端服务器响应时间(代理接收超时)</span><br><span class="line">           proxy_buffer_size 4k;              #设置代理服务器（nginx）保存用户头信息的缓冲区大小</span><br><span class="line">           proxy_buffers 4 32k;               #proxy_buffers缓冲区，网页平均在32k以下的话，这样设置</span><br><span class="line">           proxy_busy_buffers_size 64k;       #高负荷下缓冲大小（proxy_buffers*2）</span><br><span class="line">           proxy_temp_file_write_size 64k;    #设定缓存文件夹大小，大于这个值，将从upstream服务器传</span><br><span class="line">           </span><br><span class="line">           client_max_body_size 10m;          #允许客户端请求的最大单文件字节数</span><br><span class="line">           client_body_buffer_size 128k;      #缓冲区代理缓冲用户端请求的最大字节数</span><br><span class="line">       }</span><br><span class="line">   }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><h3 id="网站有多个webapp的配置"><a href="#网站有多个webapp的配置" class="headerlink" title="网站有多个webapp的配置"></a>网站有多个webapp的配置</h3><p>当一个网站功能越来越丰富时，往往需要将一些功能相对独立的模块剥离出来，独立维护。这样的话，通常，会有多个 webapp。</p><p>举个例子：假如 <a href="http://www.javastack.cn" target="_blank" rel="noopener">www.javastack.cn</a> 站点有好几个webapp，finance（金融）、product（产品）、admin（用户中心）。访问这些应用的方式通过上下文(context)来进行区分:</p><ul><li><p><a href="http://www.javastack.cn/finance/" target="_blank" rel="noopener">www.javastack.cn/finance/</a></p></li><li><p><a href="http://www.javastack.cn/product/" target="_blank" rel="noopener">www.javastack.cn/product/</a></p></li><li><p><a href="http://www.javastack.cn/admin/" target="_blank" rel="noopener">www.javastack.cn/admin/</a></p></li></ul><p>我们知道，http的默认端口号是80，如果在一台服务器上同时启动这3个 webapp 应用，都用80端口，肯定是不成的。所以，这三个应用需要分别绑定不同的端口号。</p><p>那么，问题来了，用户在实际访问 <a href="http://www.javastack.cn" target="_blank" rel="noopener">www.javastack.cn</a> 站点时，访问不同 webapp，总不会还带着对应的端口号去访问吧。所以，你再次需要用到反向代理来做处理。</p><p>配置也不难，来看看怎么做吧：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">http {</span><br><span class="line"><span class="meta">   #</span><span class="bash">此处省略一些基本配置</span></span><br><span class="line">   </span><br><span class="line">   upstream product_server{</span><br><span class="line">       server www.javastack.cn:8081;</span><br><span class="line">   }</span><br><span class="line">   </span><br><span class="line">   upstream admin_server{</span><br><span class="line">       server www.javastack.cn:8082;</span><br><span class="line">   }</span><br><span class="line">   </span><br><span class="line">   upstream finance_server{</span><br><span class="line">       server www.javastack.cn:8083;</span><br><span class="line">   }</span><br><span class="line"></span><br><span class="line">   server {</span><br><span class="line">       #此处省略一些基本配置</span><br><span class="line">       #默认指向product的server</span><br><span class="line">       location / {</span><br><span class="line">           proxy_pass http://product_server;</span><br><span class="line">       }</span><br><span class="line"></span><br><span class="line">       location /product/{</span><br><span class="line">           proxy_pass http://product_server;</span><br><span class="line">       }</span><br><span class="line"></span><br><span class="line">       location /admin/ {</span><br><span class="line">           proxy_pass http://admin_server;</span><br><span class="line">       }</span><br><span class="line">       </span><br><span class="line">       location /finance/ {</span><br><span class="line">           proxy_pass http://finance_server;</span><br><span class="line">       }</span><br><span class="line">   }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><h3 id="https反向代理配置"><a href="#https反向代理配置" class="headerlink" title="https反向代理配置"></a>https反向代理配置</h3><p>一些对安全性要求比较高的站点，可能会使用 HTTPS（一种使用ssl通信标准的安全HTTP协议）。</p><p>这里不科普 HTTP 协议和 SSL 标准。但是，使用 nginx 配置 https 需要知道几点：</p><ul><li><p>HTTPS 的固定端口号是 443，不同于 HTTP 的 80 端口</p></li><li><p>SSL 标准需要引入安全证书，所以在 nginx.conf 中你需要指定证书和它对应的 key</p></li></ul><p>其他和 http 反向代理基本一样，只是在 Server 部分配置有些不同。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">HTTP服务器</span></span><br><span class="line"> server {</span><br><span class="line">     #监听443端口。443为知名端口号，主要用于HTTPS协议</span><br><span class="line">     listen       443 ssl;</span><br><span class="line"></span><br><span class="line">     #定义使用www.xx.com访问</span><br><span class="line">     server_name  www.javastack.cn;</span><br><span class="line"></span><br><span class="line">     #ssl证书文件位置(常见证书文件格式为：crt/pem)</span><br><span class="line">     ssl_certificate      cert.pem;</span><br><span class="line">     #ssl证书key位置</span><br><span class="line">     ssl_certificate_key  cert.key;</span><br><span class="line"></span><br><span class="line">     #ssl配置参数（选择性配置）</span><br><span class="line">     ssl_session_cache    shared:SSL:1m;</span><br><span class="line">     ssl_session_timeout  5m;</span><br><span class="line">     #数字签名，此处使用MD5</span><br><span class="line">     ssl_ciphers  HIGH:!aNULL:!MD5;</span><br><span class="line">     ssl_prefer_server_ciphers  on;</span><br><span class="line"></span><br><span class="line">     location / {</span><br><span class="line">         root   /root;</span><br><span class="line">         index  index.html index.htm;</span><br><span class="line">     }</span><br><span class="line"> }</span><br></pre></td></tr></tbody></table></figure></div><h3 id="静态站点配置"><a href="#静态站点配置" class="headerlink" title="静态站点配置"></a>静态站点配置</h3><p>有时候，我们需要配置静态站点(即 html 文件和一堆静态资源)。</p><p>举例来说：如果所有的静态资源都放在了 /app/dist 目录下，我们只需要在 nginx.conf 中指定首页以及这个站点的 host 即可。</p><p>配置如下：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">worker_processes  1;</span><br><span class="line"></span><br><span class="line">events {</span><br><span class="line">   worker_connections  1024;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">http {</span><br><span class="line">   include       mime.types;</span><br><span class="line">   default_type  application/octet-stream;</span><br><span class="line">   sendfile        on;</span><br><span class="line">   keepalive_timeout  65;</span><br><span class="line"></span><br><span class="line">   gzip on;</span><br><span class="line">   gzip_types text/plain application/x-javascript text/css application/xml text/javascript application/javascript image/jpeg image/gif image/png;</span><br><span class="line">   gzip_vary on;</span><br><span class="line"></span><br><span class="line">   server {</span><br><span class="line">       listen       80;</span><br><span class="line">       server_name  static.zp.cn;</span><br><span class="line"></span><br><span class="line">       location / {</span><br><span class="line">           root /app/dist;</span><br><span class="line">           index index.html;</span><br><span class="line">           #转发任何请求到 index.html</span><br><span class="line">       }</span><br><span class="line">   }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p>然后，添加 HOST：</p><p>127.0.0.1 static.zp.cn，此时，在本地浏览器访问 static.zp.cn ，就可以访问静态站点了。</p><h3 id="跨域解决方案"><a href="#跨域解决方案" class="headerlink" title="跨域解决方案"></a>跨域解决方案</h3><p>web 领域开发中，经常采用前后端分离模式。这种模式下，前端和后端分别是独立的 web 应用程序，例如：后端是 Java 程序，前端是 React 或 Vue 应用，更多请看这篇文章《<a href="https://mp.weixin.qq.com/s?__biz=MzI3ODcxMzQzMw==&mid=2247485898&idx=1&sn=32626e4f241d5f04684736b52afafb10&chksm=eb538cfcdc2405ea368fa092c0af8e424ad843198274426cca275acc8ed83d86497ec3a54acc&scene=21#wechat_redirect" target="_blank" rel="noopener">到底什么是跨域，及解决方案</a>》。</p><p>各自独立的 web app 在互相访问时，势必存在跨域问题。解决跨域问题一般有两种思路：</p><h3 id="CORS"><a href="#CORS" class="headerlink" title="CORS"></a>CORS</h3><p>在后端服务器设置 HTTP 响应头，把你需要运行访问的域名加入加入 Access-Control-Allow-Origin 中。</p><h3 id="jsonp"><a href="#jsonp" class="headerlink" title="jsonp"></a>jsonp</h3><p>把后端根据请求，构造json数据，并返回，前端用 jsonp 跨域。</p><p>这两种思路，本文不展开讨论。</p><p>需要说明的是，nginx 根据第一种思路，也提供了一种解决跨域的解决方案。</p><p>举例：<a href="http://www.javastack.cn" target="_blank" rel="noopener">www.javastack.cn</a> 网站是由一个前端 app ，一个后端 app 组成的。前端端口号为 9000， 后端端口号为 8080。</p><p>前端和后端如果使用 http 进行交互时，请求会被拒绝，因为存在跨域问题。来看看，nginx 是怎么解决的吧：</p><p>首先，在 enable-cors.conf 文件中设置 cors ：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> allow origin list</span></span><br><span class="line">set $ACAO '*';</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">set</span> single origin</span></span><br><span class="line">if ($http_origin ~* (www.javastack.cn)$) {</span><br><span class="line"> set $ACAO $http_origin;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">if ($cors = "trueget") {</span><br><span class="line">   add_header 'Access-Control-Allow-Origin' "$http_origin";</span><br><span class="line">   add_header 'Access-Control-Allow-Credentials' 'true';</span><br><span class="line">   add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';</span><br><span class="line">   add_header 'Access-Control-Allow-Headers' 'DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type';</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">if ($request_method = 'OPTIONS') {</span><br><span class="line"> set $cors "${cors}options";</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">if ($request_method = 'GET') {</span><br><span class="line"> set $cors "${cors}get";</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">if ($request_method = 'POST') {</span><br><span class="line"> set $cors "${cors}post";</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p>接下来，在你的服务器中 include enable-cors.conf 来引入跨域配置：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"># ----------------------------------------------------</span><br><span class="line"># 此文件为项目 nginx 配置片段</span><br><span class="line"># 可以直接在 nginx config 中 include（推荐）</span><br><span class="line"># 或者 copy 到现有 nginx 中，自行配置</span><br><span class="line"># www.javastack.com 域名需配合 dns hosts 进行配置</span><br><span class="line"># 其中，api 开启了 cors，需配合本目录下另一份配置文件</span><br><span class="line"># ----------------------------------------------------</span><br><span class="line">upstream front_server{</span><br><span class="line"> server www.javastack.cn:9000;</span><br><span class="line">}</span><br><span class="line">upstream api_server{</span><br><span class="line"> server www.javastack.cn:8080;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">server {</span><br><span class="line"> listen       80;</span><br><span class="line"> server_name  www.javastack.cn;</span><br><span class="line"></span><br><span class="line"> location ~ ^/api/ {</span><br><span class="line">   include enable-cors.conf;</span><br><span class="line">   proxy_pass http://api_server;</span><br><span class="line">   rewrite "^/api/(.*)$" /$1 break;</span><br><span class="line"> }</span><br><span class="line"></span><br><span class="line"> location ~ ^/ {</span><br><span class="line">   proxy_pass http://front_server;</span><br><span class="line"> }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p>到此，就完成了。</p></body></html>]]></content>
      
      
      <categories>
          
          <category> Nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>十八个让你终生受用的时间管理技巧</title>
      <link href="/2018/11/09/%E5%8D%81%E5%85%AB%E4%B8%AA%E8%AE%A9%E4%BD%A0%E7%BB%88%E7%94%9F%E5%8F%97%E7%94%A8%E7%9A%84%E6%97%B6%E9%97%B4%E7%AE%A1%E7%90%86%E6%8A%80%E5%B7%A7%20/"/>
      <url>/2018/11/09/%E5%8D%81%E5%85%AB%E4%B8%AA%E8%AE%A9%E4%BD%A0%E7%BB%88%E7%94%9F%E5%8F%97%E7%94%A8%E7%9A%84%E6%97%B6%E9%97%B4%E7%AE%A1%E7%90%86%E6%8A%80%E5%B7%A7%20/</url>
      
        <content type="html"><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script></head><body><p>如果你没有按时完成某项任务，那是因为你没有把这个任务看得非常紧急</p><p>每天只计划4-5小时用于真正的工作</p><p>当你在状态时，就努力工作，不在状态时，就好好休息</p><p>在有限的时间内，我们往往会更专注、效率更高</p><p>不要同时安排很多件事情，这只会消耗注意力</p><p>工作时间越长，并不等于效率越高</p><p>进入工作状态的最佳方式就是工作，从小任务开始做起，让工作运转起来</p><p>动手做，胜过任何完美的想象</p><p>清楚当天必须完成的事情是什么，只去做那件影响最大的事</p><p>番茄工作法：工作—放松—工作=高效</p><p>把不切实际的任务分割成合理的小任务，只要每天都完成小任务，你就会越来越接近那个大目标</p><p>给所有事情都设定一个期限，不要让工作无期限的进行下去</p><p>如果某件事别人做也可以做到八成，那就交给别人做吧。要学会授权、借用他人的力量。</p><p>忘记昨天的成败，只考虑今天和明天</p><p>写下那些会影响你注意力的东西，胡思乱想的东西或者新的点子</p><p>多做笔记，好记性不如烂笔头</p><p>从来没有两个任务会有相同的优先级，总有一个更重要。仔细考虑待办事情列表</p><p>适当休息。</p><p>文章出处：<a href="http://codefun007.xyz/view/article_detail.htm?id=127&tdsourcetag=s_pcqq_aiomsg" target="_blank" rel="noopener">十八个让你终生受用的时间管理技巧 </a></p></body></html>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 其他 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信扫码登录是如何实现的？</title>
      <link href="/2018/11/09/%E5%BE%AE%E4%BF%A1%E6%89%AB%E7%A0%81%E7%99%BB%E5%BD%95%E6%98%AF%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E7%9A%84%EF%BC%9F/"/>
      <url>/2018/11/09/%E5%BE%AE%E4%BF%A1%E6%89%AB%E7%A0%81%E7%99%BB%E5%BD%95%E6%98%AF%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E7%9A%84%EF%BC%9F/</url>
      
        <content type="html"><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script></head><body><h1 id="微信扫码登录是如何实现的？"><a href="#微信扫码登录是如何实现的？" class="headerlink" title="微信扫码登录是如何实现的？"></a>微信扫码登录是如何实现的？</h1><p>网页版微信刚推出时，无数人被它的登录方式惊艳了一下，不需要输入用户名密码，打开手机微信扫一扫，便自动登录。从原理上讲，二维码只能是一段文本的编码，如何用它实现快捷登录的呢？</p><h3 id="打开网页版微信，可以看到如下的页面："><a href="#打开网页版微信，可以看到如下的页面：" class="headerlink" title="打开网页版微信，可以看到如下的页面："></a>打开网页版微信，可以看到如下的页面：</h3><p><a href="https://i.imgur.com/LnSAGuJ.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.imgur.com/LnSAGuJ.jpg" class="lazyload"></a></p><p>微信扫码界面</p><p>如果你用我查查、支付宝、新浪微博等软件扫码二维码，你会发现此二维码解析出来是如下的网址：</p><blockquote></blockquote><p><a href="https://login.weixin.qq.com/l/obsbQ-Dzag==" target="_blank" rel="noopener">https://login.weixin.qq.com/l/obsbQ-Dzag==</a></p><p>接下来详细介绍一下扫码登录具体的每个步骤：<br><a href="https://i.imgur.com/DIyZ93O.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.imgur.com/DIyZ93O.jpg" class="lazyload"></a></p><h3 id="扫码登录完整流程"><a href="#扫码登录完整流程" class="headerlink" title="扫码登录完整流程"></a>扫码登录完整流程</h3><ul><li><p>①：用户 A 访问微信网页版，微信服务器为这个会话生成一个全局唯一的 ID，上面的 URL 中 obsbQ-Dzag== 就是这个 ID，此时系统并不知道访问者是谁。</p></li><li><p>②：用户A打开自己的手机微信并扫描这个二维码，并提示用户是否确认登录。</p></li><li><p>③：手机上的微信是登录状态，用户点击确认登录后，手机上的微信客户端将微信账号和这个扫描得到的 ID 一起提交到服务器</p></li><li><p>④：服务器将这个 ID 和用户 A 的微信号绑定在一起，并通知网页版微信，这个 ID 对应的微信号为用户 A，网页版微信加载用户 A 的微信信息，至此，扫码登录全部流程完成</p></li></ul><p>扫码登录看起来神奇，主要是因为微信 APP 扫自家的码会做一些普通二维码软件不会做的额外的操作，那就是将当前已登录的微信和扫出来的 ID 提交到微信服务器，类似的应用还有扫码支付、扫码加公众号等功能。</p><h3 id="扫码登录原理"><a href="#扫码登录原理" class="headerlink" title="扫码登录原理"></a>扫码登录原理</h3><p>扫码登录大概的思路是：微信手机客户端从网页二维码里面得到一些信息，然后发送给网页微信的服务器，网页服务器验证信息并响应。下面，我们借助火狐浏览器提供的Firebug工具看看，到底是怎么一回事儿吧！</p><p>1.每次打开微信网页版的时候，都会生成一个含有唯一uid的二维码，而且每次刷新后都会改变。这样可以保证一个uid只可以绑定一个账号和密码，确定登录用户的唯一性。可以通过手机上的UC浏览器提供的扫码功能查看二维码里面的信息，但并不会自动打开该地址。</p><p>我刷新三次，扫描结果如下，其中最后面那串数字就是uid：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1） https://login.weixin.qq.com/l/48e24d66bdbc4f</span><br><span class="line">2） https://login.weixin.qq.com/l/0787fb4fa7ad4c</span><br><span class="line">3） https://login.weixin.qq.com/l/92781a4a7f1c47</span><br></pre></td></tr></tbody></table></figure></div><p>通过查看网页源码，这个页面在加载完毕时，已经把很多登录后才需要的相关资源都预先加载进来了，所以登录用户得到确认后展示用户信息的速度很快。</p><p>2.除了返回唯一的uid，实际上打开这个页面的时候，浏览器跟服务器还创建了一个长连接，请求uid的扫描记录。如果没有，在特定时长后（目前是27秒左右）会接到状态码408（请求超时），表示应该继续下一次请求；如果接到状态码201（服务器创建新资源成功），表示客户端扫描了该二维码。</p><p>请求超时：返回408<br><a href="https://i.imgur.com/qmBqD85.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.imgur.com/qmBqD85.jpg" class="lazyload"></a></p><p>扫码成功：返回201<br><a href="https://i.imgur.com/kFgYI0r.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.imgur.com/kFgYI0r.jpg" class="lazyload"></a></p><p>长轮询代码结构：<br><a href="https://i.imgur.com/igTk5dR.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.imgur.com/igTk5dR.jpg" class="lazyload"></a></p><p>3.当用户使用登录后的微信扫描二维码的时候，会将uid和手机微信产生的token进行绑定，并上传到服务器。这个时候，浏览器通过长轮询查询到uid扫描记录，立即得到201响应码，然后通知服务器，客户端由此也进入一个新的页面（就是那个要你点确认的按钮）。在客户端点击确认后，获得服务器授信的令牌，进行随后的信息交互过程。 </p><h3 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h3><p>总的来说，微信扫码登录核心过程应该是这样的：浏览器获得一个唯一的、临时的uid，通过长连接等待客户端扫描带有此uid的二维码后，从长连接中获得客户端上报给服务器的帐号信息进行展示。并在客户端点击确认后，获得服务器授信的令牌，进行随后的信息交互过程。 在超时、网络断开、其他设备上登录后，此前获得的令牌或丢失、或失效，对授权过程形成有效的安全防护。</p><h3 id="整理参考"><a href="#整理参考" class="headerlink" title="整理参考"></a>整理参考</h3><ul><li><p><a href="http://www.jianshu.com/p/7f072ac61763" target="_blank" rel="noopener">www.jianshu.com/p/7f072ac61763</a></p></li><li><p>justcoding.iteye.com/blog/2213661</p></li></ul></body></html>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 其他 </tag>
            
            <tag> 微信 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于spring boot的简单定时任务</title>
      <link href="/2018/11/05/%E5%9F%BA%E4%BA%8Espring%20boot%E7%9A%84%E7%AE%80%E5%8D%95%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/"/>
      <url>/2018/11/05/%E5%9F%BA%E4%BA%8Espring%20boot%E7%9A%84%E7%AE%80%E5%8D%95%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script></head><body><h1 id="spring-boot-scheduled"><a href="#spring-boot-scheduled" class="headerlink" title="spring-boot-scheduled"></a>spring-boot-scheduled</h1><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>使用自带的定时任务非常简单，我们只需要打开定时器</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 定时任务配置类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> YI</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018-11-5 10:04:06</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableScheduling</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Config</span> </span>{</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p>然后编写我们的任务即可完成一个简单的定时任务</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 定时任务</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> YI</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018-11-5 10:30:08</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ScheduledTasks</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger log = LoggerFactory.getLogger(ScheduledTasks<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> SimpleDateFormat dateFormat = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 5秒钟执行一次</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Scheduled</span>(fixedRate = <span class="number">5000</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reportCurrentTime</span><span class="params">()</span> </span>{</span><br><span class="line">        log.info(<span class="string">"现在时间是 {}"</span>, dateFormat.format(<span class="keyword">new</span> Date()));</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p>最后我们来看看执行效果</p><p><a href="https://i.imgur.com/xbCIXBv.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.imgur.com/xbCIXBv.jpg" class="lazyload"></a></p><h3 id="问题建议"><a href="#问题建议" class="headerlink" title="问题建议"></a>问题建议</h3><ul><li>联系我的邮箱：<a href="mailto:ilovey_hwy@163.com">ilovey_hwy@163.com</a></li><li>我的博客：<a href="http://www.hwy.ac.cn" target="_blank" rel="noopener">http://www.hwy.ac.cn</a></li><li>GitHub：<a href="https://github.com/HWYWL/spring-boot-2.x-examples/tree/master/spring-boot-scheduled" target="_blank" rel="noopener">源码</a></li></ul></body></html>]]></content>
      
      
      <categories>
          
          <category> Spring Boot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Boot </tag>
            
            <tag> Scheduled </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTTP网络请求分类</title>
      <link href="/2018/10/26/HTTP%20%E6%96%B9%E6%B3%95/"/>
      <url>/2018/10/26/HTTP%20%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script></head><body><h1 id="HTTP-方法"><a href="#HTTP-方法" class="headerlink" title="HTTP 方法"></a>HTTP 方法</h1><p>客户端发送的  <strong>请求报文</strong>  第一行为请求行，包含了方法字段。</p><h2 id="GET"><a href="#GET" class="headerlink" title="GET"></a>GET</h2><blockquote><p>获取资源</p></blockquote><p>当前网络请求中，绝大部分使用的是 GET 方法。</p><h2 id="HEAD"><a href="#HEAD" class="headerlink" title="HEAD"></a>HEAD</h2><blockquote><p>获取报文首部</p></blockquote><p>和 GET 方法一样，但是不返回报文实体主体部分。</p><p>主要用于确认 URL 的有效性以及资源更新的日期时间等。</p><h2 id="POST"><a href="#POST" class="headerlink" title="POST"></a>POST</h2><blockquote><p>传输实体主体</p></blockquote><p>POST 主要用来传输数据，而 GET 主要用来获取资源。</p><p>更多 POST 与 GET 的比较请见第九章。</p><h2 id="PUT"><a href="#PUT" class="headerlink" title="PUT"></a>PUT</h2><blockquote><p>上传文件</p></blockquote><p>由于自身不带验证机制，任何人都可以上传文件，因此存在安全性问题，一般不使用该方法。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">html</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">PUT /new.html HTTP/1.1</span><br><span class="line">Host: example.com</span><br><span class="line">Content-type: text/html</span><br><span class="line">Content-length: 16</span><br><span class="line"></span><br><span class="line"><span class="tag"><<span class="name">p</span>></span>New File<span class="tag"><!--<span class="name"-->p</span>></span><br></pre></td></tr></tbody></table></figure></div><h2 id="PATCH"><a href="#PATCH" class="headerlink" title="PATCH"></a>PATCH</h2><blockquote><p>对资源进行部分修改</p></blockquote><p>PUT 也可以用于修改资源，但是只能完全替代原始资源，PATCH 允许部分修改。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">html</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">PATCH /file.txt HTTP/1.1</span><br><span class="line">Host: www.example.com</span><br><span class="line">Content-Type: application/example</span><br><span class="line">If-Match: "e0023aa4e"</span><br><span class="line">Content-Length: 100</span><br><span class="line"></span><br><span class="line">[description of changes]</span><br></pre></td></tr></tbody></table></figure></div><h2 id="DELETE"><a href="#DELETE" class="headerlink" title="DELETE"></a>DELETE</h2><blockquote><p>删除文件</p></blockquote><p>与 PUT 功能相反，并且同样不带验证机制。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">html</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DELETE /file.html HTTP/1.1</span><br></pre></td></tr></tbody></table></figure></div><h2 id="OPTIONS"><a href="#OPTIONS" class="headerlink" title="OPTIONS"></a>OPTIONS</h2><blockquote><p>查询支持的方法</p></blockquote><p>查询指定的 URL 能够支持的方法。</p><p>会返回 Allow: GET, POST, HEAD, OPTIONS 这样的内容。</p><h2 id="CONNECT"><a href="#CONNECT" class="headerlink" title="CONNECT"></a>CONNECT</h2><blockquote><p>要求在与代理服务器通信时建立隧道</p></blockquote><p>使用 SSL（Secure Sockets Layer，安全套接层）和 TLS（Transport Layer Security，传输层安全）协议把通信内容加密后经网络隧道传输。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">html</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CONNECT www.example.com:443 HTTP/1.1</span><br></pre></td></tr></tbody></table></figure></div><p><a href="https://i.imgur.com/5NxoBYf.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.imgur.com/5NxoBYf.jpg" class="lazyload"></a></p><h2 id="TRACE"><a href="#TRACE" class="headerlink" title="TRACE"></a>TRACE</h2><blockquote><p>追踪路径</p></blockquote><p>服务器会将通信路径返回给客户端。</p><p>发送请求时，在 Max-Forwards 首部字段中填入数值，每经过一个服务器就会减 1，当数值为 0 时就停止传输。</p><p>通常不会使用 TRACE，并且它容易受到 XST 攻击（Cross-Site Tracing，跨站追踪）。</p></body></html>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 其他 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tomcat最佳实践</title>
      <link href="/2018/10/18/Tomcat%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/"/>
      <url>/2018/10/18/Tomcat%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/</url>
      
        <content type="html"><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script></head><body><h2 id="运行模式"><a href="#运行模式" class="headerlink" title="运行模式"></a>运行模式</h2><p>Tomcat Connector三种运行模式（BIO, NIO, APR）的比较和优化。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">org.apache.coyote.http11.Http11Protocol：BIO</span><br><span class="line">org.apache.coyote.http11.Http11NioProtocol：NIO</span><br><span class="line">org.apache.coyote.http11.Http11Nio2Protocol：NIO2</span><br><span class="line">org.apache.coyote.http11.Http11AprProtocol：APR</span><br></pre></td></tr></tbody></table></figure></div><h3 id="BIO"><a href="#BIO" class="headerlink" title="BIO"></a>BIO</h3><p>一个线程处理一个请求。缺点：并发量高时，线程数较多，浪费资源。Tomcat7或以下，在Linux系统中默认使用这种方式。</p><h3 id="NIO"><a href="#NIO" class="headerlink" title="NIO"></a>NIO</h3><p>利用Java的异步IO处理，可以通过少量的线程处理大量的请求。Tomcat8在Linux系统中默认使用这种方式。Tomcat7必须修改Connector配置来启动：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag"><<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">"8080"</span> </span></span><br><span class="line"><span class="tag">           <span class="attr">protocol</span>=<span class="string">"org.apache.coyote.http11.Http11NioProtocol"</span></span></span><br><span class="line"><span class="tag">           <span class="attr">connectionTimeout</span>=<span class="string">"20000"</span></span></span><br><span class="line"><span class="tag">   <span class="attr">redirectPort</span>=<span class="string">"8443"</span>/></span></span><br></pre></td></tr></tbody></table></figure></div><p>Tomcat8以后NIO2模式：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag"><<span class="name">Connector</span>  <span class="attr">port</span>=<span class="string">"8080"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">protocol</span>=<span class="string">"org.apache.coyote.http11.Http11Nio2Protocol"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">connectionTimeout</span>=<span class="string">"20000"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">redirectPort</span>=<span class="string">"8443"</span>/></span></span><br></pre></td></tr></tbody></table></figure></div><h3 id="APR"><a href="#APR" class="headerlink" title="APR"></a>APR</h3><p>即Apache Portable Runtime，从操作系统层面解决io阻塞问题。Tomcat7或Tomcat8在Win7或以上的系统中启动默认使用这种方式。Linux如果安装了apr和native，Tomcat直接启动就支持apr。</p><h2 id="连接池"><a href="#连接池" class="headerlink" title="连接池"></a>连接池</h2><p>默认值：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag"><<span class="name">Executor</span> <span class="attr">name</span>=<span class="string">"tomcatThreadPool"</span> <span class="attr">namePrefix</span>=<span class="string">"catalina-exec-"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">maxThreads</span>=<span class="string">"150"</span> <span class="attr">minSpareThreads</span>=<span class="string">"4"</span>/></span></span><br></pre></td></tr></tbody></table></figure></div><p>修改为：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag"><<span class="name">Executor</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">name</span>=<span class="string">"tomcatThreadPool"</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">namePrefix</span>=<span class="string">"catalina-exec-"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">maxThreads</span>=<span class="string">"500"</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">minSpareThreads</span>=<span class="string">"100"</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">prestartminSpareThreads</span> = <span class="string">"true"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">maxQueueSize</span> = <span class="string">"100"</span></span></span><br><span class="line"><span class="tag">/></span></span><br></pre></td></tr></tbody></table></figure></div><p>参数解释：</p><ul><li>maxThreads，最大并发数，默认设置 200，一般建议在 500 ~ 800，根据硬件设施和业务来判断</li><li>minSpareThreads，Tomcat 初始化时创建的线程数，默认设置 25</li><li>prestartminSpareThreads，在 Tomcat 初始化的时候就初始化 minSpareThreads 的参数值，如果不等于 true，minSpareThreads 的值就没啥效果了</li><li>maxQueueSize，最大的等待队列数，超过则拒绝请求</li></ul><p>默认的链接参数配置：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag"><<span class="name">Connector</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">port</span>=<span class="string">"8080"</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">protocol</span>=<span class="string">"HTTP/1.1"</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">connectionTimeout</span>=<span class="string">"20000"</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">redirectPort</span>=<span class="string">"8443"</span> </span></span><br><span class="line"><span class="tag">/></span></span><br></pre></td></tr></tbody></table></figure></div><p>修改为：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag"><<span class="name">Connector</span>  <span class="attr">executor</span>=<span class="string">"tomcatThreadPool"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">port</span>=<span class="string">"8080"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">protocol</span>=<span class="string">"org.apache.coyote.http11.Http11Nio2Protocol"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">connectionTimeout</span>=<span class="string">"20000"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">redirectPort</span>=<span class="string">"8443"</span>/></span></span><br></pre></td></tr></tbody></table></figure></div><p>参数解释：</p><ul><li>protocol，Tomcat 8 设置 nio2 更好：org.apache.coyote.http11.Http11Nio2Protocol</li><li>protocol，Tomcat 6、7 设置 nio 更好：org.apache.coyote.http11.Http11NioProtocol</li><li>enableLookups，禁用DNS查询</li><li>acceptCount，指定当所有可以使用的处理请求的线程数都被使用时，可以放到处理队列中的请求数，超过这个数的请求将不予处理，默认设置 100</li><li>maxPostSize，以 FORM URL 参数方式的 POST 提交方式，限制提交最大的大小，默认是 2097152(2兆)，它使用的单位是字节。10485760 为 10M。如果要禁用限制，则可以设置为 -1</li><li>acceptorThreadCount，用于接收连接的线程的数量，默认值是1。一般这个指需要改动的时候是因为该服务器是一个多核CPU，如果是多核 CPU 一般配置为 2</li></ul><h2 id="端口配置"><a href="#端口配置" class="headerlink" title="端口配置"></a>端口配置</h2><p>Tomcat服务器需配置三个端口才能启动，安装时默认启用了这三个端口，当要运行多个tomcat服务时需要修改这三个端口。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><!-- 端口-1即可，标识随机 --></span></span><br><span class="line"><span class="tag"><<span class="name">Server</span> <span class="attr">port</span>=<span class="string">"-1"</span> <span class="attr">shutdown</span>=<span class="string">"SHUTDOWN"</span>></span></span><br></pre></td></tr></tbody></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><!-- 访问端口，必须配置 --></span></span><br><span class="line"><span class="tag"><<span class="name">Connector</span>  <span class="attr">port</span>=<span class="string">"8080"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">protocol</span>=<span class="string">"org.apache.coyote.http11.Http11Nio2Protocol"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">connectionTimeout</span>=<span class="string">"20000"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">redirectPort</span>=<span class="string">"8443"</span>/></span></span><br></pre></td></tr></tbody></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><!-- 配置Apache使用，如果使用Nginx代理注释掉即可 --></span></span><br><span class="line"><span class="tag"><<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">"8009"</span> <span class="attr">protocol</span>=<span class="string">"AJP/1.3"</span> <span class="attr">redirectPort</span>=<span class="string">"8443"</span> /></span></span><br></pre></td></tr></tbody></table></figure></div><h2 id="JVM-优化"><a href="#JVM-优化" class="headerlink" title="JVM 优化"></a>JVM 优化</h2><p>Java 的内存模型分为：</p><ul><li><p>Young，年轻代（易被 GC）。Young 区被划分为三部分，Eden 区和两个大小严格相同的 Survivor 区，其中 Survivor 区间中，某一时刻只有其中一个是被使用的，另外一个留做垃圾收集时复制对象用，在 Young 区间变满的时候，minor GC 就会将存活的对象移到空闲的Survivor 区间中，根据 JVM 的策略，在经过几次垃圾收集后，任然存活于 Survivor 的对象将被移动到 Tenured 区间。</p></li><li><p>Tenured，终身代。Tenured 区主要保存生命周期长的对象，一般是一些老的对象，当一些对象在 Young 复制转移一定的次数以后，对象就会被转移到 Tenured 区，一般如果系统中用了 application 级别的缓存，缓存中的对象往往会被转移到这一区间。</p></li><li><p>Perm，永久代。主要保存 class,method,filed 对象，这部门的空间一般不会溢出，除非一次性加载了很多的类，不过在涉及到热部署的应用服务器的时候，有时候会遇到 java.lang.OutOfMemoryError : PermGen space 的错误，造成这个错误的很大原因就有可能是每次都重新部署，但是重新部署后，类的 class 没有被卸载掉，这样就造成了大量的 class 对象保存在了 perm 中，这种情况下，一般重新启动应用服务器可以解决问题。</p></li></ul><p>Linux 修改 /tomcat/bin/catalina.sh 文件，把下面信息添加到文件第一行。</p><p>机子内存如果是 8G，一般 PermSize 配置是主要保证系统能稳定起来就行：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">JAVA_OPTS="-Dfile.encoding=UTF-8 -server -Xms6144m -Xmx6144m -XX:NewSize=1024m -XX:MaxNewSize=2048m -XX:PermSize=512m -XX:MaxPermSize=512m -XX:MaxTenuringThreshold=10 -XX:NewRatio=2 -XX:+DisableExplicitGC"</span><br></pre></td></tr></tbody></table></figure></div><p>参数说明：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">-Dfile.encoding：默认文件编码</span><br><span class="line">-server：表示这是应用于服务器的配置，JVM 内部会有特殊处理的</span><br><span class="line">-Xmx1024m：设置JVM最大可用内存为1024MB</span><br><span class="line">-Xms1024m：设置JVM最小内存为1024m。此值可以设置与-Xmx相同，以避免每次垃圾回收完成后JVM重新分配内存。</span><br><span class="line">-XX:NewSize：设置年轻代大小</span><br><span class="line">-XX:MaxNewSize：设置最大的年轻代大小</span><br><span class="line">-XX:PermSize：设置永久代大小</span><br><span class="line">-XX:MaxPermSize：设置最大永久代大小</span><br><span class="line">-XX:NewRatio=4：设置年轻代（包括 Eden 和两个 Survivor 区）与终身代的比值（除去永久代）。设置为 4，则年轻代与终身代所占比值为 1：4，年轻代占整个堆栈的 1/5</span><br><span class="line">-XX:MaxTenuringThreshold=10：设置垃圾最大年龄，默认为：15。如果设置为 0 的话，则年轻代对象不经过 Survivor 区，直接进入年老代。对于年老代比较多的应用，可以提高效率。如果将此值设置为一个较大值，则年轻代对象会在 Survivor 区进行多次复制，这样可以增加对象再年轻代的存活时间，增加在年轻代即被回收的概论。</span><br><span class="line">-XX:+DisableExplicitGC：这个将会忽略手动调用 GC 的代码使得 System.gc() 的调用就会变成一个空调用，完全不会触发任何 GC</span><br></pre></td></tr></tbody></table></figure></div></body></html>]]></content>
      
      
      <categories>
          
          <category> 分布式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 高并发 </tag>
            
            <tag> 分布式 </tag>
            
            <tag> Tomcat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>为什么我们做分布式使用Redis?</title>
      <link href="/2018/10/18/%E4%B8%BA%E4%BB%80%E4%B9%88%E6%88%91%E4%BB%AC%E5%81%9A%E5%88%86%E5%B8%83%E5%BC%8F%E4%BD%BF%E7%94%A8Redis/"/>
      <url>/2018/10/18/%E4%B8%BA%E4%BB%80%E4%B9%88%E6%88%91%E4%BB%AC%E5%81%9A%E5%88%86%E5%B8%83%E5%BC%8F%E4%BD%BF%E7%94%A8Redis/</url>
      
        <content type="html"><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script></head><body><p>绝大部分写业务的程序员，在实际开发中使用 Redis 的时候，只会 Set Value 和 Get Value 两个操作，对 Redis 整体缺乏一个认知。这里对 Redis 常见问题做一个总结，解决大家的知识盲点。</p><h2 id="1、为什么使用-Redis"><a href="#1、为什么使用-Redis" class="headerlink" title="1、为什么使用 Redis"></a>1、为什么使用 Redis</h2><p>在项目中使用 Redis，主要考虑两个角度：性能和并发。如果只是为了分布式锁这些其他功能，还有其他中间件 Zookpeer 等代替，并非一定要使用 Redis。</p><h3 id="性能："><a href="#性能：" class="headerlink" title="性能："></a>性能：</h3><p>如下图所示，我们在碰到需要执行耗时特别久，且结果不频繁变动的 SQL，就特别适合将运行结果放入缓存。这样，后面的请求就去缓存中读取，使得请求能够迅速响应。</p><p>特别是在秒杀系统，在同一时间，几乎所有人都在点，都在下单。。。执行的是同一操作———向数据库查数据。</p><p><a href="https://images.gitee.com/uploads/images/2018/0929/090927_1b0c4b61_87650.png" data-fancybox="group" data-caption="输入图片说明" class="fancybox"><img alt="输入图片说明" title="输入图片说明" data-src="https://images.gitee.com/uploads/images/2018/0929/090927_1b0c4b61_87650.png" class="lazyload"></a></p><p>根据交互效果的不同，响应时间没有固定标准。在理想状态下，我们的页面跳转需要在瞬间解决，对于页内操作则需要在刹那间解决。</p><h3 id="并发："><a href="#并发：" class="headerlink" title="并发："></a>并发：</h3><p>如下图所示，在大并发的情况下，所有的请求直接访问数据库，数据库会出现连接异常。这个时候，就需要使用 Redis 做一个缓冲操作，让请求先访问到 Redis，而不是直接访问数据库。</p><p> <a href="https://images.gitee.com/uploads/images/2018/0929/090934_f875e978_87650.png" data-fancybox="group" data-caption="输入图片说明" class="fancybox"><img alt="输入图片说明" title="输入图片说明" data-src="https://images.gitee.com/uploads/images/2018/0929/090934_f875e978_87650.png" class="lazyload"></a></p><h3 id="使用-Redis-的常见问题"><a href="#使用-Redis-的常见问题" class="headerlink" title="使用 Redis 的常见问题"></a>使用 Redis 的常见问题</h3><ul><li><p>缓存和数据库双写一致性问题</p></li><li><p>缓存雪崩问题</p></li><li><p>缓存击穿问题</p></li><li><p>缓存的并发竞争问题</p></li></ul><h2 id="2、单线程的-Redis-为什么这么快"><a href="#2、单线程的-Redis-为什么这么快" class="headerlink" title="2、单线程的 Redis 为什么这么快"></a>2、单线程的 Redis 为什么这么快</h2><p>这个问题是对 Redis 内部机制的一个考察。很多人都不知道 Redis 是单线程工作模型。</p><h3 id="原因主要是以下三点："><a href="#原因主要是以下三点：" class="headerlink" title="原因主要是以下三点："></a>原因主要是以下三点：</h3><p>纯内存操作</p><p>单线程操作，避免了频繁的上下文切换</p><p>采用了非阻塞 I/O 多路复用机制</p><p>仔细说一说 I/O 多路复用机制，打一个比方：小名在 A 城开了一家快餐店店，负责同城快餐服务。小明因为资金限制，雇佣了一批配送员，然后小曲发现资金不够了，只够买一辆车送快递。</p><h3 id="经营方式一"><a href="#经营方式一" class="headerlink" title="经营方式一"></a>经营方式一</h3><p>客户每下一份订单，小明就让一个配送员盯着，然后让人开车去送。慢慢的小曲就发现了这种经营方式存在下述问题：</p><p>时间都花在了抢车上了，大部分配送员都处在闲置状态，抢到车才能去送。</p><p>随着下单的增多，配送员也越来越多，小明发现快递店里越来越挤，没办法雇佣新的配送员了。</p><p>配送员之间的协调很花时间。</p><p>综合上述缺点，小明痛定思痛，提出了经营方式二。</p><h3 id="经营方式二"><a href="#经营方式二" class="headerlink" title="经营方式二"></a>经营方式二</h3><p>小明只雇佣一个配送员。当客户下单，小明按送达地点标注好，依次放在一个地方。最后，让配送员依次开着车去送，送好了就回来拿下一个。上述两种经营方式对比，很明显第二种效率更高。</p><p>在上述比喻中：</p><p>每个配送员→每个线程</p><p>每个订单→每个 Socket(I/O 流)</p><p>订单的送达地点→Socket 的不同状态</p><p>客户送餐请求→来自客户端的请求</p><p>明曲的经营方式→服务端运行的代码</p><p>一辆车→CPU 的核数</p><p>于是有了如下结论：</p><p>经营方式一就是传统的并发模型，每个 I/O 流(订单)都有一个新的线程(配送员)管理。</p><p>经营方式二就是 I/O 多路复用。只有单个线程(一个配送员)，通过跟踪每个 I/O 流的状态(每个配送员的送达地点)，来管理多个 I/O 流。</p><p>下面类比到真实的 Redis 线程模型，如图所示：</p><p><a href="https://images.gitee.com/uploads/images/2018/0929/090949_68d6f98f_87650.png" data-fancybox="group" data-caption="输入图片说明" class="fancybox"><img alt="输入图片说明" title="输入图片说明" data-src="https://images.gitee.com/uploads/images/2018/0929/090949_68d6f98f_87650.png" class="lazyload"></a></p><p>Redis-client 在操作的时候，会产生具有不同事件类型的 Socket。在服务端，有一段 I/O 多路复用程序，将其置入队列之中。然后，文件事件分派器，依次去队列中取，转发到不同的事件处理器中。</p><h2 id="3、Redis-的数据类型及使用场景"><a href="#3、Redis-的数据类型及使用场景" class="headerlink" title="3、Redis 的数据类型及使用场景"></a>3、Redis 的数据类型及使用场景</h2><p>一个合格的程序员，这五种类型都会用到。</p><p>String</p><p>最常规的 set/get 操作，Value 可以是 String 也可以是数字。一般做一些复杂的计数功能的缓存。</p><p>Hash</p><p>这里 Value 存放的是结构化的对象，比较方便的就是操作其中的某个字段。我在做单点登录的时候，就是用这种数据结构存储用户信息，以 CookieId 作为 Key，设置 30 分钟为缓存过期时间，能很好的模拟出类似 Session 的效果。</p><p>List</p><p>使用 List 的数据结构，可以做简单的消息队列的功能。另外，可以利用 lrange 命令，做基于 Redis 的分页功能，性能极佳，用户体验好。</p><p>Set</p><p>因为 Set 堆放的是一堆不重复值的集合。所以可以做全局去重的功能。我们的系统一般都是集群部署，使用 JVM 自带的 Set 比较麻烦。另外，就是利用交集、并集、差集等操作，可以计算共同喜好，全部的喜好，自己独有的喜好等功能。</p><p>Sorted Set</p><p>Sorted Set 多了一个权重参数 Score，集合中的元素能够按 Score 进行排列。可以做排行榜应用，取 TOP N 操作。Sorted Set 可以用来做延时任务。</p><h2 id="4、Redis-的过期策略和内存淘汰机制"><a href="#4、Redis-的过期策略和内存淘汰机制" class="headerlink" title="4、Redis 的过期策略和内存淘汰机制"></a>4、Redis 的过期策略和内存淘汰机制</h2><p>Redis 是否用到家，从这就能看出来。比如你 Redis 只能存 5G 数据，可是你写了 10G，那会删 5G 的数据。怎么删的，这个问题思考过么？</p><p>正解：Redis 采用的是定期删除+惰性删除策略。</p><p>为什么不用定时删除策略</p><p>定时删除，用一个定时器来负责监视 Key，过期则自动删除。虽然内存及时释放，但是十分消耗 CPU 资源。在大并发请求下，CPU 要将时间应用在处理请求，而不是删除 Key，因此没有采用这一策略。</p><p>定期删除+惰性删除如何工作</p><p>定期删除，Redis 默认每个 100ms 检查，有过期 Key 则删除。需要说明的是，Redis 不是每个 100ms 将所有的 Key 检查一次，而是随机抽取进行检查。如果只采用定期删除策略，会导致很多 Key 到时间没有删除。于是，惰性删除派上用场。</p><p>采用定期删除+惰性删除就没其他问题了么</p><p>不是的，如果定期删除没删除掉 Key。并且你也没及时去请求 Key，也就是说惰性删除也没生效。这样，Redis 的内存会越来越高。那么就应该采用内存淘汰机制。</p><p>在 redis.conf 中有一行配置：</p><h1 id="maxmemory-policy-volatile-lru"><a href="#maxmemory-policy-volatile-lru" class="headerlink" title="maxmemory-policy volatile-lru"></a>maxmemory-policy volatile-lru</h1><p>该配置就是配内存淘汰策略的：</p><ul><li><p>noeviction：当内存不足以容纳新写入数据时，新写入操作会报错。</p></li><li><p>allkeys-lru：当内存不足以容纳新写入数据时，在键空间中，移除最近最少使用的 Key。（推荐使用，目前项目在用这种）(最近最久使用算法)</p></li><li><p>allkeys-random：当内存不足以容纳新写入数据时，在键空间中，随机移除某个 Key。（应该也没人用吧，你不删最少使用 Key，去随机删）</p></li><li><p>volatile-lru：当内存不足以容纳新写入数据时，在设置了过期时间的键空间中，移除最近最少使用的 Key。这种情况一般是把 Redis 既当缓存，又做持久化存储的时候才用。（不推荐）</p></li><li><p>volatile-random：当内存不足以容纳新写入数据时，在设置了过期时间的键空间中，随机移除某个 Key。（依然不推荐）</p></li><li><p>volatile-ttl：当内存不足以容纳新写入数据时，在设置了过期时间的键空间中，有更早过期时间的 Key 优先移除。（不推荐）</p></li></ul><h2 id="5、Redis-和数据库双写一致性问题"><a href="#5、Redis-和数据库双写一致性问题" class="headerlink" title="5、Redis 和数据库双写一致性问题"></a>5、Redis 和数据库双写一致性问题</h2><p>一致性问题还可以再分为最终一致性和强一致性。数据库和缓存双写，就必然会存在不一致的问题。前提是如果对数据有强一致性要求，不能放缓存。我们所做的一切，只能保证最终一致性。</p><p>另外，我们所做的方案从根本上来说，只能降低不一致发生的概率。因此，有强一致性要求的数据，不能放缓存。首先，采取正确更新策略，先更新数据库，再删缓存。其次，因为可能存在删除缓存失败的问题，提供一个补偿措施即可，例如利用消息队列。</p><h2 id="6、如何应对缓存穿透和缓存雪崩问题"><a href="#6、如何应对缓存穿透和缓存雪崩问题" class="headerlink" title="6、如何应对缓存穿透和缓存雪崩问题"></a>6、如何应对缓存穿透和缓存雪崩问题</h2><p>这两个问题，一般中小型传统软件企业很难碰到。如果有大并发的项目，流量有几百万左右，这两个问题一定要深刻考虑。缓存穿透，即黑客故意去请求缓存中不存在的数据，导致所有的请求都怼到数据库上，从而数据库连接异常。</p><h3 id="缓存穿透解决方案："><a href="#缓存穿透解决方案：" class="headerlink" title="缓存穿透解决方案："></a>缓存穿透解决方案：</h3><ul><li><p>利用互斥锁，缓存失效的时候，先去获得锁，得到锁了，再去请求数据库。没得到锁，则休眠一段时间重试。</p></li><li><p>采用异步更新策略，无论 Key 是否取到值，都直接返回。Value 值中维护一个缓存失效时间，缓存如果过期，异步起一个线程去读数据库，更新缓存。需要做缓存预热(项目启动前，先加载缓存)操作。</p></li><li><p>提供一个能迅速判断请求是否有效的拦截机制，比如，利用布隆过滤器，内部维护一系列合法有效的 Key。迅速判断出，请求所携带的 Key 是否合法有效。如果不合法，则直接返回。</p></li><li><p>缓存雪崩，即缓存同一时间大面积的失效，这个时候又来了一波请求，结果请求都怼到数据库上，从而导致数据库连接异常。</p></li></ul><h3 id="缓存雪崩解决方案："><a href="#缓存雪崩解决方案：" class="headerlink" title="缓存雪崩解决方案："></a>缓存雪崩解决方案：</h3><ul><li><p>给缓存的失效时间，加上一个随机值，避免集体失效。</p></li><li><p>使用互斥锁，但是该方案吞吐量明显下降了。</p></li><li><p>双缓存。我们有两个缓存，缓存 A 和缓存 B。缓存 A 的失效时间为 20 分钟，缓存 B 不设失效时间。自己做缓存预热操作。</p></li><li><p>然后细分以下几个小点：从缓存 A 读数据库，有则直接返回；A 没有数据，直接从 B 读数据，直接返回，并且异步启动一个更新线程，更新线程同时更新缓存 A 和缓存 B。</p></li></ul><h2 id="7、如何解决-Redis-的并发竞争-Key-问题"><a href="#7、如何解决-Redis-的并发竞争-Key-问题" class="headerlink" title="7、如何解决 Redis 的并发竞争 Key 问题"></a>7、如何解决 Redis 的并发竞争 Key 问题</h2><p>这个问题大致就是，同时有多个子系统去 Set 一个 Key。这个时候要注意什么呢？大家基本都是推荐用 Redis 事务机制。</p><p>但是我并不推荐使用 Redis 的事务机制。因为我们的生产环境，基本都是 Redis 集群环境，做了数据分片操作。你一个事务中有涉及到多个 Key 操作的时候，这多个 Key 不一定都存储在同一个 redis-server 上。因此，Redis 的事务机制，十分鸡肋。</p><h3 id="如果对这个-Key-操作，不要求顺序"><a href="#如果对这个-Key-操作，不要求顺序" class="headerlink" title="如果对这个 Key 操作，不要求顺序"></a>如果对这个 Key 操作，不要求顺序</h3><p>这种情况下，准备一个分布式锁，大家去抢锁，抢到锁就做 set 操作即可，比较简单。</p><h3 id="如果对这个-Key-操作，要求顺序"><a href="#如果对这个-Key-操作，要求顺序" class="headerlink" title="如果对这个 Key 操作，要求顺序"></a>如果对这个 Key 操作，要求顺序</h3><p>假设有一个 key1，系统 A 需要将 key1 设置为 valueA，系统 B 需要将 key1 设置为 valueB，系统 C 需要将 key1 设置为 valueC。</p><p>期望按照 key1 的 value 值按照 valueA > valueB > valueC 的顺序变化。这种时候我们在数据写入数据库的时候，需要保存一个时间戳。</p><h3 id="假设时间戳如下："><a href="#假设时间戳如下：" class="headerlink" title="假设时间戳如下："></a>假设时间戳如下：</h3><p>系统 A key 1 {valueA  3:00}<br>系统 B key 1 {valueB  3:05}<br>系统 C key 1 {valueC  3:10}</p><p>那么，假设系统 B 先抢到锁，将 key1 设置为{valueB 3:05}。接下来系统 A 抢到锁，发现自己的 valueA 的时间戳早于缓存中的时间戳，那就不做 set 操作了，以此类推。其他方法，比如利用队列，将 set 方法变成串行访问也可以。</p><h2 id="8、总结"><a href="#8、总结" class="headerlink" title="8、总结"></a>8、总结</h2><p>Redis 在国内各大公司都能看到其身影，比如我们熟悉的新浪，阿里，腾讯，百度，美团，小米等。学习 Redis，这几方面尤其重要：Redis 客户端、Redis 高级功能、Redis 持久化和开发运维常用问题探讨、Redis 复制的原理和优化策略、Redis 分布式解决方案等。</p><p>转自：<a href="https://www.cnblogs.com/yaodengyan/p/9717080.html" target="_blank" rel="noopener">https://www.cnblogs.com/yaodengyan/p/9717080.html</a></p></body></html>]]></content>
      
      
      <categories>
          
          <category> 分布式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
            <tag> 高并发 </tag>
            
            <tag> 分布式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>原型设计模式</title>
      <link href="/2018/10/11/%E5%8E%9F%E5%9E%8B%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
      <url>/2018/10/11/%E5%8E%9F%E5%9E%8B%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script></head><body><h2 id="6-原型模式（Prototype）"><a href="#6-原型模式（Prototype）" class="headerlink" title="6. 原型模式（Prototype）"></a>6. 原型模式（Prototype）</h2><h3 id="Intent"><a href="#Intent" class="headerlink" title="Intent"></a>Intent</h3><p>使用原型实例指定要创建对象的类型，通过复制这个原型来创建新对象。</p><h3 id="Class-Diagram"><a href="#Class-Diagram" class="headerlink" title="Class Diagram"></a>Class Diagram</h3><p><a href="https://i.imgur.com/6TBgFjp.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.imgur.com/6TBgFjp.jpg" class="lazyload"></a></p><h3 id="Implementation"><a href="#Implementation" class="headerlink" title="Implementation"></a>Implementation</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Prototype</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> Prototype <span class="title">myClone</span><span class="params">()</span></span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcretePrototype</span> <span class="keyword">extends</span> <span class="title">Prototype</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String filed;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ConcretePrototype</span><span class="params">(String filed)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.filed = filed;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function">Prototype <span class="title">myClone</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ConcretePrototype(filed);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> filed;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        Prototype prototype = <span class="keyword">new</span> ConcretePrototype(<span class="string">"abc"</span>);</span><br><span class="line">        Prototype clone = prototype.myClone();</span><br><span class="line">        System.out.println(clone.toString());</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">html</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">abc</span><br></pre></td></tr></tbody></table></figure></div><h3 id="JDK"><a href="#JDK" class="headerlink" title="JDK"></a>JDK</h3><ul><li><a href="http://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#clone%28%29" target="_blank" rel="noopener">java.lang.Object#clone()</a></li></ul><p>源码：<a href="https://github.com/HWYWL/design-patterns" target="_blank" rel="noopener">https://github.com/HWYWL/design-patterns</a></p></body></html>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>工厂方法设计模式</title>
      <link href="/2018/10/11/%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
      <url>/2018/10/11/%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script></head><body><h2 id="工厂方法（Factory-Method）"><a href="#工厂方法（Factory-Method）" class="headerlink" title="工厂方法（Factory Method）"></a>工厂方法（Factory Method）</h2><h3 id="Intent"><a href="#Intent" class="headerlink" title="Intent"></a>Intent</h3><p>定义了一个创建对象的接口，但由子类决定要实例化哪个类。工厂方法把实例化操作推迟到子类。</p><h3 id="Class-Diagram"><a href="#Class-Diagram" class="headerlink" title="Class Diagram"></a>Class Diagram</h3><p>在简单工厂中，创建对象的是另一个类，而在工厂方法中，是由子类来创建对象。</p><p>下图中，Factory 有一个 doSomething() 方法，这个方法需要用到一个产品对象，这个产品对象由 factoryMethod() 方法创建。该方法是抽象的，需要由子类去实现。</p><p><a href="https://i.imgur.com/uvXIKrJ.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.imgur.com/uvXIKrJ.jpg" class="lazyload"></a></p><h3 id="Implementation"><a href="#Implementation" class="headerlink" title="Implementation"></a>Implementation</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Factory</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">public</span> Product <span class="title">factoryMethod</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomething</span><span class="params">()</span> </span>{</span><br><span class="line">        Product product = factoryMethod();</span><br><span class="line">        <span class="comment">// do something with the product</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 实现工厂抽象方法</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> YI</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018-10-11 10:42:21</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteFactory</span> <span class="keyword">extends</span> <span class="title">Factory</span> </span>{</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Product <span class="title">factoryMethod</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> () -> System.out.println(<span class="string">"我是工厂生产的产品，大家可以叫我啦啦♪(^∇^*)"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 实现工厂抽象方法</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> YI</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018-10-11 10:42:21</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteFactory1</span> <span class="keyword">extends</span> <span class="title">Factory</span> </span>{</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Product <span class="title">factoryMethod</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> () -> System.out.println(<span class="string">"我是工厂生产的产品，大家可以叫我嘻嘻(#^.^#)"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 实现工厂抽象方法</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> YI</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018-10-11 10:42:21</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteFactory2</span> <span class="keyword">extends</span> <span class="title">Factory</span> </span>{</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Product <span class="title">factoryMethod</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> () -> System.out.println(<span class="string">"我是工厂生产的产品，大家可以叫我哈哈^_^"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><h3 id="JDK"><a href="#JDK" class="headerlink" title="JDK"></a>JDK</h3><ul><li><a href="http://docs.oracle.com/javase/8/docs/api/java/util/Calendar.html#getInstance--" target="_blank" rel="noopener">java.util.Calendar</a></li><li><a href="http://docs.oracle.com/javase/8/docs/api/java/util/ResourceBundle.html#getBundle-java.lang.String-" target="_blank" rel="noopener">java.util.ResourceBundle</a></li><li><a href="http://docs.oracle.com/javase/8/docs/api/java/text/NumberFormat.html#getInstance--" target="_blank" rel="noopener">java.text.NumberFormat</a></li><li><a href="http://docs.oracle.com/javase/8/docs/api/java/nio/charset/Charset.html#forName-java.lang.String-" target="_blank" rel="noopener">java.nio.charset.Charset</a></li><li><a href="http://docs.oracle.com/javase/8/docs/api/java/net/URLStreamHandlerFactory.html#createURLStreamHandler-java.lang.String-" target="_blank" rel="noopener">java.net.URLStreamHandlerFactory</a></li><li><a href="https://docs.oracle.com/javase/8/docs/api/java/util/EnumSet.html#of-E-" target="_blank" rel="noopener">java.util.EnumSet</a></li><li><a href="https://docs.oracle.com/javase/8/docs/api/javax/xml/bind/JAXBContext.html#createMarshaller--" target="_blank" rel="noopener">javax.xml.bind.JAXBContext</a></li></ul><p>源码：<a href="https://github.com/HWYWL/design-patterns" target="_blank" rel="noopener">https://github.com/HWYWL/design-patterns</a></p></body></html>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>生成器设计模式</title>
      <link href="/2018/10/11/%E7%94%9F%E6%88%90%E5%99%A8%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
      <url>/2018/10/11/%E7%94%9F%E6%88%90%E5%99%A8%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script></head><body><h2 id="生成器（Builder）"><a href="#生成器（Builder）" class="headerlink" title="生成器（Builder）"></a>生成器（Builder）</h2><h3 id="Intent"><a href="#Intent" class="headerlink" title="Intent"></a>Intent</h3><p>封装一个对象的构造过程，并允许按步骤构造。</p><h3 id="Class-Diagram"><a href="#Class-Diagram" class="headerlink" title="Class Diagram"></a>Class Diagram</h3><p><a href="https://i.imgur.com/ACUSEcw.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.imgur.com/ACUSEcw.jpg" class="lazyload"></a></p><h3 id="Implementation"><a href="#Implementation" class="headerlink" title="Implementation"></a>Implementation</h3><p>以下是一个简易的 StringBuilder 实现，参考了 JDK 1.8 源码。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractStringBuilder</span> </span>{</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">char</span>[] value;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">int</span> count;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AbstractStringBuilder</span><span class="params">(<span class="keyword">int</span> capacity)</span> </span>{</span><br><span class="line">        count = <span class="number">0</span>;</span><br><span class="line">        value = <span class="keyword">new</span> <span class="keyword">char</span>[capacity];</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> AbstractStringBuilder <span class="title">append</span><span class="params">(<span class="keyword">char</span> c)</span> </span>{</span><br><span class="line">        ensureCapacityInternal(count + <span class="number">1</span>);</span><br><span class="line">        value[count++] = c;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ensureCapacityInternal</span><span class="params">(<span class="keyword">int</span> minimumCapacity)</span> </span>{</span><br><span class="line">        <span class="comment">// overflow-conscious code</span></span><br><span class="line">        <span class="keyword">if</span> (minimumCapacity - value.length > <span class="number">0</span>)</span><br><span class="line">            expandCapacity(minimumCapacity);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">expandCapacity</span><span class="params">(<span class="keyword">int</span> minimumCapacity)</span> </span>{</span><br><span class="line">        <span class="keyword">int</span> newCapacity = value.length * <span class="number">2</span> + <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (newCapacity - minimumCapacity < <span class="number">0</span>)</span><br><span class="line">            newCapacity = minimumCapacity;</span><br><span class="line">        <span class="keyword">if</span> (newCapacity < <span class="number">0</span>) {</span><br><span class="line">            <span class="keyword">if</span> (minimumCapacity < <span class="number">0</span>) <span class="comment">// overflow</span></span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> OutOfMemoryError();</span><br><span class="line">            newCapacity = Integer.MAX_VALUE;</span><br><span class="line">        }</span><br><span class="line">        value = Arrays.copyOf(value, newCapacity);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringBuilder</span> <span class="keyword">extends</span> <span class="title">AbstractStringBuilder</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">StringBuilder</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">super</span>(<span class="number">16</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="comment">// Create a copy, don't share the array</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> String(value, <span class="number">0</span>, count);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> count = <span class="number">26</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i < count; i++) {</span><br><span class="line">            sb.append((<span class="keyword">char</span>) (<span class="string">'a'</span> + i));</span><br><span class="line">        }</span><br><span class="line">        System.out.println(sb.toString());</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">html</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">abcdefghijklmnopqrstuvwxyz</span><br></pre></td></tr></tbody></table></figure></div><h3 id="JDK"><a href="#JDK" class="headerlink" title="JDK"></a>JDK</h3><ul><li><a href="http://docs.oracle.com/javase/8/docs/api/java/lang/StringBuilder.html" target="_blank" rel="noopener">java.lang.StringBuilder</a></li><li><a href="http://docs.oracle.com/javase/8/docs/api/java/nio/ByteBuffer.html#put-byte-" target="_blank" rel="noopener">java.nio.ByteBuffer</a></li><li><a href="http://docs.oracle.com/javase/8/docs/api/java/lang/StringBuffer.html#append-boolean-" target="_blank" rel="noopener">java.lang.StringBuffer</a></li><li><a href="http://docs.oracle.com/javase/8/docs/api/java/lang/Appendable.html" target="_blank" rel="noopener">java.lang.Appendable</a></li><li><a href="https://github.com/apache/camel/tree/0e195428ee04531be27a0b659005e3aa8d159d23/camel-core/src/main/java/org/apache/camel/builder" target="_blank" rel="noopener">Apache Camel builders</a></li></ul><p>源码：<a href="https://github.com/HWYWL/design-patterns" target="_blank" rel="noopener">https://github.com/HWYWL/design-patterns</a></p></body></html>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>简单工厂设计模式</title>
      <link href="/2018/10/11/%E7%AE%80%E5%8D%95%E5%B7%A5%E5%8E%82%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
      <url>/2018/10/11/%E7%AE%80%E5%8D%95%E5%B7%A5%E5%8E%82%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script></head><body><h2 id="简单工厂（Simple-Factory）"><a href="#简单工厂（Simple-Factory）" class="headerlink" title="简单工厂（Simple Factory）"></a>简单工厂（Simple Factory）</h2><h3 id="Intent"><a href="#Intent" class="headerlink" title="Intent"></a>Intent</h3><p>在创建一个对象时不向客户暴露内部细节，并提供一个创建对象的通用接口。</p><h3 id="Class-Diagram"><a href="#Class-Diagram" class="headerlink" title="Class Diagram"></a>Class Diagram</h3><p>简单工厂把实例化的操作单独放到一个类中，这个类就成为简单工厂类，让简单工厂类来决定应该用哪个具体子类来实例化。</p><p>这样做能把客户类和具体子类的实现解耦，客户类不再需要知道有哪些子类以及应当实例化哪个子类。客户类往往有多个，如果不使用简单工厂，那么所有的客户类都要知道所有子类的细节。而且一旦子类发生改变，例如增加子类，那么所有的客户类都要进行修改。</p><p><a href="https://i.imgur.com/chP5OPu.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.imgur.com/chP5OPu.jpg" class="lazyload"></a></p><h3 id="Implementation"><a href="#Implementation" class="headerlink" title="Implementation"></a>Implementation</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Product</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">hello</span><span class="params">()</span></span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteProduct</span> <span class="keyword">implements</span> <span class="title">Product</span> </span>{</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hello</span><span class="params">()</span> </span>{</span><br><span class="line">        System.out.println(<span class="string">"Hello Java"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteProduct1</span> <span class="keyword">implements</span> <span class="title">Product</span> </span>{</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hello</span><span class="params">()</span> </span>{</span><br><span class="line">        System.out.println(<span class="string">"Hello Python"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteProduct2</span> <span class="keyword">implements</span> <span class="title">Product</span> </span>{</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hello</span><span class="params">()</span> </span>{</span><br><span class="line">        System.out.println(<span class="string">"Hello Go"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p>以下的 Client 类包含了实例化的代码，这是一种错误的实现。如果在客户类中存在这种实例化代码，就需要考虑将代码放到简单工厂中。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client1</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="keyword">int</span> type = <span class="number">1</span>;</span><br><span class="line">        Product product;</span><br><span class="line">        <span class="keyword">if</span> (type == <span class="number">1</span>) {</span><br><span class="line">            product = <span class="keyword">new</span> ConcreteProduct1();</span><br><span class="line">        } <span class="keyword">else</span> <span class="keyword">if</span> (type == <span class="number">2</span>) {</span><br><span class="line">            product = <span class="keyword">new</span> ConcreteProduct2();</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            product = <span class="keyword">new</span> ConcreteProduct();</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        product.hello();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p>以下的 SimpleFactory 是简单工厂实现，它被所有需要进行实例化的客户类调用。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleFactory</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Product <span class="title">createProduct</span><span class="params">(<span class="keyword">int</span> type)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (type == <span class="number">1</span>) {</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ConcreteProduct1();</span><br><span class="line">        } <span class="keyword">else</span> <span class="keyword">if</span> (type == <span class="number">2</span>) {</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ConcreteProduct2();</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ConcreteProduct();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client2</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        SimpleFactory simpleFactory = <span class="keyword">new</span> SimpleFactory();</span><br><span class="line"></span><br><span class="line">        Product product = simpleFactory.createProduct(<span class="number">1</span>);</span><br><span class="line">        product.hello();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p>源码：<a href="https://github.com/HWYWL/design-patterns" target="_blank" rel="noopener">https://github.com/HWYWL/design-patterns</a></p></body></html>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>责任链设计模式</title>
      <link href="/2018/10/11/%E8%B4%A3%E4%BB%BB%E9%93%BE%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
      <url>/2018/10/11/%E8%B4%A3%E4%BB%BB%E9%93%BE%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script></head><body><h2 id="责任链（Chain-Of-Responsibility）"><a href="#责任链（Chain-Of-Responsibility）" class="headerlink" title="责任链（Chain Of Responsibility）"></a>责任链（Chain Of Responsibility）</h2><h3 id="Intent"><a href="#Intent" class="headerlink" title="Intent"></a>Intent</h3><p>使多个对象都有机会处理请求，从而避免请求的发送者和接收者之间的耦合关系。将这些对象连成一条链，并沿着这条链发送该请求，直到有一个对象处理它为止。</p><h3 id="Class-Diagram"><a href="#Class-Diagram" class="headerlink" title="Class Diagram"></a>Class Diagram</h3><ul><li>Handler：定义处理请求的接口，并且实现后继链（successor）</li></ul><p><a href="https://i.imgur.com/yrqMQH2.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.imgur.com/yrqMQH2.jpg" class="lazyload"></a></p><h3 id="Implementation"><a href="#Implementation" class="headerlink" title="Implementation"></a>Implementation</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Handler</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> Handler successor;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Handler</span><span class="params">(Handler successor)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.successor = successor;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">handleRequest</span><span class="params">(Request request)</span></span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteHandler1</span> <span class="keyword">extends</span> <span class="title">Handler</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ConcreteHandler1</span><span class="params">(Handler successor)</span> </span>{</span><br><span class="line">        <span class="keyword">super</span>(successor);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">handleRequest</span><span class="params">(Request request)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (request.getType() == RequestType.TYPE1) {</span><br><span class="line">            System.out.println(request.getName() + <span class="string">" is handle by ConcreteHandler1"</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (successor != <span class="keyword">null</span>) {</span><br><span class="line">            successor.handleRequest(request);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteHandler2</span> <span class="keyword">extends</span> <span class="title">Handler</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ConcreteHandler2</span><span class="params">(Handler successor)</span> </span>{</span><br><span class="line">        <span class="keyword">super</span>(successor);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">handleRequest</span><span class="params">(Request request)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (request.getType() == RequestType.TYPE2) {</span><br><span class="line">            System.out.println(request.getName() + <span class="string">" is handle by ConcreteHandler2"</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (successor != <span class="keyword">null</span>) {</span><br><span class="line">            successor.handleRequest(request);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Request</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> RequestType type;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Request</span><span class="params">(RequestType type, String name)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.type = type;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RequestType <span class="title">getType</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> type;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> RequestType {</span><br><span class="line">    TYPE1, TYPE2</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line"></span><br><span class="line">        Handler handler1 = <span class="keyword">new</span> ConcreteHandler1(<span class="keyword">null</span>);</span><br><span class="line">        Handler handler2 = <span class="keyword">new</span> ConcreteHandler2(handler1);</span><br><span class="line"></span><br><span class="line">        Request request1 = <span class="keyword">new</span> Request(RequestType.TYPE1, <span class="string">"request1"</span>);</span><br><span class="line">        handler2.handleRequest(request1);</span><br><span class="line"></span><br><span class="line">        Request request2 = <span class="keyword">new</span> Request(RequestType.TYPE2, <span class="string">"request2"</span>);</span><br><span class="line">        handler2.handleRequest(request2);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">html</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">request1 is handle by ConcreteHandler1</span><br><span class="line">request2 is handle by ConcreteHandler2</span><br></pre></td></tr></tbody></table></figure></div><h3 id="JDK"><a href="#JDK" class="headerlink" title="JDK"></a>JDK</h3><ul><li><a href="http://docs.oracle.com/javase/8/docs/api/java/util/logging/Logger.html#log%28java.util.logging.Level,%20java.lang.String%29" target="_blank" rel="noopener">java.util.logging.Logger#log()</a></li><li><a href="https://commons.apache.org/proper/commons-chain/index.html" target="_blank" rel="noopener">Apache Commons Chain</a></li><li><a href="http://docs.oracle.com/javaee/7/api/javax/servlet/Filter.html#doFilter-javax.servlet.ServletRequest-javax.servlet.ServletResponse-javax.servlet.FilterChain-" target="_blank" rel="noopener">javax.servlet.Filter#doFilter()</a></li></ul><p>源码：<a href="https://github.com/HWYWL/design-patterns" target="_blank" rel="noopener">https://github.com/HWYWL/design-patterns</a></p></body></html>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>单例设计模式</title>
      <link href="/2018/10/11/%E5%8D%95%E4%BE%8B%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
      <url>/2018/10/11/%E5%8D%95%E4%BE%8B%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script></head><body><h2 id="单例（Singleton）"><a href="#单例（Singleton）" class="headerlink" title="单例（Singleton）"></a>单例（Singleton）</h2><h3 id="Intent"><a href="#Intent" class="headerlink" title="Intent"></a>Intent</h3><p>确保一个类只有一个实例，并提供该实例的全局访问点。</p><h3 id="Class-Diagram"><a href="#Class-Diagram" class="headerlink" title="Class Diagram"></a>Class Diagram</h3><p>使用一个私有构造函数、一个私有静态变量以及一个公有静态函数来实现。</p><p>私有构造函数保证了不能通过构造函数来创建对象实例，只能通过公有静态函数返回唯一的私有静态变量。</p><p><a href="https://i.imgur.com/zJiI9m5.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.imgur.com/zJiI9m5.jpg" class="lazyload"></a></p><h3 id="Implementation"><a href="#Implementation" class="headerlink" title="Implementation"></a>Implementation</h3><h4 id="Ⅰ-懒汉式-线程不安全"><a href="#Ⅰ-懒汉式-线程不安全" class="headerlink" title="Ⅰ 懒汉式-线程不安全"></a>Ⅰ 懒汉式-线程不安全</h4><p>以下实现中，私有静态变量 uniqueInstance 被延迟实例化，这样做的好处是，如果没有用到该类，那么就不会实例化 uniqueInstance，从而节约资源。</p><p>这个实现在多线程环境下是不安全的，如果多个线程能够同时进入 <code>if (uniqueInstance == null)</code> ，并且此时 uniqueInstance 为 null，那么会有多个线程执行 <code>uniqueInstance = new Singleton();</code> 语句，这将导致实例化多次 uniqueInstance。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton uniqueInstance;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>{</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getUniqueInstance</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (uniqueInstance == <span class="keyword">null</span>) {</span><br><span class="line">            uniqueInstance = <span class="keyword">new</span> Singleton();</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> uniqueInstance;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><h4 id="Ⅱ-饿汉式-线程安全"><a href="#Ⅱ-饿汉式-线程安全" class="headerlink" title="Ⅱ 饿汉式-线程安全"></a>Ⅱ 饿汉式-线程安全</h4><p>线程不安全问题主要是由于 uniqueInstance 被实例化多次，采取直接实例化 uniqueInstance 的方式就不会产生线程不安全问题。</p><p>但是直接实例化的方式也丢失了延迟实例化带来的节约资源的好处。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Singleton uniqueInstance = <span class="keyword">new</span> Singleton();</span><br></pre></td></tr></tbody></table></figure></div><h4 id="Ⅲ-懒汉式-线程安全"><a href="#Ⅲ-懒汉式-线程安全" class="headerlink" title="Ⅲ 懒汉式-线程安全"></a>Ⅲ 懒汉式-线程安全</h4><p>只需要对 getUniqueInstance() 方法加锁，那么在一个时间点只能有一个线程能够进入该方法，从而避免了实例化多次 uniqueInstance。</p><p>但是当一个线程进入该方法之后，其它试图进入该方法的线程都必须等待，即使 uniqueInstance 已经被实例化了。这会让线程阻塞时间过长，因此该方法有性能问题，不推荐使用。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> Singleton <span class="title">getUniqueInstance</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="keyword">if</span> (uniqueInstance == <span class="keyword">null</span>) {</span><br><span class="line">        uniqueInstance = <span class="keyword">new</span> Singleton();</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> uniqueInstance;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><h4 id="Ⅳ-双重校验锁-线程安全"><a href="#Ⅳ-双重校验锁-线程安全" class="headerlink" title="Ⅳ 双重校验锁-线程安全"></a>Ⅳ 双重校验锁-线程安全</h4><p>uniqueInstance 只需要被实例化一次，之后就可以直接使用了。加锁操作只需要对实例化那部分的代码进行，只有当 uniqueInstance 没有被实例化时，才需要进行加锁。</p><p>双重校验锁先判断 uniqueInstance 是否已经被实例化，如果没有被实例化，那么才对实例化语句进行加锁。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> Singleton uniqueInstance;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>{</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getUniqueInstance</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (uniqueInstance == <span class="keyword">null</span>) {</span><br><span class="line">            <span class="keyword">synchronized</span> (Singleton<span class="class">.<span class="keyword">class</span>) </span>{</span><br><span class="line">                <span class="keyword">if</span> (uniqueInstance == <span class="keyword">null</span>) {</span><br><span class="line">                    uniqueInstance = <span class="keyword">new</span> Singleton();</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> uniqueInstance;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p>考虑下面的实现，也就是只使用了一个 if 语句。在 uniqueInstance == null 的情况下，如果两个线程都执行了 if 语句，那么两个线程都会进入 if 语句块内。虽然在 if 语句块内有加锁操作，但是两个线程都会执行 <code>uniqueInstance = new Singleton();</code> 这条语句，只是先后的问题，那么就会进行两次实例化。因此必须使用双重校验锁，也就是需要使用两个 if 语句。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (uniqueInstance == <span class="keyword">null</span>) {</span><br><span class="line">    <span class="keyword">synchronized</span> (Singleton<span class="class">.<span class="keyword">class</span>) </span>{</span><br><span class="line">        uniqueInstance = <span class="keyword">new</span> Singleton();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p>uniqueInstance 采用 volatile 关键字修饰也是很有必要的， <code>uniqueInstance = new Singleton();</code> 这段代码其实是分为三步执行：</p><ol><li>为 uniqueInstance 分配内存空间</li><li>初始化 uniqueInstance</li><li>将 uniqueInstance 指向分配的内存地址</li></ol><p>但是由于 JVM 具有指令重排的特性，执行顺序有可能变成 1>3>2。指令重排在单线程环境下不会出先问题，但是在多线程环境下会导致一个线程获得还没有初始化的实例。例如，线程 T<sub>1</sub> 执行了 1 和 3，此时 T<sub>2</sub> 调用 getUniqueInstance() 后发现 uniqueInstance 不为空，因此返回 uniqueInstance，但此时 uniqueInstance 还未被初始化。</p><p>使用 volatile 可以禁止 JVM 的指令重排，保证在多线程环境下也能正常运行。</p><h4 id="Ⅴ-静态内部类实现"><a href="#Ⅴ-静态内部类实现" class="headerlink" title="Ⅴ 静态内部类实现"></a>Ⅴ 静态内部类实现</h4><p>当 Singleton 类加载时，静态内部类 SingletonHolder 没有被加载进内存。只有当调用 <code>getUniqueInstance()</code> 方法从而触发 <code>SingletonHolder.INSTANCE</code> 时 SingletonHolder 才会被加载，此时初始化 INSTANCE 实例，并且 JVM 能确保 INSTANCE 只被实例化一次。</p><p>这种方式不仅具有延迟初始化的好处，而且由 JVM 提供了对线程安全的支持。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>{</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonHolder</span> </span>{</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton INSTANCE = <span class="keyword">new</span> Singleton();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getUniqueInstance</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> SingletonHolder.INSTANCE;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><h4 id="Ⅵ-枚举实现"><a href="#Ⅵ-枚举实现" class="headerlink" title="Ⅵ 枚举实现"></a>Ⅵ 枚举实现</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> Singleton {</span><br><span class="line"></span><br><span class="line">    INSTANCE;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String objName;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getObjName</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> objName;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setObjName</span><span class="params">(String objName)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.objName = objName;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 单例测试</span></span><br><span class="line">        Singleton firstSingleton = Singleton.INSTANCE;</span><br><span class="line">        firstSingleton.setObjName(<span class="string">"firstName"</span>);</span><br><span class="line">        System.out.println(firstSingleton.getObjName());</span><br><span class="line">        Singleton secondSingleton = Singleton.INSTANCE;</span><br><span class="line">        secondSingleton.setObjName(<span class="string">"secondName"</span>);</span><br><span class="line">        System.out.println(firstSingleton.getObjName());</span><br><span class="line">        System.out.println(secondSingleton.getObjName());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 反射获取实例测试</span></span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            Singleton[] enumConstants = Singleton<span class="class">.<span class="keyword">class</span>.<span class="title">getEnumConstants</span>()</span>;</span><br><span class="line">            <span class="keyword">for</span> (Singleton enumConstant : enumConstants) {</span><br><span class="line">                System.out.println(enumConstant.getObjName());</span><br><span class="line">            }</span><br><span class="line">        } <span class="keyword">catch</span> (Exception e) {</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">html</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">firstName</span><br><span class="line">secondName</span><br><span class="line">secondName</span><br><span class="line">secondName</span><br></pre></td></tr></tbody></table></figure></div><p>该实现在多次序列化再进行反序列化之后，不会得到多个实例。而其它实现需要使用 transient 修饰所有字段，并且实现序列化和反序列化的方法。</p><p>该实现可以防止反射攻击。在其它实现中，通过 setAccessible() 方法可以将私有构造函数的访问级别设置为 public，然后调用构造函数从而实例化对象，如果要防止这种攻击，需要在构造函数中添加防止多次实例化的代码。该实现是由 JVM 保证只会实例化一次，因此不会出现上述的反射攻击。</p><h3 id="Examples"><a href="#Examples" class="headerlink" title="Examples"></a>Examples</h3><ul><li>Logger Classes</li><li>Configuration Classes</li><li>Accesing resources in shared mode</li><li>Factories implemented as Singletons</li></ul><h3 id="JDK"><a href="#JDK" class="headerlink" title="JDK"></a>JDK</h3><ul><li><a href="http://docs.oracle.com/javase/8/docs/api/java/lang/Runtime.html#getRuntime%28%29" target="_blank" rel="noopener">java.lang.Runtime#getRuntime()</a></li><li><a href="http://docs.oracle.com/javase/8/docs/api/java/awt/Desktop.html#getDesktop--" target="_blank" rel="noopener">java.awt.Desktop#getDesktop()</a></li><li><a href="http://docs.oracle.com/javase/8/docs/api/java/lang/System.html#getSecurityManager--" target="_blank" rel="noopener">java.lang.System#getSecurityManager()</a></li></ul><p>源码：<a href="https://github.com/HWYWL/design-patterns" target="_blank" rel="noopener">https://github.com/HWYWL/design-patterns</a></p></body></html>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>抽象工厂设计模式</title>
      <link href="/2018/10/11/%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
      <url>/2018/10/11/%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script></head><body><h2 id="抽象工厂（Abstract-Factory）"><a href="#抽象工厂（Abstract-Factory）" class="headerlink" title="抽象工厂（Abstract Factory）"></a>抽象工厂（Abstract Factory）</h2><h3 id="Intent"><a href="#Intent" class="headerlink" title="Intent"></a>Intent</h3><p>提供一个接口，用于创建  <strong>相关的对象家族</strong> 。</p><h3 id="Class-Diagram"><a href="#Class-Diagram" class="headerlink" title="Class Diagram"></a>Class Diagram</h3><p>抽象工厂模式创建的是对象家族，也就是很多对象而不是一个对象，并且这些对象是相关的，也就是说必须一起创建出来。而工厂方法模式只是用于创建一个对象，这和抽象工厂模式有很大不同。</p><p>抽象工厂模式用到了工厂方法模式来创建单一对象，AbstractFactory 中的 createProductA() 和 createProductB() 方法都是让子类来实现，这两个方法单独来看就是在创建一个对象，这符合工厂方法模式的定义。</p><p>至于创建对象的家族这一概念是在 Client 体现，Client 要通过 AbstractFactory 同时调用两个方法来创建出两个对象，在这里这两个对象就有很大的相关性，Client 需要同时创建出这两个对象。</p><p>从高层次来看，抽象工厂使用了组合，即 Cilent 组合了 AbstractFactory，而工厂方法模式使用了继承。</p><p><a href="https://i.imgur.com/rHg602N.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.imgur.com/rHg602N.jpg" class="lazyload"></a></p><h3 id="Implementation"><a href="#Implementation" class="headerlink" title="Implementation"></a>Implementation</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractProductA</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">helloA</span><span class="params">(String h)</span></span>{</span><br><span class="line">        System.out.println(<span class="string">"HelloA "</span> + h);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractProductB</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">helloB</span><span class="params">(String h)</span></span>{</span><br><span class="line">        System.out.println(<span class="string">"HelloB "</span> + h);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProductA1</span> <span class="keyword">extends</span> <span class="title">AbstractProductA</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hiA1</span><span class="params">(String h)</span></span>{</span><br><span class="line">        System.out.println(<span class="string">"HiA1 "</span> + h);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProductA2</span> <span class="keyword">extends</span> <span class="title">AbstractProductA</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hiA2</span><span class="params">(String h)</span></span>{</span><br><span class="line">        System.out.println(<span class="string">"HiA2 "</span> + h);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProductB1</span> <span class="keyword">extends</span> <span class="title">AbstractProductB</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hiB1</span><span class="params">(String h)</span></span>{</span><br><span class="line">        System.out.println(<span class="string">"HiB1 "</span> + h);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProductB2</span> <span class="keyword">extends</span> <span class="title">AbstractProductB</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hiB2</span><span class="params">(String h)</span></span>{</span><br><span class="line">        System.out.println(<span class="string">"HiB2 "</span> + h);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 抽象类工厂</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> YI</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018-10-11 11:01:28</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractFactory</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> AbstractProductA <span class="title">createProductA</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> AbstractProductB <span class="title">createProductB</span><span class="params">()</span></span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 实现工厂一</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> YI</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018-10-11 11:01:28</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteFactory1</span> <span class="keyword">extends</span> <span class="title">AbstractFactory</span> </span>{</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function">AbstractProductA <span class="title">createProductA</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ProductA1();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function">AbstractProductB <span class="title">createProductB</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ProductB1();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 实现工厂二</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> YI</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018-10-11 11:01:28</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteFactory2</span> <span class="keyword">extends</span> <span class="title">AbstractFactory</span> </span>{</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function">AbstractProductA <span class="title">createProductA</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ProductA2();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function">AbstractProductB <span class="title">createProductB</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ProductB2();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通过不同的工厂获取不同的对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> YI</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018-10-11 11:03:36</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        AbstractFactory abstractFactory = <span class="keyword">new</span> ConcreteFactory1();</span><br><span class="line"></span><br><span class="line">        AbstractProductA productA = abstractFactory.createProductA();</span><br><span class="line">        AbstractProductB productB = abstractFactory.createProductB();</span><br><span class="line">        productA.helloA(<span class="string">"美女"</span>);</span><br><span class="line">        productB.helloB(<span class="string">"校花"</span>);</span><br><span class="line">        <span class="comment">// do something with productA and productB</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><h3 id="JDK"><a href="#JDK" class="headerlink" title="JDK"></a>JDK</h3><ul><li><a href="http://docs.oracle.com/javase/8/docs/api/javax/xml/parsers/DocumentBuilderFactory.html" target="_blank" rel="noopener">javax.xml.parsers.DocumentBuilderFactory</a></li><li><a href="http://docs.oracle.com/javase/8/docs/api/javax/xml/transform/TransformerFactory.html#newInstance--" target="_blank" rel="noopener">javax.xml.transform.TransformerFactory</a></li><li><a href="http://docs.oracle.com/javase/8/docs/api/javax/xml/xpath/XPathFactory.html#newInstance--" target="_blank" rel="noopener">javax.xml.xpath.XPathFactory</a></li></ul><p>源码：<a href="https://github.com/HWYWL/design-patterns" target="_blank" rel="noopener">https://github.com/HWYWL/design-patterns</a></p></body></html>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何优雅使用Docker</title>
      <link href="/2018/09/25/%E5%A6%82%E4%BD%95%E4%BC%98%E9%9B%85%E4%BD%BF%E7%94%A8Docker/"/>
      <url>/2018/09/25/%E5%A6%82%E4%BD%95%E4%BC%98%E9%9B%85%E4%BD%BF%E7%94%A8Docker/</url>
      
        <content type="html"><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script></head><body><h1 id="请收下这15个小技巧"><a href="#请收下这15个小技巧" class="headerlink" title="请收下这15个小技巧"></a>请收下这15个小技巧</h1><h2 id="Tip-1"><a href="#Tip-1" class="headerlink" title="Tip 1"></a><code>Tip 1</code></h2><p>获取最近运行容器的id 这是我们经常会用到的一个操作，按照官方示例，你可以这样做（环境ubuntu）：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ ID=$(docker run ubuntu echo hello world)</span><br><span class="line">hello world</span><br><span class="line">$ docker commit $ID helloworld</span><br><span class="line">fd08a884dc79</span><br></pre></td></tr></tbody></table></figure></div><p>这种方式在编写脚本的时候很有用，比如你想在脚本中批量获取id，然后进一步操作。但是这种方式要求你必须给ID赋值，如果是直接敲命令，这样做就不太方便了。 这时，你可以换一种方式：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ alias dl=’docker ps -l -q’</span><br><span class="line">$ docker run ubuntu echo hello world</span><br><span class="line">hello world</span><br><span class="line">$ dl</span><br><span class="line">1904cf045887</span><br><span class="line">$ docker commit `dl` helloworld</span><br><span class="line">fd08a884dc79</span><br></pre></td></tr></tbody></table></figure></div><p>docker ps -l -q命令将返回最近运行的容器的id，通过设置别名（alias），dl命令就是获取最近容器的id。这样，就无需再输入冗长的docker ps -l -q命令了。通过两个斜引号“，可以获取dl命令的值，也就是最近运行的容器的id。</p><h2 id="Tip-2"><a href="#Tip-2" class="headerlink" title="Tip 2"></a><code>Tip 2</code></h2><p>尽量在Dockerfile中指定要安装的软件，而不用Docker容器的shell直接安装软件。 说实话，我有时候也喜欢在shell中安装软件，也许你也一样，喜欢在shell中把所有软件安装都搞定。但是，搞来搞去，最后还是发现，你还是需要在Doockerfile中指定安装文件。在shell中安装软件，你要这样做：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ docker run -i -t ubuntu bash #登陆到docker容器</span><br><span class="line">root@db0c3967abf8:/#</span><br></pre></td></tr></tbody></table></figure></div><p>然后输入下面的命令来安装文件：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install postgresql</span><br></pre></td></tr></tbody></table></figure></div><p>然后再调用exit：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@db0c3978abf8:/# exit</span><br></pre></td></tr></tbody></table></figure></div><p>退出docker容器，再给docker commit命令传递一个复杂的JSON字符串来提交新的镜像：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker commit -run=”{“Cmd”:[“postgres”,”-too -many -opts”] }” `dl` postgres</span><br></pre></td></tr></tbody></table></figure></div><p>太麻烦了，不是吗？还是在Dockerfile中指定安装文件吧，只要两个步骤：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1.在一个小巧的Dockerfile中，指定当前操作的镜像为FROM命令的参数</span><br><span class="line">2.然后在Dockerfile中指定一些docker的命令，如CMD, ENTERPOINT, VOLUME等等来指定安装的软件</span><br></pre></td></tr></tbody></table></figure></div><h2 id="Tip-3"><a href="#Tip-3" class="headerlink" title="Tip 3"></a><code>Tip 3</code></h2><p>超-超-超级用户</p><p>你可能需要一直用超级用户来操作docker，就像早期示例里一直提示的：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 添加docker用户组</span><br><span class="line">$ sudo groupadd docker</span><br><span class="line"># 把自己加到docker用户组中</span><br><span class="line">$ sudo gpasswd -a myusername docker</span><br><span class="line"># 重启docker后台服务</span><br><span class="line">$ sudo service docker restart</span><br><span class="line"># 注销，然后再登陆</span><br><span class="line">$ exit</span><br></pre></td></tr></tbody></table></figure></div><p>Wow！连续三个sudo！三次化身“超级用户”，真可谓是“超-超-超级用户”啊！别担心，设置完毕，以后你就再也不用打那么多sudo了！</p><h2 id="Tip-4"><a href="#Tip-4" class="headerlink" title="Tip 4"></a><code>Tip 4</code></h2><p>清理垃圾</p><p>如果你想删除所有停止运行的容器，用这个命令：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker rm $(docker ps -a -q)</span><br></pre></td></tr></tbody></table></figure></div><p>顺便说一句，docker ps命令很慢，不知道为啥这么慢，按理说Go语言是很快的啊。docker ps -a -q命令列出所有容器的id，然后根据id删除容器。docker rm命令遇到正在运行的容器就会失效，所以这个命令完美的删除了所有没在运行的容器。</p><h2 id="Tip-5"><a href="#Tip-5" class="headerlink" title="Tip 5"></a><code>Tip 5</code></h2><p>docker inspect输出结果的解析利器：jq 要对docker inspect的输出结果进行过滤，一般情况下，用grep命令，你需要这样操作：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$docker inspect `dl` | grep IPAddress | cut -d '"' -f 4</span><br></pre></td></tr></tbody></table></figure></div><p>哦！看上去很复杂，用jq吧，专业解析docker inspect输出结果，具有更强的可读性，方便易用：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$docker inspect `dl` | jq -r '.[0].NetworkSettings.IPAddress'</span><br></pre></td></tr></tbody></table></figure></div><p>其中第一个’.’代表所有的结果。’[0]’代表数组的第一个元素。就像JavaScript访问一个JSON对象一样，简单方便。</p><h2 id="Tip-6"><a href="#Tip-6" class="headerlink" title="Tip 6"></a><code>Tip 6</code></h2><p>镜像有哪些环境变量？ 有时候，你需要知道自己创建的镜像有哪些环境变量。简单！只要这样：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker run ubuntu env</span><br></pre></td></tr></tbody></table></figure></div><p>输出结果如下：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">HOME=/</span><br><span class="line">PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin</span><br><span class="line">container=lxc</span><br><span class="line">HOSTNAME=5e1560b7f757</span><br></pre></td></tr></tbody></table></figure></div><p>调用env查看环境变量，对于后面要讲到的“链接”(-link)很有用，在连接两个容器时候需要用到这些环境变量，具体请看最后一个要点“链接”。</p><h2 id="Tip-7"><a href="#Tip-7" class="headerlink" title="Tip 7"></a><code>Tip 7</code></h2><p>RUN命令 vs CMD命令</p><p>Docker的新手用户比较容易混淆RUN和CMD这两个命令。 RUN命令在构建（Build）Docker时执行，这时CMD命令不执行。CMD命令在RUN命令执行时才执行。我们来理清关系，假设Dockerfile内容如下：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">FROM thelanddownunder</span><br><span class="line">MAINTAINER crocdundee</span><br></pre></td></tr></tbody></table></figure></div><p>我们要向系统中安装一些软件，那么：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># docker build将会执行下面的命令：</span><br><span class="line">RUN apt-get update</span><br><span class="line">RUN apt-get install softwares</span><br><span class="line"># dokcer run默认执行下面的命令：</span><br><span class="line">CMD [“softwares”]</span><br></pre></td></tr></tbody></table></figure></div><p>Build时执行RUN，RUN时执行CMD，也就是说，CMD才是镜像最终执行的命令。</p><h2 id="Tip-8"><a href="#Tip-8" class="headerlink" title="Tip 8"></a><code>Tip 8</code></h2><p>CMD命令 vs ENTRYPOINT命令</p><p>又是两条容易混淆的命令！具体细节我们就不说了，举个例子，假设一个容器的Dockerfile指定CMD命令，如下：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">FROM ubuntu</span><br><span class="line">CMD [“echo”]</span><br></pre></td></tr></tbody></table></figure></div><p>另一个容器的Dockerfile指定ENTRYPOINT命令，如下：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">FROM ubuntu</span><br><span class="line">ENTRYPOINT [“echo”]</span><br></pre></td></tr></tbody></table></figure></div><p>运行第一个容器：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run image1 echo hello</span><br></pre></td></tr></tbody></table></figure></div><p>得到的结果：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hello</span><br></pre></td></tr></tbody></table></figure></div><p>运行第二个容器：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run image2 echo hello</span><br></pre></td></tr></tbody></table></figure></div><p>得到的结果：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo hello</span><br></pre></td></tr></tbody></table></figure></div><p>看到不同了吧？实际上，CMD命令是可覆盖的，docker run后面输入的命令与CMD指定的命令匹配时，会把CMD指定的命令替换成docker run中带的命令。而ENTRYPOINT指定的命令只是一个“入口”，docker run后面的内容会全部传给这个“入口”，而不是进行命令的替换，所以得到的结果就是“echo hello”。</p><h2 id="Tip-9"><a href="#Tip-9" class="headerlink" title="Tip 9"></a><code>Tip 9</code></h2><p>Docker容器有自己的IP地址吗？ </p><p>刚接触Docker的人或许会有这样的疑问：Docker容器有自己的IP地址吗？Docker容器是一个进程？还是一个虚拟机？嗯…也许两者兼具？哈哈，其实，Docker容器确实有自己的IP，就像一个具有IP的进程。只要分别在主机和Docker容器中执行查看ip的命令就知道了。</p><p>查看主机的ip：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ip -4 -o addr show eth0</span><br></pre></td></tr></tbody></table></figure></div><p>得到结果：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2: eth0 inet 162.243.139.222/24</span><br></pre></td></tr></tbody></table></figure></div><p>查看Docker容器的ip：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker run ubuntu ip -r -o addr show eth0</span><br></pre></td></tr></tbody></table></figure></div><p>得到结果：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">149: eth0   inet 172.17.0.43/16</span><br></pre></td></tr></tbody></table></figure></div><p>两者并不相同，说明Docker容器有自己的ip。</p><h2 id="Tip-10"><a href="#Tip-10" class="headerlink" title="Tip 10"></a><code>Tip 10</code></h2><p>基于命令行的瘦客户端，使用UNIX Socket和Docker后台服务的REST接口进行通信。Docker默认是用UNIX socket通信的，一直到大概0.5、0.6的版本还是用端口来通信，但现在则改成UNIX socket，所以从外部无法控制Docker容器的内部细节。下面我们来搞点有趣的事情，从主机链接到docker的UNIX socket：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 像HTTP客户端一样连接到UNIX socket</span><br><span class="line">$ nc -U / /var/run/docker.sock</span><br></pre></td></tr></tbody></table></figure></div><p>连接成功后，输入：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET /images/json HTTP/1.1</span><br></pre></td></tr></tbody></table></figure></div><p>输入后连敲两个回车，第二个回车表示输入结束。然后，得到的结果应该是：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Content-Type: application/json</span><br><span class="line">Date: Tue, 05 Nov 2013 23:18:09 GMT</span><br><span class="line">Transfer-Encoding: chunked</span><br><span class="line">16aa</span><br><span class="line">[{“Repository”:”postgres”,”Tag”:”......</span><br></pre></td></tr></tbody></table></figure></div><p>有一天，我不小心把提交的名称打错了，名字开头打成”-xxx”（我把命令和选项的顺序搞混了），所以当我删除的时候出了问题，docker rm -xxx，会把-xxx当成参数而不是镜像的名称。所以我只得通过socket直接连到容器来调用REST Server把错误的东西删掉。</p><h2 id="Tip-11"><a href="#Tip-11" class="headerlink" title="Tip 11"></a><code>Tip 11</code></h2><p>把镜像的依赖关系绘制成图</p><p>docker images命令有一个很拉风的选项：-viz，可以把镜像的依赖关系绘制成图并通过管道符号保存到图片文件：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 生成一个依赖关系的图表</span><br><span class="line">$ docker images -viz | dot -T png -o docker.png</span><br></pre></td></tr></tbody></table></figure></div><p>这样，主机的当前路径下就生成了一张png图，然后，用python开启一个微型的HTTP服务器：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -m SimpleHTTPServer</span><br></pre></td></tr></tbody></table></figure></div><p>然后在别的机器上用浏览器打开：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://machinename:8000/docker.png</span><br></pre></td></tr></tbody></table></figure></div><p>OK，依赖关系一目了然！</p><p>（译者注：要使用dot命令，主机要安装graphviz包。另外，如果主机ip没有绑定域名，machinename换成主机的ip即可。）</p><h2 id="Tip-12"><a href="#Tip-12" class="headerlink" title="Tip 12"></a><code>Tip 12</code></h2><p>Docker把东西都存到哪里去了？ Docker实际上把所有东西都放到/var/lib/docker路径下了。切换成super用户，到/var/lib/docker下看看，你能学到很多有趣的东西。执行下面的命令：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ sudo su</span><br><span class="line"># cd /var/lib/docker</span><br><span class="line"># ls -F</span><br><span class="line">containers/ graph/ repositories volumes/</span><br></pre></td></tr></tbody></table></figure></div><p>可以看到不少目录，containers目录当然就是存放容器（container）了，graph目录存放镜像，文件层（file system layer）存放在graph/imageid/layer路径下，这样你就可以看看文件层里到底有哪些东西，利用这种层级结构可以清楚的看到文件层是如 何一层一层叠加起来的。</p><h2 id="Tip-13"><a href="#Tip-13" class="headerlink" title="Tip 13"></a><code>Tip 13</code></h2><p>Docker源代码：Go, Go, Go, Golang! Docker的源代码全部是用Go语言写的。Go是一门非常酷的语言。其实，不只是Docker，很多优秀的软件都是用Go写的。对我来说，Docker源文件中，有4个是我非常喜欢阅读的：</p><p>commands.go docker的命令行接口，是对REST API的一个轻量级封装。Docker团队不希望在命令中出现逻辑，因此commands.go只是向REST API发送指令，确保其较小的颗粒性。</p><p>api.go REST API的路由（接受commands.go中的请求，转发到server.go）</p><p>server.go 大部分REST API的实现</p><p>buildfile.go Dockerfile的解析器</p><p>有的伙计惊叹”Wow!Docker是怎么实现的？！我无法理解！”没关系，Docker是开源软件，去看它的源代码就可以了。如果你不太清楚Dockerfile中的命令是怎么回事，直接去看buildfile.go就明白了。</p><h2 id="Tip-14"><a href="#Tip-14" class="headerlink" title="Tip 14"></a><code>Tip 14</code></h2><p>运行几个Docker后台程序，再退出容器，会发生什么？ OK，倒数第二个要点。如果在Docker中运行几个后台程序，再退出Docker容器，会发生什么？答案是：不要这么做！因为这样做后台程序就全丢了。</p><p>Dockerfile中用RUN命令去开启一个后台程序，如：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">RUN pg_ctl start</span><br></pre></td></tr></tbody></table></figure></div><p>这样的话，RUN命令开启的后台程序就会丢失。调用容器的bash连到容器的shell：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker run -i -t postgresimage bash</span><br></pre></td></tr></tbody></table></figure></div><p>然后调用 ps aux查看进程，你会发现postgres的进程并没有跑起来。 RUN命令会影响文件系统。因此，不要再Dockerfile中用启动后台程序，要把后台程序启动成前台进程。或者，像一些高手提议的那样，写一个启动脚 本，在脚本中启动这些后台程序或进程。</p><h2 id="Tip-15"><a href="#Tip-15" class="headerlink" title="Tip 15"></a><code>Tip 15</code></h2><p>容器之间进行友好沟通：链接 </p><p>这是最拉风的功能！我把它留到最后压轴！这是0.6.5中最重要的新功能，我们前面已经提过两次了。运行一个容器，给它一个名称，在下面的例子中，我们通过-name参数给容器指定名称”loldb”：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker run -d -name loldb loldbimage</span><br></pre></td></tr></tbody></table></figure></div><p>再运行另一个容器，加上-link参数来连接到第一个容器（别名为loldb），并给第二个容器也指定一个别名（这里用的是cheez）：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker run -link /loldb:cheez otherimage env</span><br></pre></td></tr></tbody></table></figure></div><p>顺便得到cheez的环境变量：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">CHEEZ_PORT=tcp://172.17.0.8:6379</span><br><span class="line">CHEEZ_PORT_1337_TCP=tcp://172.17.0.8.6379</span><br><span class="line">CHEEZ_PORT_1337_TCP_ADDR=tcp://172.17.0.12</span><br><span class="line">CHEEZ_PORT_1337_TCP_PORT=6379</span><br><span class="line">CHEEZ_PORT_1337_TCP_PROTO=tcp</span><br></pre></td></tr></tbody></table></figure></div><p>这样，我们就在两个容器间建立起一个网络通道（bridge），基于此，我们可以建立一个类似rails的程序：一个容器可以访问数据库容器而不对外暴露其他接口。非常酷！数据库容器只需要知道第一个容器的别名（在本例中为cheez）和要打开的端口号。所以数据库容器也可以env命令来查看这个端口是否打开。</p></body></html>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>单击鼠标所展示的浮动文字特效的js</title>
      <link href="/2018/09/12/%E5%8D%95%E5%87%BB%E9%BC%A0%E6%A0%87%E6%89%80%E5%B1%95%E7%A4%BA%E7%9A%84%E6%B5%AE%E5%8A%A8%E6%96%87%E5%AD%97%E7%89%B9%E6%95%88%E7%9A%84js/"/>
      <url>/2018/09/12/%E5%8D%95%E5%87%BB%E9%BC%A0%E6%A0%87%E6%89%80%E5%B1%95%E7%A4%BA%E7%9A%84%E6%B5%AE%E5%8A%A8%E6%96%87%E5%AD%97%E7%89%B9%E6%95%88%E7%9A%84js/</url>
      
        <content type="html"><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script></head><body><h2 id="单击鼠标所展示的浮动文字特效的js"><a href="#单击鼠标所展示的浮动文字特效的js" class="headerlink" title="单击鼠标所展示的浮动文字特效的js"></a>单击鼠标所展示的浮动文字特效的js</h2><p><a href="https://i.imgur.com/r3XQ6NK.gif" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.imgur.com/r3XQ6NK.gif" class="lazyload"></a></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><script type="text/javascript"></span><br><span class="line">/*鼠标特效 */</span><br><span class="line">  /*这个方法用来随机一个十六进制颜色代码，让每一次点击浮动文字的杨色不同*/</span><br><span class="line">  function co(){</span><br><span class="line">        var colorElements = "0,1,2,3,4,5,6,7,8,9,a,b,c,d,e,f";</span><br><span class="line">    var colorArray = colorElements.split(",");</span><br><span class="line">    var color ="#";</span><br><span class="line">    for(var i =0;i<6;i++){</span><br><span class="line">    color+=colorArray[Math.floor(Math.random()*16)];</span><br><span class="line">    }</span><br><span class="line">    return color;</span><br><span class="line">};</span><br><span class="line">var a_idx = 0;</span><br><span class="line">jQuery(document).ready(function($) {</span><br><span class="line">$("body").click(function(e) {</span><br><span class="line">    /*这个数组中的每一个字符是你要浮动显示的词或句子，每次点击鼠标后按顺序出现*/</span><br><span class="line">    var a = new Array("Hello基佬","你再点", "你继续点", "你有本事接着点", "有种你还点", "快别他妈点了", "好好看文章不行吗");</span><br><span class="line">    var $i = $("<span/>").text(a[a_idx]);</span><br><span class="line">    a_idx = (a_idx + 1) % a.length;</span><br><span class="line">    var x = e.pageX,</span><br><span class="line">    y = e.pageY;</span><br><span class="line">    $i.css({</span><br><span class="line">        "z-index": 999999999999999999999999999999999999999999999999999999999999999999999,</span><br><span class="line">        "top": y - 20,</span><br><span class="line">        "left": x,</span><br><span class="line">        "position": "absolute",</span><br><span class="line">        "font-weight": "bold",</span><br><span class="line">        "color": co()</span><br><span class="line">    });</span><br><span class="line">    $("body").append($i);</span><br><span class="line">    $i.animate({</span><br><span class="line">        "top": y - 180,</span><br><span class="line">        "opacity": 0</span><br><span class="line">    },</span><br><span class="line">    1500,</span><br><span class="line">    function() {</span><br><span class="line">        $i.remove();</span><br><span class="line">    });</span><br><span class="line">});</span><br><span class="line">});</span><br><span class="line"></script></span><br></pre></td></tr></tbody></table></figure></div></body></html>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Dubbo知识精华 下</title>
      <link href="/2018/09/11/Dubbo%E7%9F%A5%E8%AF%86%E7%B2%BE%E5%8D%8E-%E7%BB%AD/"/>
      <url>/2018/09/11/Dubbo%E7%9F%A5%E8%AF%86%E7%B2%BE%E5%8D%8E-%E7%BB%AD/</url>
      
        <content type="html"><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script></head><body><h4 id="1、了解Dubbo么？"><a href="#1、了解Dubbo么？" class="headerlink" title="1、了解Dubbo么？"></a>1、了解Dubbo么？</h4><p>Dubbo是阿里巴巴开源的基于 Java 的高性能 RPC 分布式服务框架，现已成为 Apache 基金会孵化项目。</p><p>官网：<a href="http://dubbo.apache.org" target="_blank" rel="noopener">http://dubbo.apache.org</a></p><h4 id="2、为什么要用Dubbo？"><a href="#2、为什么要用Dubbo？" class="headerlink" title="2、为什么要用Dubbo？"></a>2、为什么要用Dubbo？</h4><p>因为是阿里开源项目，国内很多互联网公司都在用，已经经过很多线上考验。内部使用了 Netty、Zookeeper，保证了高性能高可用性。</p><p>使用 Dubbo 可以将核心业务抽取出来，作为独立的服务，逐渐形成稳定的服务中心，可用于提高业务复用灵活扩展，使前端应用能更快速的响应多变的市场需求。</p><p>下面这张图可以很清楚的诠释，最重要的一点是，分布式架构可以承受更大规模的并发流量。</p><p><a href="https://images.gitee.com/uploads/images/2018/1012/091310_cddc13a2_87650.png" data-fancybox="group" data-caption="输入图片说明" class="fancybox"><img alt="输入图片说明" title="输入图片说明" data-src="https://images.gitee.com/uploads/images/2018/1012/091310_cddc13a2_87650.png" class="lazyload"></a></p><p>下面是 Dubbo 的服务治理图。</p><p><a href="https://images.gitee.com/uploads/images/2018/1012/091331_b0418750_87650.png" data-fancybox="group" data-caption="输入图片说明" class="fancybox"><img alt="输入图片说明" title="输入图片说明" data-src="https://images.gitee.com/uploads/images/2018/1012/091331_b0418750_87650.png" class="lazyload"></a></p><h4 id="3、Dubbo-和-Spring-Cloud-有什么区别？"><a href="#3、Dubbo-和-Spring-Cloud-有什么区别？" class="headerlink" title="3、Dubbo 和 Spring Cloud 有什么区别？"></a>3、Dubbo 和 Spring Cloud 有什么区别？</h4><p>两个没关联，如果硬要说区别，有以下几点。</p><p>1）通信方式不同</p><p>Dubbo 使用的是 RPC 通信，而 Spring Cloud 使用的是 HTTP RESTFul 方式。</p><p>2）组成部分不同</p><p><a href="https://images.gitee.com/uploads/images/2018/1012/091354_cbe8c962_87650.png" data-fancybox="group" data-caption="输入图片说明" class="fancybox"><img alt="输入图片说明" title="输入图片说明" data-src="https://images.gitee.com/uploads/images/2018/1012/091354_cbe8c962_87650.png" class="lazyload"></a></p><h4 id="4、dubbo都支持什么协议，推荐用哪种？"><a href="#4、dubbo都支持什么协议，推荐用哪种？" class="headerlink" title="4、dubbo都支持什么协议，推荐用哪种？"></a>4、dubbo都支持什么协议，推荐用哪种？</h4><p>dubbo://（推荐）</p><p>rmi://</p><p>hessian://</p><p>http://</p><p>webservice://</p><p>thrift://</p><p>memcached://</p><p>redis://</p><p>rest://</p><p>####/5、Dubbo需要 Web 容器吗？</p><p>不需要，如果硬要用 Web 容器，只会增加复杂性，也浪费资源。</p><h4 id="6、Dubbo内置了哪几种服务容器？"><a href="#6、Dubbo内置了哪几种服务容器？" class="headerlink" title="6、Dubbo内置了哪几种服务容器？"></a>6、Dubbo内置了哪几种服务容器？</h4><p>Spring Container</p><p>Jetty Container</p><p>Log4j Container</p><p>Dubbo 的服务容器只是一个简单的 Main 方法，并加载一个简单的 Spring 容器，用于暴露服务。</p><h4 id="7、Dubbo里面有哪几种节点角色？"><a href="#7、Dubbo里面有哪几种节点角色？" class="headerlink" title="7、Dubbo里面有哪几种节点角色？"></a>7、Dubbo里面有哪几种节点角色？</h4><p><a href="https://images.gitee.com/uploads/images/2018/1012/091452_fa47f6a4_87650.png" data-fancybox="group" data-caption="输入图片说明" class="fancybox"><img alt="输入图片说明" title="输入图片说明" data-src="https://images.gitee.com/uploads/images/2018/1012/091452_fa47f6a4_87650.png" class="lazyload"></a></p><h4 id="8、画一画服务注册与发现的流程图"><a href="#8、画一画服务注册与发现的流程图" class="headerlink" title="8、画一画服务注册与发现的流程图"></a>8、画一画服务注册与发现的流程图</h4><p><a href="https://images.gitee.com/uploads/images/2018/1012/091500_08e53014_87650.png" data-fancybox="group" data-caption="输入图片说明" class="fancybox"><img alt="输入图片说明" title="输入图片说明" data-src="https://images.gitee.com/uploads/images/2018/1012/091500_08e53014_87650.png" class="lazyload"></a></p><p>该图来自 Dubbo 官网，供你参考，如果你说你熟悉 Dubbo, 面试官经常会让你画这个图，记好了。</p><h4 id="9、Dubbo默认使用什么注册中心，还有别的选择吗？"><a href="#9、Dubbo默认使用什么注册中心，还有别的选择吗？" class="headerlink" title="9、Dubbo默认使用什么注册中心，还有别的选择吗？"></a>9、Dubbo默认使用什么注册中心，还有别的选择吗？</h4><p>推荐使用 Zookeeper 作为注册中心，还有 Redis、Multicast、Simple 注册中心，但不推荐。</p><h4 id="10、Dubbo有哪几种配置方式？"><a href="#10、Dubbo有哪几种配置方式？" class="headerlink" title="10、Dubbo有哪几种配置方式？"></a>10、Dubbo有哪几种配置方式？</h4><p>1）Spring 配置方式<br>2）Java API 配置方式</p><h4 id="11、Dubbo-核心的配置有哪些？"><a href="#11、Dubbo-核心的配置有哪些？" class="headerlink" title="11、Dubbo 核心的配置有哪些？"></a>11、Dubbo 核心的配置有哪些？</h4><p>我曾经面试就遇到过面试官让你写这些配置，我也是蒙逼。。</p><p><a href="https://images.gitee.com/uploads/images/2018/1012/091611_ae608c02_87650.png" data-fancybox="group" data-caption="输入图片说明" class="fancybox"><img alt="输入图片说明" title="输入图片说明" data-src="https://images.gitee.com/uploads/images/2018/1012/091611_ae608c02_87650.png" class="lazyload"></a></p><p>配置之间的关系见下图。</p><p><a href="https://images.gitee.com/uploads/images/2018/1012/091630_3b2a0e41_87650.png" data-fancybox="group" data-caption="输入图片说明" class="fancybox"><img alt="输入图片说明" title="输入图片说明" data-src="https://images.gitee.com/uploads/images/2018/1012/091630_3b2a0e41_87650.png" class="lazyload"></a></p><h4 id="12、在-Provider-上可以配置的-Consumer-端的属性有哪些？"><a href="#12、在-Provider-上可以配置的-Consumer-端的属性有哪些？" class="headerlink" title="12、在 Provider 上可以配置的 Consumer 端的属性有哪些？"></a>12、在 Provider 上可以配置的 Consumer 端的属性有哪些？</h4><p>1）timeout：方法调用超时<br>2）retries：失败重试次数，默认重试 2 次<br>3）loadbalance：负载均衡算法，默认随机<br>4）actives 消费者端，最大并发调用限制</p><h4 id="13、Dubbo启动时如果依赖的服务不可用会怎样？"><a href="#13、Dubbo启动时如果依赖的服务不可用会怎样？" class="headerlink" title="13、Dubbo启动时如果依赖的服务不可用会怎样？"></a>13、Dubbo启动时如果依赖的服务不可用会怎样？</h4><p>Dubbo 缺省会在启动时检查依赖的服务是否可用，不可用时会抛出异常，阻止 Spring 初始化完成，默认 check=”true”，可以通过 check=”false” 关闭检查。</p><h4 id="14、Dubbo推荐使用什么序列化框架，你知道的还有哪些？"><a href="#14、Dubbo推荐使用什么序列化框架，你知道的还有哪些？" class="headerlink" title="14、Dubbo推荐使用什么序列化框架，你知道的还有哪些？"></a>14、Dubbo推荐使用什么序列化框架，你知道的还有哪些？</h4><p>推荐使用Hessian序列化，还有Duddo、FastJson、Java自带序列化。</p><h4 id="15、Dubbo默认使用的是什么通信框架，还有别的选择吗？"><a href="#15、Dubbo默认使用的是什么通信框架，还有别的选择吗？" class="headerlink" title="15、Dubbo默认使用的是什么通信框架，还有别的选择吗？"></a>15、Dubbo默认使用的是什么通信框架，还有别的选择吗？</h4><p>Dubbo 默认使用 Netty 框架，也是推荐的选择，另外内容还集成有Mina、Grizzly。</p><h4 id="16、Dubbo有哪几种集群容错方案，默认是哪种？"><a href="#16、Dubbo有哪几种集群容错方案，默认是哪种？" class="headerlink" title="16、Dubbo有哪几种集群容错方案，默认是哪种？"></a>16、Dubbo有哪几种集群容错方案，默认是哪种？</h4><p><a href="https://images.gitee.com/uploads/images/2018/1012/091659_5a59aa66_87650.png" data-fancybox="group" data-caption="输入图片说明" class="fancybox"><img alt="输入图片说明" title="输入图片说明" data-src="https://images.gitee.com/uploads/images/2018/1012/091659_5a59aa66_87650.png" class="lazyload"></a></p><h4 id="17、Dubbo有哪几种负载均衡策略，默认是哪种？"><a href="#17、Dubbo有哪几种负载均衡策略，默认是哪种？" class="headerlink" title="17、Dubbo有哪几种负载均衡策略，默认是哪种？"></a>17、Dubbo有哪几种负载均衡策略，默认是哪种？</h4><p><a href="https://images.gitee.com/uploads/images/2018/1012/091705_af4a9144_87650.png" data-fancybox="group" data-caption="输入图片说明" class="fancybox"><img alt="输入图片说明" title="输入图片说明" data-src="https://images.gitee.com/uploads/images/2018/1012/091705_af4a9144_87650.png" class="lazyload"></a></p><h4 id="18、注册了多个同一样的服务，如果测试指定的某一个服务呢？"><a href="#18、注册了多个同一样的服务，如果测试指定的某一个服务呢？" class="headerlink" title="18、注册了多个同一样的服务，如果测试指定的某一个服务呢？"></a>18、注册了多个同一样的服务，如果测试指定的某一个服务呢？</h4><p>可以配置环境点对点直连，绕过注册中心，将以服务接口为单位，忽略注册中心的提供者列表。</p><h4 id="19、Dubbo支持服务多协议吗？"><a href="#19、Dubbo支持服务多协议吗？" class="headerlink" title="19、Dubbo支持服务多协议吗？"></a>19、Dubbo支持服务多协议吗？</h4><p>Dubbo 允许配置多协议，在不同服务上支持不同协议或者同一服务上同时支持多种协议。</p><h4 id="20、当一个服务接口有多种实现时怎么做？"><a href="#20、当一个服务接口有多种实现时怎么做？" class="headerlink" title="20、当一个服务接口有多种实现时怎么做？"></a>20、当一个服务接口有多种实现时怎么做？</h4><p>当一个接口有多种实现时，可以用 group 属性来分组，服务提供方和消费方都指定同一个 group 即可。</p><h4 id="21、服务上线怎么兼容旧版本？"><a href="#21、服务上线怎么兼容旧版本？" class="headerlink" title="21、服务上线怎么兼容旧版本？"></a>21、服务上线怎么兼容旧版本？</h4><p>可以用版本号（version）过渡，多个不同版本的服务注册到注册中心，版本号不同的服务相互间不引用。这个和服务分组的概念有一点类似。</p><h4 id="22、Dubbo可以对结果进行缓存吗？"><a href="#22、Dubbo可以对结果进行缓存吗？" class="headerlink" title="22、Dubbo可以对结果进行缓存吗？"></a>22、Dubbo可以对结果进行缓存吗？</h4><p>可以，Dubbo 提供了声明式缓存，用于加速热门数据的访问速度，以减少用户加缓存的工作量。</p><h4 id="23、Dubbo服务之间的调用是阻塞的吗？"><a href="#23、Dubbo服务之间的调用是阻塞的吗？" class="headerlink" title="23、Dubbo服务之间的调用是阻塞的吗？"></a>23、Dubbo服务之间的调用是阻塞的吗？</h4><p>默认是同步等待结果阻塞的，支持异步调用。</p><p>Dubbo 是基于 NIO 的非阻塞实现并行调用，客户端不需要启动多线程即可完成并行调用多个远程服务，相对多线程开销较小，异步调用会返回一个 Future 对象。</p><p>异步调用流程图如下。</p><p><a href="https://images.gitee.com/uploads/images/2018/1012/091746_e678a0d8_87650.png" data-fancybox="group" data-caption="输入图片说明" class="fancybox"><img alt="输入图片说明" title="输入图片说明" data-src="https://images.gitee.com/uploads/images/2018/1012/091746_e678a0d8_87650.png" class="lazyload"></a></p><h4 id="24、Dubbo支持分布式事务吗？"><a href="#24、Dubbo支持分布式事务吗？" class="headerlink" title="24、Dubbo支持分布式事务吗？"></a>24、Dubbo支持分布式事务吗？</h4><p>目前暂时不支持，后续可能采用基于 JTA/XA 规范实现，如以图所示。</p><p><a href="https://images.gitee.com/uploads/images/2018/1012/091756_c686ae87_87650.png" data-fancybox="group" data-caption="输入图片说明" class="fancybox"><img alt="输入图片说明" title="输入图片说明" data-src="https://images.gitee.com/uploads/images/2018/1012/091756_c686ae87_87650.png" class="lazyload"></a></p><h4 id="25、Dubbo-telnet-命令能做什么？"><a href="#25、Dubbo-telnet-命令能做什么？" class="headerlink" title="25、Dubbo telnet 命令能做什么？"></a>25、Dubbo telnet 命令能做什么？</h4><p>dubbo 通过 telnet 命令来进行服务治理，具体使用看这篇文章《dubbo服务调试管理实用命令》。</p><p>telnet localhost 8090</p><h4 id="26、Dubbo支持服务降级吗？"><a href="#26、Dubbo支持服务降级吗？" class="headerlink" title="26、Dubbo支持服务降级吗？"></a>26、Dubbo支持服务降级吗？</h4><p>Dubbo 2.2.0 以上版本支持。</p><h4 id="27、Dubbo如何优雅停机？"><a href="#27、Dubbo如何优雅停机？" class="headerlink" title="27、Dubbo如何优雅停机？"></a>27、Dubbo如何优雅停机？</h4><p>Dubbo 是通过 JDK 的 ShutdownHook 来完成优雅停机的，所以如果使用 kill -9 PID 等强制关闭指令，是不会执行优雅停机的，只有通过 kill PID 时，才会执行。</p><h4 id="28、服务提供者能实现失效踢出是什么原理？"><a href="#28、服务提供者能实现失效踢出是什么原理？" class="headerlink" title="28、服务提供者能实现失效踢出是什么原理？"></a>28、服务提供者能实现失效踢出是什么原理？</h4><p>服务失效踢出基于 Zookeeper 的临时节点原理。</p><h4 id="29、如何解决服务调用链过长的问题？"><a href="#29、如何解决服务调用链过长的问题？" class="headerlink" title="29、如何解决服务调用链过长的问题？"></a>29、如何解决服务调用链过长的问题？</h4><p>Dubbo 可以使用 Pinpoint 和 Apache Skywalking(Incubator) 实现分布式服务追踪，当然还有其他很多方案。</p><h4 id="30、服务读写推荐的容错策略是怎样的？"><a href="#30、服务读写推荐的容错策略是怎样的？" class="headerlink" title="30、服务读写推荐的容错策略是怎样的？"></a>30、服务读写推荐的容错策略是怎样的？</h4><p>读操作建议使用 Failover 失败自动切换，默认重试两次其他服务器。</p><p>写操作建议使用 Failfast 快速失败，发一次调用失败就立即报错。</p><h4 id="31、Dubbo必须依赖的包有哪些？"><a href="#31、Dubbo必须依赖的包有哪些？" class="headerlink" title="31、Dubbo必须依赖的包有哪些？"></a>31、Dubbo必须依赖的包有哪些？</h4><p>Dubbo 必须依赖 JDK，其他为可选。</p><h4 id="32、Dubbo的管理控制台能做什么？"><a href="#32、Dubbo的管理控制台能做什么？" class="headerlink" title="32、Dubbo的管理控制台能做什么？"></a>32、Dubbo的管理控制台能做什么？</h4><p>管理控制台主要包含：路由规则，动态配置，服务降级，访问控制，权重调整，负载均衡，等管理功能。</p><h4 id="33、说说-Dubbo-服务暴露的过程。"><a href="#33、说说-Dubbo-服务暴露的过程。" class="headerlink" title="33、说说 Dubbo 服务暴露的过程。"></a>33、说说 Dubbo 服务暴露的过程。</h4><p>Dubbo 会在 Spring 实例化完 bean 之后，在刷新容器最后一步发布 ContextRefreshEvent 事件的时候，通知实现了 ApplicationListener 的 ServiceBean 类进行回调 onApplicationEvent 事件方法，Dubbo 会在这个方法中调用 ServiceBean 父类 ServiceConfig 的 export 方法，而该方法真正实现了服务的（异步或者非异步）发布。</p><h4 id="34、Dubbo-停止维护了吗？"><a href="#34、Dubbo-停止维护了吗？" class="headerlink" title="34、Dubbo 停止维护了吗？"></a>34、Dubbo 停止维护了吗？</h4><p>2014 年开始停止维护过几年，17 年开始重新维护，并进入了 Apache 项目。</p><h4 id="35、Dubbo-和-Dubbox-有什么区别？"><a href="#35、Dubbo-和-Dubbox-有什么区别？" class="headerlink" title="35、Dubbo 和 Dubbox 有什么区别？"></a>35、Dubbo 和 Dubbox 有什么区别？</h4><p>Dubbox 是继 Dubbo 停止维护后，当当网基于 Dubbo 做的一个扩展项目，如加了服务可 Restful 调用，更新了开源组件等。</p><h4 id="36、你还了解别的分布式框架吗？"><a href="#36、你还了解别的分布式框架吗？" class="headerlink" title="36、你还了解别的分布式框架吗？"></a>36、你还了解别的分布式框架吗？</h4><p>别的还有 Spring cloud、Facebook 的 Thrift、Twitter 的 Finagle 等。</p><h4 id="37、Dubbo-能集成-Spring-Boot-吗？"><a href="#37、Dubbo-能集成-Spring-Boot-吗？" class="headerlink" title="37、Dubbo 能集成 Spring Boot 吗？"></a>37、Dubbo 能集成 Spring Boot 吗？</h4><p>可以的，项目地址如下。</p><p><a href="https://github.com/apache/incubator-dubbo-spring-boot-project" target="_blank" rel="noopener">https://github.com/apache/incubator-dubbo-spring-boot-project</a></p><h4 id="38、在使用过程中都遇到了些什么问题？"><a href="#38、在使用过程中都遇到了些什么问题？" class="headerlink" title="38、在使用过程中都遇到了些什么问题？"></a>38、在使用过程中都遇到了些什么问题？</h4><p>Dubbo 的设计目的是为了满足高并发小数据量的 rpc 调用，在大数据量下的性能表现并不好，建议使用 rmi 或 http 协议。</p><h4 id="39、你读过-Dubbo-的源码吗？"><a href="#39、你读过-Dubbo-的源码吗？" class="headerlink" title="39、你读过 Dubbo 的源码吗？"></a>39、你读过 Dubbo 的源码吗？</h4><p>要了解 Dubbo 就必须看其源码，了解其原理，花点时间看下吧，网上也有很多教程，后续有时间我也会在公众号上分享 Dubbo 的源码。</p><h4 id="40、你觉得用-Dubbo-好还是-Spring-Cloud-好？"><a href="#40、你觉得用-Dubbo-好还是-Spring-Cloud-好？" class="headerlink" title="40、你觉得用 Dubbo 好还是 Spring Cloud 好？"></a>40、你觉得用 Dubbo 好还是 Spring Cloud 好？</h4><p>扩展性的问题，没有好坏，只有适合不适合，不过我好像更倾向于使用 Dubbo, Spring Cloud 版本升级太快，组件更新替换太频繁，配置太繁琐，还有很多我觉得是没有 Dubbo 顺手的地方……</p></body></html>]]></content>
      
      
      <categories>
          
          <category> 分布式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 高并发 </tag>
            
            <tag> 分布式 </tag>
            
            <tag> dubbo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Dubbo知识精华 上</title>
      <link href="/2018/09/11/Dubbo%E7%9F%A5%E8%AF%86%E7%B2%BE%E5%8D%8E/"/>
      <url>/2018/09/11/Dubbo%E7%9F%A5%E8%AF%86%E7%B2%BE%E5%8D%8E/</url>
      
        <content type="html"><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script></head><body><h4 id="1、默认使用的是什么通信框架，还有别的选择吗"><a href="#1、默认使用的是什么通信框架，还有别的选择吗" class="headerlink" title="1、默认使用的是什么通信框架，还有别的选择吗?"></a>1、默认使用的是什么通信框架，还有别的选择吗?</h4><p>默认也推荐使用netty框架，还有mina。</p><h4 id="2、服务调用是阻塞的吗？"><a href="#2、服务调用是阻塞的吗？" class="headerlink" title="2、服务调用是阻塞的吗？"></a>2、服务调用是阻塞的吗？</h4><p>默认是阻塞的，可以异步调用，没有返回值的可以这么做。</p><h4 id="3、一般使用什么注册中心？还有别的选择吗？"><a href="#3、一般使用什么注册中心？还有别的选择吗？" class="headerlink" title="3、一般使用什么注册中心？还有别的选择吗？"></a>3、一般使用什么注册中心？还有别的选择吗？</h4><p>推荐使用zookeeper注册中心，还有redis等不推荐。</p><p><a href="https://images.gitee.com/uploads/images/2018/0831/153501_9a059fcf_87650.png" data-fancybox="group" data-caption="输入图片说明" class="fancybox"><img alt="输入图片说明" title="输入图片说明" data-src="https://images.gitee.com/uploads/images/2018/0831/153501_9a059fcf_87650.png" class="lazyload"></a></p><h4 id="4、默认使用什么序列化框架，你知道的还有哪些？"><a href="#4、默认使用什么序列化框架，你知道的还有哪些？" class="headerlink" title="4、默认使用什么序列化框架，你知道的还有哪些？"></a>4、默认使用什么序列化框架，你知道的还有哪些？</h4><p>默认使用Hessian序列化，还有Duddo、FastJson、Java自带序列化。</p><h4 id="5、服务提供者能实现失效踢出是什么原理？"><a href="#5、服务提供者能实现失效踢出是什么原理？" class="headerlink" title="5、服务提供者能实现失效踢出是什么原理？"></a>5、服务提供者能实现失效踢出是什么原理？</h4><p>服务失效踢出基于zookeeper的临时节点原理。</p><h4 id="6、服务上线怎么不影响旧版本？"><a href="#6、服务上线怎么不影响旧版本？" class="headerlink" title="6、服务上线怎么不影响旧版本？"></a>6、服务上线怎么不影响旧版本？</h4><p>采用多版本开发，不影响旧版本。</p><h4 id="7、如何解决服务调用链过长的问题？"><a href="#7、如何解决服务调用链过长的问题？" class="headerlink" title="7、如何解决服务调用链过长的问题？"></a>7、如何解决服务调用链过长的问题？</h4><p>可以结合zipkin实现分布式服务追踪。</p><h4 id="8、说说核心的配置有哪些？"><a href="#8、说说核心的配置有哪些？" class="headerlink" title="8、说说核心的配置有哪些？"></a>8、说说核心的配置有哪些？</h4><p>核心配置有</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">dubbo:service/</span><br><span class="line"></span><br><span class="line">dubbo:reference/</span><br><span class="line"></span><br><span class="line">dubbo:protocol/</span><br><span class="line"></span><br><span class="line">dubbo:registry/</span><br><span class="line"></span><br><span class="line">dubbo:application/</span><br><span class="line"></span><br><span class="line">dubbo:provider/</span><br><span class="line"></span><br><span class="line">dubbo:consumer/</span><br><span class="line"></span><br><span class="line">dubbo:method/</span><br></pre></td></tr></tbody></table></figure></div><h4 id="9、dubbo推荐用什么协议？"><a href="#9、dubbo推荐用什么协议？" class="headerlink" title="9、dubbo推荐用什么协议？"></a>9、dubbo推荐用什么协议？</h4><p>默认使用dubbo协议。</p><h4 id="10、同一个服务多个注册的情况下可以直连某一个服务吗？"><a href="#10、同一个服务多个注册的情况下可以直连某一个服务吗？" class="headerlink" title="10、同一个服务多个注册的情况下可以直连某一个服务吗？"></a>10、同一个服务多个注册的情况下可以直连某一个服务吗？</h4><p>可以直连，修改配置即可，也可以通过telnet直接某个服务。</p><h4 id="11、Dubbo集群容错怎么做？"><a href="#11、Dubbo集群容错怎么做？" class="headerlink" title="11、Dubbo集群容错怎么做？"></a>11、Dubbo集群容错怎么做？</h4><p>读操作建议使用Failover失败自动切换，默认重试两次其他服务器。写操作建议使用Failfast快速失败，发一次调用失败就立即报错。</p><h4 id="12、dubbo和dubbox之间的区别？"><a href="#12、dubbo和dubbox之间的区别？" class="headerlink" title="12、dubbo和dubbox之间的区别？"></a>12、dubbo和dubbox之间的区别？</h4><p>dubbox是当当网基于dubbo上做了一些扩展，如加了服务可restful调用，更新了开源组件等。</p><h4 id="13、你还了解别的分布式框架吗？"><a href="#13、你还了解别的分布式框架吗？" class="headerlink" title="13、你还了解别的分布式框架吗？"></a>13、你还了解别的分布式框架吗？</h4><p>别的还有spring的spring cloud，facebook的thrift，twitter的finagle等。</p><h4 id="14、dubbo中zookeeper做注册中心，如果注册中心集群都挂掉，那发布者和订阅者还能通信吗"><a href="#14、dubbo中zookeeper做注册中心，如果注册中心集群都挂掉，那发布者和订阅者还能通信吗" class="headerlink" title="14、dubbo中zookeeper做注册中心，如果注册中心集群都挂掉，那发布者和订阅者还能通信吗?"></a>14、dubbo中zookeeper做注册中心，如果注册中心集群都挂掉，那发布者和订阅者还能通信吗?</h4><p>可以的，zookeeper的信息会缓存到本地作为一个缓存文件，并且转换成properties对象方便使用。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><!-- 使用zookeeper注册中心暴露服务地址 subscribe 默认：true 是否向此注册中心订阅服务，如果设为false，将只注册，不订阅 check 默认：true 注册中心不存在时，是否报错    --></span><br><span class="line"><dubbo:registry protocol="zookeeper" address="${dubbo.registry.address}" file="${dubbo.registry.file}" check="false"></dubbo:registry></span><br></pre></td></tr></tbody></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dubbo.registry.address=172.16.1.130:2181,172.16.1.133:2181,172.16.1.120:2181</span><br><span class="line">dubbo.registry.file=/root/.dubbo/pay/dubbo.cache</span><br></pre></td></tr></tbody></table></figure></div><h4 id="15、项目中有使用过多线程吗-有的话讲讲你在哪里用到了多线程"><a href="#15、项目中有使用过多线程吗-有的话讲讲你在哪里用到了多线程" class="headerlink" title="15、项目中有使用过多线程吗?有的话讲讲你在哪里用到了多线程?"></a>15、项目中有使用过多线程吗?有的话讲讲你在哪里用到了多线程?</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><!-- </span><br><span class="line">  生产者配置 生产者  远程默认调用3次 参数 retries="2" async="true" 异步返回结果 默认是同步 timeout="10000" 毫秒</span><br><span class="line">  用dubbo协议在20882端口暴露服务  固定线程池 10 启动时建立线程，不关闭，一直持有  负载均衡策略 轮询</span><br><span class="line"> --></span><br><span class="line"><dubbo:provider timeout="10000" threads="10" threadpool="fixed" loadbalance="roundrobin"></dubbo:provider></span><br></pre></td></tr></tbody></table></figure></div><h4 id="16、Zookeeper的Java客户端你使用过哪些"><a href="#16、Zookeeper的Java客户端你使用过哪些" class="headerlink" title="16、Zookeeper的Java客户端你使用过哪些?"></a>16、Zookeeper的Java客户端你使用过哪些?</h4><p><a href="https://images.gitee.com/uploads/images/2018/0831/154522_65ef08bd_87650.png" data-fancybox="group" data-caption="输入图片说明" class="fancybox"><img alt="输入图片说明" title="输入图片说明" data-src="https://images.gitee.com/uploads/images/2018/0831/154522_65ef08bd_87650.png" class="lazyload"></a></p></body></html>]]></content>
      
      
      <categories>
          
          <category> 分布式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 高并发 </tag>
            
            <tag> 分布式 </tag>
            
            <tag> dubbo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ZooKeeper 概念</title>
      <link href="/2018/09/11/ZooKeeper%20%E6%A6%82%E5%BF%B5/"/>
      <url>/2018/09/11/ZooKeeper%20%E6%A6%82%E5%BF%B5/</url>
      
        <content type="html"><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script></head><body><h1 id="可能是全网把-ZooKeeper-概念讲的最清楚的一篇文章"><a href="#可能是全网把-ZooKeeper-概念讲的最清楚的一篇文章" class="headerlink" title="可能是全网把 ZooKeeper 概念讲的最清楚的一篇文章"></a>可能是全网把 ZooKeeper 概念讲的最清楚的一篇文章</h1><p><a href="https://i.imgur.com/XGmR20f.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.imgur.com/XGmR20f.jpg" class="lazyload"></a></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>相信大家对 ZooKeeper 应该不算陌生。但是你真的了解 ZooKeeper 是个什么东西吗？如果别人/面试官让你给他讲讲  ZooKeeper 是个什么东西，你能回答到什么地步呢？</p><p>我本人曾经使用过 ZooKeeper 作为 Dubbo 的注册中心，另外在搭建 solr 集群的时候，我使用到了  ZooKeeper 作为 solr 集群的管理工具。前几天，总结项目经验的时候，我突然问自己 ZooKeeper 到底是个什么东西？想了半天，脑海中只是简单的能浮现出几句话：“①Zookeeper 可以被用作注册中心。 ②Zookeeper 是 Hadoop 生态系统的一员；③构建 Zookeeper 集群的时候，使用的服务器最好是奇数台。” 可见，我对于 Zookeeper 的理解仅仅是停留在了表面。</p><p>所以，通过本文，希望带大家稍微详细的了解一下 ZooKeeper 。如果没有学过 ZooKeeper ，那么本文将会是你进入 ZooKeeper 大门的垫脚砖。如果你已经接触过 ZooKeeper ，那么本文将带你回顾一下 ZooKeeper 的一些基础概念。</p><p>最后，本文只涉及 ZooKeeper 的一些概念，并不涉及 ZooKeeper 的使用以及 ZooKeeper 集群的搭建。 网上有介绍 ZooKeeper 的使用以及搭建 ZooKeeper 集群的文章，大家有需要可以自行查阅。</p><h2 id="一-什么是-ZooKeeper"><a href="#一-什么是-ZooKeeper" class="headerlink" title="一 什么是 ZooKeeper"></a>一 什么是 ZooKeeper</h2><h3 id="ZooKeeper-的由来"><a href="#ZooKeeper-的由来" class="headerlink" title="ZooKeeper 的由来"></a>ZooKeeper 的由来</h3><p>下面这段内容摘自《从Paxos到Zookeeper 》第四章第一节的某段内容，推荐大家阅读以下：</p><blockquote><p>Zookeeper最早起源于雅虎研究院的一个研究小组。在当时，研究人员发现，在雅虎内部很多大型系统基本都需要依赖一个类似的系统来进行分布式协调，但是这些系统往往都存在分布式单点问题。所以，雅虎的开发人员就试图开发一个通用的无单点问题的分布式协调框架，以便让开发人员将精力集中在处理业务逻辑上。</p></blockquote><blockquote><p>关于“ZooKeeper”这个项目的名字，其实也有一段趣闻。在立项初期，考虑到之前内部很多项目都是使用动物的名字来命名的（例如著名的Pig项目),雅虎的工程师希望给这个项目也取一个动物的名字。时任研究院的首席科学家RaghuRamakrishnan开玩笑地说：“在这样下去，我们这儿就变成动物园了！”此话一出，大家纷纷表示就叫动物园管理员吧一一一因为各个以动物命名的分布式组件放在一起，雅虎的整个分布式系统看上去就像一个大型的动物园了，而Zookeeper正好要用来进行分布式环境的协调一一于是，Zookeeper的名字也就由此诞生了。</p></blockquote><h3 id="1-1-ZooKeeper-概览"><a href="#1-1-ZooKeeper-概览" class="headerlink" title="1.1 ZooKeeper 概览"></a>1.1 ZooKeeper 概览</h3><p>ZooKeeper 是一个开源的分布式协调服务，ZooKeeper框架最初是在“Yahoo!”上构建的，用于以简单而稳健的方式访问他们的应用程序。 后来，Apache ZooKeeper成为Hadoop，HBase和其他分布式框架使用的有组织服务的标准。 例如，Apache HBase使用ZooKeeper跟踪分布式数据的状态。ZooKeeper 的设计目标是将那些复杂且容易出错的分布式一致性服务封装起来，构成一个高效可靠的原语集，并以一系列简单易用的接口提供给用户使用。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">原语： 操作系统或计算机网络用语范畴。是由若干条指令组成的，用于完成一定功能的一个过程。具有不可分割性·即原语的执行必须是连续的，在执行过程中不允许被中断。</span><br></pre></td></tr></tbody></table></figure></div><p><strong>ZooKeeper 是一个典型的分布式数据一致性解决方案，分布式应用程序可以基于 ZooKeeper 实现诸如数据发布/订阅、负载均衡、命名服务、分布式协调/通知、集群管理、Master 选举、分布式锁和分布式队列等功能。</strong></p><p>*<em>Zookeeper 一个最常用的使用场景就是用于担任服务生产者和服务消费者的注册中心。 *</em>服务生产者将自己提供的服务注册到Zookeeper中心，服务的消费者在进行服务调用的时候先到Zookeeper中查找服务，获取到服务生产者的详细信息之后，再去调用服务生产者的内容与数据。如下图所示，在 Dubbo架构中 Zookeeper 就担任了注册中心这一角色。<br><a href="https://i.imgur.com/CI6iA98.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.imgur.com/CI6iA98.jpg" class="lazyload"></a></p><h3 id="1-2-结合个人使用情况的讲一下-ZooKeeper"><a href="#1-2-结合个人使用情况的讲一下-ZooKeeper" class="headerlink" title="1.2 结合个人使用情况的讲一下 ZooKeeper"></a>1.2 结合个人使用情况的讲一下 ZooKeeper</h3><p>在我自己做过的项目中，主要使用到了 ZooKeeper 作为 Dubbo 的注册中心(Dubbo 官方推荐使用 ZooKeeper注册中心)。另外在搭建 solr 集群的时候，我使用  ZooKeeper 作为 solr 集群的管理工具。这时，ZooKeeper 主要提供下面几个功能：1、集群管理：容错、负载均衡。2、配置文件的集中管理3、集群的入口。</p><p>我个人觉得在使用 ZooKeeper 的时候，最好是使用 集群版的 ZooKeeper 而不是单机版的。官网给出的架构图就描述的是一个集群版的 ZooKeeper 。通常 3 台服务器就可以构成一个  ZooKeeper  集群了。</p><p><strong>为什么最好使用奇数台服务器构成 ZooKeeper 集群？</strong></p><p>我们知道在Zookeeper中 Leader 选举算法采用了Zab协议。Zab核心思想是当多数 Server 写成功，则任务数据写成功。</p><ul><li><p>①如果有3个Server，则最多允许1个Server 挂掉。</p></li><li><p>②如果有4个Server，则同样最多允许1个Server挂掉。</p></li></ul><p>既然3个或者4个Server，同样最多允许1个Server挂掉，那么它们的可靠性是一样的，所以选择奇数个ZooKeeper Server即可，这里选择3个Server。</p><h2 id="二-关于-ZooKeeper-的一些重要概念"><a href="#二-关于-ZooKeeper-的一些重要概念" class="headerlink" title="二 关于 ZooKeeper  的一些重要概念"></a>二 关于 ZooKeeper  的一些重要概念</h2><h3 id="2-1-重要概念总结"><a href="#2-1-重要概念总结" class="headerlink" title="2.1 重要概念总结"></a>2.1 重要概念总结</h3><ul><li><p>ZooKeeper  本身就是一个分布式程序（只要半数以上节点存活，ZooKeeper  就能正常服务）。</p></li><li><p>为了保证高可用，最好是以集群形态来部署 ZooKeeper，这样只要集群中大部分机器是可用的（能够容忍一定的机器故障），那么 ZooKeeper 本身仍然是可用的。</p></li><li><p>ZooKeeper  将数据保存在内存中，这也就保证了 高吞吐量和低延迟（但是内存限制了能够存储的容量不太大，此限制也是保持znode中存储的数据量较小的进一步原因）。</p></li><li><p>ZooKeeper 是高性能的。 在“读”多于“写”的应用程序中尤其地高性能，因为“写”会导致所有的服务器间同步状态。（“读”多于“写”是协调服务的典型场景。）</p></li><li><p>ZooKeeper有临时节点的概念。 当创建临时节点的客户端会话一直保持活动，瞬时节点就一直存在。而当会话终结时，瞬时节点被删除。持久节点是指一旦这个ZNode被创建了，除非主动进行ZNode的移除操作，否则这个ZNode将一直保存在Zookeeper上。</p></li><li><p>ZooKeeper 底层其实只提供了两个功能：①管理（存储、读取）用户程序提交的数据；②为用户程序提交数据节点监听服务。</p></li></ul><p>下面关于会话（Session）、 Znode、版本、Watcher、ACL概念的总结都在《从Paxos到Zookeeper 》第四章第一节以及第七章第八节有提到，感兴趣的可以看看！</p><h3 id="2-2-会话（Session）"><a href="#2-2-会话（Session）" class="headerlink" title="2.2 会话（Session）"></a>2.2 会话（Session）</h3><p>Session 指的是 ZooKeeper  服务器与客户端会话。<strong>在 ZooKeeper 中，一个客户端连接是指客户端和服务器之间的一个 TCP 长连接。</strong>客户端启动的时候，首先会与服务器建立一个 TCP 连接，从第一次连接建立开始，客户端会话的生命周期也开始了。<strong>通过这个连接，客户端能够通过心跳检测与服务器保持有效的会话，也能够向Zookeeper服务器发送请求并接受响应，同时还能够通过该连接接收来自服务器的Watch事件通知。 **Session的sessionTimeout值用来设置一个客户端会话的超时时间。当由于服务器压力太大、网络故障或是客户端主动断开连接等各种原因导致客户端连接断开时，</strong>只要在sessionTimeout规定的时间内能够重新连接上集群中任意一台服务器，那么之前创建的会话仍然有效。**</p><p><strong>在为客户端创建会话之前，服务端首先会为每个客户端都分配一个sessionID。由于 sessionID 是 Zookeeper 会话的一个重要标识，许多与会话相关的运行机制都是基于这个 sessionID 的，因此，无论是哪台服务器为客户端分配的 sessionID，都务必保证全局唯一。</strong></p><h3 id="2-3-Znode"><a href="#2-3-Znode" class="headerlink" title="2.3 Znode"></a>2.3 Znode</h3><p><strong>在谈到分布式的时候，我们通常说的“节点”是指组成集群的每一台机器。然而，在Zookeeper中，“节点”分为两类，第一类同样是指构成集群的机器，我们称之为机器节点；第二类则是指数据模型中的数据单元，我们称之为数据节点一一ZNode。</strong></p><p>Zookeeper将所有数据存储在内存中，数据模型是一棵树（Znode Tree)，由斜杠（/）的进行分割的路径，就是一个Znode，例如/foo/path1。每个上都会保存自己的数据内容，同时还会保存一系列属性信息。</p><p><strong>在Zookeeper中，node可以分为持久节点和临时节点两类。所谓持久节点是指一旦这个ZNode被创建了，除非主动进行ZNode的移除操作，否则这个ZNode将一直保存在Zookeeper上。而临时节点就不一样了，它的生命周期和客户端会话绑定，一旦客户端会话失效，那么这个客户端创建的所有临时节点都会被移除。</strong>另外，ZooKeeper还允许用户为每个节点添加一个特殊的属性：SEQUENTIAL.一旦节点被标记上这个属性，那么在这个节点被创建的时候，Zookeeper会自动在其节点名后面追加上一个整型数字，这个整型数字是一个由父节点维护的自增数字。</p><h3 id="2-4-版本"><a href="#2-4-版本" class="headerlink" title="2.4 版本"></a>2.4 版本</h3><p>在前面我们已经提到，Zookeeper 的每个 ZNode 上都会存储数据，对应于每个ZNode，Zookeeper 都会为其维护一个叫作 Stat 的数据结构，Stat中记录了这个 ZNode 的三个数据版本，分别是version（当前ZNode的版本）、cversion（当前ZNode子节点的版本）和 cversion（当前ZNode的ACL版本）。</p><h3 id="2-5-Watcher"><a href="#2-5-Watcher" class="headerlink" title="2.5 Watcher"></a>2.5 Watcher</h3><p>Watcher（事件监听器），是Zookeeper中的一个很重要的特性。Zookeeper允许用户在指定节点上注册一些Watcher，并且在一些特定事件触发的时候，ZooKeeper服务端会将事件通知到感兴趣的客户端上去，该机制是Zookeeper实现分布式协调服务的重要特性。</p><h3 id="2-6-ACL"><a href="#2-6-ACL" class="headerlink" title="2.6 ACL"></a>2.6 ACL</h3><p>Zookeeper采用ACL（AccessControlLists）策略来进行权限控制，类似于 UNIX 文件系统的权限控制。Zookeeper 定义了如下5种权限。<br><a href="https://i.imgur.com/Bo3jpfg.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.imgur.com/Bo3jpfg.jpg" class="lazyload"></a></p><p>其中尤其需要注意的是，CREATE和DELETE这两种权限都是针对子节点的权限控制。</p><h2 id="三-ZooKeeper-特点"><a href="#三-ZooKeeper-特点" class="headerlink" title="三 ZooKeeper 特点"></a>三 ZooKeeper 特点</h2><ul><li><p>顺序一致性： 从同一客户端发起的事务请求，最终将会严格地按照顺序被应用到 ZooKeeper 中去。</p></li><li><p>原子性： 所有事务请求的处理结果在整个集群中所有机器上的应用情况是一致的，也就是说，要么整个集群中所有的机器都成功应用了某一个事务，要么都没有应用。</p></li><li><p>单一系统映像 ： 无论客户端连到哪一个 ZooKeeper 服务器上，其看到的服务端数据模型都是一致的。</p></li><li><p>可靠性： 一旦一次更改请求被应用，更改的结果就会被持久化，直到被下一次更改覆盖。</p></li></ul><h2 id="四-ZooKeeper-设计目标"><a href="#四-ZooKeeper-设计目标" class="headerlink" title="四 ZooKeeper 设计目标"></a>四 ZooKeeper 设计目标</h2><h3 id="4-1-简单的数据模型"><a href="#4-1-简单的数据模型" class="headerlink" title="4.1 简单的数据模型"></a>4.1 简单的数据模型</h3><p>ZooKeeper 允许分布式进程通过共享的层次结构命名空间进行相互协调，这与标准文件系统类似。 名称空间由 ZooKeeper 中的数据寄存器组成 - 称为znode，这些类似于文件和目录。 与为存储设计的典型文件系统不同，ZooKeeper数据保存在内存中，这意味着ZooKeeper可以实现高吞吐量和低延迟。<br><a href="https://i.imgur.com/mkx16Ds.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.imgur.com/mkx16Ds.jpg" class="lazyload"></a></p><h3 id="4-2-可构建集群"><a href="#4-2-可构建集群" class="headerlink" title="4.2 可构建集群"></a>4.2 可构建集群</h3><p>为了保证高可用，最好是以集群形态来部署 ZooKeeper，这样只要集群中大部分机器是可用的（能够容忍一定的机器故障），那么zookeeper本身仍然是可用的。 客户端在使用 ZooKeeper 时，需要知道集群机器列表，通过与集群中的某一台机器建立 TCP 连接来使用服务，客户端使用这个TCP链接来发送请求、获取结果、获取监听事件以及发送心跳包。如果这个连接异常断开了，客户端可以连接到另外的机器上。</p><p>ZooKeeper 官方提供的架构图：<br><a href="https://i.imgur.com/zN2ufDy.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.imgur.com/zN2ufDy.jpg" class="lazyload"></a></p><p>上图中每一个Server代表一个安装Zookeeper服务的服务器。组成 ZooKeeper 服务的服务器都会在内存中维护当前的服务器状态，并且每台服务器之间都互相保持着通信。集群间通过 Zab 协议（Zookeeper Atomic Broadcast）来保持数据的一致性。</p><h3 id="4-3-顺序访问"><a href="#4-3-顺序访问" class="headerlink" title="4.3 顺序访问"></a>4.3 顺序访问</h3><p>对于来自客户端的每个更新请求，ZooKeeper 都会分配一个全局唯一的递增编号，这个编号反应了所有事务操作的先后顺序，应用程序可以使用 ZooKeeper 这个特性来实现更高层次的同步原语。 这个编号也叫做时间戳——zxid（Zookeeper Transaction Id）</p><h3 id="4-4-高性能"><a href="#4-4-高性能" class="headerlink" title="4.4 高性能"></a>4.4 高性能</h3><p>ZooKeeper 是高性能的。 在“读”多于“写”的应用程序中尤其地高性能，因为“写”会导致所有的服务器间同步状态。（“读”多于“写”是协调服务的典型场景。）</p><h2 id="五-ZooKeeper-集群角色介绍"><a href="#五-ZooKeeper-集群角色介绍" class="headerlink" title="五 ZooKeeper 集群角色介绍"></a>五 ZooKeeper 集群角色介绍</h2><p>最典型集群模式： Master/Slave 模式（主备模式）。在这种模式中，通常 Master服务器作为主服务器提供写服务，其他的 Slave 服务器从服务器通过异步复制的方式获取 Master 服务器最新的数据提供读服务。</p><p>但是，在 ZooKeeper 中没有选择传统的  Master/Slave 概念，而是引入了Leader、Follower 和 Observer 三种角色。如下图所示<br><a href="https://i.imgur.com/Nmi992Z.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.imgur.com/Nmi992Z.jpg" class="lazyload"></a></p><p>ZooKeeper 集群中的所有机器通过一个 Leader 选举过程来选定一台称为 “Leader” 的机器，Leader 既可以为客户端提供写服务又能提供读服务。除了 Leader 外，Follower 和  Observer 都只能提供读服务。Follower 和  Observer 唯一的区别在于 Observer 机器不参与 Leader 的选举过程，也不参与写操作的“过半写成功”策略，因此 Observer 机器可以在不影响写性能的情况下提升集群的读性能。<br><a href="https://i.imgur.com/xoqFywM.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.imgur.com/xoqFywM.jpg" class="lazyload"></a></p><h2 id="六-ZooKeeper-amp-ZAB-协议-amp-Paxos算法"><a href="#六-ZooKeeper-amp-ZAB-协议-amp-Paxos算法" class="headerlink" title="六 ZooKeeper &ZAB 协议&Paxos算法"></a>六 ZooKeeper &ZAB 协议&Paxos算法</h2><h3 id="6-1-ZAB-协议-amp-Paxos算法"><a href="#6-1-ZAB-协议-amp-Paxos算法" class="headerlink" title="6.1 ZAB 协议&Paxos算法"></a>6.1 ZAB 协议&Paxos算法</h3><p>Paxos 算法应该可以说是  ZooKeeper 的灵魂了。但是，ZooKeeper 并没有完全采用 Paxos算法 ，而是使用 ZAB 协议作为其保证数据一致性的核心算法。另外，在ZooKeeper的官方文档中也指出，ZAB协议并不像 Paxos 算法那样，是一种通用的分布式一致性算法，它是一种特别为Zookeeper设计的崩溃可恢复的原子消息广播算法。</p><h3 id="6-2-ZAB-协议介绍"><a href="#6-2-ZAB-协议介绍" class="headerlink" title="6.2 ZAB 协议介绍"></a>6.2 ZAB 协议介绍</h3><p>ZAB（ZooKeeper Atomic Broadcast 原子广播） 协议是为分布式协调服务 ZooKeeper 专门设计的一种支持崩溃恢复的原子广播协议。 在 ZooKeeper 中，主要依赖 ZAB 协议来实现分布式数据一致性，基于该协议，ZooKeeper 实现了一种主备模式的系统架构来保持集群中各个副本之间的数据一致性。</p><h3 id="6-3-ZAB-协议两种基本的模式：崩溃恢复和消息广播"><a href="#6-3-ZAB-协议两种基本的模式：崩溃恢复和消息广播" class="headerlink" title="6.3 ZAB 协议两种基本的模式：崩溃恢复和消息广播"></a>6.3 ZAB 协议两种基本的模式：崩溃恢复和消息广播</h3><p>ZAB协议包括两种基本的模式，分别是 崩溃恢复和消息广播。当整个服务框架在启动过程中，或是当 Leader 服务器出现网络中断、崩溃退出与重启等异常情况时，ZAB 协议就会进人恢复模式并选举产生新的Leader服务器。当选举产生了新的 Leader 服务器，同时集群中已经有过半的机器与该Leader服务器完成了状态同步之后，ZAB协议就会退出恢复模式。其中，所谓的状态同步是指数据同步，用来保证集群中存在过半的机器能够和Leader服务器的数据状态保持一致。</p><p>当集群中已经有过半的Follower服务器完成了和Leader服务器的状态同步，那么整个服务框架就可以进人消息广播模式了。 当一台同样遵守ZAB协议的服务器启动后加人到集群中时，如果此时集群中已经存在一个Leader服务器在负责进行消息广播，那么新加人的服务器就会自觉地进人数据恢复模式：找到Leader所在的服务器，并与其进行数据同步，然后一起参与到消息广播流程中去。正如上文介绍中所说的，ZooKeeper设计成只允许唯一的一个Leader服务器来进行事务请求的处理。Leader服务器在接收到客户端的事务请求后，会生成对应的事务提案并发起一轮广播协议；而如果集群中的其他机器接收到客户端的事务请求，那么这些非Leader服务器会首先将这个事务请求转发给Leader服务器。</p><p>关于 ZAB 协议&Paxos算法 需要讲和理解的东西太多了，说实话，笔主到现在不太清楚这俩兄弟的具体原理和实现过程。推荐阅读下面两篇文章：</p><ul><li><p>图解 Paxos 一致性协议:</p><p>  <a href="http://blog.xiaohansong.com/2016/09/30/Paxos/" target="_blank" rel="noopener">http://blog.xiaohansong.com/2016/09/30/Paxos/</a></p></li><li><p>Zookeeper ZAB 协议分析:</p><p>  <a href="http://blog.xiaohansong.com/2016/08/25/zab/" target="_blank" rel="noopener">http://blog.xiaohansong.com/2016/08/25/zab/</a></p></li></ul><p>关于如何使用 zookeeper 实现分布式锁，可以查看下面这篇文章：</p><p>Zookeeper ZAB 协议分析:</p><p><a href="https://blog.csdn.net/qiangcuo6087/article/details/79067136" target="_blank" rel="noopener">https://blog.csdn.net/qiangcuo6087/article/details/79067136</a></p><h2 id="六-总结"><a href="#六-总结" class="headerlink" title="六 总结"></a>六 总结</h2><p>通过阅读本文，想必大家已从 ：</p><ul><li>①ZooKeeper的由来。 </li><li>②ZooKeeper 到底是什么 。</li><li>③ ZooKeeper 的一些重要概念（会话（Session）、 Znode、版本、Watcher、ACL）</li><li>④ZooKeeper 的特点。</li><li>⑤ZooKeeper 的设计目标。</li><li>⑥ ZooKeeper 集群角色介绍 （Leader、Follower 和 Observer 三种角色）</li><li>⑦ZooKeeper &ZAB 协议&Paxos算法。 这七点了解了 ZooKeeper 。</li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>《从Paxos到Zookeeper 》</p><p><a href="https://cwiki.apache.org/confluence/display/ZOOKEEPER/ProjectDescription" target="_blank" rel="noopener">https://cwiki.apache.org/confluence/display/ZOOKEEPER/ProjectDescription</a></p><p><a href="https://cwiki.apache.org/confluence/display/ZOOKEEPER/Index" target="_blank" rel="noopener">https://cwiki.apache.org/confluence/display/ZOOKEEPER/Index</a></p><p><a href="https://www.cnblogs.com/raphael5200/p/5285583.html" target="_blank" rel="noopener">https://www.cnblogs.com/raphael5200/p/5285583.html</a></p><p><a href="https://zhuanlan.zhihu.com/p/30024403" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/30024403</a></p></body></html>]]></content>
      
      
      <categories>
          
          <category> 分布式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 高并发 </tag>
            
            <tag> 分布式 </tag>
            
            <tag> zookeeper </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>简单多线程基础</title>
      <link href="/2018/09/11/%E7%AE%80%E5%8D%95%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%9F%BA%E7%A1%80/"/>
      <url>/2018/09/11/%E7%AE%80%E5%8D%95%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script></head><body><h1 id="简单多线程基础"><a href="#简单多线程基础" class="headerlink" title="简单多线程基础"></a>简单多线程基础</h1><p>主要内容：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">简述线程，程序、进程的基本概念。以及他们之间关系是什么？</span><br><span class="line"></span><br><span class="line">线程有哪些基本状态？这些状态是如何定义的?</span><br><span class="line"></span><br><span class="line">何为多线程？</span><br><span class="line"></span><br><span class="line">为什么多线程是必要的？</span><br><span class="line"></span><br><span class="line">使用多线程常见的三种方式</span><br><span class="line"></span><br><span class="line">线程的优先级</span><br><span class="line"></span><br><span class="line">Java多线程分类</span><br><span class="line"></span><br><span class="line">sleep()方法和wait()方法简单对比</span><br><span class="line"></span><br><span class="line">为什么我们调用start()方法时会执行run()方法，为什么我们不能直接调用run()方法？</span><br></pre></td></tr></tbody></table></figure></div><h2 id="1-简述线程，程序、进程的基本概念。以及他们之间关系是什么？"><a href="#1-简述线程，程序、进程的基本概念。以及他们之间关系是什么？" class="headerlink" title="1. 简述线程，程序、进程的基本概念。以及他们之间关系是什么？"></a>1. 简述线程，程序、进程的基本概念。以及他们之间关系是什么？</h2><p><strong>线程</strong>与进程相似，但线程是一个比进程更小的执行单位。一个进程在其执行的过程中可以产生多个线程。与进程不同的是同类的多个线程共享同一块内存空间和一组系统资源，所以系统在产生一个线程，或是在各个线程之间作切换工作时，负担要比进程小得多，也正因为如此，线程也被称为轻量级进程。</p><p><strong>程序</strong>是含有指令和数据的文件，被存储在磁盘或其他的数据存储设备中，也就是说程序是静态的代码。</p><p><strong>进程</strong>是程序的一次执行过程，是系统运行程序的基本单位，因此进程是动态的。系统运行一个程序即是一个进程从创建，运行到消亡的过程。简单来说，一个进程就是一个执行中的程序，它在计算机中一个指令接着一个指令地执行着，同时，每个进程还占有某些系统资源如CPU时间，内存空间，文件，文件，输入输出设备的使用权等等。换句话说，当程序在执行时，将会被操作系统载入内存中。</p><p><strong>线程</strong> 是 <strong>进程</strong> 划分成的更小的运行单位。线程和进程最大的不同在于基本上各进程是独立的，而各线程则不一定，因为同一进程中的线程极有可能会相互影响。从另一角度来说，进程属于操作系统的范畴，主要是同一段时间内，可以同时执行一个以上的程序，而线程则是在同一程序内几乎同时执行一个以上的程序段。</p><p><strong>线程上下文的切换比进程上下文切换要快很多</strong></p><p>进程切换时，涉及到当前进程的CPU环境的保存和新被调度运行进程的CPU环境的设置。</p><p>线程切换仅需要保存和设置少量的寄存器内容，不涉及存储管理方面的操作。</p><h2 id="2-线程有哪些基本状态？这些状态是如何定义的"><a href="#2-线程有哪些基本状态？这些状态是如何定义的" class="headerlink" title="2. 线程有哪些基本状态？这些状态是如何定义的?"></a>2. 线程有哪些基本状态？这些状态是如何定义的?</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">新建(new)：新创建了一个线程对象。</span><br><span class="line"></span><br><span class="line">可运行(runnable)：线程对象创建后，其他线程(比如main线程）调用了该对象的start()方法。该状态的线程位于可运行线程池中，等待被线程调度选中，获 取cpu的使用权。</span><br><span class="line"></span><br><span class="line">运行(running)：可运行状态(runnable)的线程获得了cpu时间片（timeslice），执行程序代码。</span><br><span class="line"></span><br><span class="line">阻塞(block)：阻塞状态是指线程因为某种原因放弃了cpu使用权，也即让出了cpu timeslice，暂时停止运行。直到线程进入可运行(runnable)状态，才有 机会再次获得cpu timeslice转到运行(running)状态。阻塞的情况分三种：</span><br><span class="line"></span><br><span class="line">    (一). 等待阻塞：运行(running)的线程执行o.wait()方法，JVM会把该线程放 入等待队列(waitting queue)中。</span><br><span class="line"></span><br><span class="line">    (二). 同步阻塞：运行(running)的线程在获取对象的同步锁时，若该同步 锁 被别的线程占用，则JVM会把该线程放入锁池(lock pool)中。</span><br><span class="line"></span><br><span class="line">    (三). 其他阻塞: 运行(running)的线程执行Thread.sleep(long ms)或t.join()方法，或者发出了I/O请求时，JVM会把该线程置为阻塞状态。当sleep()状态超时join()等待线程终止或者超时、或者I/O处理完毕时，线程重新转入可运行(runnable)状态。</span><br><span class="line"></span><br><span class="line">死亡(dead)：线程run()、main()方法执行结束，或者因异常退出了run()方法，则该线程结束生命周期。死亡的线程不可再次复生。</span><br></pre></td></tr></tbody></table></figure></div><p>备注： 可以用早起坐地铁来比喻这个过程（下面参考自牛客网某位同学的回答）：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">还没起床：sleeping</span><br><span class="line"></span><br><span class="line">起床收拾好了，随时可以坐地铁出发：Runnable</span><br><span class="line"></span><br><span class="line">等地铁来：Waiting</span><br><span class="line"></span><br><span class="line">地铁来了，但要排队上地铁：I/O阻塞</span><br><span class="line"></span><br><span class="line">上了地铁，发现暂时没座位：synchronized阻塞</span><br><span class="line"></span><br><span class="line">地铁上找到座位：Running</span><br><span class="line"></span><br><span class="line">到达目的地：Dead</span><br></pre></td></tr></tbody></table></figure></div><h2 id="3-何为多线程？"><a href="#3-何为多线程？" class="headerlink" title="3. 何为多线程？"></a>3. 何为多线程？</h2><p>多线程就是多个线程同时运行或交替运行。单核CPU的话是顺序执行，也就是交替运行。多核CPU的话，因为每个CPU有自己的运算器，所以在多个CPU中可以同时运行。</p><h2 id="4-为什么多线程是必要的？"><a href="#4-为什么多线程是必要的？" class="headerlink" title="4. 为什么多线程是必要的？"></a>4. 为什么多线程是必要的？</h2><ul><li><p>使用线程可以把占据长时间的程序中的任务放到后台去处理。</p></li><li><p>用户界面可以更加吸引人，这样比如用户点击了一个按钮去触发某些事件的处理，可以弹出一个进度条来显示处理的进度。</p></li><li><p>程序的运行速度可能加快。</p></li></ul><h1 id="5-使用多线程常见的三种方式"><a href="#5-使用多线程常见的三种方式" class="headerlink" title="5 使用多线程常见的三种方式"></a>5 使用多线程常见的三种方式</h1><h3 id="①继承Thread类"><a href="#①继承Thread类" class="headerlink" title="①继承Thread类"></a>①继承Thread类</h3><p>MyThread.java</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public class MyThread extends Thread {</span><br><span class="line">    @Override</span><br><span class="line">    public void run() {</span><br><span class="line">        super.run();</span><br><span class="line"></span><br><span class="line">        System.out.println("MyThread");</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p>Run.java</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public class Run {</span><br><span class="line">    public static void main(String[] args) {</span><br><span class="line">        MyThread mythread = new MyThread();</span><br><span class="line"></span><br><span class="line">        mythread.start();</span><br><span class="line"></span><br><span class="line">        System.out.println("运行结束");</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p>运行结果：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">MyThread</span><br><span class="line">运行结束</span><br></pre></td></tr></tbody></table></figure></div><p>从上面的运行结果可以看出：线程是一个子任务，CPU以不确定的方式，或者说是以随机的时间来调用线程中的run方法。</p><h3 id="②实现Runnable接口"><a href="#②实现Runnable接口" class="headerlink" title="②实现Runnable接口"></a>②实现Runnable接口</h3><p>推荐实现Runnable接口方式开发多线程，因为Java单继承但是可以实现多个接口。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public class MyRunnable implements Runnable {</span><br><span class="line">    @Override</span><br><span class="line">    public void run() {</span><br><span class="line">        System.out.println("MyRunnable");</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p>Run.java</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public class Run {</span><br><span class="line">    public static void main(String[] args) {</span><br><span class="line">        Runnable runnable = new MyRunnable();</span><br><span class="line"></span><br><span class="line">        Thread thread = new Thread(runnable);</span><br><span class="line"></span><br><span class="line">        thread.start();</span><br><span class="line"></span><br><span class="line">        System.out.println("运行结束！");</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p>运行结果：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">MyThread</span><br><span class="line">运行结束</span><br></pre></td></tr></tbody></table></figure></div><h3 id="③使用线程池"><a href="#③使用线程池" class="headerlink" title="③使用线程池"></a>③使用线程池</h3><p>在<strong>《阿里巴巴Java开发手册》</strong>“并发处理”这一章节，明确指出线程资源必须通过线程池提供，不允许在应用中自行显示创建线程。</p><p>为什么呢？</p><blockquote><p>使用线程池的好处是减少在创建和销毁线程上所消耗的时间以及系统资源开销，解决资源不足的问题。如果不使用线程池，有可能会造成系统创建大量同类线程而导致消耗完内存或者“过度切换”的问题。</p></blockquote><p>另外《阿里巴巴Java开发手册》中强制线程池不允许使用 Executors 去创建，而是通过 ThreadPoolExecutor 的方式，这样的处理方式让写的同学更加明确线程池的运行规则，规避资源耗尽的风险</p><blockquote><p>Executors 返回线程池对象的弊端如下：</p></blockquote><blockquote><p>FixedThreadPool 和 SingleThreadExecutor ： 允许请求的队列长度为 Integer.MAX_VALUE,可能堆积大量的请求，从而导致OOM。</p></blockquote><blockquote><p>CachedThreadPool 和 ScheduledThreadPool ： 允许创建的线程数量为 Integer.MAX_VALUE ，可能会创建大量线程，从而导致OOM。</p></blockquote><h2 id="6-线程的优先级"><a href="#6-线程的优先级" class="headerlink" title="6 线程的优先级"></a>6 线程的优先级</h2><p>每个线程都具有各自的优先级，<strong>线程的优先级可以在程序中表明该线程的重要性，如果有很多线程处于就绪状态，系统会根据优先级来决定首先使哪个线程进入运行状态。</strong>但这个并不意味着低<br>优先级的线程得不到运行，而只是它运行的几率比较小，如垃圾回收机制线程的优先级就比较低。所以很多垃圾得不到及时的回收处理。</p><p><strong>线程优先级具有继承特性。</strong> 比如A线程启动B线程，则B线程的优先级和A是一样的。</p><p><strong>线程优先级具有随机性。</strong> 也就是说线程优先级高的不一定每一次都先执行完。</p><p>Thread类中包含的成员变量代表了线程的某些优先级。如Thread.MINPRIORITY（常数1），Thread.NORMPRIORITY（常数5）,Thread.MAXPRIORITY（常数10）。其中每个线程的优先级都在Thread.MINPRIORITY（常数1） 到Thread.MAXPRIORITY（常数10） 之间，在默认情况下优先级都是Thread.NORMPRIORITY（常数5）。</p><p>学过操作系统这门课程的话，我们可以发现多线程优先级或多或少借鉴了操作系统对进程的管理。</p><h2 id="7-Java多线程分类"><a href="#7-Java多线程分类" class="headerlink" title="7 Java多线程分类"></a>7 Java多线程分类</h2><h3 id="用户线程"><a href="#用户线程" class="headerlink" title="用户线程"></a>用户线程</h3><p>运行在前台，执行具体的任务，如程序的主线程、连接网络的子线程等都是用户线程</p><h3 id="守护线程"><a href="#守护线程" class="headerlink" title="守护线程"></a>守护线程</h3><p>运行在后台，为其他前台线程服务.也可以说守护线程是JVM中非守护线程的 “佣人”。</p><ul><li><p>特点： 一旦所有用户线程都结束运行，守护线程会随JVM一起结束工作</p></li><li><p>应用： 数据库连接池中的检测线程，JVM虚拟机启动后的检测线程</p></li><li><p>最常见的守护线程： 垃圾回收线程</p></li></ul><h3 id="如何设置守护线程？"><a href="#如何设置守护线程？" class="headerlink" title="如何设置守护线程？"></a>如何设置守护线程？</h3><p>可以通过调用 Thead 类的 setDaemon(true) 方法设置当前的线程为守护线程>。</p><p>注意事项：</p><ul><li><p>1.setDaemon(true)必须在start（）方法前执行，否则会抛出IllegalThreadStateExceptio异常</p></li><li><p>2.在守护线程中产生的新线程也是守护线程</p></li><li><p>3.不是所有的任务都可以分配给守护线程来执行，比如读写操作或者计算逻辑</p></li></ul><h3 id="8-sleep-方法和wait-方法简单对比"><a href="#8-sleep-方法和wait-方法简单对比" class="headerlink" title="8 sleep()方法和wait()方法简单对比"></a>8 sleep()方法和wait()方法简单对比</h3><ul><li><p>两者最主要的区别在于：sleep方法没有释放锁，而wait方法释放了锁 。</p></li><li><p>两者都可以暂停线程的执行。</p></li><li><p>Wait通常被用于线程间交互/通信，sleep通常被用于暂停执行。</p></li><li><p>wait()方法被调用后，线程不会自动苏醒，需要别的线程调用同一个对象上的notify()或者nofifyAl()方法。sleep()方法执行完成后，线程会自动苏醒。</p></li></ul><h3 id="9-为什么我们调用start-方法时会执行run-方法，为什么我们不能直接调用run-方法？"><a href="#9-为什么我们调用start-方法时会执行run-方法，为什么我们不能直接调用run-方法？" class="headerlink" title="9 为什么我们调用start()方法时会执行run()方法，为什么我们不能直接调用run()方法？"></a>9 为什么我们调用start()方法时会执行run()方法，为什么我们不能直接调用run()方法？</h3><p>这是另一个非常经典的java多线程面试问题，而且在面试中会经常被问到。很简单，但是很多人都会答不上来！</p><p>new一个Thread，线程进入了新建状态;调用start()方法，会启动一个线程并使线程进入了就绪状态，当分配到时间片后就可以开始运行了。<br>start()会执行线程的相应准备工作，然后自动执行run()方法的内容，这是真正的多线程工作。 而直接执行run()方法，会把run方法当成一个mian线程下的普通方法去执行，并不会在某个线程中执行它，所以这并不是多线程工作。</p><p><strong>总结： 调用start方法方可启动线程并使线程进入就绪状态，而run方法只是thread的一个普通方法调用，还是在主线程里执行。</strong></p></body></html>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 多线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>简单多线程基础</title>
      <link href="/2018/09/11/%E5%8F%B2%E4%B8%8A%E6%9C%80%E5%85%A8%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%90%88%E9%9B%86/"/>
      <url>/2018/09/11/%E5%8F%B2%E4%B8%8A%E6%9C%80%E5%85%A8%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%90%88%E9%9B%86/</url>
      
        <content type="html"><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script></head><body><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>正则表达式，新手见它的感觉就是“这都什么玩意，乱七八糟的，完全不知所云”，但学会它就会体验那种一行代码抵数十上百行，效率飞起的感觉，简直不要太爽。今天小肆先把我自己收藏的一些正则表达式写法分享给大家，当然想深入学习如何写正则表达式，可以去w3c看看教程。</p><h2 id="干货"><a href="#干货" class="headerlink" title="干货"></a>干货</h2><h3 id="一-校验数字"><a href="#一-校验数字" class="headerlink" title="一.校验数字"></a>一.校验数字</h3><ul><li>数字：^[0-9]*$</li><li>n位的数字：^\d{n}$</li><li>至少n位的数字：^\d{n,}$</li><li>m-n位的数字：^\d{m,n}$</li><li>零和非零开头的数字：^(0|[1-9][0-9]*)$</li><li>非零开头的最多带两位小数的数字：^([1-9][0-9]*)+(.[0-9]{1,2})?$</li><li>带1-2位小数的正数或负数：^(-)?\d+(.\d{1,2})?$</li><li>正数、负数、和小数：^(-|+)?\d+(.\d+)?$</li><li>有两位小数的正实数：^[0-9]+(.[0-9]{2})?$</li><li>有1~3位小数的正实数：^[0-9]+(.[0-9]{1,3})?$</li><li>非零的正整数：^[1-9]\d*$</li><li>非零的负整数：^-[1-9][]0-9”*$</li><li>非负整数：^\d+$</li><li>非正整数：^-[1-9]\d*|0$</li><li>非负浮点数：^\d+(.\d+)?$</li><li>非正浮点数：^((-\d+(.\d+)?)|(0+(.0+)?))$</li><li>正浮点数：^[1-9]d.d|0.d[1-9]d$</li><li>负浮点数：^-([1-9]\d<em>.\d</em>|0.\d<em>[1-9]\d</em>)$</li><li>浮点数：^(-?\d+)(.\d+)?$</li></ul><h3 id="二-效验字符"><a href="#二-效验字符" class="headerlink" title="二.效验字符"></a>二.效验字符</h3><ul><li>汉字：^[\u4e00-\u9fa5]{0,}$</li><li>英文和数字：^[A-Za-z0-9]+$</li><li>长度为3-20的所有字符：^.{3,20}$</li><li>由26个英文字母组成的字符串：^[A-Za-z]+$</li><li>由26个大写英文字母组成的字符串：^[A-Z]+$</li><li>由26个小写英文字母组成的字符串：^[a-z]+$</li><li>由数字和26个英文字母组成的字符串：^[A-Za-z0-9]+$</li><li>由数字、26个英文字母或者下划线组成的字符串：^\w+$</li><li>中文、英文、数字包括下划线：^[\u4E00-\u9FA5A-Za-z0-9_]+$</li><li>中文、英文、数字但不包括下划线等符号：^[\u4E00-\u9FA5A-Za-z0-9]+$</li><li>可以输入含有^%&’,;=?$"等字符：[^%&’,;=?$\x22]+</li><li>禁止输入含有<del>的字符：[^</del>\x22]+</li></ul><h3 id="三-特殊需求表达式"><a href="#三-特殊需求表达式" class="headerlink" title="三.特殊需求表达式"></a>三.特殊需求表达式</h3><ul><li>Email地址：^\w+([-+.]\w+)<em>@\w+([-.]\w+)*.\w+([-.]\w+)</em>$</li><li>手机号码：^(13[0-9]|14[5|7]|15[0|1|2|3|5|6|7|8|9]|18[0|1|2|3|5|6|7|8|9])\d{8}$(国内 13、15、18开头的手机号正则表达式,可根据目前国内收集号扩展前两位开头号码）</li><li>电话号码(“XXX-XXXXXXX”、”XXXX-XXXXXXXX”、”XXX-XXXXXXX”、”XXX-XXXXXXXX”、”XXXXXXX”和”XXXXXXXX)：^((\d{3,4}-)|\d{3.4}-)?\d{7,8}$</li><li>国内电话号码(0511-4405222、021-87888822)：\d{3}-\d{8}|\d{4}-\d{7}</li><li>身份证号(15位）：^[1-9]\d{7}((0\d)|(1[0-2]))(([0|1|2]\d)|3[0-1])\d{3}$</li><li>身份证号码(18位)：^[1-9]\d{5}[1-9]\d{3}((0\d)|(1[0-2]))(([0|1|2]\d)|3[0-1])\d{3}([0-9]|X)$</li><li>帐号是否合法(字母开头，允许5-16字节，允许字母数字下划线)：^[a-zA-Z][a-zA-Z0-9_]{4,15}$</li><li>密码(以字母开头，长度在6~18之间，只能包含字母、数字和下划线)：^[a-zA-Z]\w{5,17}$</li><li>强密码(必须包含大小写字母和数字的组合，不能使用特殊字符，长度在8-16之间)：^(?=.<em>\d)(?=.</em>[a-z])(?=.*[A-Z]).{8,16}$</li><li>日期格式：^\d{4}-\d{1,2}-\d{1,2}</li><li>一年的12个月(01～09和1～12)：^(0?[1-9]|1[0-2])$</li><li>一个月的31天(01～09和1～31)：^((0?[1-9])|((1|2)[0-9])|30|31)$</li><li>xml文件：^([a-zA-Z]+-?)+[a-zA-Z0-9]+\.[x|X][m|M][l|L]$</li><li>中文字符的正则表达式：[\u4e00-\u9fa5]</li><li>双字节字符：[^\x00-\xff] (包括汉字在内，可以用来计算字符串的长度(一个双字节字符长度计2，ASCII字符计1))</li><li>空白行的正则表达式：\n\s*\r (可以用来删除空白行)</li><li>首尾空白字符的正则表达式：^\s<em>|\s</em>$或(^\s<em>)|(\s</em>$) (可以用来删除行首行尾的空白字符(包括空格、制表符、换页符等等)，非常有用的表达式)</li><li>腾讯QQ号：[1-9][0-9]{4,11} (腾讯QQ号从10000开始)</li><li>中国邮政编码：[1-9]\d{5}(?!\d) (中国邮政编码为6位数字)</li><li>IP-v4地址：\b(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\b (提取IP地址时有用)</li><li>校验IP-v6地址：(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))</li><li>子网掩码：((?:(?:25[0-5]|2[0-4]\d|[01]?\d?\d)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d?\d))</li><li>校验日期:^(?:(?!0000)[0-9]{4}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1[0-9]|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[0-9]{2}(?:0[48]|[2468][048]|[13579][26])|(?:0[48]|[2468][048]|[13579][26])00)-02-29)$(“yyyy-mm-dd“ 格式的日期校验，已考虑平闰年。)</li><li>抽取注释：<!--(.*?)--></li><li>查找CSS属性:^\s<em>[a-zA-Z\-]+\s</em>[:]{1}\s[a-zA-Z0-9\s.#]+[;]{1}</li><li>提取页面超链接:(<a\s<em>(?!.*\brel=)[^>])(href=”https?:\/\/)((?!(?:(?:www\.)?’.implode(‘|(?:www\.)?’, $follow_list).’))[^”]+)”((?!.<em>\brel=)[^>]</em>)(?:[^>]*)></a\s<em></li><li>提取网页图片:\< <em>[img][^\\>]</em>[src] <em>= *[\“\‘]{0,1}([^\“\‘\ >]</em>)</li><li>提取网页颜色代码:^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$</li><li>文件扩展名效验:^([a-zA-Z]\:|\\)\\([^\\]+\\)<em>[^\/:</em>?”<>|]+\.txt(l)?$</li><li>判断IE版本：^.<em>MSIE <a href="?:\.[0-9]+">5-8</a>?(?!.*Trident\/[5-9]\.0).</em>$</li></ul><p>文章出处：<a href="https://segmentfault.com/a/1190000017834831" target="_blank" rel="noopener">https://segmentfault.com/a/1190000017834831</a></p></body></html>]]></content>
      
      
      <categories>
          
          <category> 正则表达式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 正则表达式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于hystrix为spring-boot+dubbo+zookeeper提供熔断机制</title>
      <link href="/2018/09/08/%E5%9F%BA%E4%BA%8Ehystrix%E6%B3%A8%E8%A7%A3%E7%9A%84%E6%96%B9%E5%BC%8F%E4%B8%BAspring-boot+dubbo+zookeeper%E6%8F%90%E4%BE%9B%E7%86%94%E6%96%AD%E6%9C%BA%E5%88%B6/"/>
      <url>/2018/09/08/%E5%9F%BA%E4%BA%8Ehystrix%E6%B3%A8%E8%A7%A3%E7%9A%84%E6%96%B9%E5%BC%8F%E4%B8%BAspring-boot+dubbo+zookeeper%E6%8F%90%E4%BE%9B%E7%86%94%E6%96%AD%E6%9C%BA%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script></head><body><h1 id="spring-boot-dubbo-zookeeper-hystrix-annotation"><a href="#spring-boot-dubbo-zookeeper-hystrix-annotation" class="headerlink" title="spring-boot-dubbo-zookeeper-hystrix-annotation"></a>spring-boot-dubbo-zookeeper-hystrix-annotation</h1><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>使用注解的方式使用hystrix</p><p>我需要引入几个必要的jar</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><dependency></dependency></span><br><span class="line">            <groupid>com.netflix.hystrix</groupid></span><br><span class="line">            <artifactid>hystrix-core</artifactid></span><br><span class="line">            <version>1.5.12</version></span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">        <dependency></dependency></span><br><span class="line">            <groupid>com.netflix.hystrix</groupid></span><br><span class="line">            <artifactid>hystrix-metrics-event-stream</artifactid></span><br><span class="line">            <version>1.5.12</version></span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">        <dependency></dependency></span><br><span class="line">            <groupid>com.netflix.hystrix</groupid></span><br><span class="line">            <artifactid>hystrix-javanica</artifactid></span><br><span class="line">            <version>1.5.12</version></span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">        <dependency></dependency></span><br><span class="line">            <groupid>javax</groupid></span><br><span class="line">            <artifactid>javaee-api</artifactid></span><br><span class="line">            <version>7.0</version></span><br><span class="line">        </span><br></pre></td></tr></tbody></table></figure></div><p>然后是拦截中心</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 拦截中心</span><br><span class="line"> * @author YI</span><br><span class="line"> * @date 2018-9-8 16:37:01</span><br><span class="line"> */</span><br><span class="line">@Configuration</span><br><span class="line">public class HystrixConfig {</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 用来拦截处理HystrixCommand注解</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    @Bean</span><br><span class="line">    public HystrixCommandAspect hystrixAspect() {</span><br><span class="line">        return new HystrixCommandAspect();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 用来像监控中心Dashboard发送stream信息</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    @Bean</span><br><span class="line">    public ServletRegistrationBean hystrixMetricsStreamServlet() {</span><br><span class="line">        ServletRegistrationBean registration = new ServletRegistrationBean(new HystrixMetricsStreamServlet());</span><br><span class="line">        registration.addUrlMappings("/hystrix.stream");</span><br><span class="line">        return registration;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p>如此简单我们就可以使用注解的方式提供熔断降级服务</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 消费者</span><br><span class="line"> * @author YI</span><br><span class="line"> * @date 2018-8-20 17:05:30</span><br><span class="line"> */</span><br><span class="line">@RestController</span><br><span class="line">public class HelloController {</span><br><span class="line"></span><br><span class="line">    @Reference(</span><br><span class="line">            version = "${hello.service.version}",</span><br><span class="line">            application = "${dubbo.application.id}",</span><br><span class="line">            registry = "${dubbo.registry.id}"</span><br><span class="line">    )</span><br><span class="line">    private HelloService helloService;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 出错时回调sayHelloFallback 方法</span><br><span class="line">     * @param name</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    @GetMapping("hello/{name}")</span><br><span class="line">    @HystrixCommand(fallbackMethod = "sayHelloFallback",</span><br><span class="line">            commandProperties = {</span><br><span class="line">                    @HystrixProperty(name = "execution.isolation.strategy", value = "THREAD"),</span><br><span class="line">                    @HystrixProperty(name = "execution.isolation.thread.timeoutInMilliseconds", value = "1000"),</span><br><span class="line">                    @HystrixProperty(name = "circuitBreaker.enabled", value = "true"),</span><br><span class="line">                    @HystrixProperty(name = "circuitBreaker.requestVolumeThreshold", value = "2")},</span><br><span class="line">            threadPoolProperties = {</span><br><span class="line">                    @HystrixProperty(name = "coreSize", value = "5"),</span><br><span class="line">                    @HystrixProperty(name = "maximumSize", value = "5"),</span><br><span class="line">                    @HystrixProperty(name = "maxQueueSize", value = "10")</span><br><span class="line">            })</span><br><span class="line">    public String sayHello(@PathVariable String name){</span><br><span class="line">        return helloService.sayHello(name);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 出错时回调sayGoodbyeFallback 方法</span><br><span class="line">     * @param name</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    @HystrixCommand(fallbackMethod = "sayGoodbyeFallback")</span><br><span class="line">    @GetMapping("goodbye/{name}")</span><br><span class="line">    public String sayGoodbye(@PathVariable String name){</span><br><span class="line">        return helloService.sayGoodbye(name);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    public String sayHelloFallback(String name){</span><br><span class="line">        System.out.println("sayHello回调函数");</span><br><span class="line"></span><br><span class="line">        return "OK";</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    public String sayGoodbyeFallback(String name){</span><br><span class="line">        System.out.println("sayGoodbye回调函数");</span><br><span class="line"></span><br><span class="line">        return "OK";</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p>具体实现请看源码</p><h1 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h1><p><a href="https://github.com/HWYWL/spring-boot-2.x-examples/tree/master/spring-boot-dubbo-zookeeper-hystrix-annotation" target="_blank" rel="noopener">spring-boot-dubbo-zookeeper-hystrix-annotation</a></p><h3 id="问题建议"><a href="#问题建议" class="headerlink" title="问题建议"></a>问题建议</h3><ul><li>联系我的邮箱：<a href="mailto:ilovey_hwy@163.com">ilovey_hwy@163.com</a></li><li>我的博客：<a href="http://www.hwy.ac.cn" target="_blank" rel="noopener">http://www.hwy.ac.cn</a></li><li>GitHub：<a href="https://github.com/HWYWL" target="_blank" rel="noopener">https://github.com/HWYWL</a></li></ul></body></html>]]></content>
      
      
      <categories>
          
          <category> Spring Boot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Boot </tag>
            
            <tag> 高并发 </tag>
            
            <tag> 分布式 </tag>
            
            <tag> dubbo </tag>
            
            <tag> zookeeper </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于hystrix为spring-boot+dubbo+zookeeper提供熔断机制</title>
      <link href="/2018/09/06/%E5%9F%BA%E4%BA%8Ehystrix%E4%B8%BAspring-boot+dubbo+zookeeper%E6%8F%90%E4%BE%9B%E7%86%94%E6%96%AD%E6%9C%BA%E5%88%B6/"/>
      <url>/2018/09/06/%E5%9F%BA%E4%BA%8Ehystrix%E4%B8%BAspring-boot+dubbo+zookeeper%E6%8F%90%E4%BE%9B%E7%86%94%E6%96%AD%E6%9C%BA%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script></head><body><h1 id="spring-boot-dubbo-zookeeper-hystrix"><a href="#spring-boot-dubbo-zookeeper-hystrix" class="headerlink" title="spring-boot-dubbo-zookeeper-hystrix"></a>spring-boot-dubbo-zookeeper-hystrix</h1><p>引入<strong>spring-boot-dubbo-zookeeper-hystrix-base</strong>后会通过Dubbo的Activate机制自动激活HystrixFilter,对dubbo:reference进行资源隔离和熔断保护。</p><h1 id="线程池隔离"><a href="#线程池隔离" class="headerlink" title="线程池隔离"></a>线程池隔离</h1><p>默认按dubbo:reference进行线程池资源隔离，可以认为一个dubbo:reference为一个领域服务，reference里的所有方法在一个线程池资源里运行，多个reference之间线程池资源是隔离的，这样可以根据具体的业务场景对不同的reference设置不同的线程池资源，并且当某个reference出现阻塞故障时不会导致容器线程资源被耗尽，从而影响其他服务。</p><p>默认线程池配置如下：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><dubbo:parameter key="coreSize" value="10"></dubbo:parameter></span><br><span class="line"><dubbo:parameter key="maximumSize" value="20"></dubbo:parameter></span><br><span class="line"><dubbo:parameter key="keepAliveTimeMinutes" value="1"></dubbo:parameter></span><br></pre></td></tr></tbody></table></figure></div><table><thead><tr><th>参数</th><th align="center">说明</th><th align="right">默认值</th></tr></thead><tbody><tr><td>coreSize</td><td align="center">核心线程数大小</td><td align="right">10</td></tr><tr><td>maximumSize</td><td align="center">空闲线程持有时间（分钟）</td><td align="right">20</td></tr><tr><td>keepAliveTimeMinutes</td><td align="center">最大线程数大小</td><td align="right">1</td></tr></tbody></table><h1 id="信号量隔离"><a href="#信号量隔离" class="headerlink" title="信号量隔离"></a>信号量隔离</h1><p>将自定义属性 isolation 为设置 SEMAPHORE 进行信号量隔离</p><p><code><dubbo:parameter key="isolation" value="SEMAPHORE"></dubbo:parameter></code> </p><p>isolation属性：</p><table><thead><tr><th>属性值</th><th align="center">说明</th><th align="left">备注</th></tr></thead><tbody><tr><td>SEMAPHORE</td><td align="center">信号量隔离</td><td align="left">适用于本地方法调用，或者QPS非常高的调用</td></tr><tr><td>THREAD</td><td align="center">线程池隔离 -默认值</td><td align="left"></td></tr></tbody></table><h3 id="最大并发请求数量"><a href="#最大并发请求数量" class="headerlink" title="最大并发请求数量"></a>最大并发请求数量</h3><p>设置属性 maxConcurrentRequests 默认值为 10</p><p><code><dubbo:parameter key="maxConcurrentRequests" value="10"></dubbo:parameter></code></p><h1 id="熔断保护"><a href="#熔断保护" class="headerlink" title="熔断保护"></a>熔断保护</h1><p>每个dubbo:reference的服务方法会封装成command,提供熔断保护和优雅降级功能。</p><p>默认熔断配置如下：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><dubbo:parameter key="requestVolumeThreshold" value="20"></dubbo:parameter></span><br><span class="line"><dubbo:parameter key="sleepWindowInMilliseconds" value="5000"></dubbo:parameter></span><br><span class="line"><dubbo:parameter key="errorThresholdPercentage" value="50"></dubbo:parameter></span><br><span class="line"><dubbo:parameter key="timeoutInMilliseconds" value="1000"></dubbo:parameter></span><br></pre></td></tr></tbody></table></figure></div><table><thead><tr><th>参数</th><th align="left">说明</th><th align="left">默认值</th><th align="left">备注</th></tr></thead><tbody><tr><td>requestVolumeThreshold</td><td align="left">熔断判断请求数阈值</td><td align="left">20</td><td align="left">一个统计周期内（默认10秒）请求不少于requestVolumeThreshold才会进行熔断判断</td></tr><tr><td>sleepWindowInMilliseconds</td><td align="left">熔断触发错误率阈值</td><td align="left">5000</td><td align="left">超过50%错误触发熔断</td></tr><tr><td>errorThresholdPercentage</td><td align="left">熔断触发后多久恢复half-open状态</td><td align="left">50</td><td align="left">熔断后sleepWindowInMilliseconds毫秒会放入一个请求，如果请求处理成功，熔断器关闭，否则熔断器打开，继续等待sleepWindowInMilliseconds</td></tr><tr><td>timeoutInMilliseconds</td><td align="left">任务执行超时时间</td><td align="left">1000</td><td align="left">注意该时间和dubbo自己的超时时间不要冲突，以这个时间优先，比如consumer设置3秒，那么当执行时hystrix会提前超时</td></tr></tbody></table><h1 id="服务降级"><a href="#服务降级" class="headerlink" title="服务降级"></a>服务降级</h1><p>降级触发条件如下：</p><ol><li>远程服务调用超时</li><li>远程服务内部执行返回异常结果（如内部抛出运行时异常）</li><li>Hystrix will execute this fallback for all types of failure such as run() failure, timeout, thread pool or semaphore rejection, and circuit-breaker short-circuiting</li></ol><p>服务降级方法通过SPI扩展的方式加载、运行，实现方式如下：</p><h3 id="1、继承实现Fallback接口，提供降级实现，如下："><a href="#1、继承实现Fallback接口，提供降级实现，如下：" class="headerlink" title="1、继承实现Fallback接口，提供降级实现，如下："></a>1、继承实现Fallback接口，提供降级实现，如下：</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">package com.yi.fallback;</span><br><span class="line"></span><br><span class="line">import com.netease.hystrix.dubbo.rpc.filter.Fallback;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 回调函数</span><br><span class="line"> * @author YI</span><br><span class="line"> * @date 2018-9-5 21:16:31</span><br><span class="line"> */</span><br><span class="line">public class DemoFallback implements Fallback {</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public Object invoke() {</span><br><span class="line">        System.out.println("sayHello 方法回调。。。");</span><br><span class="line">        return null;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><h3 id="2、按dubbo-SPI扩展规则进行配置"><a href="#2、按dubbo-SPI扩展规则进行配置" class="headerlink" title="2、按dubbo SPI扩展规则进行配置"></a>2、按dubbo SPI扩展规则进行配置</h3><ol><li>resources目录增加文件/META-INF/dubbo/com.netease.hystrix.dubbo.rpc.filter.Fallback（此文件名必须是Fallback类的包名，不然会找不到）</li><li>demoFallback=com.netease.urs.dubbo.rpc.DemoFallback</li></ol><h3 id="3、dubbo-reference增加method-fallback配置"><a href="#3、dubbo-reference增加method-fallback配置" class="headerlink" title="3、dubbo:reference增加method fallback配置"></a>3、dubbo:reference增加method fallback配置</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><dubbo:method name="demo"></dubbo:method></span><br><span class="line">    <dubbo:parameter key="fallback" value="demoFallback"></dubbo:parameter></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure></div><h2 id="Fallback并发调用量控制"><a href="#Fallback并发调用量控制" class="headerlink" title="Fallback并发调用量控制"></a>Fallback并发调用量控制</h2><p>设置属性 fallbackMaxConcurrentRequests 默认值为 50</p><p><code><dubbo:parameter key="fallbackMaxConcurrentRequests" value="50"></dubbo:parameter></code></p><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>项目启动后访问:localhost:8012/hello/xiaoming<br><a href="https://i.imgur.com/BKQ0YYz.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.imgur.com/BKQ0YYz.jpg" class="lazyload"></a></p><h1 id="画重点-敲黑板"><a href="#画重点-敲黑板" class="headerlink" title="画重点,敲黑板"></a>画重点,敲黑板</h1><p>在我的源码中我删除了xml配置文件,dubbo全部是使用注解和配置完成,让我们更简单的完成操作,我们来看看吧:</p><p>生产者暴露服务</p><p><a href="https://i.imgur.com/L9Emelb.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.imgur.com/L9Emelb.jpg" class="lazyload"></a></p><p>消费者使用</p><p><a href="https://i.imgur.com/iA2xVxq.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.imgur.com/iA2xVxq.jpg" class="lazyload"></a></p><p>注解 parameters 中对应的参数就是上文提到的<strong>熔断保护</strong>的参数，好了，快乐的写代码吧！</p><h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h3><p><a href="https://github.com/HWYWL/spring-boot-2.x-examples/tree/master/spring-boot-dubbo-zookeeper-hystrix" target="_blank" rel="noopener">spring-boot-dubbo-zookeeper-hystrix</a></p></body></html>]]></content>
      
      
      <categories>
          
          <category> 分布式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 高并发 </tag>
            
            <tag> 分布式 </tag>
            
            <tag> dubbo </tag>
            
            <tag> zookeeper </tag>
            
            <tag> Spring boot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>为什么Java中1000==1000为false而100==100为true？</title>
      <link href="/2018/08/28/%E4%B8%BA%E4%BB%80%E4%B9%88Java%E4%B8%AD1000==1000%E4%B8%BAfalse%E8%80%8C100==100%E4%B8%BAtrue%EF%BC%9F/"/>
      <url>/2018/08/28/%E4%B8%BA%E4%BB%80%E4%B9%88Java%E4%B8%AD1000==1000%E4%B8%BAfalse%E8%80%8C100==100%E4%B8%BAtrue%EF%BC%9F/</url>
      
        <content type="html"><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script></head><body><p>这是一个挺有意思的讨论话题。</p><p>如果你运行下面的代码</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Integer a = 1000, b = 1000;</span><br><span class="line">Integer c = 100, d = 100;</span><br><span class="line">System.out.println(a == b);//1   </span><br><span class="line">System.out.println(c == d);//2</span><br></pre></td></tr></tbody></table></figure></div><p>你会得到：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">false</span><br><span class="line">true</span><br></pre></td></tr></tbody></table></figure></div><p><strong>基本知识</strong>：我们知道，如果两个引用指向同一个对象，用==表示它们是相等的。如果两个引用指向不同的对象，用==表示它们是不相等的，即使它们的内容相同。</p><p>因此，后面一条语句也应该是false 。</p><p>这就是它有趣的地方了。如果你看去看 Integer.Java 类，你会发现有一个内部私有类，IntegerCache.java，它缓存了从-128到127之间的所有的整数对象。</p><p><strong>所以事情就成了，所有的小整数在内部缓存，然后当我们声明类似——</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Integer c = 100;</span><br></pre></td></tr></tbody></table></figure></div><p>的时候，它实际上在内部做的是：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Integer i = Integer.valueOf(100);</span><br></pre></td></tr></tbody></table></figure></div><p>现在，如果我们去看valueOf()方法，我们可以看到：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public static Integer valueOf(int i) {</span><br><span class="line">    if (i >= IntegerCache.low && i</span><br><span class="line">    return IntegerCache.cache[i + (-IntegerCache.low)];</span><br><span class="line">    return new Integer(i);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p>如果值的范围在-128到127之间，它就从高速缓存返回实例。<br>所以…</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Integer c = 100, d = 100;</span><br></pre></td></tr></tbody></table></figure></div><p>指向了同一个对象。</p><p>这就是为什么我们写：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(c == d);</span><br></pre></td></tr></tbody></table></figure></div><p>我们可以得到true。</p><p><strong>现在你可能会问，为什么这里需要缓存？</strong><br>合乎逻辑的理由是，在此范围内的“小”整数使用率比大整数要高，因此，使用相同的底层对象是有价值的，可以减少潜在的内存占用。</p><p>然而，通过反射API你会误用此功能。</p><p><strong>运行下面的代码，享受它的魅力吧</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) throws NoSuchFieldException, IllegalAccessException {</span><br><span class="line">    Class cache = Integer.class.getDeclaredClasses()[0]; //1 </span><br><span class="line">    Field myCache = cache.getDeclaredField("cache"); //2 </span><br><span class="line">    myCache.setAccessible(true);//3 </span><br><span class="line">    Integer[] newCache = (Integer[]) myCache.get(cache); //4 </span><br><span class="line">    newCache[132] = newCache[133]; //5 </span><br><span class="line">    int a = 2;</span><br><span class="line">    int b = a + a;</span><br><span class="line">    System.out.printf("%d + %d = %d", a, a, b); // </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div></body></html>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在Java中如何高效判断数组中是否包含某个元素</title>
      <link href="/2018/08/28/%E5%9C%A8Java%E4%B8%AD%E5%A6%82%E4%BD%95%E9%AB%98%E6%95%88%E5%88%A4%E6%96%AD%E6%95%B0%E7%BB%84%E4%B8%AD%E6%98%AF%E5%90%A6%E5%8C%85%E5%90%AB%E6%9F%90%E4%B8%AA%E5%85%83%E7%B4%A0/"/>
      <url>/2018/08/28/%E5%9C%A8Java%E4%B8%AD%E5%A6%82%E4%BD%95%E9%AB%98%E6%95%88%E5%88%A4%E6%96%AD%E6%95%B0%E7%BB%84%E4%B8%AD%E6%98%AF%E5%90%A6%E5%8C%85%E5%90%AB%E6%9F%90%E4%B8%AA%E5%85%83%E7%B4%A0/</url>
      
        <content type="html"><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script></head><body><p>如何检查一个数组(无序)是否包含一个特定的值？这是一个在Java中经常用到的并且非常有用的操作。</p><p>同时，这个问题在Stack Overflow中也是一个非常热门的问题。在投票比较高的几个答案中给出了几种不同的方法，但是他们的时间复杂度也是各不相同的。本文将分析几种常见用法及其时间成本。</p><h3 id="使用List"><a href="#使用List" class="headerlink" title="使用List"></a>使用List</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">useList</span><span class="params">(String[] arr, String targetValue)</span> </span>{</span><br><span class="line">    <span class="keyword">return</span> Arrays.asList(arr).contains(targetValue);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><h3 id="使用Set"><a href="#使用Set" class="headerlink" title="使用Set"></a>使用Set</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">useSet</span><span class="params">(String[] arr, String targetValue)</span> </span>{</span><br><span class="line">    Set<string> set = <span class="keyword">new</span> HashSet<string>(Arrays.asList(arr));</string></string></span><br><span class="line">    <span class="keyword">return</span> set.contains(targetValue);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><h3 id="使用循环判断"><a href="#使用循环判断" class="headerlink" title="使用循环判断"></a>使用循环判断</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">useLoop</span><span class="params">(String[] arr, String targetValue)</span> </span>{</span><br><span class="line">    <span class="keyword">for</span>(String s: arr){</span><br><span class="line">        <span class="keyword">if</span>(s.equals(targetValue))</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p>使用Arrays.binarySearch()</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Arrays.binarySearch()方法只能用于有序数组！！！如果数组无序的话得到的结果就会很奇怪。</span><br></pre></td></tr></tbody></table></figure></div><p>查找有序数组中是否包含某个值的用法如下：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public static boolean useArraysBinarySearch(String[] arr, String targetValue) { </span><br><span class="line">    int a =  Arrays.binarySearch(arr, targetValue);</span><br><span class="line">    if(a > 0)</span><br><span class="line">        return true;</span><br><span class="line">    else</span><br><span class="line">        return false;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><h1 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h1><p>下面的代码可以大概的得出各种方法的时间成本。基本思想就是从数组中查找某个值，数组的大小分别是5、1k、10k。这种方法得到的结果可能并不精确，但是是最简单清晰的方式。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) {</span><br><span class="line">    String[] arr = new String[] {  "CD",  "BC", "EF", "DE", "AB"};</span><br><span class="line"></span><br><span class="line">    //use list</span><br><span class="line">    long startTime = System.nanoTime();</span><br><span class="line">    for (int i = 0; i < 100000; i++) {</span><br><span class="line">        useList(arr, "A");</span><br><span class="line">    }</span><br><span class="line">    long endTime = System.nanoTime();</span><br><span class="line">    long duration = endTime - startTime;</span><br><span class="line">    System.out.println("useList:  " + duration / 1000000);</span><br><span class="line"></span><br><span class="line">    //use set</span><br><span class="line">    startTime = System.nanoTime();</span><br><span class="line">    for (int i = 0; i < 100000; i++) {</span><br><span class="line">        useSet(arr, "A");</span><br><span class="line">    }</span><br><span class="line">    endTime = System.nanoTime();</span><br><span class="line">    duration = endTime - startTime;</span><br><span class="line">    System.out.println("useSet:  " + duration / 1000000);</span><br><span class="line"></span><br><span class="line">    //use loop</span><br><span class="line">    startTime = System.nanoTime();</span><br><span class="line">    for (int i = 0; i < 100000; i++) {</span><br><span class="line">        useLoop(arr, "A");</span><br><span class="line">    }</span><br><span class="line">    endTime = System.nanoTime();</span><br><span class="line">    duration = endTime - startTime;</span><br><span class="line">    System.out.println("useLoop:  " + duration / 1000000);</span><br><span class="line"></span><br><span class="line">    //use Arrays.binarySearch()</span><br><span class="line">    startTime = System.nanoTime();</span><br><span class="line">    for (int i = 0; i < 100000; i++) {</span><br><span class="line">        useArraysBinarySearch(arr, "A");</span><br><span class="line">    }</span><br><span class="line">    endTime = System.nanoTime();</span><br><span class="line">    duration = endTime - startTime;</span><br><span class="line">    System.out.println("useArrayBinary:  " + duration / 1000000);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p>运行结果：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">useList:  13useSet:  72useLoop:  5useArraysBinarySearch:  9</span><br></pre></td></tr></tbody></table></figure></div><h1 id="使用一个长度为1k的数组"><a href="#使用一个长度为1k的数组" class="headerlink" title="使用一个长度为1k的数组"></a>使用一个长度为1k的数组</h1><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String[] arr = new String[1000];Random s = new Random();for(int i=0; i< 1000; i++){</span><br><span class="line">    arr[i] = String.valueOf(s.nextInt());</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p>结果：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">useList:  112useSet:  2055useLoop:  99useArrayBinary:  12</span><br></pre></td></tr></tbody></table></figure></div><h1 id="使用一个长度为10k的数组"><a href="#使用一个长度为10k的数组" class="headerlink" title="使用一个长度为10k的数组"></a>使用一个长度为10k的数组</h1><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String[] arr = new String[10000];Random s = new Random();for(int i=0; i< 10000; i++){</span><br><span class="line">    arr[i] = String.valueOf(s.nextInt());</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p>结果：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">useList:  1590useSet:  23819useLoop:  1526useArrayBinary:  12</span><br></pre></td></tr></tbody></table></figure></div><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>显然，使用一个简单的循环方法比使用任何集合都更加高效。许多开发人员为了方便，都使用第一种方法，但是他的效率也相对较低。因为将数组压入Collection类型中，首先要将数组元素遍历一遍，然后再使用集合类做其他操作。</p><p>如果使用Arrays.binarySearch()方法，数组必须是已排序的。由于上面的数组并没有进行排序，所以该方法不可使用。</p><p>实际上，如果你需要借助数组或者集合类高效地检查数组中是否包含特定值，一个已排序的列表或树可以做到时间复杂度为O(log(n))，hashset可以达到O(1)。</p><p><strong>（英文原文结束，以下是译者注）</strong></p><h3 id="使用ArrayUtils"><a href="#使用ArrayUtils" class="headerlink" title="使用ArrayUtils"></a>使用ArrayUtils</h3><p>除了以上几种以外，Apache Commons类库中还提供了一个ArrayUtils类，可以使用其contains方法判断数组和值的关系。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public static boolean useArrayUtils(String[] arr, String targetValue) {</span><br><span class="line">    return ArrayUtils.contains(arr,targetValue);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p>同样使用以上几种长度的数组进行测试，得出的结果是该方法的效率介于使用集合和使用循环判断之间（有的时候结果甚至比使用循环要理想）。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">useList:  323useSet:  3028useLoop:  141useArrayBinary:  12useArrayUtils:  181-------useList:  3703useSet:  35183useLoop:  3218useArrayBinary:  14useArrayUtils:  3125</span><br></pre></td></tr></tbody></table></figure></div><p>其实，如果查看ArrayUtils.contains的源码可以发现，他判断一个元素是否包含在数组中其实也是使用循环判断的方式。</p><p>部分代码如下：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">if(array == null) {</span><br><span class="line">    return -1;</span><br><span class="line">} else {</span><br><span class="line">    if(startIndex < 0) {</span><br><span class="line">        startIndex = 0;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    int i;</span><br><span class="line">    if(objectToFind == null) {</span><br><span class="line">        for(i = startIndex; i < array.length; ++i) {</span><br><span class="line">            if(array[i] == null) {</span><br><span class="line">                return i;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    } else if(array.getClass().getComponentType().isInstance(objectToFind)) {</span><br><span class="line">        for(i = startIndex; i < array.length; ++i) {</span><br><span class="line">            if(objectToFind.equals(array[i])) {</span><br><span class="line">                return i;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    return -1;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p>所以，相比较之下，我更倾向于使用ArrayUtils工具类来进行一些合数祖相关的操作。毕竟他可以让我少写很多代码（因为自己写代码难免有Bug，毕竟apache提供的开源工具类库都是经过无数开发者考验过的），而且，效率上也并不低太多。</p></body></html>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker安装FastDFS，集成Spring Boot操作</title>
      <link href="/2018/08/26/Docker%E5%AE%89%E8%A3%85FastDFS%EF%BC%8C%E9%9B%86%E6%88%90Spring%20Boot%E6%93%8D%E4%BD%9C/"/>
      <url>/2018/08/26/Docker%E5%AE%89%E8%A3%85FastDFS%EF%BC%8C%E9%9B%86%E6%88%90Spring%20Boot%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script></head><body><p>Docker安装FastDFS，集成Spring Boot操作</p><ol><li>获取镜像</li><li>运行tracker</li><li>运行storage</li></ol><a id="more"></a><h2 id="1-获取镜像"><a href="#1-获取镜像" class="headerlink" title="1. 获取镜像"></a>1. 获取镜像</h2><p>可以利用已有的FastDFS Docker镜像来运行FastDFS。</p><p>使用Centos 最好使用7.2的版本，不然可能会无法启动，或者缺少各种依赖。</p><p>获取镜像可以通过下载</p><pre><code>docker image pull delron/fastdfs</code></pre><p>也可是直接使用提供的镜像备份文件</p><pre><code>docker load -i 文件路径/fastdfs_docker.tar（提前打包好的）</code></pre><p>加载好镜像后，就可以开启运行FastDFS的tracker和storage了。</p><h2 id="2-运行tracker"><a href="#2-运行tracker" class="headerlink" title="2. 运行tracker"></a><a name="t1" style="outline-style: initial; outline-width: 0px; color: rgb(78, 161, 219); cursor: pointer; word-break: break-all;"></a>2. 运行tracker</h2><p>执行如下命令开启tracker 服务</p><pre><code>docker run -dti --network=host --name tracker -v /var/fdfs/tracker:/var/fdfs delron/fastdfs tracker</code></pre><ul><li>我们将fastDFS tracker运行目录映射到本机的 /var/fdfs/tracker目录中。</li></ul><p>执行如下命令查看tracker是否运行起来</p><pre><code>docker container ls</code></pre><p>如果想停止tracker服务，可以执行如下命令</p><pre><code>docker container stop tracker</code></pre><p>停止后，重新运行tracker，可以执行如下命令</p><pre><code>docker container start tracker</code></pre><h2 id="3-运行storage"><a href="#3-运行storage" class="headerlink" title="3. 运行storage"></a><a name="t2" style="outline-style: initial; outline-width: 0px; color: rgb(78, 161, 219); cursor: pointer; word-break: break-all;"></a>3. 运行storage</h2><p>执行如下命令开启storage服务</p><pre><code>docker run -dti --network=host --name storage -e TRACKER_SERVER=192.168.99.100:22122 -v /var/fdfs/storage:/var/fdfs delron/fastdfs storage</code></pre><ul><li>TRACKER_SERVER=本机的ip地址:22122 本机ip地址不要使用127.0.0.1</li><li>我们将fastDFS storage运行目录映射到本机的/var/fdfs/storage目录中</li></ul><p>执行如下命令查看storage是否运行起来</p><pre><code>docker container ls</code></pre><p>如果想停止storage服务，可以执行如下命令</p><pre><code>docker container stop storage</code></pre><p>停止后，重新运行storage，可以执行如下命令</p><pre><code>docker container start storage</code></pre><p><span style="outline-style: initial; outline-width: 0px; word-break: break-all; font-weight: 700;">注意：如果无法重新运行，可以删除<code>/var/fdfs/storage/data</code>目录下的<code>fdfs_storaged.pid</code> 文件，然后重新运行storage。</span></p><p><span style="outline-style: initial; outline-width: 0px; word-break: break-all; font-weight: 700;"><span style="letter-spacing: 0.2px;"><font color="#ff0000">警告：我此处使用的是win10安装的docker，如果你使用云服务器，记得在安全组开放22122和8888这两个端口，否则将代码将无法连接。</font></span></span></p><p><span style="outline-style: initial; outline-width: 0px; word-break: break-all; font-weight: 700;">项目地址：<a href="https://github.com/HWYWL/spring-boot-docker-fsatdfs" target="_blank" rel="noopener">https://github.com/HWYWL/spring-boot-docker-fsatdfs</a></span></p><p><span style="outline-style: initial; outline-width: 0px; word-break: break-all; font-weight: 700;">效果图：</span><a href="http://www.hwy.ac.cn/upload/2018/08/72qoojamq0iicr4lobc95ijmpo.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="http://www.hwy.ac.cn/upload/2018/08/72qoojamq0iicr4lobc95ijmpo.png" class="lazyload"></a></p></body></html>]]></content>
      
      
      <categories>
          
          <category> Spring Boot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> Spring Boot </tag>
            
            <tag> FastDFS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java内存模型和Java并发</title>
      <link href="/2018/08/24/Java%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B%E5%92%8CJava%E5%B9%B6%E5%8F%91/"/>
      <url>/2018/08/24/Java%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B%E5%92%8CJava%E5%B9%B6%E5%8F%91/</url>
      
        <content type="html"><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script></head><body><p>Semaphore（信号量）<br>Semaphore（信号量）是一个线程同步结构，用于在线程间传递信号，以避免出现信号丢失，或者像锁一样用于保护一个关键区域。</p><a id="more"></a><h1 id="Semaphore（信号量）"><a href="#Semaphore（信号量）" class="headerlink" title="Semaphore（信号量）"></a>Semaphore（信号量）</h1><p>Semaphore（信号量）是一个线程同步结构，用于在线程间传递信号，以避免出现信号丢失，或者像锁一样用于保护一个关键区域。</p><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>面试Java，必然要被问Java内存模型和Java并发开发。我被问到的时候，心里慌得一批，“额，是在《Thinking in Java》里面写的吗？果然每天增删改太low了”。</p><p><a href="https://i.imgur.com/HU4Wb7j.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.imgur.com/HU4Wb7j.jpg" class="lazyload"></a><br><a href="https://i.imgur.com/nekdQFv.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.imgur.com/nekdQFv.jpg" class="lazyload"></a><br><a href="https://i.imgur.com/UKXLLTh.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.imgur.com/UKXLLTh.jpg" class="lazyload"></a><br><a href="https://i.imgur.com/ahXyP3Q.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.imgur.com/ahXyP3Q.jpg" class="lazyload"></a></p><p>我希望能解释的再简单一些，以上都不用</p><p>Java 并发代码</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">public class Example1 {</span><br><span class="line">    public static int count = 0;</span><br><span class="line">    public static int clientTotal = 5000;</span><br><span class="line">    public static void main(String[] args) throws Exception {</span><br><span class="line">        ExecutorService executorService = Executors.newCachedThreadPool();</span><br><span class="line">        for (int i = 0; i < clientTotal ; i++) {</span><br><span class="line">            executorService.execute(() -> {</span><br><span class="line">                try {</span><br><span class="line">                    add();</span><br><span class="line">                } catch (Exception e) {</span><br><span class="line">                    log.error("exception", e);</span><br><span class="line">                }</span><br><span class="line">            });</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    private static void add() {</span><br><span class="line">        count++;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p>如果上面代码执行，count的值是多少？（为了说明重点问题，没有写最后打印的代码）5000？多次运行的结果，count的值是小于5000的。</p><p>解释一下上面的程序，首先定义了一个线程池，启动5000个线程执行add()操作，add函数处理静态成员变量count。</p><p>如果程序顺序调用，count的值应该是5000。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">for(int i=0;i<5000;i++){</span><br><span class="line">    add();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p>复制代码但是线程池启动多线程，是并发执行的。每个线程启动之后，不管是否运行结束，下一个线程会马上启动。</p><p>启动线程的过程，是一个异步过程，启动线程立即返回，启动下一个进程。</p><p>当多个线程对同一个变量add进行操作的时候，就会发生写写冲突。</p><p>线程1、线程2 同时对值为0的变量进行操作，结果返回1，而不是2。如果这个地方想不明白，就请留言，或者看看文章顶部那些原理图。</p><p><strong>要不简单点，记住“多线程对全局变量的写操作会发生冲突”。</strong><br><strong>答案，声明原子变量 AtomicInteger count</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">public class ConcurrentSemaphore {</span><br><span class="line">    // 请求总数</span><br><span class="line">    public static int clientTotal = 5000;</span><br><span class="line"></span><br><span class="line">    // 同时并发执行的线程数</span><br><span class="line">    public static int threadTotal = 200;</span><br><span class="line"></span><br><span class="line">    public static AtomicInteger count = new AtomicInteger(0);</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws Exception {</span><br><span class="line">        ExecutorService executorService = Executors.newCachedThreadPool();</span><br><span class="line">        final Semaphore semaphore = new Semaphore(threadTotal);</span><br><span class="line">        final CountDownLatch countDownLatch = new CountDownLatch(clientTotal);</span><br><span class="line">        for (int i = 0; i < clientTotal ; i++) {</span><br><span class="line">            executorService.execute(() -> {</span><br><span class="line">                try {</span><br><span class="line">                    semaphore.acquire();</span><br><span class="line">                    add();</span><br><span class="line">                    semaphore.release();</span><br><span class="line">                } catch (Exception e) {</span><br><span class="line">                    log.error("exception", e);</span><br><span class="line">                }</span><br><span class="line">                countDownLatch.countDown();</span><br><span class="line">            });</span><br><span class="line">        }</span><br><span class="line">        countDownLatch.await();</span><br><span class="line">        executorService.shutdown();</span><br><span class="line">        log.info("count:{}", count.get());</span><br><span class="line">    }</span><br><span class="line">    private static void add() {</span><br><span class="line">        count.incrementAndGet();</span><br><span class="line">        log.info(" 线程:[" + Thread.currentThread().getName() + "] " + count.get());</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p>注，上面的代码用了生成者消费者模式，5000个生产者，200个消费者，对程序并发做一定限制，防止5000个线程卡死计算机。</p><p>内存模型，也说点简单的</p><p><strong>栈（heap），函数加载的时候，为函数内部变量分配的空间。和父函数的内部变量和运行指针共享同一块区域。</strong></p><p><strong>函数运行时，new的空间，都是放在堆中的。</strong></p><p>这个就是C的内存模型，做shellcode的基础知识。</p></body></html>]]></content>
      
      
      <categories>
          
          <category> 分布式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 高并发 </tag>
            
            <tag> 分布式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx基础配置</title>
      <link href="/2018/08/24/Nginx%E5%9F%BA%E7%A1%80%E9%85%8D%E7%BD%AE/"/>
      <url>/2018/08/24/Nginx%E5%9F%BA%E7%A1%80%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script></head><body><h1 id="Nginx基础配置"><a href="#Nginx基础配置" class="headerlink" title="Nginx基础配置"></a>Nginx基础配置</h1><p>以我的博客为例我们分为两种配置，一种普通的反向代理http，另一种是https</p><h3 id="配置http"><a href="#配置http" class="headerlink" title="配置http"></a>配置http</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">server {</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name www.hwy.ac.cn; #将 www.yourdomain.com 替换为之前注册并解析的域名</span><br><span class="line">    root /root/firekylin;</span><br><span class="line">    set $node_port 此处替换为项目端口号;</span><br><span class="line"></span><br><span class="line">    index index.js index.html index.htm;</span><br><span class="line"></span><br><span class="line">    location ^~ /.well-known/acme-challenge/ {</span><br><span class="line">      alias /root/firekylin/ssl/challenges/;</span><br><span class="line">      try_files $uri = 404;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    location / {</span><br><span class="line">        proxy_http_version 1.1;</span><br><span class="line">        proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">        proxy_set_header Host $http_host;</span><br><span class="line">        proxy_set_header X-NginX-Proxy true;</span><br><span class="line">        proxy_set_header Upgrade $http_upgrade;</span><br><span class="line">        proxy_set_header Connection "upgrade";</span><br><span class="line">        proxy_pass http://127.0.0.1:$node_port$request_uri;</span><br><span class="line">        proxy_redirect off;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    location = /development.js {</span><br><span class="line">        deny all;</span><br><span class="line">    }</span><br><span class="line">    location = /testing.js {</span><br><span class="line">        deny all;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    location = /production.js {</span><br><span class="line">        deny all;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><h3 id="配置https"><a href="#配置https" class="headerlink" title="配置https"></a>配置https</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">server{</span><br><span class="line">    listen 443;</span><br><span class="line">    server_name hwy.ac.cn www.hwy.ac.cn;</span><br><span class="line">    root /root/firekylin;</span><br><span class="line">    set $node_port 此处替换为项目端口号;</span><br><span class="line"></span><br><span class="line">    ssl on;</span><br><span class="line">    ssl_certificate  /xxx/xxx/xxx.crt;</span><br><span class="line">    ssl_certificate_key /xxx/xxx/xxx.key;</span><br><span class="line"></span><br><span class="line">    ssl_session_timeout 5m;</span><br><span class="line">    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;</span><br><span class="line">    ssl_ciphers ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA:ECDHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA;</span><br><span class="line">    ssl_session_cache shared:SSL:50m;</span><br><span class="line">    ssl_dhparam %path/ssl/dhparams.pem;</span><br><span class="line">    ssl_prefer_server_ciphers on;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    index index.js index.html index.htm;</span><br><span class="line"></span><br><span class="line">    location ^~ /.well-known/acme-challenge/ {</span><br><span class="line">      alias /root/firekylin/ssl/challenges/;</span><br><span class="line">      try_files $uri = 404;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">   location / {</span><br><span class="line">        proxy_http_version 1.1;</span><br><span class="line">        proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">        proxy_set_header Host $http_host;</span><br><span class="line">        proxy_set_header X-NginX-Proxy true;</span><br><span class="line">        proxy_set_header Upgrade $http_upgrade;</span><br><span class="line">        proxy_set_header Connection "upgrade";</span><br><span class="line">        proxy_pass http://127.0.0.1:$node_port$request_uri;</span><br><span class="line">        proxy_redirect off;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    location = /development.js {</span><br><span class="line">        deny all;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    location = /testing.js {</span><br><span class="line">        deny all;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    location = /production.js {</span><br><span class="line">        deny all;</span><br><span class="line">   }</span><br><span class="line">}</span><br><span class="line">server {</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name hwy.ac.cn www.hwy.ac.cn;</span><br><span class="line">    rewrite ^(.*) https://hwy.ac.cn$1 permanent;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p>其他项目可以参考配置，大部分配置是一样的。</p></body></html>]]></content>
      
      
      <categories>
          
          <category> Nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx反向代理本地目录</title>
      <link href="/2018/08/24/nginx%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E6%9C%AC%E5%9C%B0%E7%9B%AE%E5%BD%95/"/>
      <url>/2018/08/24/nginx%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E6%9C%AC%E5%9C%B0%E7%9B%AE%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script></head><body><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">server {</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name www.avenger.com;    //在host中把这个地址设置为127.0.0.1</span><br><span class="line">    index index.html index.htm;</span><br><span class="line"></span><br><span class="line">    autoindex on;</span><br><span class="line">    autoindex_exact_size on;</span><br><span class="line">    autoindex_localtime on;</span><br><span class="line"></span><br><span class="line">    location / {</span><br><span class="line">        root D:/work/code/fed-static;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div></body></html>]]></content>
      
      
      <categories>
          
          <category> Nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于Spring Boot 2.x 的solr-7.3.1使用</title>
      <link href="/2018/08/21/%E5%9F%BA%E4%BA%8ESpring%20Boot%202.x%20%E7%9A%84solr-7.3.1%E4%BD%BF%E7%94%A8/"/>
      <url>/2018/08/21/%E5%9F%BA%E4%BA%8ESpring%20Boot%202.x%20%E7%9A%84solr-7.3.1%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script></head><body><p>下载安装Apache Solr 7.3.1<br>下载地址：<a href="http://archive.apache.org/dist/lucene/solr/7.3.1/" target="_blank" rel="noopener">http://archive.apache.org/dist/lucene/solr/7.3.1/</a></p><a id="more"></a><h1 id="spring-boot-solr"><a href="#spring-boot-solr" class="headerlink" title="spring-boot-solr"></a>spring-boot-solr</h1><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>下载安装Apache Solr 7.3.1<br>下载地址：<a href="http://archive.apache.org/dist/lucene/solr/7.3.1/" target="_blank" rel="noopener">http://archive.apache.org/dist/lucene/solr/7.3.1/</a><br><a href="https://i.imgur.com/wq4835Z.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.imgur.com/wq4835Z.png" class="lazyload"></a><br>解压后，在bin文件夹下编写一个名为 启动.bat的启动文件，把一下命令粘贴进去</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">solr.cmd start -p 8888</span><br></pre></td></tr></tbody></table></figure></div><p><a href="https://i.imgur.com/MGahKjM.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.imgur.com/MGahKjM.png" class="lazyload"></a></p><p>到这里一般双击就可以启动了<br><a href="https://i.imgur.com/9RP8mxS.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.imgur.com/9RP8mxS.png" class="lazyload"></a></p><p>访问<a href="http://localhost:8888" target="_blank" rel="noopener">http://localhost:8888</a><br><a href="https://i.imgur.com/9Ojl3sx.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.imgur.com/9Ojl3sx.png" class="lazyload"></a></p><p>接下来我们新建一个core用于存储我们的数据<br><a href="https://i.imgur.com/1pOoWaG.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.imgur.com/1pOoWaG.png" class="lazyload"></a><br>我们会发现无发创建core</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">solr-7.3.1/server/solr/configsets/_default/</span><br><span class="line">此时我们需要拷贝以上路径下的conf文件夹到以下路径中</span><br><span class="line">solr-7.3.1/server/solr/baike_core</span><br></pre></td></tr></tbody></table></figure></div><p>关闭命令窗口。重新双击启动，然后我们就可以创建这个core了<br><a href="https://i.imgur.com/fQ2kwLt.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.imgur.com/fQ2kwLt.png" class="lazyload"></a></p><p>我们关闭命令窗口，虽然可以使用，不过我们还需要配置一下中文分词器，没分词之前<br><a href="https://i.imgur.com/jasGf5k.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.imgur.com/jasGf5k.png" class="lazyload"></a></p><p>为了方便中文分词，我们这里使用ik-analyzer分词器<br>下载地址：<a href="http://central.maven.org/maven2/com/github/magese/ik-analyzer/7.4.0/ik-analyzer-7.4.0.jar" target="_blank" rel="noopener">http://central.maven.org/maven2/com/github/magese/ik-analyzer/7.4.0/ik-analyzer-7.4.0.jar</a><br>把下载的jar包复制到以下路径</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">solr-7.3.1/server/solr-webapp/webapp/WEB-INF/lib</span><br></pre></td></tr></tbody></table></figure></div><p><a href="https://i.imgur.com/1KUcb5T.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.imgur.com/1KUcb5T.png" class="lazyload"></a></p><p>然后到以下目录中打开managed-schema文件</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">solr-7.3.1/server/solr/baike_core/conf</span><br></pre></td></tr></tbody></table></figure></div><p>在后面加上以下配置代码</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><!-- ik分词器 --></span><br><span class="line"><fieldtype name="text_ik" class="solr.TextField"></fieldtype></span><br><span class="line">  <analyzer type="index"></analyzer></span><br><span class="line">      <tokenizer class="org.wltea.analyzer.lucene.IKTokenizerFactory" usesmart="false" conf="ik.conf"></tokenizer></span><br><span class="line">      <filter class="solr.LowerCaseFilterFactory"></filter></span><br><span class="line">  </span><br><span class="line">  <analyzer type="query"></analyzer></span><br><span class="line">      <tokenizer class="org.wltea.analyzer.lucene.IKTokenizerFactory" usesmart="true" conf="ik.conf"></tokenizer></span><br><span class="line">      <filter class="solr.LowerCaseFilterFactory"></filter></span><br><span class="line">  </span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure></div><p><a href="https://i.imgur.com/7rYbKKl.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.imgur.com/7rYbKKl.png" class="lazyload"></a></p><p>我们重新启动solr，再分词测试<br><a href="https://i.imgur.com/d8yr3ys.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.imgur.com/d8yr3ys.png" class="lazyload"></a></p><p>好了接下来就是写测试代码了,运行效果：<br><a href="https://i.imgur.com/uG9F7Aa.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.imgur.com/uG9F7Aa.jpg" class="lazyload"></a></p><p>代码：<a href="https://github.com/HWYWL/spring-boot-2.x-examples/tree/master/spring-boot-solr" target="_blank" rel="noopener">https://github.com/HWYWL/spring-boot-2.x-examples/tree/master/spring-boot-solr</a></p><h3 id="问题建议"><a href="#问题建议" class="headerlink" title="问题建议"></a>问题建议</h3><ul><li>联系我的邮箱：<a href="mailto:ilovey_hwy@163.com">ilovey_hwy@163.com</a></li><li>我的博客：<a href="http://www.hwy.ac.cn" target="_blank" rel="noopener">http://www.hwy.ac.cn</a></li><li>GitHub：<a href="https://github.com/HWYWL" target="_blank" rel="noopener">https://github.com/HWYWL</a></li></ul></body></html>]]></content>
      
      
      <categories>
          
          <category> 搜索引擎 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Boot </tag>
            
            <tag> Solr </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Docker安装RabbitMQ</title>
      <link href="/2018/08/18/%E4%BD%BF%E7%94%A8Docker%E5%AE%89%E8%A3%85RabbitMQ/"/>
      <url>/2018/08/18/%E4%BD%BF%E7%94%A8Docker%E5%AE%89%E8%A3%85RabbitMQ/</url>
      
        <content type="html"><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script></head><body><p>获取rabbit镜像：<br>docker pull rabbitmq:management</p><a id="more"></a><p>获取rabbit镜像：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">docker pull rabbitmq:management</span><br><span class="line"><span class="string">``</span><span class="string">`  </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">创建并运行容器：</span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>js</span><br><span class="line">docker run -d --hostname my-rabbit --name rabbit -p <span class="number">8080</span>:<span class="number">15672</span> rabbitmq:management  </span><br><span class="line">--hostname：指定容器主机名称  </span><br><span class="line">--name:指定容器名称  </span><br><span class="line">-p:将mq端口号映射到本地  </span><br><span class="line"></span><br><span class="line">或在运行时设置用户和密码</span><br><span class="line">docker run -d --hostname my-rabbit --name rabbit -e RABBITMQ_DEFAULT_USER=admin -e RABBITMQ_DEFAULT_PASS=admin -p <span class="number">15672</span>:<span class="number">15672</span> -p <span class="number">5672</span>:<span class="number">5672</span> -p <span class="number">25672</span>:<span class="number">25672</span> -p <span class="number">61613</span>:<span class="number">61613</span> -p <span class="number">1883</span>:<span class="number">1883</span> rabbitmq:management</span><br><span class="line"></span><br><span class="line"><span class="number">15672</span>：控制台端口号</span><br><span class="line"></span><br><span class="line"><span class="number">5672</span>：应用访问端口号</span><br><span class="line"><span class="string">``</span><span class="string">`  </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">查看rabbit运行状况：</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">![](https://images2017.cnblogs.com/blog/1081448/201710/1081448-20171027152847117-1098449262.png)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>js</span><br><span class="line">容器运行正常，使用http:<span class="comment">//192.168.99.100:15672访问RabbitMQ控制台</span></span><br></pre></td></tr></tbody></table></figure></div></body></html>]]></content>
      
      
      <categories>
          
          <category> 消息队列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> RabbitMQ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx 简明教程</title>
      <link href="/2018/08/15/Nginx%20%E7%AE%80%E6%98%8E%E6%95%99%E7%A8%8B/"/>
      <url>/2018/08/15/Nginx%20%E7%AE%80%E6%98%8E%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script></head><body><p>NGINX 是一款来自俄罗斯的HTTP 和反向代理（reverse proxy）服务器、邮件服务器，以及通用的 TCP/UDP 代理服务器，以其高性能被业界广泛采用。本文通过最简洁的方式，将 NGINX 核心应用做下介绍。</p><a id="more"></a><p>NGINX 是一款来自俄罗斯的HTTP 和反向代理（reverse proxy）服务器、邮件服务器，以及通用的 TCP/UDP 代理服务器，以其高性能被业界广泛采用。本文通过最简洁的方式，将 NGINX 核心应用做下介绍。</p><h2 id="什么是-NGINX"><a href="#什么是-NGINX" class="headerlink" title="什么是 NGINX"></a>什么是 NGINX</h2><p>NGINX是一个免费的、开源的、高性能的 HTTP 服务器和反向代理，以及一个 IMAP/POP3 代理服务器。 NGINX以其高性能、稳定性、丰富的功能集、简单的配置和低资源消耗而闻名。</p><p>NGINX 是为解决<a href="http://www.kegel.com/c10k.html" target="_blank" rel="noopener">C10K</a> 问题而编写的少数服务器之一。与传统服务器不同，NGINX 不依赖于线程来处理请求。相反，它使用更加可扩展的事件驱动（异步）架构。这种架构在负载下使用小的但更重要的是可预测的内存量。即使您不希望处理数千个并发请求，您仍然可以从 NGINX 的高性能和小内存中获益。 NGINX 在各个方向扩展：从最小的 VPS 一直到大型服务器集群。</p><h2 id="控制语句"><a href="#控制语句" class="headerlink" title="控制语句"></a>控制语句</h2><p>NGINX 启动后，有一个主进程（master process）和一个或多个工作进程（worker process），主进程的作用主要是读入和检查NGINX的配置信息，以及维护工作进程；工作进程才是真正处理客户端请求的进程。具体要启动多少个工作进程，可以在 NGINX 的配置文件<code>nginx.conf</code>中通过<code>worker_processes</code>指令指定。 可以通过以下这些命令来控制 NGINX：</p><pre><code class="js">nginx -s [ stop | quit | reopen | reload ]</code></pre><p>其中：</p><ul><li><code>nginx -s stop</code>： 强制停止NGINX，不管工作进程当前是否正在处理用户请求，都会立即退出。</li><li><code>nginx -s quit</code>：“优雅地”退出NGINX，执行这个命令后，工作进程会将当前正在处理的请求处理完毕后，再退出。</li><li><code>nginx -s reload</code>：重载配置信息。当NGINX的配置文件改变之后，同过执行这个命令，使更改的配置信息生效，而无需重新启动nginx.</li><li><code>nginx -s reopen</code>：重新打开日志文件。</li></ul><h2 id="配置服务器名称"><a href="#配置服务器名称" class="headerlink" title="配置服务器名称"></a>配置服务器名称</h2><p>服务器名称是用<code>server_name</code>指令来定义的，并且它决定了哪一个<code>server</code>块将用来处理给定的请求。可以使用精确名称、通配符、正则表达式来定义服务器名称。</p><pre><code class="js">server {    listen <span class="number">80</span>;    server_name example.org www.example.org;    ...  }  server {    listen <span class="number">80</span>;    server_name _.example.org;    ...  }  server {    listen <span class="number">80</span>;    server_name mail._;    ...  }  server {    listen <span class="number">80</span>;    server_name ~^(?<span class="xml"><span class="tag"><<span class="name">user</span>></span>.+).example.net$;  </span><span class="xml">  ...  </span><span class="xml">}</span></code></pre><p>当寻找一个虚拟服务器的名字，如果指定的名称匹配多个变体，例如，通配符和正则表达式都匹配，将会按照以下的顺序选择第一个匹配的变体：</p><ul><li>精确名称</li><li>以星号（<em>）开头的最长的通配符，例如“</em>.example.org”</li><li>以星号（_）结尾的最长的通配符，例如“mail._”</li><li>第一个匹配的正则表达式（根据在配置文件中出现的顺序）</li></ul><h2 id="配置-HTTPS-服务器"><a href="#配置-HTTPS-服务器" class="headerlink" title="配置 HTTPS 服务器"></a>配置 HTTPS 服务器</h2><p>修改 <code>conf/nginx.conf</code> 文件，必须在配置文件 server 块中的监听指令 listen 后启用 ssl 参数，并且指定服务器证书 <code>ssl_certificate</code> 和私钥 <code>ssl_certificate_key</code> 的位置：</p><pre><code class="js">server {    listen <span class="number">443</span> ssl;    server_name www.example.com;    ssl_certificate www.example.com.crt;    ssl_certificate_key www.example.com.key;    ssl_protocols TLSv1 TLSv1<span class="number">.1</span> TLSv1<span class="number">.2</span>;    ssl_ciphers HIGH:!aNULL:!MD5;    ...  }</code></pre><p>服务器证书是一个公共实体，它被发送给连接到服务器的每一个客户机。私钥是一个安全实体，应该存储在具有受限访问的文件中，但它必须可被nginx主进程读取。私钥也可以存储在与服务器证书相同的文件中：</p><pre><code class="js">ssl_certificate www.example.com.cert;  ssl_certificate_key www.example.com.cert;</code></pre><p>在这种情况下，这个证书文件的访问权限也应受到限制。虽然证书和密钥存储在一个文件中，但只有证书被发送到客户端。</p><p>指令 <code>ssl_protocols</code> 和 <code>ssl_ciphers</code> 可用于限制仅包括强版本和密码的 SSL/TLS 连接。 默认情况下，NGINX 使 用<code>ssl_protocols TLSv1 TLSv1.1 TLSv1.2</code>版本和<code>ssl_ciphers HIGH:!aNULL:!MD5</code>密码，因此通常不需要显式地配置它们。需要注意的是，这些指令的默认值在不同的版本里面已经变更好几次了。</p><h2 id="作为-HTTP-负载均衡器"><a href="#作为-HTTP-负载均衡器" class="headerlink" title="作为 HTTP 负载均衡器"></a>作为 HTTP 负载均衡器</h2><p>跨多个应用程序实例的负载均衡是优化资源利用率，最大限度地提高吞吐量，降低延迟，并确保容错配置一个常用的技术。</p><p>NGINX 支持如下负载均衡的机制（或方法）：</p><h3 id="1-轮询"><a href="#1-轮询" class="headerlink" title="1. 轮询"></a>1. 轮询</h3><p>如果没有指定负载均衡的方法，那么 NGINX 默认采用的是轮询的方式。最简单的负载均衡配置如下：</p><pre><code class="js">http {    upstream myapp1 {      server srv1.example.com;      server srv2.example.com;      server srv3.example.com;    }    server {      listen <span class="number">80</span>;      location / {        proxy_pass [http:<span class="comment">//myapp1](http://myapp1);  </span>    }    }  }</code></pre><p>3个同样实例的应用（srv1-srv3）是采用轮询方式。所有请求被代理到一组服务<code>myapp1</code>，同时，NGINX 运用 HTTP 负载均衡来分发请求。</p><p>反向代理被应用在 NGINX 内，包括负载均衡针对 HTTP、HTTPS、FASTCGI、uwsgi、SCGI 以及 memcached。</p><p>配置负载均衡针对 HTTPS 替代 HTTP 的话，仅仅使用 https 协议即可（proxy_pass <a href="https://myapp1）。" target="_blank" rel="noopener">https://myapp1）。</a></p><p>在为 FASTCGI、uwsgi、SCGI 或 memcached 设置负载均衡时，分别使用 fastcgi_pass、uwsgi_pass、scgi_pass 和 memcached_pass 指令。</p><h3 id="2-最少连接"><a href="#2-最少连接" class="headerlink" title="2. 最少连接"></a>2. 最少连接</h3><p>在一些请求需要更长时间才能完成的情况下，最少连接可以更公正地控制应用程序实例的负载。</p><p>使用最少连接的负载平衡，NGINX 将不会加重一个有过多请求的应用服务负担，而是将它分发新的请求给最不繁忙的服务器。</p><p>在 NGINX 中需要通过设置<code>least_conn</code>来激活最少连接的负载均衡策略配置：</p><pre><code class="js">upstream myapp1 {    least_conn;    server srv1.example.com;    server srv2.example.com;    server srv3.example.com;  }</code></pre><h3 id="3-IP-哈希（会话持久）"><a href="#3-IP-哈希（会话持久）" class="headerlink" title="3. IP 哈希（会话持久）"></a>3. IP 哈希（会话持久）</h3><p>注意，采用轮询或者最少连接的负载均衡策略，每个客户端的后续请求可能被分配带不同的服务器，不能保证同一个客户端总是指向同一个服务。如果需要告诉客户端分配到一个特定的应用服务，换句话，就是保持客户端的会话粘性（sticky）或者会话持久性（persitent），即总是尝试选着同一个特定的服务器，IP 哈希 负载均衡机制可以被使用。</p><p>采用 IP 哈希的策略，客户端的 IP 地址被用作一个哈希 key，决定哪个服务应该被选中来服务客户端的请求。这种方式，确保了同一个客户端来的请求将总是被指向同一个服务，除非这个服务不可用了。</p><p>配置IP 哈希负载均衡，只需要通过设置<code>ip_hash</code>来激活：</p><pre><code class="js">upstream myapp1 {    ip_hash;    server srv1.example.com;    server srv2.example.com;    server srv3.example.com;  }</code></pre><h3 id="权重（weight）"><a href="#权重（weight）" class="headerlink" title="权重（weight）"></a>权重（weight）</h3><p>可以通过使用服务器的权重来影响 NGINX 的负载均衡算法，在上述轮询、最少请求、基于IP 哈希负载均衡配置中，服务器的权重没有配置，意味着所有服务器的权重都是一样的。特别是轮询，它意味着或多或少平等的分发请求到服务器（请求够多，并且请求以均匀方式进行处理，并完成够快）</p><p>当配置了一个 weight 变量到一个指定的服务后，权重被作为一个 NGINX 的负载均衡的决定的一部分：</p><pre><code class="js">upstream myapp1 {    server srv1.example.com weight=<span class="number">3</span>;    server srv2.example.com;    server srv3.example.com;  }</code></pre><p>采用上面的配置，如果来了5个请求，3个到srv1，1个到srv2,1个到srv3。在最近的NGINX版本中，同样可以使用权重针对最少连接和IP 哈希的负载均衡策略。</p><h3 id="健康监测"><a href="#健康监测" class="headerlink" title="健康监测"></a>健康监测</h3><p>反向代理在 NGINX 中实现了被动的健康监测，如果响应从一个特定的服务器失败，携带着错误，NGINX 将标记这个服务器是失败的，并将尝试一段时间避免选择这个服务器作为后续请求的服务器。</p><p><code>fail_timeout</code> 和 <code>max_fails</code> 用于设定指定时间内，应该发生连续不成功的数目。默认<code>max_fail</code>等于1，如果设置成0，相当于关闭这个服务器的健康监测。<code>fail_timeout</code>参数，定义多久服务器被标识失败。过了服务器<code>fail_timeout</code>失败超时间隔后，NGINX 将开始探测存活的客户端的请求，如果探测成功，服务被标识成存活状态。</p><h2 id="压缩与解压"><a href="#压缩与解压" class="headerlink" title="压缩与解压"></a>压缩与解压</h2><p>压缩响应通常会显着减少传输数据的大小。 然而，由于压缩在运行时发生，所以会增加处理开销，这可能会对性能产生负面影响。</p><p>在向客户端发送响应之前，NGINX 会执行压缩，但不会“重复压缩”已经压缩过的响应。</p><h3 id="启用压缩"><a href="#启用压缩" class="headerlink" title="启用压缩"></a>启用压缩</h3><p>要启用压缩，在 gzip 指令上请使用<code>on</code>参数:</p><pre><code class="js">gzip on;</code></pre><p>默认情况下，NGINX 仅压缩使用MIME 类型 为 <code>text/html</code>的响应。要压缩其他 MIME 类型的响应，请包含<code>gzip_types</code>指令并列出相应的类型。</p><pre><code class="js">gzip_types text/plain application/xml;</code></pre><p>要指定要压缩的响应的最小长度，请使用<code>gzip_min_length</code>指令。默认值为20字节，下面示例调整为1000：</p><pre><code class="js">gzip_min_length <span class="number">1000</span>;</code></pre><p>默认情况下，NGINX 不会压缩对代理请求的响应（来自代理服务器的请求）。请求是否来自代理服务器是由请求中<code>Via</code>头字段的是否存来确定的。要配置这些响应的压缩，请使用<code>gzip_proxied</code>指令。该指令具有多个参数来指定 NGINX 应压缩哪种代理请求。例如，仅对不会在代理服务器上缓存的请求进行压缩响应，为此，<code>gzip_proxied</code>指令具有指示 NGINX 在响应中检查<code>Cache-Control</code>头字段的参数，如果值是 no-cache、no-store 或 private，则压缩响应。另外，您必须包括 expired 的参数来检查<code>Expires</code>头字段的值。这些参数在以下示例中与 auth 参数一起设置，该参数检查<code>Authorization</code>头字段的存在（授权响应特定于最终用户，并且通常不被缓存）：</p><pre><code class="js">gzip_proxied no-cache no-store private expired auth;</code></pre><p>与大多数其他指令一样，配置压缩的指令可以包含在<code>http</code>上下文中，也可以包含在 <code>server</code> 或 <code>location</code> 块中。</p><p>gzip 压缩的整体配置可能如下所示。</p><pre><code class="js">server {    gzip on;    gzip_types text/plain application/xml;    gzip_proxied no-cache no-store private expired auth;    gzip_min_length <span class="number">1000</span>;    ...  } </code></pre><h3 id="启用解压"><a href="#启用解压" class="headerlink" title="启用解压"></a>启用解压</h3><p>某些客户端不支持使用 gzip 编码方法的响应。同时，可能需要存储压缩数据，或者即时压缩响应并将它们存储在缓存中。为了都能成功地服务于接受或者不接受压缩数据的客户端，针对后一种类型的客户端时，NGINX 可以在将数据发送时即时解压缩数据。</p><p>要启用运行时解压缩，请使用<code>gunzip</code>指令。</p><pre><code class="js">location /storage/ {    gunzip on;    ...  }</code></pre><p><code>gunzip</code>指令可以在与<code>gzip</code>指令相同的上下文中指定：</p><pre><code class="js">server {    gzip on;    gzip_min_length <span class="number">1000</span>;    gunzip on;    ...  }</code></pre><p>请注意，此指令在单独的模块中定义（见<code>ngx_http_gunzip_module</code><a href="https://nginx.org/en/docs/http/ngx_http_gunzip_module.html" target="_blank" rel="noopener">http://nginx.org/en/docs/http/ngx_http_gunzip_module.html</a>），默认情况下可能不包含在开源 NGINX 构建中。</p><h3 id="发送压缩文件"><a href="#发送压缩文件" class="headerlink" title="发送压缩文件"></a>发送压缩文件</h3><p>要将文件的压缩版本发送到客户端而不是常规文件，请在适当的上下文中将<code>gzip_static</code>指令设置为 on。</p><pre><code class="js">location / {    gzip_static on;  }</code></pre><p>在这种情况下，为了服务<code>/path/to/file</code>的请求，NGINX 尝试查找并发送文件<code>/path/to/file.gz</code>。如果文件不存在，或客户端不支持 gzip，则 NGINX 将发送未压缩版本的文件。</p><p>请注意，<code>gzip_static</code>指令不启用即时压缩。它只是使用压缩工具预先压缩的文件。要在运行时压缩内容（而不仅仅是静态内容），请使用<code>gzip</code>指令。</p><p>该指令在单独的模块中定义（见<code>ngx_http_gzip_static_module</code><a href="https://nginx.org/en/docs/http/ngx_http_gzip_static_module.html" target="_blank" rel="noopener">http://nginx.org/en/docs/http/ngx_http_gzip_static_module.html</a>），默认情况下可能不包含在开源NGINX构建中。</p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul><li>《NGINX 教程》:<a href="https://github.com/waylau/nginx-tutorial" target="_blank" rel="noopener">https://github.com/waylau/nginx-tutorial</a></li></ul></body></html>]]></content>
      
      
      <categories>
          
          <category> Nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker容器名字冲突解决</title>
      <link href="/2018/08/07/Docker%E5%AE%B9%E5%99%A8%E5%90%8D%E5%AD%97%E5%86%B2%E7%AA%81%E8%A7%A3%E5%86%B3/"/>
      <url>/2018/08/07/Docker%E5%AE%B9%E5%99%A8%E5%90%8D%E5%AD%97%E5%86%B2%E7%AA%81%E8%A7%A3%E5%86%B3/</url>
      
        <content type="html"><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script></head><body><p>Docker容器名字冲突解决</p><a id="more"></a><p>– Docker容器名字冲突解决</p><pre><code class="js">docker: <span class="built_in">Error</span> response <span class="keyword">from</span> daemon: Conflict. The container name <span class="string">"/tracker"</span> is already <span class="keyword">in</span> use by container <span class="string">"73b9fc481e0316195ab89d4c4faa38c5a1012a84ce859a65488e983e9b415255"</span>. You have to remove (or rename) that container to be able to reuse that name.See <span class="string">'docker run --help'</span>.</code></pre><p>以上是错误的提示，我们发现有一个名为tracker的容器冲突了，此时我们使用命令进行查看</p><pre><code class="js">docker ps</code></pre><p>如果容器存在直接使用一下命令停止、删除</p><pre><code class="js">docker stop iddocker rm id</code></pre><p>如果容器不存在使用以下命令查看,就会找到存在的镜像</p><pre><code class="js">docker ps -a</code></pre><p>此时你可以使用删除，或者把他重启，记得后面跟上id参数</p><pre><code class="js">docker restart & docker stop & docker start</code></pre><p>注意：因为存在数据卷的原因，所以以前的数据不会被删除，可以放心大胆的删除镜像！！！</p></body></html>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用docker安装kafka</title>
      <link href="/2018/08/07/%E4%BD%BF%E7%94%A8docker%E5%AE%89%E8%A3%85kafka/"/>
      <url>/2018/08/07/%E4%BD%BF%E7%94%A8docker%E5%AE%89%E8%A3%85kafka/</url>
      
        <content type="html"><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script></head><body><ol><li>启动zookeeper容器</li><li>启动kafka容器</li><li>测试kafka</li><li>集群搭建</li><li>创建Replication为2，Partition为2的topic</li></ol><a id="more"></a><h3 id="1-启动zookeeper容器"><a href="#1-启动zookeeper容器" class="headerlink" title="1. 启动zookeeper容器"></a>1. 启动zookeeper容器</h3><pre><code>docker pull wurstmeister/zookeeperdocker run -d --name zookeeper -p 2181:2181 -t wurstmeister/zookeeper</code></pre><h3 id="2-启动kafka容器"><a href="#2-启动kafka容器" class="headerlink" title="2. 启动kafka容器"></a><a name="t1" style="outline-style: initial; outline-width: 0px; color: rgb(78, 161, 219); cursor: pointer; word-break: break-all;"></a>2. 启动kafka容器</h3><pre><code>docker pull wurstmeister/kafkadocker run  -d --name kafka -p 9092:9092 -e KAFKA_BROKER_ID=0 -e KAFKA_ZOOKEEPER_CONNECT=192.168.99.100:2181 -e KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://192.168.99.100:9092 -e KAFKA_LISTENERS=PLAINTEXT://0.0.0.0:9092 -t wurstmeister/kafka </code></pre><p>这里面主要设置了4个参数</p><pre><code>KAFKA_BROKER_ID=0               KAFKA_ZOOKEEPER_CONNECT=192.168.99.100:2181KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://192.168.99.100:9092KAFKA_LISTENERS=PLAINTEXT://0.0.0.0:9092</code></pre><p>中间两个参数的192.168.99.100改为宿主机器的IP地址，如果不这么设置，可能会导致在别的机器上访问不到kafka。</p><h3 id="3-测试kafka"><a href="#3-测试kafka" class="headerlink" title="3. 测试kafka"></a><a name="t2" style="outline-style: initial; outline-width: 0px; color: rgb(78, 161, 219); cursor: pointer; word-break: break-all;"></a>3. 测试kafka</h3><p>进入kafka容器的命令行</p><pre><code>docker exec -ti kafka /bin/bash</code></pre><p>进入kafka所在目录</p><pre><code>cd opt/kafka_2.11-2.0.0/</code></pre><h3 id="4-集群搭建"><a href="#4-集群搭建" class="headerlink" title="4. 集群搭建"></a><a name="t3" style="outline-style: initial; outline-width: 0px; color: rgb(78, 161, 219); cursor: pointer; word-break: break-all;"></a>4. 集群搭建</h3><p>使用docker命令可快速在同一台机器搭建多个kafka，只需要改变brokerId和端口</p><pre><code>docker run -d --name kafka1 \-p 9093:9093 \-e KAFKA_BROKER_ID=1 \-e KAFKA_ZOOKEEPER_CONNECT=192.168.99.100:2181 \-e KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://192.168.99.100:9093 \-e KAFKA_LISTENERS=PLAINTEXT://0.0.0.0:9093 -t wurstmeister/kafka</code></pre><h3 id="5-创建Replication为2，Partition为2的topic"><a href="#5-创建Replication为2，Partition为2的topic" class="headerlink" title="5. 创建Replication为2，Partition为2的topic"></a><a name="t4" style="outline-style: initial; outline-width: 0px; color: rgb(78, 161, 219); cursor: pointer; word-break: break-all;"></a>5. 创建Replication为2，Partition为2的topic</h3><p>在kafka容器中的opt/<span style="background-color: transparent; color: inherit; font-family: Menlo, Monaco, Consolas, " courier new", monospace; font-size: inherit; white-space: pre-wrap;">kafka_2.11-2.0.0</span>/目录下输入</p><pre><code>bin/kafka-topics.sh --create --zookeeper 192.168.99.100:2181 --replication-factor 2 --partitions 2 --topic partopic</code></pre><h3 id="6-查看topic的状态"><a href="#6-查看topic的状态" class="headerlink" title="6. 查看topic的状态"></a><a name="t5" style="outline-style: initial; outline-width: 0px; color: rgb(78, 161, 219); cursor: pointer; word-break: break-all;"></a>6. 查看topic的状态</h3><p>在kafka容器中的opt/<span style="background-color: transparent; color: inherit; font-family: Menlo, Monaco, Consolas, " courier new", monospace; font-size: inherit; white-space: pre-wrap;">kafka_2.11-2.0.0</span>/目录下输入</p><pre><code>bin/kafka-topics.sh --describe --zookeeper 192.168.99.100:2181 --topic partopic</code></pre><p>输出结果：</p><pre><code>Topic:partopic  PartitionCount:2    ReplicationFactor:2 Configs:    Topic: partopic Partition: 0    Leader: 0   Replicas: 0,1   Isr: 0,1    Topic: partopic Partition: 1    Leader: 0   Replicas: 1,0   Isr: 0,1</code></pre><p>显示每个分区的Leader机器为broker0，在broker0和1上具有备份，Isr代表存活的备份机器中存活的。<br>当停掉kafka1后，</p><pre><code>docker stop kafka1</code></pre><p>再查看topic状态，输出结果：</p><pre><code>Topic:partopic  PartitionCount:2    ReplicationFactor:2 Configs:    Topic: partopic Partition: 0    Leader: 0   Replicas: 0,1   Isr: 0    Topic: partopic Partition: 1    Leader: 0   Replicas: 1,0   Isr: 0</code></pre></body></html>]]></content>
      
      
      <categories>
          
          <category> 消息队列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> kafka </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker nginx安装与配置挂载并实现负载均衡</title>
      <link href="/2018/07/27/Docker%20nginx%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE%E6%8C%82%E8%BD%BD%E5%B9%B6%E5%AE%9E%E7%8E%B0%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/"/>
      <url>/2018/07/27/Docker%20nginx%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE%E6%8C%82%E8%BD%BD%E5%B9%B6%E5%AE%9E%E7%8E%B0%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/</url>
      
        <content type="html"><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script></head><body><p>在Docker下载Nginx镜像</p><p>docker pull nginx docker images</p><a id="more"></a><h3 id="Docker-nginx安装与配置挂载并实现负载均衡"><a href="#Docker-nginx安装与配置挂载并实现负载均衡" class="headerlink" title="Docker nginx安装与配置挂载并实现负载均衡"></a><strong><font color="#a5c6ce" style face="Arial Black">Docker nginx安装与配置挂载并实现负载均衡</font></strong></h3><ul><li><p><span style="outline-style: initial; outline-width: 0px; font-weight: 700; word-break: break-all;">在Docker下载Nginx镜像</span></p><p>docker pull nginx<br>docker images</p></li></ul><p><a href="https://img-blog.csdn.net/2018070213224659?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI2NjQxNzgx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" data-fancybox="group" data-caption="这里写图片描述" class="fancybox"><img alt="这里写图片描述" title="这里写图片描述" data-src="https://img-blog.csdn.net/2018070213224659?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI2NjQxNzgx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" class="lazyload"></a></p><ul><li><p><span style="outline-style: initial; outline-width: 0px; font-weight: 700; word-break: break-all;">创建挂载目录</span></p><p>mkdir -p /data/nginx/{conf,conf.d,html,logs}</p></li></ul><p><a href="https://img-blog.csdn.net/20180702132449202?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI2NjQxNzgx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" data-fancybox="group" data-caption="这里写图片描述" class="fancybox"><img alt="这里写图片描述" title="这里写图片描述" data-src="https://img-blog.csdn.net/20180702132449202?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI2NjQxNzgx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" class="lazyload"></a></p><ul><li><p><span style="outline-style: initial; outline-width: 0px; font-weight: 700; word-break: break-all;">编写nginx,conf配置文件，并放在文件夹中</span></p><h1 id="For-more-information-on-configuration-see"><a href="#For-more-information-on-configuration-see" class="headerlink" title="For more information on configuration, see:"></a>For more information on configuration, see:</h1><h1 id="Official-English-Documentation-http-nginx-org-en-docs"><a href="#Official-English-Documentation-http-nginx-org-en-docs" class="headerlink" title="* Official English Documentation: http://nginx.org/en/docs/"></a>* Official English Documentation: <a href="http://nginx.org/en/docs/" target="_blank" rel="noopener">http://nginx.org/en/docs/</a></h1><h1 id="Official-Russian-Documentation-http-nginx-org-ru-docs"><a href="#Official-Russian-Documentation-http-nginx-org-ru-docs" class="headerlink" title="* Official Russian Documentation: http://nginx.org/ru/docs/"></a>* Official Russian Documentation: <a href="http://nginx.org/ru/docs/" target="_blank" rel="noopener">http://nginx.org/ru/docs/</a></h1><p>user nginx;<br>worker_processes auto;<br>error_log /var/log/nginx/error.log;<br>pid /run/nginx.pid;</p><h1 id="Load-dynamic-modules-See-usr-share-nginx-README-dynamic"><a href="#Load-dynamic-modules-See-usr-share-nginx-README-dynamic" class="headerlink" title="Load dynamic modules. See /usr/share/nginx/README.dynamic."></a>Load dynamic modules. See /usr/share/nginx/README.dynamic.</h1><p>include /usr/share/nginx/modules/*.conf;</p><p>events {</p><pre><code>worker_connections 1024;</code></pre><p>}</p><p>http {</p><pre><code>log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '                  '$status $body_bytes_sent "$http_referer" '                  '"$http_user_agent" "$http_x_forwarded_for"';access_log  /var/log/nginx/access.log  main;sendfile            on;tcp_nopush          on;tcp_nodelay         on;keepalive_timeout   65;types_hash_max_size 2048;include             /etc/nginx/mime.types;default_type        application/octet-stream;# Load modular configuration files from the /etc/nginx/conf.d directory.# See http://nginx.org/en/docs/ngx_core_module.html#include# for more information.include /etc/nginx/conf.d/*.conf;server {    listen       80 default_server;    listen       [::]:80 default_server;    server_name  182.254.161.54;    root         /usr/share/nginx/html;    # Load configuration files for the default server block.    include /etc/nginx/default.d/*.conf;    location / {    proxy_pass http://pic;     }    error_page 404 /404.html;        location = /40x.html {    }    error_page 500 502 503 504 /50x.html;        location = /50x.html {    }}upstream pic{            server 182.254.161.54:8088 weight=5;            server 182.254.161.54:8089 weight=5;}</code></pre><p>}</p></li><li><p><span style="outline-style: initial; outline-width: 0px; font-weight: 700; word-break: break-all;">启动容器</span></p><p>docker run –name mynginx -d -p 82:80  -v /data/nginx/conf/nginx.conf:/etc/nginx/nginx.conf  -v /data/nginx/logs:/var/log/nginx -d docker.io/nginx</p></li><li><p><span style="outline-style: initial; outline-width: 0px; font-weight: 700; word-break: break-all;">查看启动的容器</span></p><p>docker ps </p></li></ul><p><a href="https://img-blog.csdn.net/20180702132832236?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI2NjQxNzgx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" data-fancybox="group" data-caption="这里写图片描述" class="fancybox"><img alt="这里写图片描述" title="这里写图片描述" data-src="https://img-blog.csdn.net/20180702132832236?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI2NjQxNzgx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" class="lazyload"></a></p><ul><li><span style="outline-style: initial; outline-width: 0px; font-weight: 700; word-break: break-all;">先前已经在Docker部署两个tomcat，一个是8088端口，另一个是8089端口，并进入两个容器里编写了简单的页面</span></li></ul><p><a href="https://img-blog.csdn.net/20180702133106139?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI2NjQxNzgx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" data-fancybox="group" data-caption="这里写图片描述" class="fancybox"><img alt="这里写图片描述" title="这里写图片描述" data-src="https://img-blog.csdn.net/20180702133106139?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI2NjQxNzgx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" class="lazyload"></a></p><p><span style="outline-style: initial; outline-width: 0px; font-weight: 700; word-break: break-all;">访问8088端口</span><br><a href="https://img-blog.csdn.net/20180702133728495?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI2NjQxNzgx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" data-fancybox="group" data-caption="这里写图片描述" class="fancybox"><img alt="这里写图片描述" title="这里写图片描述" data-src="https://img-blog.csdn.net/20180702133728495?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI2NjQxNzgx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" class="lazyload"></a></p><p><span style="outline-style: initial; outline-width: 0px; font-weight: 700; word-break: break-all;">访问8089端口</span><br><a href="https://img-blog.csdn.net/20180702133805719?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI2NjQxNzgx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" data-fancybox="group" data-caption="这里写图片描述" class="fancybox"><img alt="这里写图片描述" title="这里写图片描述" data-src="https://img-blog.csdn.net/20180702133805719?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI2NjQxNzgx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" class="lazyload"></a></p><ul><li><span style="outline-style: initial; outline-width: 0px; font-weight: 700; word-break: break-all;">现在通过Nginx访问两个tomcat的内容，实现负载均衡的功能，出于区别，更能体现负载均衡的功能，两个页面的内容不一样，但是访问路径都一样，只是通过Nginx反向代理去轮换访问</span></li></ul><p><a href="https://img-blog.csdn.net/20180702133452332?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI2NjQxNzgx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" data-fancybox="group" data-caption="这里写图片描述" class="fancybox"><img alt="这里写图片描述" title="这里写图片描述" data-src="https://img-blog.csdn.net/20180702133452332?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI2NjQxNzgx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" class="lazyload"></a></p><p><a href="https://img-blog.csdn.net/20180702133509870?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI2NjQxNzgx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" data-fancybox="group" data-caption="这里写图片描述" class="fancybox"><img alt="这里写图片描述" title="这里写图片描述" data-src="https://img-blog.csdn.net/20180702133509870?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI2NjQxNzgx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" class="lazyload"></a></p></body></html>]]></content>
      
      
      <categories>
          
          <category> Nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker 安装mysql5.7</title>
      <link href="/2018/07/27/Docker%20%E5%AE%89%E8%A3%85mysql5.7/"/>
      <url>/2018/07/27/Docker%20%E5%AE%89%E8%A3%85mysql5.7/</url>
      
        <content type="html"><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script></head><body><p>1 安装</p><p>docker pull docker.io/mysql</p><a id="more"></a><p><font face="Arial Black" color="#73a5ad"><span style="font-size: 16px;"><strong>Docker 安装mysql5.7</strong></span></font>  </p><p>1 安装</p><p> docker pull docker.io/mysql  </p><pre><code>[root@iZuf6boi8ejfovwda7q1ynZ ~]# docker pull docker.io/mysqlUsing default tag: latestTrying to pull repository docker.io/library/mysql ... latest: Pulling from docker.io/library/mysqlf49cf87b52c1: Pull complete 78032de49d65: Pull complete 837546b20bc4: Pull complete 9b8316af6cc6: Pull complete 1056cf29b9f1: Pull complete 86f3913b029a: Pull complete 4cbbfc9aebab: Pull complete 8ffd0352f6a8: Pull complete 45d90f823f97: Pull complete ca2a791aeb35: Pull complete Digest: sha256:1f95a2ba07ea2ee2800ec8ce3b5370ed4754b0a71d9d11c0c35c934e9708dcf1</code></pre><p>2 启动<br>[root@iZuf6boi8ejfovwda7q1ynZ ~]# docker run –name mysql -p 3306:3306 -e MYSQL_ROOT_PASSWORD=123456 -d mysql<br>3c995c988a94ce38a5ade6dcce7cc9168b349051ec51dc5e8a11c8f210658c04</p><p>如果需要把数据存储在宿主机器 加参数-v</p><pre><code>[root@iZuf6boi8ejfovwda7q1ynZ home]# docker run --name mysql -p 3306:3306 -e MYSQL_ROOT_PASSWORD=123456 -v /home/mysql/data:/var/lib/mysql -v /home/mysql/my.cnf:/etc/mysql/my.cnf -d mysql/usr/bin/docker-current: Error response from daemon: Conflict. The name "/mysql" is already in use by container 3c995c988a94ce38a5ade6dcce7cc9168b349051ec51dc5e8a11c8f210658c04\. You have to remove (or rename) that container to be able to reuse that name..See '/usr/bin/docker-current run --help'.</code></pre><p><span style="color: rgb(51, 51, 51); font-family: -apple-system, " sf ui text", arial, "pingfang sc", "hiragino sans gb", "microsoft yahei", "wenquanyi micro hei", sans-serif, simhei, simsun;">有容器用了mysql这个名称，需要先停止，再删除镜像</span>  </p><pre><code>[root@iZuf6boi8ejfovwda7q1ynZ home]# docker psCONTAINER ID        IMAGE                               COMMAND                  CREATED             STATUS                  PORTS                                                             NAMES3c995c988a94        mysql                               "docker-entrypoint.sh"   8 hours ago         Up 8 hours              0.0.0.0:3306->3306/tcp                                            mysql[root@iZuf6boi8ejfovwda7q1ynZ home]# docker stop mysqlmysql[root@iZuf6boi8ejfovwda7q1ynZ home]# docker rm mysqlmysql</code></pre><p><span style="color: rgb(51, 51, 51); font-family: -apple-system, " sf ui text", arial, "pingfang sc", "hiragino sans gb", "microsoft yahei", "wenquanyi micro hei", sans-serif, simhei, simsun;">再次启动</span>  </p><pre><code>[root@iZuf6boi8ejfovwda7q1ynZ home]# docker run --name mysql -p 3306:3306 -e MYSQL_ROOT_PASSWORD=123456 -v /home/mysql/data:/var/lib/mysql -v /home/mysql/my.cnf:/etc/mysql/my.cnf -d mysqla086c00b114a744e5f3b9f64357aef15e46cc7face8dca0878be37e34e0eb240/usr/bin/docker-current: Error response from daemon: invalid header field value "oci runtime error: container_linux.go:247: starting container process caused \"process_linux.go:364: container init caused \\\"rootfs_linux.go:54: mounting \\\\\\\"/home/mysql/my.cnf\\\\\\\" to rootfs \\\\\\\"/var/lib/docker/devicemapper/mnt/54b2f88d4d6b504e68cdc8dc41e9bf229ecc739bbdce4e23b1253cec6ea62e1e/rootfs\\\\\\\" at \\\\\\\"/var/lib/docker/devicemapper/mnt/54b2f88d4d6b504e68cdc8dc41e9bf229ecc739bbdce4e23b1253cec6ea62e1e/rootfs/etc/mysql/mysql.cnf\\\\\\\" caused \\\\\\\"not a directory\\\\\\\"\\\"\"\n".[root@iZuf6boi8ejfovwda7q1ynZ home]# docker psCONTAINER ID        IMAGE                               COMMAND                  CREATED             STATUS                  PORTS                                                             NAMES[root@iZuf6boi8ejfovwda7q1ynZ home]# docker ps -aCONTAINER ID        IMAGE                               COMMAND                  CREATED             STATUS                    PORTS                                                             NAMESa086c00b114a        mysql                               "docker-entrypoint.sh"   38 seconds ago      Created                                                                                     mysql</code></pre><p><span style="color: rgb(51, 51, 51); font-family: -apple-system, " sf ui text", arial, "pingfang sc", "hiragino sans gb", "microsoft yahei", "wenquanyi micro hei", sans-serif, simhei, simsun;">再次启动发现，没有配置文件/home/mysql/my.cnf  但是容器还是创建成功了</span>  </p><pre><code>[root@iZuf6boi8ejfovwda7q1ynZ home]# docker rm mysqlmysql[root@iZuf6boi8ejfovwda7q1ynZ home]# docker ps -aCONTAINER ID        IMAGE                               COMMAND                  CREATED             STATUS                    PORTS                                                             NAMES[root@iZuf6boi8ejfovwda7q1ynZ home]# docker run --name mysql -p 3306:3306 -e MYSQL_ROOT_PASSWORD=123456 -v /home/mysql/data:/var/lib/mysql -d mysql825f0c86efe9fa16e909ac2444ae077a8c68667b3ae6760220971d6f2cda5f19[root@iZuf6boi8ejfovwda7q1ynZ home]# </code></pre><p><span style="color: rgb(51, 51, 51); font-family: -apple-system, " sf ui text", arial, "pingfang sc", "hiragino sans gb", "microsoft yahei", "wenquanyi micro hei", sans-serif, simhei, simsun;">所以还是需要删除镜像，重新启动，简单点把配置文件去掉就好了</span>  </p><p>3 进入容器<br>[root@iZuf6boi8ejfovwda7q1ynZ ~]# docker exec -it mysql  bash<br>root@3c995c988a94:/# mysql<br>ERROR 1045 (28000): Access denied for user ‘root’@’localhost’ (using password: NO)</p><p>4 进入客户端  </p><pre><code>[root@3c995c988a94:/# mysql -uroot -pEnter password: Welcome to the MySQL monitor.  Commands end with ; or \g.Your MySQL connection id is 4Server version: 5.7.20 MySQL Community Server (GPL)  Copyright (c) 2000, 2017, Oracle and/or its affiliates. All rights reserved.  Oracle is a registered trademark of Oracle Corporation and/or itsaffiliates. Other names may be trademarks of their respectiveowners.  Type 'help;' or '\h' for help. Type '\c' to clear the current input statement.  mysql> select version(); +-----------+| version() |+-----------+| 5.7.20    |+-----------+1 row in set (0.00 sec)</code></pre></body></html>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Excel表的读写</title>
      <link href="/2018/07/27/Centos7%E4%B8%8A%E5%AE%89%E8%A3%85docker/"/>
      <url>/2018/07/27/Centos7%E4%B8%8A%E5%AE%89%E8%A3%85docker/</url>
      
        <content type="html"><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script></head><body><p>Docker从1.13版本之后采用时间线的方式作为版本号，分为社区版CE和企业版EE。 社区版是免费提供给个人开发者和小型团体使用的，企业版会提供额外的收费服务，比如经过官方测试认证过的基础设施、容器、插件等。</p><a id="more"></a><h2 id="Centos7上安装docker"><a href="#Centos7上安装docker" class="headerlink" title="Centos7上安装docker"></a><font color="#9cc6ef">Centos7上安装docker</font></h2><div id="cnblogs_post_body" class="blogpost-body" style="margin-bottom: 20px; word-break: break-word; font-family: Verdana, Geneva, Arial, Helvetica, sans-serif; font-size: 14.4px; background-color: rgb(238, 238, 238);"><p><span style="font-size: 16px;">Docker从1.13版本之后采用时间线的方式作为版本号，分为社区版CE和企业版EE。</span></p><p><span style="font-size: 16px;">社区版是免费提供给个人开发者和小型团体使用的，企业版会提供额外的收费服务，比如经过官方测试认证过的基础设施、容器、插件等。</span></p><p><span style="font-size: 16px;">社区版按照stable和edge两种方式发布，每个季度更新stable版本，如17.06，17.09；每个月份更新edge版本，如17.09，17.10。</span></p><h2 id="一、安装docker"><a href="#一、安装docker" class="headerlink" title="一、安装docker"></a>一、安装docker</h2><p>1、Docker 要求 CentOS 系统的内核版本高于 3.10 ，查看本页面的前提条件来验证你的CentOS 版本是否支持 Docker 。</p><p>通过 *<em>uname -r *</em>命令查看你当前的内核版本</p><div class="cnblogs_code" style="background-color: rgb(245, 245, 245); border: 1px solid rgb(204, 204, 204); padding: 5px; overflow: auto; margin: 5px 0px; font-family: " courier new" !important; font-size: 12px !important;"><pre style="margin-bottom: 0px; white-space: pre-wrap; font-family: " courier new" !important; font-size: 12px !important;"> $ <span style="color: rgb(0, 0, 255); font-size: 12px !important; line-height: 1.5 !important;">uname</span> -r</pre></div><p><span style="font-size: 16px;">2、使用 <code>root</code> 权限登录 Centos。确保 yum 包更新到最新。</span></p><div class="cnblogs_code" style="background-color: rgb(245, 245, 245); border: 1px solid rgb(204, 204, 204); padding: 5px; overflow: auto; margin: 5px 0px; font-family: " courier new" !important; font-size: 12px !important;"><pre style="margin-bottom: 0px; white-space: pre-wrap; font-family: " courier new" !important; font-size: 12px !important;">$ <span style="color: rgb(0, 0, 255); font-size: 12px !important; line-height: 1.5 !important;">sudo</span> <span style="color: rgb(0, 0, 255); font-size: 12px !important; line-height: 1.5 !important;">yum</span> update</pre></div><p><span style="font-size: 16px;">3、卸载旧版本(如果安装过旧版本的话)</span></p><div class="cnblogs_code" style="background-color: rgb(245, 245, 245); border: 1px solid rgb(204, 204, 204); padding: 5px; overflow: auto; margin: 5px 0px; font-family: " courier new" !important; font-size: 12px !important;"><pre style="margin-bottom: 0px; white-space: pre-wrap; font-family: " courier new" !important; font-size: 12px !important;">$ <span style="color: rgb(0, 0, 255); font-size: 12px !important; line-height: 1.5 !important;">sudo</span> <span style="color: rgb(0, 0, 255); font-size: 12px !important; line-height: 1.5 !important;">yum</span> <span style="color: rgb(0, 0, 0); font-size: 12px !important; line-height: 1.5 !important;">remove docker  docker</span>-<span style="color: rgb(0, 0, 0); font-size: 12px !important; line-height: 1.5 !important;">common docker</span>-<span style="color: rgb(0, 0, 0); font-size: 12px !important; line-height: 1.5 !important;">selinux docker</span>-engine</pre></div><p><span style="font-size: 16px;">4、安装需要的软件包， </span><span style="font-size: 16px;">yum-util 提供yum-config-manager功能，</span><span class="pln" style="font-size: 16px;"><span class="com">另外两个是devicemapper驱动依赖的</span></span></p><div class="cnblogs_code" style="background-color: rgb(245, 245, 245); border: 1px solid rgb(204, 204, 204); padding: 5px; overflow: auto; margin: 5px 0px; font-family: " courier new" !important; font-size: 12px !important;"><pre style="margin-bottom: 0px; white-space: pre-wrap; font-family: " courier new" !important; font-size: 12px !important;">$ <span style="color: rgb(0, 0, 255); font-size: 12px !important; line-height: 1.5 !important;">sudo</span> <span style="color: rgb(0, 0, 255); font-size: 12px !important; line-height: 1.5 !important;">yum</span> <span style="color: rgb(0, 0, 255); font-size: 12px !important; line-height: 1.5 !important;">install</span> -y <span style="color: rgb(0, 0, 255); font-size: 12px !important; line-height: 1.5 !important;">yum</span>-utils device-mapper-persistent-data lvm2</pre></div><p>5、设置yum源</p><div class="cnblogs_code" style="background-color: rgb(245, 245, 245); border: 1px solid rgb(204, 204, 204); padding: 5px; overflow: auto; margin: 5px 0px; font-family: " courier new" !important; font-size: 12px !important;"><pre style="margin-bottom: 0px; white-space: pre-wrap; font-family: " courier new" !important; font-size: 12px !important;"><span style="color: rgb(0, 0, 255); font-size: 12px !important; line-height: 1.5 !important;"><span style="color: rgb(0, 0, 0); font-size: 12px !important; line-height: 1.5 !important;">$</span> sudo</span> <span style="color: rgb(0, 0, 255); font-size: 12px !important; line-height: 1.5 !important;">yum</span>-config-manager --add-repo https:<span style="color: rgb(0, 128, 0); font-size: 12px !important; line-height: 1.5 !important;">//</span><span style="color: rgb(0, 128, 0); font-size: 12px !important; line-height: 1.5 !important;">download.docker.com/linux/centos/docker-ce.repo</span></pre></div><p> <a href="https://images2017.cnblogs.com/blog/1107037/201801/1107037-20180128094640209-1433322312.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://images2017.cnblogs.com/blog/1107037/201801/1107037-20180128094640209-1433322312.png" class="lazyload"></a></p><p>6、可以查看所有仓库中所有docker版本，并选择特定版本安装</p><div class="cnblogs_code" style="background-color: rgb(245, 245, 245); border: 1px solid rgb(204, 204, 204); padding: 5px; overflow: auto; margin: 5px 0px; font-family: " courier new" !important; font-size: 12px !important;"><pre style="margin-bottom: 0px; white-space: pre-wrap; font-family: " courier new" !important; font-size: 12px !important;">$ <span style="color: rgb(0, 0, 255); font-size: 12px !important; line-height: 1.5 !important;">yum</span> list docker-ce --showduplicates | <span style="color: rgb(0, 0, 255); font-size: 12px !important; line-height: 1.5 !important;">sort</span> -r</pre></div><p><a href="https://images2017.cnblogs.com/blog/1107037/201801/1107037-20180128095038600-772177322.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://images2017.cnblogs.com/blog/1107037/201801/1107037-20180128095038600-772177322.png" class="lazyload"></a></p><p>7、安装docker</p><div class="cnblogs_code" style="background-color: rgb(245, 245, 245); border: 1px solid rgb(204, 204, 204); padding: 5px; overflow: auto; margin: 5px 0px; font-family: " courier new" !important; font-size: 12px !important;"><pre style="margin-bottom: 0px; white-space: pre-wrap; font-family: " courier new" !important; font-size: 12px !important;">$ <span style="color: rgb(0, 0, 255); font-size: 12px !important; line-height: 1.5 !important;">sudo</span> <span style="color: rgb(0, 0, 255); font-size: 12px !important; line-height: 1.5 !important;">yum</span> <span style="color: rgb(0, 0, 255); font-size: 12px !important; line-height: 1.5 !important;">install</span> docker-ce  <span style="color: rgb(0, 128, 0); font-size: 12px !important; line-height: 1.5 !important;">#由于repo中默认只开启stable仓库，故这里安装的是最新稳定版17.12.0</span> <span style="color: rgb(0, 0, 0); font-size: 12px !important; line-height: 1.5 !important;">$</span> <span style="color: rgb(0, 0, 255); font-size: 12px !important; line-height: 1.5 !important;">sudo</span> <span style="color: rgb(0, 0, 255); font-size: 12px !important; line-height: 1.5 !important;">yum</span> <span style="color: rgb(0, 0, 255); font-size: 12px !important; line-height: 1.5 !important;">install</span> <fqpn>  <span style="color: rgb(0, 128, 0); font-size: 12px !important; line-height: 1.5 !important;"># 例如：sudo yum install docker-ce-17.12.0.ce</span></fqpn></pre></div><p> <a href="https://images2017.cnblogs.com/blog/1107037/201801/1107037-20180128103448287-493824081.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://images2017.cnblogs.com/blog/1107037/201801/1107037-20180128103448287-493824081.png" class="lazyload"></a></p><p><span style="font-size: 16px;">8、启动并加入开机启动</span></p><div class="cnblogs_code" style="background-color: rgb(245, 245, 245); border: 1px solid rgb(204, 204, 204); padding: 5px; overflow: auto; margin: 5px 0px; font-family: " courier new" !important; font-size: 12px !important;"><pre style="margin-bottom: 0px; white-space: pre-wrap; font-family: " courier new" !important; font-size: 12px !important;">$ <span style="color: rgb(0, 0, 255); font-size: 12px !important; line-height: 1.5 !important;">sudo</span> <span style="color: rgb(0, 0, 0); font-size: 12px !important; line-height: 1.5 !important;">systemctl start docker$</span> <span style="color: rgb(0, 0, 255); font-size: 12px !important; line-height: 1.5 !important;">sudo</span> systemctl enable docker</pre></div><p><span style="font-size: 16px;">9、验证安装是否成功(有client和service两部分表示docker安装启动都成功了)</span></p><div class="cnblogs_code" style="background-color: rgb(245, 245, 245); border: 1px solid rgb(204, 204, 204); padding: 5px; overflow: auto; margin: 5px 0px; font-family: " courier new" !important; font-size: 12px !important;"><pre style="margin-bottom: 0px; white-space: pre-wrap; font-family: " courier new" !important; font-size: 12px !important;">$ <span style="color: rgb(0, 0, 255); font-size: 12px !important; line-height: 1.5 !important;">docker</span> version</pre></div><p><a href="https://images2017.cnblogs.com/blog/1107037/201801/1107037-20180128104046600-1053107877.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://images2017.cnblogs.com/blog/1107037/201801/1107037-20180128104046600-1053107877.png" class="lazyload"></a></p><h2 id="二、问题"><a href="#二、问题" class="headerlink" title="二、问题"></a>二、问题</h2><p><span style="font-size: 16px;">1、因为之前已经安装过旧版本的docker，在安装的时候报错如下：</span></p><div class="cnblogs_code" style="background-color: rgb(245, 245, 245); border: 1px solid rgb(204, 204, 204); padding: 5px; overflow: auto; margin: 5px 0px; font-family: " courier new" !important; font-size: 12px !important;"><pre style="margin-bottom: 0px; white-space: pre-wrap; font-family: " courier new" !important; font-size: 12px !important;"><span style="color: rgb(0, 0, 0); font-size: 12px !important; line-height: 1.5 !important;">Transaction check error:</span> <span style="color: rgb(0, 0, 255); font-size: 12px !important; line-height: 1.5 !important;">file</span> /usr/bin/docker from <span style="color: rgb(0, 0, 255); font-size: 12px !important; line-height: 1.5 !important;">install</span> of docker-ce-<span style="color: rgb(128, 0, 128); font-size: 12px !important; line-height: 1.5 !important;">17.12</span>.<span style="color: rgb(128, 0, 128); font-size: 12px !important; line-height: 1.5 !important;">0</span>.ce-<span style="color: rgb(128, 0, 128); font-size: 12px !important; line-height: 1.5 !important;">1</span>.el7.centos.x86_64 conflicts with <span style="color: rgb(0, 0, 255); font-size: 12px !important; line-height: 1.5 !important;">file</span> from package <span style="font-size: 15px; color: rgb(255, 0, 0); line-height: 1.5 !important;">**docker-common-2:1.12.6-68.gitec8512b.el7.centos.x86_64**</span> <span style="color: rgb(0, 0, 255); font-size: 12px !important; line-height: 1.5 !important;">file</span> /usr/bin/docker-containerd from <span style="color: rgb(0, 0, 255); font-size: 12px !important; line-height: 1.5 !important;">install</span> of docker-ce-<span style="color: rgb(128, 0, 128); font-size: 12px !important; line-height: 1.5 !important;">17.12</span>.<span style="color: rgb(128, 0, 128); font-size: 12px !important; line-height: 1.5 !important;">0</span>.ce-<span style="color: rgb(128, 0, 128); font-size: 12px !important; line-height: 1.5 !important;">1</span>.el7.centos.x86_64 conflicts with <span style="color: rgb(0, 0, 255); font-size: 12px !important; line-height: 1.5 !important;">file</span> from package <span style="font-size: 15px; color: rgb(255, 0, 0); line-height: 1.5 !important;">**docker-common-2:1.12.6-68.gitec8512b.el7.centos.x86_64**</span> <span style="color: rgb(0, 0, 255); font-size: 12px !important; line-height: 1.5 !important;">file</span> /usr/bin/docker-containerd-shim from <span style="color: rgb(0, 0, 255); font-size: 12px !important; line-height: 1.5 !important;">install</span> of docker-ce-<span style="color: rgb(128, 0, 128); font-size: 12px !important; line-height: 1.5 !important;">17.12</span>.<span style="color: rgb(128, 0, 128); font-size: 12px !important; line-height: 1.5 !important;">0</span>.ce-<span style="color: rgb(128, 0, 128); font-size: 12px !important; line-height: 1.5 !important;">1</span>.el7.centos.x86_64 conflicts with <span style="color: rgb(0, 0, 255); font-size: 12px !important; line-height: 1.5 !important;">file</span> from package <span style="font-size: 15px; color: rgb(255, 0, 0); line-height: 1.5 !important;">**docker-common-2:1.12.6-68.gitec8512b.el7.centos.x86_64**</span> <span style="color: rgb(0, 0, 255); font-size: 12px !important; line-height: 1.5 !important;">file</span> /usr/bin/dockerd from <span style="color: rgb(0, 0, 255); font-size: 12px !important; line-height: 1.5 !important;">install</span> of docker-ce-<span style="color: rgb(128, 0, 128); font-size: 12px !important; line-height: 1.5 !important;">17.12</span>.<span style="color: rgb(128, 0, 128); font-size: 12px !important; line-height: 1.5 !important;">0</span>.ce-<span style="color: rgb(128, 0, 128); font-size: 12px !important; line-height: 1.5 !important;">1</span>.el7.centos.x86_64 conflicts with <span style="color: rgb(0, 0, 255); font-size: 12px !important; line-height: 1.5 !important;">file</span> from package **<span style="font-size: 15px; color: rgb(255, 0, 0); line-height: 1.5 !important;">docker-common-2:1.12.6-68.gitec8512b.el7.centos.x86_64</span>**</pre></div><p><span style="font-size: 16px;">2、卸载旧版本的包</span></p><div class="cnblogs_code" style="background-color: rgb(245, 245, 245); border: 1px solid rgb(204, 204, 204); padding: 5px; overflow: auto; margin: 5px 0px; font-family: " courier new" !important; font-size: 12px !important;"><pre style="margin-bottom: 0px; white-space: pre-wrap; font-family: " courier new" !important; font-size: 12px !important;">$ <span style="color: rgb(0, 0, 255); font-size: 12px !important; line-height: 1.5 !important;">sudo</span> <span style="color: rgb(0, 0, 255); font-size: 12px !important; line-height: 1.5 !important;">yum</span> erase docker-common-<span style="color: rgb(128, 0, 128); font-size: 12px !important; line-height: 1.5 !important;">2</span>:<span style="color: rgb(128, 0, 128); font-size: 12px !important; line-height: 1.5 !important;">1.12</span>.<span style="color: rgb(128, 0, 128); font-size: 12px !important; line-height: 1.5 !important;">6</span>-<span style="color: rgb(128, 0, 128); font-size: 12px !important; line-height: 1.5 !important;">68</span>.gitec8512b.el7.centos.x86_64</pre></div><p><a href="https://images2017.cnblogs.com/blog/1107037/201801/1107037-20180128103145287-536100760.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://images2017.cnblogs.com/blog/1107037/201801/1107037-20180128103145287-536100760.png" class="lazyload"></a></p><p><span style="font-size: 16px;">3、再次安装docker</span></p><div class="cnblogs_code" style="background-color: rgb(245, 245, 245); border: 1px solid rgb(204, 204, 204); padding: 5px; overflow: auto; margin: 5px 0px; font-family: " courier new" !important; font-size: 12px !important;"><pre style="margin-bottom: 0px; white-space: pre-wrap; font-family: " courier new" !important; font-size: 12px !important;">$ <span style="color: rgb(0, 0, 255); font-size: 12px !important; line-height: 1.5 !important;">sudo</span> <span style="color: rgb(0, 0, 255); font-size: 12px !important; line-height: 1.5 !important;">yum</span> <span style="color: rgb(0, 0, 255); font-size: 12px !important; line-height: 1.5 !important;">install</span> docker-ce</pre></div><div id="comment_body_3991824" class="blog_comment_body" style="word-wrap: break-word; overflow: hidden;">4、推荐一种删除docker的方法：  <div class="cnblogs_Highlighter sh-gutter"><div id="highlighter_844319" class="syntaxhighlighter  csharp" style="width: 1613px; margin: 1em 0px !important; position: relative !important; overflow: auto !important; font-size: 1em !important; background-color: rgb(255, 255, 255) !important;"><table border="0" cellpadding="0" cellspacing="0" style="width: 1613px; border-radius: 0px !important; background-image: none !important; background-position: initial !important; background-size: initial !important; background-repeat: initial !important; background-attachment: initial !important; background-origin: initial !important; background-clip: initial !important; border: 0px !important; bottom: auto !important; float: none !important; height: auto !important; left: auto !important; line-height: 1.1em !important; margin: 0px !important; outline-style: initial !important; outline-width: 0px !important; overflow: visible !important; padding: 0px !important; position: static !important; right: auto !important; top: auto !important; vertical-align: baseline !important; box-sizing: content-box !important; font-family: Consolas, " bitstream vera sans mono", "courier new", courier, monospace !important; font-size: 12px min-height: auto !important;"><tbody style="border-radius: 0px !important; background: none !important; border: 0px !important; bottom: auto !important; float: none !important; height: auto !important; left: auto !important; line-height: 1.1em !important; margin: 0px !important; outline-style: initial !important; outline-width: 0px !important; overflow: visible !important; padding: 0px !important; position: static !important; right: auto !important; top: auto !important; vertical-align: baseline !important; width: auto !important; box-sizing: content-box !important; font-size: 12px !important; min-height: auto !important;"><tr style="border-radius: 0px !important; background: none !important; border: 0px !important; bottom: auto !important; float: none !important; height: auto !important; left: auto !important; line-height: 1.1em !important; margin: 0px !important; outline-style: initial !important; outline-width: 0px !important; overflow: visible !important; padding: 0px !important; position: static !important; right: auto !important; top: auto !important; vertical-align: baseline !important; width: auto !important; box-sizing: content-box !important; font-size: 12px !important; min-height: auto !important;"><td class="gutter" style="border-radius: 0px !important; background: none !important; border: 0px !important; bottom: auto !important; float: none !important; height: auto !important; left: auto !important; line-height: 1.1em !important; margin: 0px !important; outline-style: initial !important; outline-width: 0px !important; overflow: visible !important; position: static !important; right: auto !important; top: auto !important; vertical-align: baseline !important; width: 35px !important; box-sizing: content-box !important; font-size: 12px !important; min-height: auto !important; color: rgb(175, 175, 175) !important;"><div class="line number1 index0 alt2" style="border-radius: 0px !important; background: none rgb(244, 244, 244) !important; border-width: 0px 2px 0px 0px !important; border-top-style: initial !important; border-right-style: solid !important; border-bottom-style: initial !important; border-left-style: initial !important; border-top-color: initial !important; border-right-color: rgb(108, 226, 108) !important; border-bottom-color: initial !important; border-left-color: initial !important; border-image: initial !important; bottom: auto !important; float: none !important; height: auto !important; left: auto !important; line-height: 1.8em !important; margin: 0px !important; outline-style: initial !important; outline-width: 0px !important; overflow: visible !important; padding: 0px 0.5em !important; position: static !important; right: auto !important; text-align: right !important; top: auto !important; vertical-align: baseline !important; width: auto !important; box-sizing: content-box !important; font-size: 12px !important; min-height: auto !important; white-space: nowrap !important;">1</div><div class="line number2 index1 alt1" style="border-radius: 0px !important; background-image: none !important; background-position: initial !important; background-size: initial !important; background-repeat: initial !important; background-attachment: initial !important; background-origin: initial !important; background-clip: initial !important; border-width: 0px 2px 0px 0px !important; border-top-style: initial !important; border-right-style: solid !important; border-bottom-style: initial !important; border-left-style: initial !important; border-top-color: initial !important; border-right-color: rgb(108, 226, 108) !important; border-bottom-color: initial !important; border-left-color: initial !important; border-image: initial !important; bottom: auto !important; float: none !important; height: auto !important; left: auto !important; line-height: 1.8em !important; margin: 0px !important; outline-style: initial !important; outline-width: 0px !important; overflow: visible !important; padding: 0px 0.5em !important; position: static !important; right: auto !important; text-align: right !important; top: auto !important; vertical-align: baseline !important; width: auto !important; box-sizing: content-box !important; font-size: 12px !important; min-height: auto !important; white-space: nowrap !important;">2</div><div class="line number3 index2 alt2" style="border-radius: 0px !important; background: none rgb(244, 244, 244) !important; border-width: 0px 2px 0px 0px !important; border-top-style: initial !important; border-right-style: solid !important; border-bottom-style: initial !important; border-left-style: initial !important; border-top-color: initial !important; border-right-color: rgb(108, 226, 108) !important; border-bottom-color: initial !important; border-left-color: initial !important; border-image: initial !important; bottom: auto !important; float: none !important; height: auto !important; left: auto !important; line-height: 1.8em !important; margin: 0px !important; outline-style: initial !important; outline-width: 0px !important; overflow: visible !important; padding: 0px 0.5em !important; position: static !important; right: auto !important; text-align: right !important; top: auto !important; vertical-align: baseline !important; width: auto !important; box-sizing: content-box !important; font-size: 12px !important; min-height: auto !important; white-space: nowrap !important;">3</div><div class="line number4 index3 alt1" style="border-radius: 0px !important; background-image: none !important; background-position: initial !important; background-size: initial !important; background-repeat: initial !important; background-attachment: initial !important; background-origin: initial !important; background-clip: initial !important; border-width: 0px 2px 0px 0px !important; border-top-style: initial !important; border-right-style: solid !important; border-bottom-style: initial !important; border-left-style: initial !important; border-top-color: initial !important; border-right-color: rgb(108, 226, 108) !important; border-bottom-color: initial !important; border-left-color: initial !important; border-image: initial !important; bottom: auto !important; float: none !important; height: auto !important; left: auto !important; line-height: 1.8em !important; margin: 0px !important; outline-style: initial !important; outline-width: 0px !important; overflow: visible !important; padding: 0px 0.5em !important; position: static !important; right: auto !important; text-align: right !important; top: auto !important; vertical-align: baseline !important; width: auto !important; box-sizing: content-box !important; font-size: 12px !important; min-height: auto !important; white-space: nowrap !important;">4</div></td><td class="code" style="border-radius: 0px !important; background: none !important; border: 0px !important; bottom: auto !important; float: none !important; height: auto !important; left: auto !important; line-height: 1.1em !important; margin: 0px !important; outline-style: initial !important; outline-width: 0px !important; overflow: visible !important; position: static !important; right: auto !important; top: auto !important; vertical-align: baseline !important; width: auto !important; box-sizing: content-box !important; font-size: 12px !important; min-height: auto !important;"><div class="container" style="border-radius: 0px !important; background: none !important; border: 0px !important; bottom: auto !important; float: none !important; height: auto !important; left: auto !important; line-height: 1.1em !important; margin: 0px !important; outline-style: initial !important; outline-width: 0px !important; overflow: visible !important; padding: 0px !important; position: relative !important; right: auto !important; top: auto !important; vertical-align: baseline !important; box-sizing: content-box !important; font-size: 12px !important; min-height: auto !important;"><div class="line number1 index0 alt2" style="border-radius: 0px !important; background: none rgb(244, 244, 244) !important; border: 0px !important; bottom: auto !important; float: none !important; height: auto !important; left: auto !important; line-height: 1.8em !important; margin: 0px !important; outline-style: initial !important; outline-width: 0px !important; overflow: visible !important; padding: 0px 1em !important; position: static !important; right: auto !important; top: auto !important; vertical-align: baseline !important; width: auto !important; box-sizing: content-box !important; font-size: 12px !important; min-height: auto !important; white-space: nowrap !important;">`yum remove docker docker-common docker-selinux docker-engine -y`</div><div class="line number2 index1 alt1" style="border-radius: 0px !important; background-image: none !important; background-position: initial !important; background-size: initial !important; background-repeat: initial !important; background-attachment: initial !important; background-origin: initial !important; background-clip: initial !important; border: 0px !important; bottom: auto !important; float: none !important; height: auto !important; left: auto !important; line-height: 1.8em !important; margin: 0px !important; outline-style: initial !important; outline-width: 0px !important; overflow: visible !important; padding: 0px 1em !important; position: static !important; right: auto !important; top: auto !important; vertical-align: baseline !important; width: auto !important; box-sizing: content-box !important; font-size: 12px !important; min-height: auto !important; white-space: nowrap !important;">`/etc/systemd -name ``'*docker*'` `-exec rm -f {} ;`</div><div class="line number3 index2 alt2" style="border-radius: 0px !important; background: none rgb(244, 244, 244) !important; border: 0px !important; bottom: auto !important; float: none !important; height: auto !important; left: auto !important; line-height: 1.8em !important; margin: 0px !important; outline-style: initial !important; outline-width: 0px !important; overflow: visible !important; padding: 0px 1em !important; position: static !important; right: auto !important; top: auto !important; vertical-align: baseline !important; width: auto !important; box-sizing: content-box !important; font-size: 12px !important; min-height: auto !important; white-space: nowrap !important;">`find /etc/systemd -name ``'*docker*'` `-exec rm -f {} \;`</div><div class="line number4 index3 alt1" style="border-radius: 0px !important; background-image: none !important; background-position: initial !important; background-size: initial !important; background-repeat: initial !important; background-attachment: initial !important; background-origin: initial !important; background-clip: initial !important; border: 0px !important; bottom: auto !important; float: none !important; height: auto !important; left: auto !important; line-height: 1.8em !important; margin: 0px !important; outline-style: initial !important; outline-width: 0px !important; overflow: visible !important; padding: 0px 1em !important; position: static !important; right: auto !important; top: auto !important; vertical-align: baseline !important; width: auto !important; box-sizing: content-box !important; font-size: 12px !important; min-height: auto !important; white-space: nowrap !important;">`find /lib/systemd -name ``'*docker*'` `-exec rm -f {} \;`</div></div></td></tr></tbody></table></div></div></div></div></body></html>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>干货｜秒杀架构设计的关键技术</title>
      <link href="/2018/07/11/%E5%B9%B2%E8%B4%A7%EF%BD%9C%E7%A7%92%E6%9D%80%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1%E7%9A%84%E5%85%B3%E9%94%AE%E6%8A%80%E6%9C%AF/"/>
      <url>/2018/07/11/%E5%B9%B2%E8%B4%A7%EF%BD%9C%E7%A7%92%E6%9D%80%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1%E7%9A%84%E5%85%B3%E9%94%AE%E6%8A%80%E6%9C%AF/</url>
      
        <content type="html"><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script></head><body><p>秒杀业务场景设计问题经常被面试的时候被问到，在实际业务中，也常常需要实现，下面我们来看看如何实现秒杀业务。</p><a id="more"></a><p>秒杀业务场景设计问题经常被面试的时候被问到，在实际业务中，也常常需要实现，下面我们来看看如何实现秒杀业务。</p><p>秒杀业务，是典型的短时大量突发访问类问题。</p><p>特点:  </p><p>1. 秒杀时网站的访问量大增;</p><p>2. 秒杀时购买的请求数量远小于库存，只有部分用户能够成功；  </p><p>3. 业务流程简单，根据先后顺序，下订单减库存；  </p><p>首先看一下普通商品购买业务的基本逻辑</p><p><a href="http://www.hwy.ac.cn/upload/2018/07/1tmobvpukmiqgqua91hd51tf0h.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="http://www.hwy.ac.cn/upload/2018/07/1tmobvpukmiqgqua91hd51tf0h.png" class="lazyload"></a></p><p>那么，秒杀业务，会影响到上面的哪些方面呢？</p><p>前端: </p><p>在同一时段，大量的用户集中访问前端页面的资源,流量剧增,导致页面刷新不及时，甚至无法访问，秒杀系统特点是并发量极大，但实际秒杀成功的请求数量却很少，所以如果不在前端拦截很可能造成数据库读写锁冲突，甚至导致死锁，最终请求超时；</p><p>解决方案：(1). <span style="margin: 0px; padding: 0px; max-width: 100%; outline-style: initial; outline-width: 0px; word-break: break-all; color: rgb(51, 51, 51); word-wrap: break-word !important;">当流量过大的时候，加一个验证码可以在单位时间内有效的控制住合法用户;</span></p><p><span style="margin: 0px; padding: 0px; max-width: 100%; outline-style: initial; outline-width: 0px; word-break: break-all; color: rgb(51, 51, 51); word-wrap: break-word !important;">(2). 将活动页面上的所有可以静态的元素全部静态化，并尽量减少动态元素，通过CDN来抗峰值；</span> </p><p><span style="margin: 0px; padding: 0px; max-width: 100%; outline-style: initial; outline-width: 0px; word-break: break-all; color: rgb(51, 51, 51); word-wrap: break-word !important;">(3). 用户提交之后按钮置灰，禁止重复提交,在某一时间段内只允许用户提交一次请求，比如可以采取IP限流;</span> </p><p><span style="margin: 0px; padding: 0px; max-width: 100%; outline-style: initial; outline-width: 0px; word-break: break-all; font-size: 15px; word-wrap: break-word !important;">后端:</span></p><p>传统秒杀系统之所以挂，请求都压倒了后端数据层，数据读写锁冲突严重，并发高响应慢，几乎所有请求都超时，流量虽大，下单成功的有效流量甚小【一趟火车其实只有2000张票，200w个人来买，基本没有人能买成功，请求有效率为0】  </p><p>解决方案:</p><p><span style="margin: 0px; padding: 0px; max-width: 100%; outline-style: initial; outline-width: 0px; font-weight: 700; word-break: break-all; font-size: 18px; word-wrap: break-word !important;">站点层设计</span></p><p>前端层的请求拦截，只能拦住小白用户（不过这是99%的用户哟），高端的程序员根本不吃这一套，写个for循环，直接调用你后端的http请求，怎么整？</p><p>（1）同一个uid，限制访问频度，做页面缓存，x秒内到达站点层的请求，均返回同一页面</p><p>（2）同一个item的查询，例如手机车次，做页面缓存，x秒内到达站点层的请求，均返回同一页面</p><p>如此限流，又有99%的流量会被拦截在站点层。</p><p><span style="margin: 0px; padding: 0px; max-width: 100%; outline-style: initial; outline-width: 0px; font-weight: 700; word-break: break-all; font-size: 18px; word-wrap: break-word !important;">服务层设计</span></p><p>站点层的请求拦截，只能拦住普通程序员，高级黑客，假设他控制了10w台肉鸡（并且假设买票不需要实名认证），这下uid的限制不行了吧？怎么整？</p><p>(请求队列,cache缓存)</p><p>（1）大哥，我是服务层，我清楚的知道小米只有1万部手机，我清楚的知道一列火车只有2000张车票，我透10w个请求去数据库有什么意义呢？对于写请求，做请求队列，每次只透过有限的写请求去数据层，如果均成功再放下一批，如果库存不够则队列里的写请求全部返回“已售完”；</p><p>（2）对于读请求，还用说么？cache来抗，不管是memcached还是redis，单机抗个每秒10w应该都是没什么问题的；</p><p>如此限流，只有非常少的写请求，和非常少的读缓存mis的请求会透到数据层去，又有99.9%的请求被拦住了。</p><p>上面只拦截了一部分访问请求，当秒杀的用户量很大时，即使每个用户只有一个请求，到服务层的请求数量还是很大。比如我们有100W用户同时抢100台手机，服务层并发请求压力至少为100W。</p><p>(1). 采用消息队列缓存请求：既然服务层知道库存只有100台手机，那完全没有必要把100W个请求都传递到数据库啊，那么可以先把这些请求都写到消息队列缓存一下，数据库层订阅消息减库存，减库存成功的请求返回秒杀成功，失败的返回秒杀结束。</p><p>(2). 利用缓存应对读请求：对类似于12306等购票业务，是典型的读多写少业务，大部分请求是查询请求，所以可以利用缓存分担数据库压力。</p><p><span style="margin: 0px; padding: 0px; max-width: 100%; word-wrap: break-word !important;">(3). 利用缓存应对写请求：缓存也是可以应对写请求的，比如我们就可以把数据库中的库存数据转移到Redis缓存中，所有减库存操作都在Redis中进行，然后再通过后台进程把Redis中的用户秒杀请求同步到数据库中。</span>  </p><p> <span style="margin: 0px; padding: 0px; max-width: 100%; word-wrap: break-word !important;"></span> </p><p><span style="margin: 0px; padding: 0px; max-width: 100%; outline-style: initial; outline-width: 0px; font-weight: 700; word-break: break-all; font-size: 18px; word-wrap: break-word !important;">数据库层 </span></p><p>数据库层是最脆弱的一层，一般在应用设计时在上游就需要把请求拦截掉，数据库层只承担“能力范围内”的访问请求。所以，上面通过在服务层引入队列和缓存，让最底层的数据库高枕无忧。</p><p><span style="margin: 0px; padding: 0px; max-width: 100%; outline-style: initial; outline-width: 0px; font-weight: 700; word-break: break-all; font-size: 18px; word-wrap: break-word !important;">接下来详细讲Redis缓存详细思路;</span></p><p><span style="margin: 0px; padding: 0px; max-width: 100%; outline-style: initial; outline-width: 0px; word-break: break-all; word-wrap: break-word !important;">Redis</span>是一个分布式缓存系统，支持多种数据结构，可利用Redis轻松实现一个强大的秒杀系统。</p><p><span style="margin: 0px; padding: 0px; max-width: 100%; outline-style: initial; outline-width: 0px; word-break: break-all; font-weight: 700; font-family: KaiTi_GB2312; color: rgb(0, 0, 0); font-size: 18px; word-wrap: break-word !important;">实现原理：list双向链表</span></p><p><span style="margin: 0px; padding: 0px; max-width: 100%; outline-style: initial; outline-width: 0px; word-break: break-all; font-family: KaiTi_GB2312; color: rgb(0, 0, 0); font-size: 14px; word-wrap: break-word !important;">此处用到了Redis中的链表(list)数据类型:</span></p><p><a href="http://www.hwy.ac.cn/upload/2018/07/ok1j63ok9eiufri9uaq2te9t1t.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="http://www.hwy.ac.cn/upload/2018/07/ok1j63ok9eiufri9uaq2te9t1t.png" class="lazyload"></a> <span style="margin: 0px; padding: 0px; max-width: 100%; outline-style: initial; outline-width: 0px; word-break: break-all; font-family: KaiTi_GB2312; color: rgb(0, 0, 0); font-size: 14px; word-wrap: break-word !important;"></span> </p><p><a href="http://www.hwy.ac.cn/upload/2018/07/so6qb80396gigqr6a16j4qre5i.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="http://www.hwy.ac.cn/upload/2018/07/so6qb80396gigqr6a16j4qre5i.png" class="lazyload"></a> <span style="margin: 0px; padding: 0px; max-width: 100%; outline-style: initial; outline-width: 0px; word-break: break-all; font-family: KaiTi_GB2312; color: rgb(0, 0, 0); font-size: 14px; word-wrap: break-word !important;"></span> </p><p>我们可以采用Redis 最简单的key-value数据结构，用一个原子类型的变量值(AtomicInteger)作为key，把用户id作为value，库存数量便是原子变量的最大值。对于每个用户的秒杀，我们使用 RPUSH key value插入秒杀请求， 当插入的秒杀请求数达到上限时，停止所有后续插入。<span style="margin: 0px; padding: 0px; max-width: 100%; outline-style: initial; outline-width: 0px; font-weight: 700; word-break: break-all; word-wrap: break-word !important;">因为pop操作是原子的，即使有很多用户同时到达，也是依次执行.(mysql事务在高并发下性能下降很厉害，文件锁的方式也是).</span></p><pre><code>然后我们可以再启动多个工作线程，使用 LPOP key 读取秒杀成功者的用户id，然后再操作数据库做最终的下订单减库存操作。当然，上面Redis也可以替换成消息中间件如ActiveMQ、RabbitMQ等，也可以将缓存和消息中间件 组合起来，缓存系统负责接收记录用户请求，消息中间件负责将缓存中的请求同步到数据库。</code></pre><p><span style="margin: 0px; padding: 0px; max-width: 100%; outline-style: initial; outline-width: 0px; word-break: break-all; font-weight: 700; font-size: 18px; word-wrap: break-word !important;">（1）使用Redis中间件缓存动态资源的好处？</span></p><pre><code>提高访问速度，减少对数据库的链接的打开、关闭，</code></pre><p><span style="margin: 0px; padding: 0px; max-width: 100%; outline-style: initial; outline-width: 0px; word-break: break-all; font-weight: 700; font-size: 18px; word-wrap: break-word !important;">（2）为什么不用JVM内存而使用Redis作为缓存呢？</span></p><p><span style="margin: 0px; padding: 0px; max-width: 100%; outline-style: initial; outline-width: 0px; word-break: break-all; word-wrap: break-word !important;">      JVM 内存较小，隔一段时间会自动进行垃圾回收。</span><br><span style="margin: 0px; padding: 0px; max-width: 100%; outline-style: initial; outline-width: 0px; word-break: break-all; word-wrap: break-word !important;">      JVM和业务程序绑定在一起了，如果程序出错，JVM也会停止，这样就导致缓存数据丢失。</span>  </p><pre><code>如果使用Redis，除了缓存比较大之外，还实现了缓存数据和业务程序的分离，即使运行程序出现错误，也不会影响缓存。</code></pre><p><span style="margin: 0px; padding: 0px; max-width: 100%; outline-style: initial; outline-width: 0px; font-weight: 700; word-break: break-all; font-size: 18px; word-wrap: break-word !important;">压力测试工具</span></p><p>使用JMeter 压测工具 </p><p>下载、安装、进入C:/JMeter/bin下面的jmeter.bat批处理文件来启动JMeter的可视化界面， </p><p>进入测试计划添加线程组: 设置线程数，循环次数，添加HTTP默认请求，服务器名称，IP，以及自己设定的携带参数</p><p>添加监听器，存放测试结果：聚合报告，可以表格查询、图形结果、树结果 </p><p>点击运行-》启动。 </p><p><span style="margin: 0px; padding: 0px; max-width: 100%; outline-style: initial; outline-width: 0px; word-break: break-all; font-family: KaiTi_GB2312; color: rgb(0, 0, 0); font-size: 14px; word-wrap: break-word !important;"></span></p><p>并发量：50W-100W 100W-500W</p></body></html>]]></content>
      
      
      <categories>
          
          <category> 分布式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 高并发 </tag>
            
            <tag> 分布式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>消息队列常见的 5 个应用场景</title>
      <link href="/2018/07/10/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E5%B8%B8%E8%A7%81%E7%9A%84%205%20%E4%B8%AA%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF/"/>
      <url>/2018/07/10/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E5%B8%B8%E8%A7%81%E7%9A%84%205%20%E4%B8%AA%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF/</url>
      
        <content type="html"><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script></head><body><p>消息队列中间件是分布式系统中重要的组件，主要解决应用耦合，异步消息，流量削锋等问题。实现高性能、高可用、可伸缩和最终一致性架构。使用较多的消息队列有ActiveMQ、RabbitMQ、ZeroMQ、Kafka、MetaMQ、RocketMQ。</p><a id="more"></a><p>一、简介</p><p>消息队列中间件是分布式系统中重要的组件，主要解决应用耦合，异步消息，流量削锋等问题。实现高性能、高可用、可伸缩和最终一致性架构。使用较多的消息队列有ActiveMQ、RabbitMQ、ZeroMQ、Kafka、MetaMQ、RocketMQ。</p><p>二、消息队列应用场景</p><p>以下介绍消息队列在实际应用中常用的使用场景：异步处理，应用解耦，流量削锋和消息通讯四个场景。</p><p>1、异步处理</p><p>场景说明：用户注册后，需要发注册邮件和注册短信。传统的做法有两种：串行的方式和并行方式。</p><p>串行方式：将注册信息写入数据库成功后，发送注册邮件，再发送注册短信。以上三个任务全部完成后，返回给客户。</p><p>并行方式：将注册信息写入数据库成功后，发送注册邮件的同时，发送注册短信。以上三个任务完成后，返回给客户端。与串行的差别是，并行的方式可以提高处理的时间。</p><p>假设三个业务节点每个使用50毫秒钟，不考虑网络等其他开销，则串行方式的时间是150毫秒，并行的时间可能是100毫秒。</p><p>因为CPU在单位时间内处理的请求数是一定的，假设CPU1秒内吞吐量是100次。则串行方式1秒内CPU可处理的请求量是7次（1000/150）。并行方式处理的请求量是10次（1000/100）。</p><p>小结：如以上案例描述，传统的方式系统的性能（并发量，吞吐量，响应时间）会有瓶颈。如何解决这个问题呢？</p><p>引入消息队列，将不是必须的业务逻辑，异步处理。改造后的架构如下：</p><p>按照以上约定，用户的响应时间相当于是注册信息写入数据库的时间，也就是50毫秒。注册邮件，发送短信写入消息队列后，直接返回，因此写入消息队列的速度很快，基本可以忽略，因此用户的响应时间可能是50毫秒。因此架构改变后，系统的吞吐量提高到每秒20QPS。比串行提高了3倍，比并行提高了两倍！</p><p>2、应用解耦</p><p>场景说明：用户下单后，订单系统需要通知库存系统。传统的做法是，订单系统调用库存系统的接口。如下图：</p><p>传统模式的缺点：</p><p>假如库存系统无法访问，则订单减库存将失败，从而导致订单失败，订单系统与库存系统耦合。</p><p>如何解决以上问题呢？引入应用消息队列后的方案，如下图：</p><p>订单系统：用户下单后，订单系统完成持久化处理，将消息写入消息队列，返回用户订单下单成功</p><p>库存系统：订阅下单的消息，采用拉/推的方式，获取下单信息，库存系统根据下单信息，进行库存操作</p><p>假如：在下单时库存系统不能正常使用。也不影响正常下单，因为下单后，订单系统写入消息队列就不再关心其他的后续操作了。实现订单系统与库存系统的应用解耦。</p><p>3、流量削锋</p><p>流量削锋也是消息队列中的常用场景，一般在秒杀或团抢活动中使用广泛！</p><p>应用场景：秒杀活动，一般会因为流量过大，导致流量暴增，应用挂掉。为解决这个问题，一般需要在应用前端加入消息队列。</p><p>可以控制活动的人数，可以缓解短时间内高流量压垮应用。</p><p>用户的请求，服务器接收后，首先写入消息队列。假如消息队列长度超过最大数量，则直接抛弃用户请求或跳转到错误页面。</p><p>秒杀业务根据消息队列中的请求信息，再做后续处理。</p><p>4、日志处理</p><p>日志处理是指将消息队列用在日志处理中，比如Kafka的应用，解决大量日志传输的问题。架构简化如下：</p><p>日志采集客户端，负责日志数据采集，定时写受写入Kafka队列；Kafka消息队列，负责日志数据的接收，存储和转发；日志处理应用：订阅并消费kafka队列中的日志数据。</p><p>以下是新浪kafka日志处理应用案例：</p><p>Kafka：接收用户日志的消息队列；</p><p>Logstash：做日志解析，统一成JSON输出给Elasticsearch；</p><p>Elasticsearch：实时日志分析服务的核心技术，一个schemaless，实时的数据存储服务，通过index组织数据，兼具强大的搜索和统计功能；</p><p>Kibana：基于Elasticsearch的数据可视化组件，超强的数据可视化能力是众多公司选择ELK stack的重要原因。</p><p>5、消息通讯</p><p>消息通讯是指，消息队列一般都内置了高效的通信机制，因此也可以用在纯的消息通讯。比如实现点对点消息队列，或者聊天室等。</p><p>点对点通讯：</p><p>客户端A和客户端B使用同一队列，进行消息通讯。</p><p>聊天室通讯：</p><p>客户端A，客户端B，客户端N订阅同一主题，进行消息发布和接收。实现类似聊天室效果。</p><p>以上实际是消息队列的两种消息模式，点对点或发布订阅模式。模型为示意图，供参考。</p><p>三、消息中间件示例<br>1、电商系统</p><p>消息队列采用高可用，可持久化的消息中间件。比如Active MQ，Rabbit MQ，Rocket Mq。</p><p>应用将主干逻辑处理完成后，写入消息队列。消息发送是否成功可以开启消息的确认模式。（消息队列返回消息接收成功状态后，应用再返回，这样保障消息的完整性）；</p><p>扩展流程（发短信，配送处理）订阅队列消息。采用推或拉的方式获取消息并处理；</p><p>消息将应用解耦的同时，带来了数据一致性问题，可以采用最终一致性方式解决。比如主数据写入数据库，扩展应用根据消息队列，并结合数据库方式实现基于消息队列的后续处理；</p><p>2、日志收集系统</p><p>分为Zookeeper注册中心，日志收集客户端，Kafka集群和Storm集群（OtherApp）四部分组成。</p><p>Zookeeper注册中心，提出负载均衡和地址查找服务；</p><p>日志收集客户端，用于采集应用系统的日志，并将数据推送到kafka队列；</p><p>Kafka集群：接收，路由，存储，转发等消息处理；</p><p>Storm集群：与OtherApp处于同一级别，采用拉的方式消费队列中的数据；</p></body></html>]]></content>
      
      
      <categories>
          
          <category> 消息队列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 消息队列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>为什么分布式一定要有Redis?</title>
      <link href="/2018/07/09/%E4%B8%BA%E4%BB%80%E4%B9%88%E5%88%86%E5%B8%83%E5%BC%8F%E4%B8%80%E5%AE%9A%E8%A6%81%E6%9C%89Redis/"/>
      <url>/2018/07/09/%E4%B8%BA%E4%BB%80%E4%B9%88%E5%88%86%E5%B8%83%E5%BC%8F%E4%B8%80%E5%AE%9A%E8%A6%81%E6%9C%89Redis/</url>
      
        <content type="html"><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script></head><body><p>考虑到绝大部分写业务的程序员，在实际开发中使用 Redis 的时候，只会 Set Value 和 Get Value 两个操作，对 Redis 整体缺乏一个认知。</p><a id="more"></a><p>为什么分布式一定要有Redis?<br>“<br>考虑到绝大部分写业务的程序员，在实际开发中使用 Redis 的时候，只会 Set Value 和 Get Value 两个操作，对 Redis 整体缺乏一个认知。</p><p>所以我斗胆以 Redis 为题材，对 Redis 常见问题做一个总结，希望能够弥补大家的知识盲点。</p><p>本文围绕以下几点进行阐述：</p><p>为什么使用 Redis</p><p>使用 Redis 有什么缺点</p><p>单线程的 Redis 为什么这么快</p><p>Redis 的数据类型，以及每种数据类型的使用场景</p><p>Redis 的过期策略以及内存淘汰机制</p><p>Redis 和数据库双写一致性问题</p><p>如何应对缓存穿透和缓存雪崩问题</p><p>如何解决 Redis 的并发竞争 Key 问题</p><p>为什么使用 Redis</p><p>我觉得在项目中使用 Redis，主要是从两个角度去考虑：性能和并发。</p><p>当然，Redis 还具备可以做分布式锁等其他功能，但是如果只是为了分布式锁这些其他功能，完全还有其他中间件，如 ZooKpeer 等代替，并不是非要使用 Redis。因此，这个问题主要从性能和并发两个角度去答。</p><p>性能</p><p>如下图所示，我们在碰到需要执行耗时特别久，且结果不频繁变动的 SQL，就特别适合将运行结果放入缓存。这样，后面的请求就去缓存中读取，使得请求能够迅速响应。</p><p>题外话：忽然想聊一下这个迅速响应的标准。根据交互效果的不同，这个响应时间没有固定标准。</p><p>不过曾经有人这么告诉我：”在理想状态下，我们的页面跳转需要在瞬间解决，对于页内操作则需要在刹那间解决。</p><p>另外，超过一弹指的耗时操作要有进度提示，并且可以随时中止或取消，这样才能给用户最好的体验。”</p><p>那么瞬间、刹那、一弹指具体是多少时间呢？</p><p>根据《摩诃僧祗律》记载：</p><p>一刹那者为一念，二十念为一瞬，二十瞬为一弹指，二十弹指为一罗预，二十罗预为一须臾，一日一夜有三十须臾。</p><p>那么，经过周密的计算，一瞬间为 0.36 秒、一刹那有 0.018 秒、一弹指长达 7.2 秒。</p><p>并发</p><p>如下图所示，在大并发的情况下，所有的请求直接访问数据库，数据库会出现连接异常。</p><p>这个时候，就需要使用 Redis 做一个缓冲操作，让请求先访问到 Redis，而不是直接访问数据库。</p><p>使用 Redis 有什么缺点</p><p>大家用 Redis 这么久，这个问题是必须要了解的，基本上使用 Redis 都会碰到一些问题，常见的也就几个。</p><p>回答主要是四个问题：</p><p>缓存和数据库双写一致性问题</p><p>缓存雪崩问题</p><p>缓存击穿问题</p><p>缓存的并发竞争问题</p><p>这四个问题，我个人觉得在项目中是常遇见的，具体解决方案，后文给出。</p><p>单线程的 Redis 为什么这么快</p><p>这个问题是对 Redis 内部机制的一个考察。根据我的面试经验，很多人都不知道 Redis 是单线程工作模型。所以，这个问题还是应该要复习一下的。</p><p>回答主要是以下三点：</p><p>纯内存操作</p><p>单线程操作，避免了频繁的上下文切换</p><p>采用了非阻塞 I/O 多路复用机制</p><p>题外话：我们现在要仔细的说一说 I/O 多路复用机制，因为这个说法实在是太通俗了，通俗到一般人都不懂是什么意思。</p><p>打一个比方：小曲在 S 城开了一家快递店，负责同城快送服务。小曲因为资金限制，雇佣了一批快递员，然后小曲发现资金不够了，只够买一辆车送快递。</p><p>经营方式一</p><p>客户每送来一份快递，小曲就让一个快递员盯着，然后快递员开车去送快递。</p><p>慢慢的小曲就发现了这种经营方式存在下述问题：</p><p>几十个快递员基本上时间都花在了抢车上了，大部分快递员都处在闲置状态，谁抢到了车，谁就能去送快递。</p><p>随着快递的增多，快递员也越来越多，小曲发现快递店里越来越挤，没办法雇佣新的快递员了。</p><p>快递员之间的协调很花时间。</p><p>综合上述缺点，小曲痛定思痛，提出了下面的经营方式。</p><p>经营方式二</p><p>小曲只雇佣一个快递员。然后呢，客户送来的快递，小曲按送达地点标注好，然后依次放在一个地方。</p><p>最后，那个快递员依次的去取快递，一次拿一个，然后开着车去送快递，送好了就回来拿下一个快递。</p><p>上述两种经营方式对比，是不是明显觉得第二种，效率更高，更好呢？</p><p>在上述比喻中：</p><p>每个快递员→每个线程</p><p>每个快递→每个 Socket(I/O 流)</p><p>快递的送达地点→Socket 的不同状态</p><p>客户送快递请求→来自客户端的请求</p><p>小曲的经营方式→服务端运行的代码</p><p>一辆车→CPU 的核数</p><p>于是我们有如下结论：</p><p>经营方式一就是传统的并发模型，每个 I/O 流(快递)都有一个新的线程(快递员)管理。</p><p>经营方式二就是 I/O 多路复用。只有单个线程(一个快递员)，通过跟踪每个 I/O 流的状态(每个快递的送达地点)，来管理多个 I/O 流。</p><p>下面类比到真实的 Redis 线程模型，如图所示：</p><p>简单来说，就是我们的 redis-client 在操作的时候，会产生具有不同事件类型的 Socket。</p><p>在服务端，有一段 I/O 多路复用程序，将其置入队列之中。然后，文件事件分派器，依次去队列中取，转发到不同的事件处理器中。</p><p>需要说明的是，这个 I/O 多路复用机制，Redis 还提供了 select、epoll、evport、kqueue 等多路复用函数库，大家可以自行去了解。</p><p>Redis 的数据类型，以及每种数据类型的使用场景</p><p>是不是觉得这个问题很基础？我也这么觉得。然而根据面试经验发现，至少百分之八十的人答不上这个问题。</p><p>建议，在项目中用到后，再类比记忆，体会更深，不要硬记。基本上，一个合格的程序员，五种类型都会用到。</p><p>String</p><p>这个没啥好说的，最常规的 set/get 操作，Value 可以是 String 也可以是数字。一般做一些复杂的计数功能的缓存。</p><p>Hash</p><p>这里 Value 存放的是结构化的对象，比较方便的就是操作其中的某个字段。</p><p>我在做单点登录的时候，就是用这种数据结构存储用户信息，以 CookieId 作为 Key，设置 30 分钟为缓存过期时间，能很好的模拟出类似 Session 的效果。</p><p>List</p><p>使用 List 的数据结构，可以做简单的消息队列的功能。另外还有一个就是，可以利用 lrange 命令，做基于 Redis 的分页功能，性能极佳，用户体验好。</p><p>Set</p><p>因为 Set 堆放的是一堆不重复值的集合。所以可以做全局去重的功能。为什么不用 JVM 自带的 Set 进行去重？</p><p>因为我们的系统一般都是集群部署，使用 JVM 自带的 Set，比较麻烦，难道为了一个做一个全局去重，再起一个公共服务，太麻烦了。</p><p>另外，就是利用交集、并集、差集等操作，可以计算共同喜好，全部的喜好，自己独有的喜好等功能。</p><p>Sorted Set</p><p>Sorted Set多了一个权重参数 Score，集合中的元素能够按 Score 进行排列。</p><p>可以做排行榜应用，取 TOP N 操作。Sorted Set 可以用来做延时任务。最后一个应用就是可以做范围查找。</p><p>Redis 的过期策略以及内存淘汰机制</p><p>这个问题相当重要，到底 Redis 有没用到家，这个问题就可以看出来。</p><p>比如你 Redis 只能存 5G 数据，可是你写了 10G，那会删 5G 的数据。怎么删的，这个问题思考过么？</p><p>还有，你的数据已经设置了过期时间，但是时间到了，内存占用率还是比较高，有思考过原因么?</p><p>回答：Redis 采用的是定期删除+惰性删除策略。</p><p>为什么不用定时删除策略</p><p>定时删除，用一个定时器来负责监视 Key，过期则自动删除。虽然内存及时释放，但是十分消耗 CPU 资源。</p><p>在大并发请求下，CPU 要将时间应用在处理请求，而不是删除 Key，因此没有采用这一策略。</p><p>定期删除+惰性删除是如何工作</p><p>定期删除，Redis 默认每个 100ms 检查，是否有过期的 Key，有过期 Key 则删除。</p><p>需要说明的是，Redis 不是每个 100ms 将所有的 Key 检查一次，而是随机抽取进行检查(如果每隔 100ms，全部 Key 进行检查，Redis 岂不是卡死)。</p><p>因此，如果只采用定期删除策略，会导致很多 Key 到时间没有删除。于是，惰性删除派上用场。</p><p>也就是说在你获取某个 Key 的时候，Redis 会检查一下，这个 Key 如果设置了过期时间，那么是否过期了？如果过期了此时就会删除。</p><p>采用定期删除+惰性删除就没其他问题了么?</p><p>不是的，如果定期删除没删除 Key。然后你也没即时去请求 Key，也就是说惰性删除也没生效。这样，Redis的内存会越来越高。那么就应该采用内存淘汰机制。</p><p>在 redis.conf 中有一行配置：</p><h1 id="maxmemory-policy-volatile-lru"><a href="#maxmemory-policy-volatile-lru" class="headerlink" title="maxmemory-policy volatile-lru"></a>maxmemory-policy volatile-lru</h1><p>该配置就是配内存淘汰策略的(什么，你没配过？好好反省一下自己)：</p><p>noeviction：当内存不足以容纳新写入数据时，新写入操作会报错。应该没人用吧。</p><p>allkeys-lru：当内存不足以容纳新写入数据时，在键空间中，移除最近最少使用的 Key。推荐使用，目前项目在用这种。</p><p>allkeys-random：当内存不足以容纳新写入数据时，在键空间中，随机移除某个 Key。应该也没人用吧，你不删最少使用 Key，去随机删。</p><p>volatile-lru：当内存不足以容纳新写入数据时，在设置了过期时间的键空间中，移除最近最少使用的 Key。这种情况一般是把 Redis 既当缓存，又做持久化存储的时候才用。不推荐。</p><p>volatile-random：当内存不足以容纳新写入数据时，在设置了过期时间的键空间中，随机移除某个 Key。依然不推荐。</p><p>volatile-ttl：当内存不足以容纳新写入数据时，在设置了过期时间的键空间中，有更早过期时间的 Key 优先移除。不推荐。</p><p>PS：如果没有设置 expire 的 Key，不满足先决条件(prerequisites)；那么 volatile-lru，volatile-random 和 volatile-ttl 策略的行为，和 noeviction(不删除) 基本上一致。</p><p>Redis 和数据库双写一致性问题</p><p>一致性问题是分布式常见问题，还可以再分为最终一致性和强一致性。数据库和缓存双写，就必然会存在不一致的问题。</p><p>答这个问题，先明白一个前提。就是如果对数据有强一致性要求，不能放缓存。我们所做的一切，只能保证最终一致性。</p><p>另外，我们所做的方案从根本上来说，只能说降低不一致发生的概率，无法完全避免。因此，有强一致性要求的数据，不能放缓存。</p><p>回答：首先，采取正确更新策略，先更新数据库，再删缓存。其次，因为可能存在删除缓存失败的问题，提供一个补偿措施即可，例如利用消息队列。</p><p>如何应对缓存穿透和缓存雪崩问题</p><p>这两个问题，说句实在话，一般中小型传统软件企业，很难碰到这个问题。如果有大并发的项目，流量有几百万左右。这两个问题一定要深刻考虑。</p><p>缓存穿透，即黑客故意去请求缓存中不存在的数据，导致所有的请求都怼到数据库上，从而数据库连接异常。</p><p>缓存穿透解决方案：</p><p>利用互斥锁，缓存失效的时候，先去获得锁，得到锁了，再去请求数据库。没得到锁，则休眠一段时间重试。</p><p>采用异步更新策略，无论 Key 是否取到值，都直接返回。Value 值中维护一个缓存失效时间，缓存如果过期，异步起一个线程去读数据库，更新缓存。需要做缓存预热(项目启动前，先加载缓存)操作。</p><p>提供一个能迅速判断请求是否有效的拦截机制，比如，利用布隆过滤器，内部维护一系列合法有效的 Key。迅速判断出，请求所携带的 Key 是否合法有效。如果不合法，则直接返回。</p><p>缓存雪崩，即缓存同一时间大面积的失效，这个时候又来了一波请求，结果请求都怼到数据库上，从而导致数据库连接异常。</p><p>缓存雪崩解决方案：</p><p>给缓存的失效时间，加上一个随机值，避免集体失效。</p><p>使用互斥锁，但是该方案吞吐量明显下降了。</p><p>双缓存。我们有两个缓存，缓存 A 和缓存 B。缓存 A 的失效时间为 20 分钟，缓存 B 不设失效时间。自己做缓存预热操作。</p><p>然后细分以下几个小点：从缓存 A 读数据库，有则直接返回；A 没有数据，直接从 B 读数据，直接返回，并且异步启动一个更新线程，更新线程同时更新缓存 A 和缓存 B。</p><p>如何解决 Redis 的并发竞争 Key 问题</p><p>这个问题大致就是，同时有多个子系统去 Set 一个 Key。这个时候大家思考过要注意什么呢？</p><p>需要说明一下，我提前百度了一下，发现答案基本都是推荐用 Redis 事务机制。</p><p>我并不推荐使用 Redis 的事务机制。因为我们的生产环境，基本都是 Redis 集群环境，做了数据分片操作。</p><p>你一个事务中有涉及到多个 Key 操作的时候，这多个 Key 不一定都存储在同一个 redis-server 上。因此，Redis 的事务机制，十分鸡肋。</p><p>如果对这个 Key 操作，不要求顺序</p><p>这种情况下，准备一个分布式锁，大家去抢锁，抢到锁就做 set 操作即可，比较简单。</p><p>如果对这个 Key 操作，要求顺序</p><p>假设有一个 key1，系统 A 需要将 key1 设置为 valueA，系统 B 需要将 key1 设置为 valueB，系统 C 需要将 key1 设置为 valueC。</p><p>期望按照 key1 的 value 值按照 valueA > valueB > valueC 的顺序变化。这种时候我们在数据写入数据库的时候，需要保存一个时间戳。</p><p>假设时间戳如下：</p><p>系统A key 1 {valueA  3:00}<br>系统B key 1 {valueB  3:05}<br>系统C key 1 {valueC  3:10}</p><p>那么，假设这会系统 B 先抢到锁，将 key1 设置为{valueB 3:05}。接下来系统 A 抢到锁，发现自己的 valueA 的时间戳早于缓存中的时间戳，那就不做 set 操作了，以此类推。</p><p>其他方法，比如利用队列，将 set 方法变成串行访问也可以。总之，灵活变通。</p><p>总结</p><p>本文对 Redis 的常见问题做了一个总结。大部分是自己在工作中遇到，以及之前面试别人的时候，爱问的一些问题。</p><p>另外，不推荐大家临时抱佛脚，真正碰到一些有经验的工程师，其实几下就能把你问懵。最后，希望大家有所收获吧。</p></body></html>]]></content>
      
      
      <categories>
          
          <category> 分布式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 高并发 </tag>
            
            <tag> 分布式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Boot 集成 Lombok 让代码更简洁!</title>
      <link href="/2018/06/05/Spring%20Boot%20%E9%9B%86%E6%88%90%20Lombok%20%E8%AE%A9%E4%BB%A3%E7%A0%81%E6%9B%B4%E7%AE%80%E6%B4%81!/"/>
      <url>/2018/06/05/Spring%20Boot%20%E9%9B%86%E6%88%90%20Lombok%20%E8%AE%A9%E4%BB%A3%E7%A0%81%E6%9B%B4%E7%AE%80%E6%B4%81!/</url>
      
        <content type="html"><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script></head><body><h3 id="lombok的威力"><a href="#lombok的威力" class="headerlink" title="lombok的威力"></a>lombok的威力</h3><p><a href="https://i.loli.net/2019/03/11/5c85b64e19a51.png" data-fancybox="group" data-caption="alt" class="fancybox"><img alt="alt" title="alt" data-src="https://i.loli.net/2019/03/11/5c85b64e19a51.png" class="lazyload"></a><br><a href="https://i.loli.net/2019/03/11/5c85b5f797450.png" data-fancybox="group" data-caption="简化代码" class="fancybox"><img alt="简化代码" title="简化代码" data-src="https://i.loli.net/2019/03/11/5c85b5f797450.png" class="lazyload"></a></p><h3 id="IntelliJ-IDEA安装lombok插件"><a href="#IntelliJ-IDEA安装lombok插件" class="headerlink" title="IntelliJ IDEA安装lombok插件"></a>IntelliJ IDEA安装lombok插件</h3><p>1、菜单栏 File > Settings > Plugins > Browse repositories…<br><a href="https://i.loli.net/2019/03/11/5c85b636a981e.png" data-fancybox="group" data-caption="alt" class="fancybox"><img alt="alt" title="alt" data-src="https://i.loli.net/2019/03/11/5c85b636a981e.png" class="lazyload"></a></p><p>2、搜索 Lombok Plugin 安装后，重启IDEA即可生效<br><a href="https://i.loli.net/2019/03/11/5c85b659d61c8.png" data-fancybox="group" data-caption="alt" class="fancybox"><img alt="alt" title="alt" data-src="https://i.loli.net/2019/03/11/5c85b659d61c8.png" class="lazyload"></a></p><h3 id="Spring-Boot项目中使用lombok"><a href="#Spring-Boot项目中使用lombok" class="headerlink" title="Spring Boot项目中使用lombok."></a>Spring Boot项目中使用lombok.</h3><p>1、添加lombok依赖<br><a href="https://i.loli.net/2019/03/11/5c85b67b0e9f0.png" data-fancybox="group" data-caption="alt" class="fancybox"><img alt="alt" title="alt" data-src="https://i.loli.net/2019/03/11/5c85b67b0e9f0.png" class="lazyload"></a></p><p>2、编写一个实体类 User，使用@Data注解<br><a href="https://i.loli.net/2019/03/11/5c85b68b392cc.png" data-fancybox="group" data-caption="alt" class="fancybox"><img alt="alt" title="alt" data-src="https://i.loli.net/2019/03/11/5c85b68b392cc.png" class="lazyload"></a></p><p>3、编写测试方法，测试@Data的作用<br><a href="https://i.loli.net/2019/03/11/5c85b69fcbb30.png" data-fancybox="group" data-caption="alt" class="fancybox"><img alt="alt" title="alt" data-src="https://i.loli.net/2019/03/11/5c85b69fcbb30.png" class="lazyload"></a><br><a href="https://i.loli.net/2019/03/11/5c85b6aae397b.png" data-fancybox="group" data-caption="alt" class="fancybox"><img alt="alt" title="alt" data-src="https://i.loli.net/2019/03/11/5c85b6aae397b.png" class="lazyload"></a></p><h3 id="其它简化代码的特性介绍"><a href="#其它简化代码的特性介绍" class="headerlink" title="其它简化代码的特性介绍"></a>其它简化代码的特性介绍</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">val : 最终局部变量</span><br><span class="line"><span class="meta">@NonNull</span> : 让你不在担忧并且爱上NullPointerException</span><br><span class="line"><span class="meta">@CleanUp</span> : 自动资源管理：不用再在<span class="keyword">finally</span>中添加资源的close方法</span><br><span class="line"><span class="meta">@Setter</span>/<span class="meta">@Getter</span> : 自动生成set和get方法</span><br><span class="line"><span class="meta">@ToString</span> : 自动生成toString方法</span><br><span class="line"><span class="meta">@EqualsAndHashcode</span> : 从对象的字段中生成hashCode和equals的实现</span><br><span class="line"><span class="meta">@NoArgsConstructor</span>/<span class="meta">@RequiredArgsConstructor</span>/<span class="meta">@AllArgsConstructor</span></span><br><span class="line">自动生成构造方法</span><br><span class="line"><span class="meta">@Data</span> : 自动生成set/get方法，toString方法，equals方法，hashCode方法，不带参数的构造方法</span><br><span class="line"><span class="meta">@Value</span> : 用于注解<span class="keyword">final</span>类</span><br><span class="line"><span class="meta">@Builder</span> : 产生复杂的构建器api类</span><br><span class="line"><span class="meta">@SneakyThrows</span> : 异常处理（谨慎使用）</span><br><span class="line"><span class="meta">@Synchronized</span> : 同步方法安全的转化</span><br><span class="line"><span class="meta">@Getter</span>(lazy=<span class="keyword">true</span>) :</span><br><span class="line"><span class="meta">@Log</span> : 支持各种logger对象，使用时用对应的注解，如：<span class="meta">@Log</span>4j</span><br></pre></td></tr></tbody></table></figure></div><h3 id="推荐用法"><a href="#推荐用法" class="headerlink" title="推荐用法"></a>推荐用法</h3><p>1、在 Bean / Entity 类上使用 @Data 注解。<br>2、需要使用 Log 对象的地方使用 @Log4j（依项目日志框架决定）。</p><p><strong>注意：lombok 的注解不能被继承。</strong></p><p>原文链接：<a href="https://www.jianshu.com/p/dd5349ac8473" target="_blank" rel="noopener">https://www.jianshu.com/p/dd5349ac8473</a></p></body></html>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Boot </tag>
            
            <tag> Lombok </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>想要做到高并发和高性能，请先真正的理解它们，以及跟CPU，内存，分布式又有什么关系呢?</title>
      <link href="/2018/06/01/%E6%83%B3%E8%A6%81%E5%81%9A%E5%88%B0%E9%AB%98%E5%B9%B6%E5%8F%91%E5%92%8C%E9%AB%98%E6%80%A7%E8%83%BD%EF%BC%8C%E8%AF%B7%E5%85%88%E7%9C%9F%E6%AD%A3%E7%9A%84%E7%90%86%E8%A7%A3%E5%AE%83%E4%BB%AC%EF%BC%8C%E4%BB%A5%E5%8F%8A%E8%B7%9FCPU%EF%BC%8C%E5%86%85%E5%AD%98%EF%BC%8C%E5%88%86%E5%B8%83%E5%BC%8F%E5%8F%88%E6%9C%89%E4%BB%80%E4%B9%88%E5%85%B3%E7%B3%BB%E5%91%A2/"/>
      <url>/2018/06/01/%E6%83%B3%E8%A6%81%E5%81%9A%E5%88%B0%E9%AB%98%E5%B9%B6%E5%8F%91%E5%92%8C%E9%AB%98%E6%80%A7%E8%83%BD%EF%BC%8C%E8%AF%B7%E5%85%88%E7%9C%9F%E6%AD%A3%E7%9A%84%E7%90%86%E8%A7%A3%E5%AE%83%E4%BB%AC%EF%BC%8C%E4%BB%A5%E5%8F%8A%E8%B7%9FCPU%EF%BC%8C%E5%86%85%E5%AD%98%EF%BC%8C%E5%88%86%E5%B8%83%E5%BC%8F%E5%8F%88%E6%9C%89%E4%BB%80%E4%B9%88%E5%85%B3%E7%B3%BB%E5%91%A2/</url>
      
        <content type="html"><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script></head><body><p>互联网应用系统开发肯定经常会看到高并发和高性能这两个词，可谓是耳熟能详，而具体的含义和关系真的如你所想的，真正的理解了吗？</p><p>这次，我也结合自己的理解，来跟大家分享一下。</p><p><a href="https://img4.mukewang.com/5afa59c00001f85205000479.jpg" data-fancybox="group" data-caption="alt" class="fancybox"><img alt="alt" title="alt" data-src="https://img4.mukewang.com/5afa59c00001f85205000479.jpg" class="lazyload"></a></p><p>先来看一个例子：</p><p>一个蓄水池，是1m<em>1m</em>1m=1立方米大小，有一个出水口，出水口每秒钟流出0.1立方米，那么这个蓄水池的并发量是1立方米，出水速度是0.1立方米/秒。</p><p>如果增加一个出水口，都是每秒钟流出0.1立方米，那么这个蓄水池的并发量没变，但是出水速度变成了0.2立方米/秒。</p><p>同理，增大了出水口，蓄水池的出水速度也变快了。</p><h3 id="上面我们很容易知道，并发量是一个容量的概念，性能就是出水速度，而且有下面这些结果。"><a href="#上面我们很容易知道，并发量是一个容量的概念，性能就是出水速度，而且有下面这些结果。" class="headerlink" title="上面我们很容易知道，并发量是一个容量的概念，性能就是出水速度，而且有下面这些结果。"></a>上面我们很容易知道，并发量是一个容量的概念，性能就是出水速度，而且有下面这些结果。</h3><p>1 增大蓄水池的长宽高，可以增加并发能力。</p><p>2 出水口如果扩大了出口大小，则可以提高出水的速度，也就是性能提高了。</p><p>3 增加出水口的数量，则是增加了并行处理的能力，同样可以提高性能。</p><h3 id="那么对照我们计算机中，我们的系统中，是怎么样的结果呢？"><a href="#那么对照我们计算机中，我们的系统中，是怎么样的结果呢？" class="headerlink" title="那么对照我们计算机中，我们的系统中，是怎么样的结果呢？"></a>那么对照我们计算机中，我们的系统中，是怎么样的结果呢？</h3><p>1 增加服务器的内存大小，可以增加并发量。因为内存增加了，就可以开更多的进程，更多的线程，也可以扩大任务队列的大小。</p><p>2 提高cpu的主频速度，优化程序，可以提高性能。cpu更快了，程序优化的更好了，处理单个任务的时间也就更短了。</p><p>3 增加多核甚至分布式服务器数量，也可以提高性能，同时提高并发量。</p><h3 id="如果只是性能提高了，并发量是否也能提高呢？"><a href="#如果只是性能提高了，并发量是否也能提高呢？" class="headerlink" title="如果只是性能提高了，并发量是否也能提高呢？"></a>如果只是性能提高了，并发量是否也能提高呢？</h3><p>如果我们静态的理解并发量，那它是不会提高的。</p><p>而我更愿意动态的来理解并发量，即：单位时间内可以进来的最大数量。</p><p>那么提高性能，是可以线性提高并发量的，因为单位时间内，进来的同时也有出去。</p><p>接下来，再来具体的分析下，上面的几种结果，是不是真的可以实现呢？是不是完全正确呢？</p><p>我们先来做一个假设，单个进程内存占用10M，单个线程内存占用2M，单个协程内存占用20K，队列任务内存占用2K，我们下面来看看内存与并发量的关系。</p><p>（具体的内存占用大小在不同的应用场景中会有很大的不同，所以这里只是为了方便计算而做的一个假设）</p><pre><code class="js">内存量  进程数  线程数  协程    队列任务<span class="number">1</span>G      <span class="number">100</span>     <span class="number">500</span>     <span class="number">50</span>K     <span class="number">500</span>K<span class="number">2</span>G      <span class="number">200</span>     <span class="number">1000</span>    <span class="number">100</span>K    <span class="number">1000</span>K<span class="number">4</span>G      <span class="number">400</span>     <span class="number">2000</span>    <span class="number">200</span>K    <span class="number">2000</span>K<span class="number">8</span>G      <span class="number">800</span>     <span class="number">4000</span>    <span class="number">400</span>K    <span class="number">4000</span>K</code></pre><h3 id="对应的几种运行模式"><a href="#对应的几种运行模式" class="headerlink" title="对应的几种运行模式"></a>对应的几种运行模式</h3><p>多进程： php fast-cgi</p><p>多线程： java web</p><p>协程：   go</p><p>队列：   nginx</p><p>从上面的结果中，我们可以很直观的看出来，并发能力在不同的运行模式中的巨大区别。</p><p>多进程和多线程的模式，不仅是内存开销巨大，而且在数量不断增加的情况下，对CPU的压力也是非常巨大，这也是为什么这类系统在并发量大的情况下会很不稳定，甚至宕机。</p><p>上面假设中计算出来的数据，都是静态的容量，如果所有任务都不处理，那么肯定都是会很快就被撑爆。</p><p>所以要达到更高的并发量，就需要有更快的处理速度，即做好性能优化。</p><p>下面，再来做一个假设。</p><p>我们现在有一台服务器，配置是8核16G内存。</p><p>如果我们的应用是计算密集型，纯运算的系统，如：数据索引查询、排序等操作。</p><p>而且还要假设，这个应用在多核并行运算时不存在锁竞争的情况（只读）。</p><p>qps=1000ms/单个请求耗时*8</p><p>如果单个请求（任务）耗时100ms，那么我们可以计算出来</p><p>qps=1000ms/100ms*8=80个/秒</p><p>如果我们优化处理的算法，单个请求耗时降低到10ms，那么</p><p>qps=1000ms/10ms*8=800个/秒</p><p>如果可以继续优化，将单个请求耗时降低到1ms，那么</p><p>qps就可以达到更高的8k。</p><p>上面的情况和优化的效果理解起来应该很容易，因为对服务器资源的依赖更多是CPU的运算能力和数量。</p><p>在实际的互联网应用中，系统更多是依赖mysql，redis，rest api或者微服务，属于IO密集型。</p><p>按照上面的计算方式，可能就不太准确了，因为cpu是有富余的。</p><p>在IO阻塞的时候，开启更多任务的方式当然有上面多进程、多线程、多协程和队列的方式来实现。</p><p>而且也是有效的更好的利用服务器资源的方法，可以达到更高的并发量，毕竟我们把大部分的运算放到了应用外部的mysql，redis，rest api等服务。</p><p>到此为止，我们已经知道并发量、性能优化跟服务器资源（服务器数量，cpu，内存）的关系，也知道性能优化对并发量的影响。</p><p>还有什么疑问呢？</p><h3 id="1-内存越多，并发量一定可以越大吗？"><a href="#1-内存越多，并发量一定可以越大吗？" class="headerlink" title="1 内存越多，并发量一定可以越大吗？"></a>1 内存越多，并发量一定可以越大吗？</h3><p>大部分情况是的。</p><p>这个问题，上面有提到过，对于多进程、多线程的模式，线程太多的时候，线程抢占时间片，CPU切换上下文会越来越慢。</p><p>对于协程、队列的运行模式，这个问题会好很多，当然协程调度、队列维护的开销，肯定也是会增加，只是增加的开销不至于对系统性能造成直线下降。</p><h3 id="2-CPU越快，应用的性能一定越好吗？"><a href="#2-CPU越快，应用的性能一定越好吗？" class="headerlink" title="2 CPU越快，应用的性能一定越好吗？"></a>2 CPU越快，应用的性能一定越好吗？</h3><p>绝对的。</p><p>只不过CPU和应用性能提升可能不成线性增长的关系，因为应用可能是IO密集型，应用性能还会受到IO阻塞的影响。</p><h3 id="3-CPU越多，应用的性能一定越好吗？"><a href="#3-CPU越多，应用的性能一定越好吗？" class="headerlink" title="3 CPU越多，应用的性能一定越好吗？"></a>3 CPU越多，应用的性能一定越好吗？</h3><p>大部分情况是的。</p><p>如果大量锁存在，性能提升可能会大打折扣，因为并行能力会被锁住，又变成单线程执行了，没有最大的发挥多CPU的作用。</p><h3 id="4-服务器越多，并发量一定越大吗？"><a href="#4-服务器越多，并发量一定越大吗？" class="headerlink" title="4 服务器越多，并发量一定越大吗？"></a>4 服务器越多，并发量一定越大吗？</h3><p>绝对的。</p><p>服务器增加，CPU和内存资源相应也就越多，并发能力也就会增大，他们之间是线性相关。</p><h3 id="5-服务器越多，性能一定越好吗？"><a href="#5-服务器越多，性能一定越好吗？" class="headerlink" title="5 服务器越多，性能一定越好吗？"></a>5 服务器越多，性能一定越好吗？</h3><p>大部分情况是的。</p><p>但是单个服务器的效率可能会是下降的，数据一致性问题、同步问题、锁问题，这些都会导致单个服务器的效率下降，所以不是线性相关。</p><p>如果只是考虑应用对CPU利用效率的话</p><p>单核>=多核>=多服务器</p><p>单进程单线程的系统对于服务器资源的利用率更高。</p><p>到多核的系统中，就会因为锁的问题，多任务同步的问题，操作系统调度的问题，造成一定的资源浪费。</p><p>而分布式系统中，这些浪费也会更严重。</p><h3 id="6-怎样更好的更有效的利用服务器资源呢？"><a href="#6-怎样更好的更有效的利用服务器资源呢？" class="headerlink" title="6 怎样更好的更有效的利用服务器资源呢？"></a>6 怎样更好的更有效的利用服务器资源呢？</h3><p>避免因为IO阻塞让CPU闲置，导致CPU的浪费；</p><p>避免多线程间增加锁来保证同步，导致并行系统串行化；</p><p>避免创建、销毁、维护太多进程、线程，导致操作系统浪费资源在调度上；</p><p>避免分布式系统中多服务器的关联，比如：依赖同一个mysql，程序逻辑中使用分布式锁，导致瓶颈在mysql，分布式又变成串行化运算。</p><p>上面说了要避免的地方，要具体怎么来避免，到具体的业务场景就需要具体分析了。</p><p>而且有些时候，为了业务功能，或者其它方面的需求，比如：可用性、伸缩性、扩展性、安全性，不得不牺牲掉一部分性能。</p><h3 id="最后，做一个总结："><a href="#最后，做一个总结：" class="headerlink" title="最后，做一个总结："></a>最后，做一个总结：</h3><p>并发量，是一个容量的概念，服务可以接受的最大任务数量，动态的看待它，还需要把性能考虑进去。</p><p>性能，是一个速度的概念，单位时间内可以处理的任务数量。</p><p>高并发和高性能是紧密相关的，提高应用的性能，是肯定可以提高系统的并发能力的。</p><p>应用性能优化的时候，对于计算密集型和IO密集型还是有很大差别，需要分开来考虑。</p><p>增加服务器资源（CPU、内存、服务器数量），绝大部分时候是可以提高应用的并发能力和性能（前提是应用能够支持多任务并行计算，多服务器分布式计算才行），但也是要避免其中的一些问题，才可以更好的更有效率的利用服务器资源。</p></body></html>]]></content>
      
      
      <categories>
          
          <category> 分布式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 高并发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于Spring Boot的Elasticsearch-5.5.2伪分布式是集群</title>
      <link href="/2018/05/25/%E5%9F%BA%E4%BA%8ESpring%20Boot%E7%9A%84Elasticsearch-5.5.2%E4%BC%AA%E5%88%86%E5%B8%83%E5%BC%8F%E6%98%AF%E9%9B%86%E7%BE%A4/"/>
      <url>/2018/05/25/%E5%9F%BA%E4%BA%8ESpring%20Boot%E7%9A%84Elasticsearch-5.5.2%E4%BC%AA%E5%88%86%E5%B8%83%E5%BC%8F%E6%98%AF%E9%9B%86%E7%BE%A4/</url>
      
        <content type="html"><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script></head><body><p>这就是我踩过的坑</p><p>我们先去官网下载elasticsearch</p><p>Windows：<a href="https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-5.2.0.zip" target="_blank" rel="noopener">https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-5.2.0.zip</a></p><p>Linux：<a href="https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-5.2.0.tar.gz" target="_blank" rel="noopener">https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-5.2.0.tar.gz</a></p><a id="more"></a><h3 id="这就是我踩过的坑"><a href="#这就是我踩过的坑" class="headerlink" title="这就是我踩过的坑"></a>这就是我踩过的坑</h3><p>我们先去官网下载elasticsearch</p><pre><code>Windows：https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-5.2.0.zipLinux：https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-5.2.0.tar.gz</code></pre><p>解压后我们复制三份出来分别命名为：elasticsearch-5.5.2-noed1、elasticsearch-5.5.2-noed2、elasticsearch-5.5.2-noed3<br>然后我们进入各个里面的config文件夹里面找到 elasticsearch.yml 文件，在最后添加上如下配置，IP地址换为自己电脑的IP地址。</p><p>elasticsearch-5.5.2-noed1：</p><pre><code>#节点1的配置信息：  cluster.name: elasticsearch   #集群名称，保证唯一  node.name: Elasticsearch-node1   #节点名称，必须不一样  network.host: 192.168.0.103   #必须为本机的ip地址  http.port: 9200   #服务端口号，在同一机器下必须不一样  transport.tcp.port : 9300   #集群间通信端口号，在同一机器下必须不一样  #设置集群自动发现机器ip集合  discovery.zen.ping.unicast.hosts: ["192.168.0.103:9300", "192.168.0.103:9301", "192.168.0.103:9302"]</code></pre><p>elasticsearch-5.5.2-noed2：</p><pre><code>#节点1的配置信息：  cluster.name: elasticsearch   #集群名称，保证唯一  node.name: Elasticsearch-node1   #节点名称，必须不一样  network.host: 192.168.0.103   #必须为本机的ip地址  http.port: 9201   #服务端口号，在同一机器下必须不一样  transport.tcp.port : 9301   #集群间通信端口号，在同一机器下必须不一样  #设置集群自动发现机器ip集合  discovery.zen.ping.unicast.hosts: ["192.168.0.103:9300", "192.168.0.103:9301", "192.168.0.103:9302"]</code></pre><p>elasticsearch-5.5.2-noed3：</p><pre><code>#节点1的配置信息：  cluster.name: elasticsearch   #集群名称，保证唯一  node.name: Elasticsearch-node1   #节点名称，必须不一样  network.host: 192.168.0.103   #必须为本机的ip地址  http.port: 9202   #服务端口号，在同一机器下必须不一样  transport.tcp.port : 9302   #集群间通信端口号，在同一机器下必须不一样  #设置集群自动发现机器ip集合  discovery.zen.ping.unicast.hosts: ["192.168.0.103:9300", "192.168.0.103:9301", "192.168.0.103:9302"]</code></pre><p>配置好之后就可以依次启动了，在bin目录下有启动脚本。</p><h2 id="注意：IP地址别用localhost-或者-127-0-0-1-这是一个深坑w-ﾟДﾟ-w"><a href="#注意：IP地址别用localhost-或者-127-0-0-1-这是一个深坑w-ﾟДﾟ-w" class="headerlink" title="注意：IP地址别用localhost 或者 127.0.0.1 这是一个深坑w(ﾟДﾟ)w"></a>注意：IP地址别用localhost 或者 127.0.0.1 这是一个深坑w(ﾟДﾟ)w</h2><p>启动之后我们安装ElasticSearch Head这个插件，如果你用谷歌浏览器又能翻墙的话建议直接到谷歌商店去下载，这样很方便，如果你不具备以上条件请自行百度安装方法（以下截图为谷歌商店）：</p><p><a href="http://www.hwy.ac.cn/upload/2018/05/1c23o36pbag4uon0nulpcmjt3d.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="http://www.hwy.ac.cn/upload/2018/05/1c23o36pbag4uon0nulpcmjt3d.png" class="lazyload"></a></p><p>以下是测试安装是否正确：<br><a href="http://www.hwy.ac.cn/upload/2018/05/s16kodfgjgjpoq7sqr7mpe7a63.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="http://www.hwy.ac.cn/upload/2018/05/s16kodfgjgjpoq7sqr7mpe7a63.png" class="lazyload"></a></p><p>接下来我们通过Spring Boot编写操作这个集群的Java代码，先看看我代码的目录结构：</p><p><a href="http://www.hwy.ac.cn/upload/2018/05/35di1ipmniif2r029a8q47eqaq.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="http://www.hwy.ac.cn/upload/2018/05/35di1ipmniif2r029a8q47eqaq.png" class="lazyload"></a></p><p>以下是我们的代码和配置文件，使用maven工程构建，我的maven版本为：apache-maven-3.3.9，JDK版本：jdk1.8.0_111<br>代码如下：</p><p>pom.xml</p><pre><code class="js"><project xmlns="<span" class="string">"http://maven.apache.org/POM/4.0.0" xmlns:xsi=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span>  xsi:schemaLocation=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>>  <modelversion><span class="number">4.0</span><span class="number">.0</span><<span class="regexp">/modelVersion></span><span class="regexp"></span><span class="regexp">  <groupid>com.yiroupId>  <artifactid>spring-boot-elasticsearch<<span class="regexp">/artifactId></span><span class="regexp">  <version>1.0-SNAPSHOT<!--</span-->version>  <packaging>jar<<span class="regexp">/packaging></span><span class="regexp"></span><span class="regexp">  <name>spring-boot-elasticsearch<!--</span-->name>  <url>http:<span class="comment">//maven.apache.org</span></url></name></span>  <properties>    <project.build.sourceencoding>UTF<span class="number">-8</span><<span class="regexp">/project.build.sourceEncoding></span><span class="regexp">    <spring-boot.version>2.0.0.RELEASE<!--</span-->spring-boot.version>    <hutool-all.version><span class="number">4.0</span><span class="number">.2</span><<span class="regexp">/hutool-all.version></span><span class="regexp">    <log4j.version>2.11.0<!--</span-->log4j.version>    <spring-data-elasticsearch.version><span class="number">3.0</span><span class="number">.3</span>.RELEASE<<span class="regexp">/spring-data-elasticsearch.version></span><span class="regexp">    <jna.version>4.5.1<!--</span-->jna.version>    <junit.version><span class="number">4.12</span><<span class="regexp">/junit.version></span><span class="regexp">  <!--</span-->properties>  <dependencies>    <!--spring boot框架-->    <dependency>      <groupid>org.springframework.boot<<span class="regexp">/groupId></span><span class="regexp">      <artifactid>spring-boot-starter-web<!--</span-->artifactId>      <version>${spring-boot.version}<<span class="regexp">/version></span><span class="regexp">    <!--</span-->dependency>    <!--Spring Boot视图模板-->    <dependency>      <groupid>org.springframework.boot<<span class="regexp">/groupId></span><span class="regexp">      <artifactid>spring-boot-starter-freemarker<!--</span-->artifactId>      <version>${spring-boot.version}<<span class="regexp">/version></span><span class="regexp">    <!--</span-->dependency>    <!--配置文件读取-->    <dependency>      <groupid>org.springframework.boot<<span class="regexp">/groupId></span><span class="regexp">      <artifactid>spring-boot-configuration-processor<!--</span-->artifactId>      <version>${spring-boot.version}<<span class="regexp">/version></span><span class="regexp">    <!--</span-->dependency>    <!--elasticsearch -->    <dependency>      <groupid>org.springframework.data<<span class="regexp">/groupId></span><span class="regexp">      <artifactid>spring-data-elasticsearch<!--</span-->artifactId>      <version>${spring-data-elasticsearch.version}<<span class="regexp">/version></span><span class="regexp">    <!--</span-->dependency>    <dependency>      <groupid>net.java.dev.jna<<span class="regexp">/groupId></span><span class="regexp">      <artifactid>jna<!--</span-->artifactId>      <version>${jna.version}<<span class="regexp">/version></span><span class="regexp">    <!--</span-->dependency>    <!--elasticsearch 必须依赖日志才能启动-->    <dependency>      <groupid>org.apache.logging.log4j<<span class="regexp">/groupId></span><span class="regexp">      <artifactid>log4j-api<!--</span-->artifactId>      <version>${log4j.version}<<span class="regexp">/version></span><span class="regexp">    <!--</span-->dependency>    <dependency>      <groupid>org.apache.logging.log4j<<span class="regexp">/groupId></span><span class="regexp">      <artifactid>log4j-core<!--</span-->artifactId>      <version>${log4j.version}<<span class="regexp">/version></span><span class="regexp">    <!--</span-->dependency>    <!--hutool 工具类-->    <dependency>      <groupid>cn.hutool<<span class="regexp">/groupId></span><span class="regexp">      <artifactid>hutool-all<!--</span-->artifactId>      <version>${hutool-all.version}<<span class="regexp">/version></span><span class="regexp">    <!--</span-->dependency>    <!--单元测试工具-->    <dependency>      <groupid>junit<<span class="regexp">/groupId></span><span class="regexp">      <artifactid>junit<!--</span-->artifactId>      <version>${junit.version}<<span class="regexp">/version></span><span class="regexp">    <!--</span-->dependency>  <<span class="regexp">/dependencies></span><span class="regexp"><!--</span-->project></span></span></version></artifactid></span></groupid></dependency></span></version></artifactid></span></groupid></dependency></span></version></artifactid></span></groupid></dependency></span></version></artifactid></span></groupid></dependency></span></version></artifactid></span></groupid></dependency></span></version></artifactid></span></groupid></dependency></span></version></artifactid></span></groupid></dependency></span></version></artifactid></span></groupid></dependency></span></version></artifactid></span></groupid></dependency></dependencies></span></junit.version></jna.version></span></spring-data-elasticsearch.version></log4j.version></span></hutool-all.version></spring-boot.version></span></project.build.sourceencoding></properties></packaging></version></span></artifactid></groupid></span></modelversion></project></code></pre><p>application.properties</p><pre><code># ELASTICSEARCH (ElasticsearchProperties})#集群名。(默认值: elasticsearch)spring.data.elasticsearch.cluster-name=elasticsearch#集群其他节点地址列表，用逗号分隔。如果没有指定，就启动一个客户端节点。默认 9300 是 Java 客户端的端口。spring.data.elasticsearch.cluster-nodes=192.168.0.103:9300#是否开启本地（我本地测试用就启用本地了）spring.data.elasticsearch.local=true#开启 Elasticsearch 仓库。(默认值:true。)spring.data.elasticsearch.repositories.enabled=true#存储索引的位置#spring.data.elasticsearch.properties.path.home=data/elasticsearch#日志存储目录#spring.data.elasticsearch.properties.path.logs=./elasticsearch/log#数据存储目录#spring.data.elasticsearch.properties.path.data=./elasticsearch/data#连接超时的时间#spring.data.elasticsearch.properties.transport.tcp.connect_timeout=120s</code></pre><p>Book.java</p><pre><code>package com.yi.model;import org.springframework.data.annotation.Id;import org.springframework.data.elasticsearch.annotations.Document;@Document(indexName = "book_index", type = "books")public class Book {    @Id    private String id;    private String title;    private String content;    private String author;    private String releaseDate;    public Book() {    }    public Book(String id, String title, String content, String author, String releaseDate) {        this.id = id;        this.title = title;        this.content = content;        this.author = author;        this.releaseDate = releaseDate;    }    忽略get和set方法，自己加上}</code></pre><p>BookRepository.java</p><pre><code>package com.yi.repository;import com.yi.model.Book;import org.springframework.data.domain.Page;import org.springframework.data.domain.Pageable;import org.springframework.data.elasticsearch.repository.ElasticsearchRepository;import java.util.List;/** * 描述: * * @author YI * @date 2018-3-21 12:08:48 **/public interface BookRepository extends ElasticsearchRepository<book, string> {    Page<book> findByAuthor(String author, Pageable pageable);    List<book> findByTitle(String title);    Book save(Book book);}</book></book></book,></code></pre><p>BookService.java</p><pre><code>package com.yi.service;import com.yi.model.Book;import org.springframework.data.domain.Page;import org.springframework.data.domain.PageRequest;import java.util.List;/** * 描述: * * @author YI * @date 2018-3-21 12:08:48 **/public interface BookService {    Book save(Book book);    void delete(Book book);    Iterable<book> findAll();    Page<book> findByAuthor(String author, PageRequest pageRequest);    List<book> findByTitle(String title);}</book></book></book></code></pre><p>BookServiceImpl.java</p><pre><code>package com.yi.service.impl;import com.yi.model.Book;import com.yi.repository.BookRepository;import com.yi.service.BookService;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.data.domain.Page;import org.springframework.data.domain.PageRequest;import org.springframework.stereotype.Service;import java.util.List;/** * 描述: * * @author YI * @date 2018-3-21 12:08:48 **/@Servicepublic class BookServiceImpl implements BookService {    @Autowired    private BookRepository bookRepository;    @Override    public Book save(Book book) {        return bookRepository.save(book);    }    @Override    public void delete(Book book) {        bookRepository.delete(book);    }    @Override    public Iterable<book> findAll() {        return bookRepository.findAll();    }    @Override    public Page<book> findByAuthor(String author, PageRequest pageRequest) {        return bookRepository.findByAuthor(author, pageRequest);    }    @Override    public List<book> findByTitle(String title) {        return bookRepository.findByTitle(title);    }}</book></book></book></code></pre><p>ElasticSearchController.java</p><pre><code>package com.yi.controller;import com.yi.model.Book;import com.yi.service.BookService;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.data.domain.Page;import org.springframework.data.domain.PageRequest;import org.springframework.stereotype.Controller;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.ResponseBody;import java.util.ArrayList;import java.util.List;/** * ElasticSearch操作 * @author YI * @date 2018-3-21 12:08:48 */@Controller@RequestMapping("/elasticsearch")public class ElasticSearchController {    @Autowired    private BookService bookService;    /**     * 保存到elasticsearch中     */    @RequestMapping("/save")    public void save(){        for (int i = 0; i < getTitle().size(); i++) {            bookService.save(new Book(String.valueOf(i), getTitle().get(i), getContent().get(i), "黄文懿", i + "-FEB-2017"));        }    }    /**     * 通过作者查找     * http://localhost:8080/elasticsearch/findByAuthor?name=黄文懿     * @param name     * @return     */    @RequestMapping("/findByAuthor")    @ResponseBody    public Page<book> findByAuthor(String name){        return bookService.findByAuthor(name, new PageRequest(0, 10));    }    /**     * 通过标题查找     * @return     */    @RequestMapping("/findByTitle")    @ResponseBody    public List<book> findByTitle(){        return bookService.findByTitle("如梦令");    }    private List<string> getTitle() {        List<string> list = new ArrayList<>();        list.add("《如梦令·常记溪亭日暮》");        list.add("《醉花阴·薄雾浓云愁永昼》");        list.add("《声声慢·寻寻觅觅》");        list.add("《永遇乐·落日熔金》");        list.add("《如梦令·昨夜雨疏风骤》");        list.add("《渔家傲·雪里已知春信至》");        list.add("《点绛唇·蹴[1]罢秋千》");        list.add("《点绛唇·寂寞深闺》");        list.add("《蝶恋花·泪湿罗衣脂粉满》");        list.add("《蝶恋花 离情》");        list.add("《浣溪沙》");        list.add("《浣溪沙》");        list.add("《浣溪沙》");        list.add("《浣溪沙》");        list.add("《浣溪沙》");        list.add("《减字木兰花·卖花担上》");        list.add("《临江仙·欧阳公作《蝶恋花》");        list.add("《临江仙·庭院深深深几许》");        list.add("《念奴娇·萧条庭院》");        list.add("《菩萨蛮·风柔日薄春犹早》");        list.add("《菩萨蛮·归鸿声断残云碧》");        list.add("《武陵春·风住尘香花已尽》");        list.add("《一剪梅·红藕香残玉蕈秋》");        list.add("《渔家傲·天接云涛连晓雾》");        list.add("《鹧鸪天·暗淡轻黄体性柔》");        list.add("《鹧鸪天·寒日萧萧上锁窗》");        list.add("《一剪梅·红藕香残玉簟秋》");        list.add("《如梦令·常记溪亭日暮》");        list.add("《浣溪沙》");        list.add("《浣溪沙》");        list.add("《浣溪沙》");        list.add("《蝶恋花·泪湿罗衣脂粉满》");        list.add("《蝶恋花·暖日晴风初破冻》");        list.add("《鹧鸪天·寒日萧萧上锁窗》");        list.add("《醉花阴·薄雾浓云愁永昼》");        list.add("《鹧鸪天·暗淡轻黄体性柔》");        list.add("《蝶恋花·永夜恹恹欢意少》");        list.add("《浣溪沙》");        list.add("《浣溪沙》");        list.add("《如梦令·谁伴明窗独坐》");        return list;    }    private List<string> getContent() {        List<string> list = new ArrayList<>();        list.add("初中 宋·李清照 常记溪亭日暮，沉醉不知归路，兴尽晚回舟，误入藕花深处。争渡，争渡");        list.add("重阳节 宋·李清照 薄雾浓云愁永昼，瑞脑消金兽。佳节又重阳，玉枕纱厨，半夜凉初透。东");        list.add("闺怨诗 宋·李清照 寻寻觅觅，冷冷清清，凄凄惨惨戚戚。乍暖还寒时候，最难将息。三杯两");        list.add("元宵节 宋·李清照 落日熔金，暮云合璧，人在何处。染柳烟浓，吹梅笛怨，春意知几许。元");        list.add("婉约诗 宋·李清照 昨夜雨疏风骤，浓睡不消残酒，试问卷帘人，却道海棠依旧。知否，知否");        list.add("描写梅花 宋·李清照 雪里已知春信至，寒梅点缀琼枝腻，香脸半开娇旖旎，当庭际，玉人浴出");        list.add(" 宋·李清照 蹴罢秋千，起来慵整纤纤手。露浓花瘦，薄汗轻衣透。见客入来，袜刬金");        list.add("闺怨诗 宋·李清照 寂寞深闺，柔肠一寸愁千缕。惜春春去。几点催花雨。倚遍阑干，只是无");        list.add("婉约诗 宋·李清照 泪湿罗衣脂粉满。四叠阳关，唱到千千遍。人道山长水又断。萧萧微雨闻");        list.add("描写春天 宋·李清照 暖雨晴风初破冻，柳眼梅腮，已觉春心动。酒意诗情谁与共？泪融残粉花");        list.add("寒食节 宋·李清照 淡荡春光寒食天，玉炉沈水袅残烟，梦回山枕隐花钿。海燕未来人斗草，");        list.add(" 宋·李清照 髻子伤春慵更梳，晚风庭院落梅初，淡云来往月疏疏，玉鸭薰炉闲瑞脑，");        list.add(" 宋·李清照 莫许杯深琥珀浓，未成沉醉意先融。疏钟已应晚来风。瑞脑香消魂梦断，");        list.add("闺怨诗 宋·李清照 小院闲窗春已深，重帘未卷影沉沉。倚楼无语理瑶琴，远岫出山催薄暮。");        list.add("爱情诗 宋·李清照 绣幕芙蓉一笑开，斜偎宝鸭亲香腮，眼波才动被人猜。一面风情深有韵，");        list.add("描写春天 宋·李清照 卖花担上，买得一枝春欲放。泪染轻匀，犹带彤霞晓露痕。怕郎猜道，奴");        list.add("》 宋·李清照 欧阳公作《蝶恋花》，有“深深深几许”之句，予酷爱之。用其语作“庭");        list.add("描写梅花 宋·李清照 庭院深深深几许，云窗雾阁春迟，为谁憔悴损芳姿。夜来清梦好，应是发");        list.add("寒食节 宋·李清照 萧条庭院，又斜风细雨，重门须闭。宠柳娇花寒食近，种种恼人天气。险");        list.add("思乡诗 宋·李清照 风柔日薄春犹早，夹衫乍著心情好。睡起觉微寒，梅花鬓上残。故乡何处");        list.add("描写春天 宋·李清照 归鸿声断残云碧，背窗雪落炉烟直。烛底凤钗明，钗头人胜轻。角声催晓");        list.add("闺怨诗 宋·李清照 风住尘香花已尽，日晚倦梳头。物是人非事事休，欲语泪先流。闻说双溪");        list.add(" 宋·李清照 红藕香残玉蕈秋，轻解罗裳，独上兰舟。云中谁寄锦书来？雁字回时，月");        list.add("豪放诗 宋·李清照 天接云涛连晓雾。星河欲转千帆舞。仿佛梦魂归帝所。闻天语。殷勤问我");        list.add("描写花 宋·李清照 暗淡轻黄体性柔。情疏迹远只香留。何须浅碧深红色，自是花中第一流。");        list.add("描写秋天 宋·李清照 寒日萧萧上琐窗，梧桐应恨夜来霜。酒阑更喜团茶苦，梦断偏宜瑞脑香。");        list.add("闺怨诗 宋·李清照 红藕香残玉簟秋。轻解罗裳，独上兰舟。云中谁寄锦书来？雁字回时，月");        list.add(" 宋·李清照 常记溪亭日暮。沈醉不知归路。兴尽晚回舟，误入藕花深处。争渡。争渡");        list.add(" 宋·李清照 莫许杯深琥珀浓。未成沈醉意先融。已应晚来风。瑞脑香消魂梦断，");        list.add(" 宋·李清照 小院闲窗春色深。重帘未卷影沈沈。倚楼无语理瑶琴。远岫出山催薄暮，");        list.add(" 宋·李清照 淡荡春光寒食天。玉炉沈水袅残烟。梦回山枕隐花钿。海燕未来人斗草，");        list.add(" 宋·李清照 泪湿罗衣脂粉满。四叠阳关，唱到千千遍。人道山长山又断。萧萧微雨闻");        list.add(" 宋·李清照 暖日晴风初破冻。柳眼眉腮，已觉春心动。酒意诗情谁与共。泪融残粉花");        list.add(" 宋·李清照 寒日萧萧上锁窗。梧桐应恨夜来霜。酒阑更喜团茶苦，梦断偏宜瑞脑香。");        list.add(" 宋·李清照 薄雾浓云愁永昼。瑞脑消金兽。佳节又重阳，玉枕纱厨，半夜凉初透。东");        list.add(" 宋·李清照 暗淡轻黄体性柔。情疏迹远只香留。何须浅碧深红色，自是花中第一流。");        list.add(" 宋·李清照 永夜恹恹欢意少。空梦长安，认取长安道。为报今年春色好。花光月影宜");        list.add(" 宋·李清照 髻子伤春慵更梳。晚风庭院落梅初。淡云来往月疏疏。玉鸭熏炉闲瑞脑，");        list.add(" 宋·李清照 绣面芙蓉一笑开。斜飞宝鸭衬香腮。眼波才动被人猜。一面风情深有韵，");        list.add(" 宋·李清照 谁伴明窗独坐，我共影儿俩个。灯尽欲眠时，影也把人抛躲。无那，无那");        return list;    }}</string></string></string></string></book></book></code></pre><p>Application.java</p><pre><code>package com.yi;import org.springframework.boot.SpringApplication;import org.springframework.boot.autoconfigure.SpringBootApplication;/** * Spring boot 启动程序 * @author YI * @date 2018-3-15 15:49:59 */@SpringBootApplicationpublic class Application {    public static void main(String[] args) {        SpringApplication.run(Application.class, args);    }}</code></pre><p>写好之后启动吧，通过浏览器或者其他工具访问你想访问的接口吧，下图就会访问保存数据接口后elasticsearch中的数据，可以通过elasticsearch-head访问：</p><p><a href="http://www.hwy.ac.cn/upload/2018/05/3gssim7b6egrkqt0uipknom811.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="http://www.hwy.ac.cn/upload/2018/05/3gssim7b6egrkqt0uipknom811.png" class="lazyload"></a></p></body></html>]]></content>
      
      
      <categories>
          
          <category> 搜索引擎 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Boot </tag>
            
            <tag> Elasticsearch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Solr空间搜索</title>
      <link href="/2018/01/19/Solr%E7%A9%BA%E9%97%B4%E6%90%9C%E7%B4%A2/"/>
      <url>/2018/01/19/Solr%E7%A9%BA%E9%97%B4%E6%90%9C%E7%B4%A2/</url>
      
        <content type="html"><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script></head><body><p>Solr空间搜索</p><p><strong>在fq中使用{!geofilt}</strong></p><p><a href="https://s2.ax1x.com/2020/02/26/3Ufphq.png" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="https://s2.ax1x.com/2020/02/26/3Ufphq.png" class="lazyload"></a></p><p>在</p><p><a href="https://s2.ax1x.com/2020/02/26/3U7LwT.png" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="https://s2.ax1x.com/2020/02/26/3U7LwT.png" class="lazyload"></a></p><p><strong>使用此搜索即可计算出空间搜索位置，目前可以使用空间搜索的有solr和mongodb</strong></p><p>如此简单就可以实现空搜范围搜索</p><p><a href="https://s2.ax1x.com/2020/02/26/3U7jkF.png" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="https://s2.ax1x.com/2020/02/26/3U7jkF.png" class="lazyload"></a></p></body></html>]]></content>
      
      
      <categories>
          
          <category> 搜索引擎 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Boot </tag>
            
            <tag> Solr </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>S2SH框架环境搭建</title>
      <link href="/2017/12/14/S2SH%E6%A1%86%E6%9E%B6%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
      <url>/2017/12/14/S2SH%E6%A1%86%E6%9E%B6%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script></head><body><h1 id="1-使用HibernateDaoSupport简化整合代码"><a href="#1-使用HibernateDaoSupport简化整合代码" class="headerlink" title="1.使用HibernateDaoSupport简化整合代码"></a>1.使用HibernateDaoSupport简化整合代码</h1><p>原理：HibernateDaoSupport类有一个HibernateTemplate成员变量，提供一个setSessionFactory的方法，用于注入SessionFactory，把HibernateTemplate创建出来。</p><p><a href="https://s2.ax1x.com/2020/02/27/3doan0.png" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="https://s2.ax1x.com/2020/02/27/3doan0.png" class="lazyload"></a></p><p>1）让dao类继承HibernateDaoSupport类</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public class ProductDao extends HibernateDaoSupport implements IProductDao {</span><br><span class="line"> </span><br><span class="line">@Override</span><br><span class="line">public List<product> findAll() {</product></span><br><span class="line">return this.getHibernateTemplate().loadAll(Product.class);</span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line">@Override</span><br><span class="line">public void save(Product p) {</span><br><span class="line">this.getHibernateTemplate().save(p);</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p>2）简化applicationContext.xml配置文件</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><bean id="sessionFactory" class="org.springframework.orm.hibernate5.LocalSessionFactoryBean"></bean></span><br><span class="line"><!-- configLocation：用于加载hibernate.cfg.xml文件 --></span><br><span class="line"><property name="configLocation" value="classpath:/hibernate.cfg.xml"></property></span><br><span class="line"></span><br><span class="line"><!-- 创建dao --></span><br><span class="line"><bean id="productDao" class="gz.itheima.dao.impl.ProductDao"></bean></span><br><span class="line"><property name="sessionFactory" ref="sessionFactory"></property></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure></div><h1 id="2-Spring整合Hibernate-的两套方案"><a href="#2-Spring整合Hibernate-的两套方案" class="headerlink" title="2.Spring整合Hibernate 的两套方案"></a>2.Spring整合Hibernate 的两套方案</h1><p>2.1 存在hibernate.cfg.xml文件</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><bean id="sessionFactory" class="org.springframework.orm.hibernate5.LocalSessionFactoryBean"></bean></span><br><span class="line"><!-- configLocation：用于加载hibernate.cfg.xml文件 --></span><br><span class="line"><property name="configLocation" value="classpath:/hibernate.cfg.xml"></property></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure></div><p>2.2 不需要hibernate.cfg.xml文件（重点看）</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><bean id="sessionFactory" class="org.springframework.orm.hibernate5.LocalSessionFactoryBean"></bean></span><br><span class="line"><!-- 注入连接池 --></span><br><span class="line"><property name="dataSource" ref="dataSource"></property></span><br><span class="line"><!-- 注入hibernate属性 --></span><br><span class="line"><property name="hibernateProperties"></property></span><br><span class="line"><props></props></span><br><span class="line"><prop key="hibernate.dialect">org.hibernate.dialect.MySQL5Dialect</prop></span><br><span class="line"><prop key="hibernate.show_sql">true</prop></span><br><span class="line"><prop key="hibernate.format_sql">true</prop></span><br><span class="line"><prop key="hibernate.hbm2ddl.auto">update</prop></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><!-- 注入映射文件的信息 --></span><br><span class="line"><property name="mappingResources"></property></span><br><span class="line"><array></array></span><br><span class="line"><value>gz/itheima/entity/Category.hbm.xml</value></span><br><span class="line"><value>gz/itheima/entity/Product.hbm.xml</value></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure></div><h1 id="3-Spring整合Struts2"><a href="#3-Spring整合Struts2" class="headerlink" title="3.Spring整合Struts2"></a>3.Spring整合Struts2</h1><p>3.1 单独开发业务层，把事务切换到业务层</p><p>1)类</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">public class ProductBiz implements IProductBiz {</span><br><span class="line">    //注入dao</span><br><span class="line">    private IProductDao productDao;</span><br><span class="line">        public void setProductDao(IProductDao productDao) {</span><br><span class="line">        this.productDao = productDao;</span><br><span class="line">    }</span><br><span class="line">     </span><br><span class="line">    @Override</span><br><span class="line">        public List<product> findAll() {</product></span><br><span class="line">        return productDao.findAll();</span><br><span class="line">    }</span><br><span class="line">     </span><br><span class="line">    @Override</span><br><span class="line">        public void save(Product p) {</span><br><span class="line">        productDao.save(p);</span><br><span class="line">    }</span><br><span class="line">     </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p>2）配置</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><!-- 创建biz --></span><br><span class="line"><bean id="prductBiz" class="gz.itheima.biz.impl.ProductBiz"></bean></span><br><span class="line"><property name="productDao" ref="productDao"></property></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure></div><p>修改事务配置，把切入点换成业务层类</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><!-- 配置Spring的事务管理 --></span><br><span class="line"><!-- 1.创建事务管理器 --></span><br><span class="line"><bean id="transactionManager" class="org.springframework.orm.hibernate5.HibernateTransactionManager"></bean></span><br><span class="line"><property name="sessionFactory" ref="sessionFactory"></property></span><br><span class="line"></span><br><span class="line"><!-- 2.创建事务通知 --></span><br><span class="line"><tx:advice id="txAdvice" transaction-manager="transactionManager"></tx:advice></span><br><span class="line"><tx:attributes></tx:attributes></span><br><span class="line"><tx:method name="*" isolation="DEFAULT" propagation="REQUIRED"></tx:method></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><!-- 3.配置切面 --></span><br><span class="line"><aop:config></aop:config></span><br><span class="line"><aop:pointcut expression="execution(* gz.itheima.biz.impl.*Biz.*(..))" id="myPT"></aop:pointcut></span><br><span class="line"><aop:advisor advice-ref="txAdvice" pointcut-ref="myPT"></aop:advisor></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure></div><p>3）测试</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">@RunWith(SpringJUnit4ClassRunner.class)</span><br><span class="line">@ContextConfiguration({"classpath:/applicationContext.xml"})</span><br><span class="line">public class Demo1 {</span><br><span class="line">    //注入biz</span><br><span class="line">    @Resource(name="productBiz")</span><br><span class="line">    private IProductBiz productBiz;</span><br><span class="line">    @Test</span><br><span class="line">    public void test1(){</span><br><span class="line">        Product p  =new Product();</span><br><span class="line">        p.setName("vivo");</span><br><span class="line">        productBiz.save(p);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p>注意：一旦把事务换到了业务层后，dao层的测试代码就不可用了！因为dao层没有事务啦!</p><p>3.2 单独使用Struts2框架</p><p>1）包</p><p>Struts2最小包（12）</p><p><strong>注意：不要导入javassist-3.11.0.GA.jar,因为hibernate框架有了这个包，并且版本更高！</strong></p><p>2）类和页面</p><p>Add.jsp页面</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><s:form action="product_add"></s:form></span><br><span class="line">  <br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  </span><table border="1"><tbody><tr><td>产品名称</td><td><s:textfield name="name"></s:textfield></td></tr><tr><td><input type="submit" value="保存"></td></tr></tbody></table></span><br><span class="line">  </span><br></pre></td></tr></tbody></table></figure></div><p>ProductAction</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">public class ProductAction extends ActionSupport implements ModelDriven<product>{</product></span><br><span class="line">//接收参数</span><br><span class="line">    private Product p = new Product();</span><br><span class="line">    /**</span><br><span class="line">     * 保存数据</span><br><span class="line">     */</span><br><span class="line">    public String add(){</span><br><span class="line">        System.out.println(p);</span><br><span class="line">        //调用业务</span><br><span class="line">        //回显信息页面</span><br><span class="line">        ActionContext ac = ActionContext.getContext();</span><br><span class="line">        ac.put("msg", "添加成功");</span><br><span class="line">        return SUCCESS;</span><br><span class="line">    }</span><br><span class="line">     </span><br><span class="line">    @Override</span><br><span class="line">        public Product getModel() {</span><br><span class="line">        return p;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p>3）配置</p><p>Web.xml</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><!-- struts的核心过滤器 --></span><br><span class="line">  <filter></filter></span><br><span class="line">  <filter-name>struts2</filter-name></span><br><span class="line"><filter-class>org.apache.struts2.dispatcher.ng.filter.StrutsPrepareAndExecuteFilter</filter-class></span><br><span class="line">  </span><br><span class="line">  <filter-mapping></filter-mapping></span><br><span class="line">  <filter-name>struts2</filter-name></span><br><span class="line">  <url-pattern>/*</url-pattern></span><br><span class="line">  </span><br></pre></td></tr></tbody></table></figure></div><p>Struts.xml</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><!--?xml version="1.0" encoding="UTF-8" ?--></span><br><span class="line"><br><span class="line">"-//Apache Software Foundation//DTD Struts Configuration 2.3//EN"</span><br><span class="line">"http://struts.apache.org/dtds/struts-2.3.dtd"></span><br><span class="line"> </span><br><span class="line"><struts></struts></span><br><span class="line"><!-- 修改struts的UI模块 ,该为简单模板--></span><br><span class="line"><constant name="struts.ui.theme" value="simple"></constant></span><br><span class="line"> </span><br><span class="line"><package name="ssh" extends="struts-default" namespace="/"></package></span><br><span class="line"><action name="product_*" class="gz.itheima.web.ProductAction" method="{1}"></action></span><br><span class="line"><result>/succ.jsp</result></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br></span></pre></td></tr></tbody></table></figure></div><p>4）测试</p><p>部署tomcat，浏览器访问：</p><p><a href="http://localhost:8080/day38_04_ssh_1/add.jsp" target="_blank" rel="noopener">http://localhost:8080/day38_04_ssh_1/add.jsp</a></p><p>3.3 Spring框架整合Strut2</p><p>1）在Spring没有整合Struts2的情况下，需要手动到spring的IOC工厂获取biz对象</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//1.不整合的情况下，直接调用spring的IOC工厂的biz的对象</span><br><span class="line">ApplicationContext context = new ClassPathXmlApplicationContext("/applicationContext.xml");</span><br><span class="line">productBiz = (IProductBiz)context.getBean("productBiz");</span><br><span class="line">productBiz.save(p);</span><br></pre></td></tr></tbody></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">注意：这种情况下，action每次都需要重新读取applicationContext.xml文件，重新创建IOC工厂，效率是非常低的！</span><br></pre></td></tr></tbody></table></figure></div><p>2）Spring框架整合struts2（重点）</p><p>原理：Spring框架提供了一个web监听器，放在spring-web的jar里面。</p><p><a href="https://s2.ax1x.com/2020/02/27/3doBAU.png" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="https://s2.ax1x.com/2020/02/27/3doBAU.png" class="lazyload"></a></p><p>这个web监听器（ContextLoaderListener），主要是用于在项目启动的时候，一次性地把applicationContext.xml文件加载进内存，方便表现层去使用spring的对象。</p><p><a href="https://s2.ax1x.com/2020/02/27/3doccR.png" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="https://s2.ax1x.com/2020/02/27/3doccR.png" class="lazyload"></a></p><p>整合步骤：</p><p>1）导入spring-web的jar包</p><p><a href="https://s2.ax1x.com/2020/02/27/3doWB6.png" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="https://s2.ax1x.com/2020/02/27/3doWB6.png" class="lazyload"></a></p><p>2）在web.xml配置web监听器</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><!-- 配置spring的web监听器，用于加载applicationContext.xml --></span><br><span class="line"> <!-- 默认情况下，到WEB-INF目录下读取applicationContext.xml --></span><br><span class="line"> <listener></listener></span><br><span class="line"> <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class></span><br><span class="line"> </span><br><span class="line"> <!-- 修改web监听器读取文件的路径 --></span><br><span class="line"> <context-param></context-param></span><br><span class="line"> <param-name>contextConfigLocation</param-name></span><br><span class="line"> <param-value>classpath:applicationContext.xml</param-value></span><br><span class="line"> </span><br></pre></td></tr></tbody></table></figure></div><p>3）修改action代码，从内存取出biz对象</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//2.Spring整合struts2</span><br><span class="line">//从内存中取出biz对象</span><br><span class="line">ApplicationContext context = </span><br><span class="line">WebApplicationContextUtils.getWebApplicationContext(ServletActionContext.getServletContext());</span><br><span class="line">productBiz = (IProductBiz)context.getBean("productBiz");</span><br><span class="line">productBiz.save(p);</span><br></pre></td></tr></tbody></table></figure></div><p>注意：这种情况下，action的代码比较麻烦，所以struts2提供了整合spring的方案，简化action获取biz对象的代码</p><p>3.4 Struts2框架整合Spring</p><p>1）导入struts2-spring-plugin的jar包</p><p><a href="https://s2.ax1x.com/2020/02/27/3dTpCQ.png" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="https://s2.ax1x.com/2020/02/27/3dTpCQ.png" class="lazyload"></a></p><p>Struts-plugin.xml : 编写了一个拦截器。主要用于让action获取到spring环境的对象</p><p><a href="https://s2.ax1x.com/2020/02/27/3do73d.png" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="https://s2.ax1x.com/2020/02/27/3do73d.png" class="lazyload"></a></p><p>2）修改action类和配置文件</p><p>方案一：Action对象是由Struts2创建的（根据spring的名称（bean的id）自动匹配）</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">private IProductBiz productBiz;</span><br><span class="line">public void setProductBiz(IProductBiz productBiz) {</span><br><span class="line">this.productBiz = productBiz;</span><br><span class="line">}</span><br><span class="line"><!-- 创建biz --></span><br><span class="line"><bean id="productBiz" class="gz.itheima.biz.impl.ProductBiz"></bean></span><br><span class="line"><property name="productDao" ref="productDao"></property></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure></div><p>方案二：Action对象是由Spring创建  （推荐使用）</p><p>在applicationContext.xml创建action对象</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><!-- 创建 action --></span><br><span class="line"><bean id="productAction" class="gz.itheima.web.ProductAction"></bean></span><br><span class="line"><property name="prdoBiz" ref="productBiz"></property></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure></div><p>修改struts.xml文件的class属性</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><action name="product_*" class="productAction" method="{1}"></action></span><br><span class="line"><result>/succ.jsp</result></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure></div><p><a href="https://s2.ax1x.com/2020/02/27/3dTVET.png" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="https://s2.ax1x.com/2020/02/27/3dTVET.png" class="lazyload"></a></p><p>注意：在方案二的情况，spring创建出来的action必须是设置成多例，否则会出现线程并发问题！</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><bean id="productAction" class="gz.itheima.web.ProductAction" scope="prototype"></bean></span><br><span class="line"><property name="prdoBiz" ref="productBiz"></property></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure></div><h1 id="4-解决Hibernate延迟加载数据显示问题"><a href="#4-解决Hibernate延迟加载数据显示问题" class="headerlink" title="4.解决Hibernate延迟加载数据显示问题"></a>4.解决Hibernate延迟加载数据显示问题</h1><p>原理：spring框架设计了一个过滤器：OpenSessionInViewFilter</p><p><a href="https://s2.ax1x.com/2020/02/27/3dTK29.png" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="https://s2.ax1x.com/2020/02/27/3dTK29.png" class="lazyload"></a></p><p><a href="https://s2.ax1x.com/2020/02/27/3dT1Dx.png" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="https://s2.ax1x.com/2020/02/27/3dT1Dx.png" class="lazyload"></a></p><p>配置步骤：</p><p>在web.xml配置过滤器</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><!-- 注意：OpenSessionInViewFilter必须配置在struts2的前面 --></span><br><span class="line"> <filter></filter></span><br><span class="line">   <filter-name>OpenSessionInViewFilter</filter-name></span><br><span class="line">   <filter-class>org.springframework.orm.hibernate5.support.OpenSessionInViewFilter</filter-class></span><br><span class="line"> </span><br><span class="line"> <filter-mapping></filter-mapping></span><br><span class="line">   <filter-name>OpenSessionInViewFilter</filter-name></span><br><span class="line">   <url-pattern>/*</url-pattern></span><br><span class="line"> </span><br></pre></td></tr></tbody></table></figure></div><p>注意：必须把这个过滤器配置在struts2的配置前面才会生效！</p><h3 id="问题建议"><a href="#问题建议" class="headerlink" title="问题建议"></a>问题建议</h3><ul><li>联系我的邮箱：<a href="mailto:ilovey_hwy@163.com">ilovey_hwy@163.com</a></li><li>我的博客：<a href="http://hwy.ac.cn">http://hwy.ac.cn</a></li><li>GitHub：<a href="https://www.github.com/HWYWL" target="_blank" rel="noopener">https://www.github.com/HWYWL</a></li></ul></body></html>]]></content>
      
      
      <categories>
          
          <category> ORM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ORM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring MVC数据自动绑定</title>
      <link href="/2017/05/27/Spring%20MVC%E6%95%B0%E6%8D%AE%E8%87%AA%E5%8A%A8%E7%BB%91%E5%AE%9A/"/>
      <url>/2017/05/27/Spring%20MVC%E6%95%B0%E6%8D%AE%E8%87%AA%E5%8A%A8%E7%BB%91%E5%AE%9A/</url>
      
        <content type="html"><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script></head><body><p>通过例子介绍几种自动绑定方式：</p><p>SpringmvcServletAPI .java</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line">package com.yi.controller;</span><br><span class="line"></span><br><span class="line">import com.yi.entity.User;</span><br><span class="line">import com.yi.entity.Users;</span><br><span class="line">import org.springframework.stereotype.Controller;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"></span><br><span class="line">import javax.servlet.http.HttpServletRequest;</span><br><span class="line">import javax.servlet.http.HttpSession;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 数据自动绑定</span><br><span class="line"> * Created by Administrator on 2017/4/17.</span><br><span class="line"> */</span><br><span class="line">@Controller</span><br><span class="line">public class SpringmvcServletAPI {</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 将字段与表单字段一一对应就能自动绑定</span><br><span class="line">     * @param session</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    @RequestMapping(value = "login")</span><br><span class="line">    public String login(HttpSession session, String username){</span><br><span class="line">        System.out.println("用户名：" + username);</span><br><span class="line">        session.setAttribute("username",username);</span><br><span class="line">        return "index.jsp";</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 将pojo(Javabean)的字段与前端字段一一对应就能自动绑定</span><br><span class="line">     * @param request</span><br><span class="line">     * @param user</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    @RequestMapping(value = "getup")</span><br><span class="line">    public String login(HttpServletRequest request, User user){</span><br><span class="line">        System.out.println("账号：" + user.getUsername());</span><br><span class="line">        System.out.println("密码：" + user.getPassword());</span><br><span class="line"></span><br><span class="line">        request.setAttribute("user",user);</span><br><span class="line">        return "index.jsp";</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 将list集合中元素的字段与前端字段一一对应就能自动绑定</span><br><span class="line">     * @param request</span><br><span class="line">     * @param users</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    @RequestMapping(value = "batchinput")</span><br><span class="line">    public String login(HttpServletRequest request,Users users){</span><br><span class="line">        System.out.println("长度：" + users.getUsers().size());</span><br><span class="line">        for (User user:users.getUsers()</span><br><span class="line">             ) {</span><br><span class="line">            System.out.println("账号：" + user.getUsername());</span><br><span class="line">            System.out.println("密码：" + user.getPassword());</span><br><span class="line">        }</span><br><span class="line">        request.setAttribute("list",users.getUsers());</span><br><span class="line"></span><br><span class="line">        return "index.jsp";</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 将数组的字段与前端字段对应就能自动绑定</span><br><span class="line">     * @param request</span><br><span class="line">     * @param username</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    @RequestMapping(value = "arrayinput")</span><br><span class="line">    public String login(HttpServletRequest request,String[] username){</span><br><span class="line">        for (String name:username</span><br><span class="line">             ) {</span><br><span class="line">            System.out.println("姓名：" + name);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        request.setAttribute("nameArr",username);</span><br><span class="line">        return "index.jsp";</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p>User.java</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">package com.yi.entity;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 用户信息pojo</span><br><span class="line"> * Created by Administrator on 2017/4/18.</span><br><span class="line"> */</span><br><span class="line">public class User {</span><br><span class="line">    private Integer uid;</span><br><span class="line">    private String username;</span><br><span class="line">    private String password;</span><br><span class="line"></span><br><span class="line">    public User() {</span><br><span class="line">        super();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    public User(Integer uid, String username, String password) {</span><br><span class="line">        this.uid = uid;</span><br><span class="line">        this.username = username;</span><br><span class="line">        this.password = password;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    public User(String username, String password) {</span><br><span class="line">        this.username = username;</span><br><span class="line">        this.password = password;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    public Integer getUid() {</span><br><span class="line">        return uid;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    public void setUid(Integer uid) {</span><br><span class="line">        this.uid = uid;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    public String getUsername() {</span><br><span class="line">        return username;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    public void setUsername(String username) {</span><br><span class="line">        this.username = username;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    public String getPassword() {</span><br><span class="line">        return password;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    public void setPassword(String password) {</span><br><span class="line">        this.password = password;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String toString() {</span><br><span class="line">        return "User{" +</span><br><span class="line">                "uid=" + uid +</span><br><span class="line">                ", username='" + username + '\'' +</span><br><span class="line">                ", password='" + password + '\'' +</span><br><span class="line">                '}';</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p>Users.java</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">package com.yi.entity;</span><br><span class="line"></span><br><span class="line">import java.util.ArrayList;</span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 封装User到集合中，用户数据绑定</span><br><span class="line"> * Created by Administrator on 2017/4/18.</span><br><span class="line"> */</span><br><span class="line">public class Users {</span><br><span class="line">    List<user> users = new ArrayList<>();</user></span><br><span class="line"></span><br><span class="line">    public List<user> getUsers() {</user></span><br><span class="line">        return users;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    public void setUsers(List<user> users) {</user></span><br><span class="line">        this.users = users;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p>index.jsp</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><%--</span><br><span class="line">  Created by IntelliJ IDEA.</span><br><span class="line">  User: Administrator</span><br><span class="line">  Date: 2017/4/17</span><br><span class="line">  Time: 20:28</span><br><span class="line">  To change this template use File | Settings | File Templates.</span><br><span class="line">--%></span><br><span class="line"><%@ page contentType="text/html;charset=UTF-8" language="java" %></span><br><span class="line"><%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">    <title>$Title$</title></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">    <h3>SpringMVC自动绑定字段</h3><hr></span><br><span class="line">    ${username},欢迎回来...<br></span><br><span class="line"></span><br><span class="line">    <h3>SpringMVC自动绑定javabean</h3><hr></span><br><span class="line">    ${requestScope.user.username},欢迎回来...<br></span><br><span class="line">    ${requestScope.user.password},这是密码<br></span><br><span class="line"></span><br><span class="line">    <h3>SpringMVC自动绑定集合</h3><hr></span><br><span class="line">    <c:foreach items="${list}" var="user"></c:foreach></span><br><span class="line">        ${user.username},欢迎回来...<br></span><br><span class="line">        ${user.password},这是密码<br></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <h3>SpringMVC自动绑定数组</h3><hr></span><br><span class="line">    <c:foreach items="${nameArr}" var="name"></c:foreach></span><br><span class="line">        ${name},欢迎回来...<br></span><br><span class="line">    </span><br><span class="line">  </span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure></div><p>login.jsp</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><%--</span><br><span class="line">  Created by IntelliJ IDEA.</span><br><span class="line">  User: Administrator</span><br><span class="line">  Date: 2017/4/17</span><br><span class="line">  Time: 21:45</span><br><span class="line">  To change this template use File | Settings | File Templates.</span><br><span class="line">--%></span><br><span class="line"><%@ page contentType="text/html;charset=UTF-8" language="java" %></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <title>登录</title></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <h3>SpringMVC自动绑定字段</h3><hr></span><br><span class="line">    <form action="${pageContext.request.contextPath}/login.mvc" method="post"><br><span class="line">        账号：<input type="text" name="username"><br><br></span><br><span class="line">        <input type="submit"></span><br><span class="line">    </span></form><br><span class="line"></span><br><span class="line">    <h3>SpringMVC自动绑定javabean</h3><hr></span><br><span class="line">    <form action="${pageContext.request.contextPath}/getup.mvc" method="post"><br><span class="line">        账号：<input type="text" name="username"><br><br></span><br><span class="line">        密码：<input type="text" name="password"><br><br></span><br><span class="line">        <input type="submit"></span><br><span class="line">    </span></form><br><span class="line"></span><br><span class="line">    <h3>SpringMVC自动绑定集合</h3><hr></span><br><span class="line">    <form action="${pageContext.request.contextPath}/batchinput.mvc" method="post"><br><span class="line">        账号：<input type="text" name="users[0].username"><br><br></span><br><span class="line">        密码：<input type="text" name="users[0].password"><br><br></span><br><span class="line">        账号：<input type="text" name="users[1].username"><br><br></span><br><span class="line">        密码：<input type="text" name="users[1].password"><br><br></span><br><span class="line">        账号：<input type="text" name="users[2].username"><br><br></span><br><span class="line">        密码：<input type="text" name="users[2].password"><br><br></span><br><span class="line">        <input type="submit"></span><br><span class="line">    </span></form><br><span class="line"></span><br><span class="line">    <h3>SpringMVC自动绑定数组</h3><hr></span><br><span class="line">    <form action="${pageContext.request.contextPath}/arrayinput.mvc" method="post"><br><span class="line">        账号：<input type="text" name="username"><br><br></span><br><span class="line">        账号：<input type="text" name="username"><br><br></span><br><span class="line">        <input type="submit"></span><br><span class="line">    </span></form><br><span class="line"></span><br><span class="line"></span><br></span></span></span></span></pre></td></tr></tbody></table></figure></div><p>结果：</p><p><a href="https://s2.ax1x.com/2020/02/27/3d7b0P.png" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="https://s2.ax1x.com/2020/02/27/3d7b0P.png" class="lazyload"></a></p><hr>![image](https://s2.ax1x.com/2020/02/27/3dHM0x.png)</body></html>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JDBC基础</title>
      <link href="/2017/01/11/JDBC%E5%9F%BA%E7%A1%80/"/>
      <url>/2017/01/11/JDBC%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script></head><body><p>学习目标</p><ol><li>能够说出什么是JDBC</li><li>能够说出JDBC连接数据库的四个参数。</li></ol><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Class.forName(“com.mysql.jdbc.Driver”);</span><br><span class="line">DriverManager.getConnection(url, name, password)</span><br><span class="line">url:  jdbc:mysql:<span class="comment">//localhost:3306/数据库</span></span><br></pre></td></tr></tbody></table></figure></div><ol start="3"><li>能够说出JDBC的核心API</li></ol><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">DriverManager: 1) 加载驱动；2）获取数据库连接；</span><br><span class="line">Connection: 数据库的一个连接；</span><br><span class="line">Statement</span><br><span class="line">execute()</span><br><span class="line">executeQuery() executeUpdate()</span><br><span class="line">ResultSet: 可滚动结果集。</span><br><span class="line">next() previous() first() last() absolute(int n)</span><br><span class="line">getXxx(int columnIndex)  getXxx(String columnName)</span><br></pre></td></tr></tbody></table></figure></div><ol start="4"><li>能够运用Statement执行SQL操作</li><li>能够运用PreparedStatement执行SQL操作</li></ol><ul><li>第一步：获取数据库连接；</li><li>第二步：创建PreparedStatement对象;<br>PreparedStatement pstmt = conn.prearedStatement(sql);</li><li>第三步：如果有参数，就要设置参数；</li><li>第四步：调用该对象executeQuery或executeUpdate方法；</li><li>第五步：遍历结果；</li><li>第六步：释放资源；（ResultSet、Statement、Connection）</li></ul><ol start="6"><li>能够区别Statement与PreparedStatement</li></ol><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">PreparedStatement是Statement的子接口；</span><br><span class="line">PreparedStatement的执行率比Statement更高；</span><br><span class="line">PreparedStatement的可读性比Statement更好；</span><br><span class="line">PreparedStatement的安全性比Statement更高；</span><br></pre></td></tr></tbody></table></figure></div><h1 id="一、-JDBC概述"><a href="#一、-JDBC概述" class="headerlink" title="一、 JDBC概述"></a>一、 JDBC概述</h1><p>JDBC（Java Database Connectivity）：java数据库连接技术。它的作用就是通过java代码访问和操作数据库。<br>JDBC是一个接口规范。它定义了一些访问数据库的规则。具体数据库的实现是由各个数据库厂商负责实现。</p><p><a href="F14813315E3741EB9AA0C5B2DDD882A5" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="F14813315E3741EB9AA0C5B2DDD882A5" class="lazyload"></a></p><p>不同的数据库厂商都必须要提供自己的驱动程序。其实，该驱动程序就是实现了JDBC规范的程序。</p><h1 id="二、JDBC的使用"><a href="#二、JDBC的使用" class="headerlink" title="二、JDBC的使用"></a>二、JDBC的使用</h1><h2 id="2-1-JDBC的核心API"><a href="#2-1-JDBC的核心API" class="headerlink" title="2.1 JDBC的核心API"></a>2.1 JDBC的核心API</h2><ul><li>DriverManger: 数据库的驱动管理类。作用：1）加载驱动；2）获取数据库的连接；</li><li>Conection：代表一个数据库连接。访问数据库之前必须要先获取Connction对象；</li><li>Statement：代表一个SQL语句，它负责把SQL的命令发送MySQL服务器执行；</li><li>ResultSet：代表一个结果集对象，该对象封装了所有查询结果；</li></ul><h2 id="2-2-JDBC连接MySQL数据库"><a href="#2-2-JDBC连接MySQL数据库" class="headerlink" title="2.2 JDBC连接MySQL数据库"></a>2.2 JDBC连接MySQL数据库</h2><p>1) 第一步：加载驱动（mysql-connector-java-5.1.13-bin.jar）；<br>2) 第二步：获取数据库连接；<br>MySQL：jdbc:mysql://localhost:3306/itheima<br>Oracle：jdbc:oracle:thin:localhost:1521:orcl<br>格式：jdbc:数据库名:其他<br>jdbc: 固定的<br>数据库名：例如：mysql<br>其他：不同数据库的写法会不一样；<br>3) 第三步：创建Statement对象；<br>4) 第四步：调用Statement对象一些方法；<br>execute(): 可以执行查询或更新操作；<br>executeQuery(): 执行查询；<br>executeUpdate(): 执行更新；<br>5) 第五步：遍历结果结果集（执行查询才有结果集）；</p><p>ResultSet常用的方法：</p><ul><li>next()：把游标向下移动一行，如果该行有数据，则返回true，否则返回false；</li><li>previous()：把游标向上移动一行，如果该行有数据，则返回true，否则返回false；</li><li>first()：把游标移动到第一行，如果该行有数据，则返回true，否则返回false；</li><li>last()：把游标移动到最后一行，如果该行有数据，则返回true，否则返回false；</li><li>getXxx(int columnIndex)：根据字段的索引获取字段内容；</li><li>getXxx(String columnName)：根据字段名或字段别名获取字段内容；<br>6) 第六步：关闭资源；</li></ul><p><strong>==注意==：关闭资源的时候，要先开后关，后开先关。</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">public class Demo {</span><br><span class="line"> </span><br><span class="line">    public static void main(String[] args) throws ClassNotFoundException, SQLException {</span><br><span class="line">        //加载驱动</span><br><span class="line">        Class.forName("com.mysql.jdbc.Driver");</span><br><span class="line">        //获取数据库连接</span><br><span class="line">        Connection conn = DriverManager.getConnection(</span><br><span class="line">                "jdbc:mysql://localhost:3306/itheima",</span><br><span class="line">                "root",</span><br><span class="line">                "root");</span><br><span class="line">        //创建Statement对象</span><br><span class="line">        String sql = "insert into students values(14, 'jacky', 100, 100, 100, 'java054')";</span><br><span class="line">//      String sql = "select * from students";</span><br><span class="line">        Statement stat = conn.createStatement();</span><br><span class="line">        //调用Statement的方法</span><br><span class="line">        int rows = stat.executeUpdate(sql);</span><br><span class="line">        System.out.println("返回结果：" + rows);</span><br><span class="line">        //关闭资源（注意：先开后关，后开先关）</span><br><span class="line">        stat.close();</span><br><span class="line">        conn.close();</span><br><span class="line">    }</span><br><span class="line"> </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><h2 id="2-3-JDBC的增删查该操作"><a href="#2-3-JDBC的增删查该操作" class="headerlink" title="2.3 JDBC的增删查该操作"></a>2.3 JDBC的增删查该操作</h2><p>2.2.1 添加</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//添加</span><br><span class="line">String insertSql = "insert into user(name, age) values('jacky', 18),('joe', 19);";</span><br><span class="line">int rows = stmt.executeUpdate(insertSql);</span><br><span class="line">System.out.println("结果：" + rows);</span><br></pre></td></tr></tbody></table></figure></div><p>2.2.2 删除</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//删除</span><br><span class="line">String deleteSql = "delete from user where name = 'joe'";</span><br><span class="line">int rows = stmt.executeUpdate(deleteSql);</span><br><span class="line">System.out.println("结果：" + rows);</span><br></pre></td></tr></tbody></table></figure></div><p>2.2.4 查询</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">//查询</span><br><span class="line">String selectSql = "select id, name as FullName, age from user";</span><br><span class="line">ResultSet rs = stmt.executeQuery(selectSql);</span><br><span class="line">while (rs.next()) { //把游标向下移动一行</span><br><span class="line"></span><br><span class="line">    //通过索引值获取字段的值</span><br><span class="line">    int id = rs.getInt(1); //获取第一个字段，索引值从1开始计算。</span><br><span class="line">    String name = rs.getString(2);</span><br><span class="line">    int age = rs.getInt(3);</span><br><span class="line"></span><br><span class="line">    //通过字段名或字段别名获取字段的值</span><br><span class="line">    int id = rs.getInt("id");</span><br><span class="line">    String name = rs.getString("FullName"); //字段名或别名都可以</span><br><span class="line">    int age = rs.getInt("age");</span><br><span class="line">    System.out.println("编号：" + id + "，姓名：" + name + "，年龄：" + age);</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><h1 id="三、-SQL注入"><a href="#三、-SQL注入" class="headerlink" title="三、 SQL注入"></a>三、 SQL注入</h1><p>所谓的SQL注入，就是用户把SQL命令通过web表单提交到服务器，服务器把SQL命令与已有SQL命令一起被执行，从而达到欺骗数据库服务器的目的。</p><p><a href="0B278DBD7CA74979B6C04E43B8EBF9F7" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="0B278DBD7CA74979B6C04E43B8EBF9F7" class="lazyload"></a></p><p>解决办法：</p><p>1) 使用js验证，规定用户输入的内容不能够出现特殊的字符；<br>2) 不能够把用户输入的内容直接放在SQL语句一起执行； </p><h1 id="四、预编译对象"><a href="#四、预编译对象" class="headerlink" title="四、预编译对象"></a>四、预编译对象</h1><p>PreparedStatement其实就是Statement的一个子接口。它的主要作用：</p><p>1) 防止SQL注入；<br>2) 提高程序的可读性和可维护性；<br>3) 提高程序的执行效率；</p><p><a href="54C3C1B58C0B450E962C28F6EDF010DA" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="54C3C1B58C0B450E962C28F6EDF010DA" class="lazyload"></a></p><p><a href="FFCB56D2DF804D8DA15C7035CDD5FF4A" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="FFCB56D2DF804D8DA15C7035CDD5FF4A" class="lazyload"></a></p><p>PreparedStatement提供一个预编译的功能。但是从MySQL4.1之后默认预编译的功能是关闭的。如果要启用预编译的功能，就需要在URL的后面田间两个参数：</p><p><a href="96F38638A15146649E80C5266EE62FC7" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="96F38638A15146649E80C5266EE62FC7" class="lazyload"></a></p></body></html>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JDBC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JDBC-DBUtil使用</title>
      <link href="/2017/01/11/JDBC-DBUtil%E4%BD%BF%E7%94%A8/"/>
      <url>/2017/01/11/JDBC-DBUtil%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script></head><body><h3 id="学习目标"><a href="#学习目标" class="headerlink" title="学习目标"></a>学习目标</h3><ul><li><ol><li>能够描述什么是连接池</li></ol></li><li><ol start="2"><li>能够实现自定义连接池</li></ol></li><li><ol start="3"><li>能够解决自定义Connection的close释放连接的问题</li></ol></li><li><ol start="4"><li>能够运用第三方连接池实现技术 DBCP C3P0<ul><li>第一步：导入c3p0的jar包；</li><li>第二步：创建连接池对象(ComboPooledDataSource)；</li><li>第三步：设置参数；（配置文件）<ul><li>c3p0-config.xml（优先级更高）</li><li>c3p0.properties</li></ul></li><li>第四步：调用getConnection获取数据库连接；</li><li>第五步：调用Connection对象的close方法释放Connection；</li></ul></li></ol></li><li><ol start="5"><li>能够描述出三种数据库元数据</li></ol></li><li><ol start="6"><li>能够运用数据库表元数据</li></ol></li></ul><h1 id="一、-数据库连接池"><a href="#一、-数据库连接池" class="headerlink" title="一、 数据库连接池"></a>一、 数据库连接池</h1><p>之前我们访问数据库：</p><ul><li>第一步：获取数据库连接</li><li>第二步：创建PreparedStatement对象；</li><li>第三步：设置参数；</li><li>第四步：遍历结果集；</li><li>第五步：关闭资源；</li></ul><p>获取数据库连接是一个比较耗时的操作。</p><h2 id="1-1-什么数据库连接池"><a href="#1-1-什么数据库连接池" class="headerlink" title="1.1 什么数据库连接池"></a>1.1 什么数据库连接池</h2><p>数据库连接池就就是一个用来存储了数据库连接的集合对象。<br>使用数据库连接池的好处：减少在获取Connection对象的等待时间，从而可以提高访问数据库的效率。</p><ul><li><p>应用程序直接获取数据库连接的缺点：</p></li><li><p><a href="6842DEDE225343B7962DD019055278AB" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="6842DEDE225343B7962DD019055278AB" class="lazyload"></a></p></li><li><p>数据库连接池：</p></li></ul><p><a href="C94854159CCC4AE8820DFECC76DBB652" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="C94854159CCC4AE8820DFECC76DBB652" class="lazyload"></a></p><h2 id="1-2-自定义连接池的实现"><a href="#1-2-自定义连接池的实现" class="headerlink" title="1.2 自定义连接池的实现"></a>1.2 自定义连接池的实现</h2><p>1) 第一步：创建一个类，实现DataSouce接口；<br>2) 第二步：添加一些属性；</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//存储所有Connection对象</span></span><br><span class="line">LinkedList<myconnection> pool = <span class="keyword">new</span> LinkedList<myconnection>();</myconnection></myconnection></span><br><span class="line"><span class="comment">//数据库的连接参数</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> String driverClass = <span class="string">"com.mysql.jdbc.Driver"</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> String url = <span class="string">"jdbc:mysql://localhost:3306/itheima"</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> String user = <span class="string">"root"</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> String password = <span class="string">"root"</span>;</span><br><span class="line"><span class="comment">//数据库连接池的参数</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> initialPoolSize = <span class="number">3</span>; <span class="comment">//初始化的连接数</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> maxPoolSize = <span class="number">5</span>; <span class="comment">//最大连接数</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> curPoolSize = <span class="number">0</span>; <span class="comment">//当前的连接数</span></span><br></pre></td></tr></tbody></table></figure></div><p>3) 第三步：创建一个方法生成数据库连接；</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//生成数据库连接</span><br><span class="line">public MyConnection createConnection() throws SQLException {</span><br><span class="line">    Connection conn = DriverManager.getConnection(url, user, password);</span><br><span class="line">    return new MyConnection(this, conn);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p>4) 第四步：创建一个方法获取数据库连接；</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">//获取数据库连接</span><br><span class="line">public Connection getConnection() throws SQLException {</span><br><span class="line">    if (pool.size() > 0) { //数据库连接池中有Connection对象</span><br><span class="line">        //删除并返回集合中的Connection对象</span><br><span class="line">        return pool.removeLast();</span><br><span class="line">    }</span><br><span class="line">    if (curPoolSize < maxPoolSize) { //如果数据库连接池中没有了Connection，但是当前的连接数没有超过可允许的最大连接数据</span><br><span class="line">        Connection conn = createConnection();</span><br><span class="line">        curPoolSize++;</span><br><span class="line">        return conn;</span><br><span class="line">    }</span><br><span class="line">    //如果数据库连接池中没有Connection,而且当前连接数大于等于连接池可允许的最大连接数</span><br><span class="line">    throw new RuntimeException("已经达到最大的连接数！");</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p>5) 第五步：创建一个方法释放数据库连接；</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//释放数据库连接</span><br><span class="line">public void releaseConnection(MyConnection conn) {</span><br><span class="line">    //把Connection对象返回给集合中</span><br><span class="line">    pool.add(conn);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><h2 id="1-3-装饰者开发模式"><a href="#1-3-装饰者开发模式" class="headerlink" title="1.3 装饰者开发模式"></a>1.3 装饰者开发模式</h2><p>问题：调用conn.close()方法的时候，不是关闭数据库连接，而是把数据库的连接释放到连接池中，如何实现?使用装饰者模式。</p><p>作用：可以对一些类进行装饰，装饰后的类称之为装饰类。所谓的装饰类就是对原先类的一些方法进行增强处理。</p><p>实现步骤：</p><ul><li>第一步：多个装饰类要实现一个共同的接口，或者继承一个共同的父类；</li><li>第二步：装饰类要保存被装饰类的一个引用；</li></ul><p>需求：读取一个文件的内容，把读取到的内容输出到控制台。</p><p>1) 输出内容的每一行要有行号；<br>2) 输出内容的每一行的末尾要有换行标签；<br>3) 输入内容的每一行的要有行号和换行标签；</p><h2 id="1-4-DBCP连接池技术"><a href="#1-4-DBCP连接池技术" class="headerlink" title="1.4 DBCP连接池技术"></a>1.4 DBCP连接池技术</h2><p>1) 第一步：下载DBCP连接池压缩包，并解压缩；<br>2) 第二步：把DBCP的核心jar包复制到项目中(commons-dbcp-1.4.jar、commons-pool-1.5.6.jar)；<br>3) 第三步：创建一个BasicDataSource对象；<br>4) 第四步：设置数据库连接池的参数；<br>5) 第五步：调用该对象的getConnection方法；</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) throws SQLException {</span><br><span class="line">        //创建BasicDataSource对象</span><br><span class="line">        BasicDataSource dataSource = new BasicDataSource();</span><br><span class="line">        //设置连接池参数</span><br><span class="line">        //连接数据库的参数</span><br><span class="line">        dataSource.setDriverClassName("com.mysql.jdbc.Driver");</span><br><span class="line">        dataSource.setUrl("jdbc:mysql://localhost:3306/itheima");</span><br><span class="line">        dataSource.setUsername("root");</span><br><span class="line">        dataSource.setPassword("root");</span><br><span class="line">        //连接池的参数</span><br><span class="line">        dataSource.setInitialSize(5); //设置连接池的初始连接数</span><br><span class="line">        dataSource.setMaxActive(10); //连接池的最大连接数</span><br><span class="line">        dataSource.setMaxIdle(10); //设置最大空闲的连接数</span><br><span class="line">        dataSource.setMinIdle(5); //最小空闲的连接数</span><br><span class="line">        dataSource.setMaxWait(3000); //最大等待的时间（毫秒）</span><br><span class="line"> </span><br><span class="line">        System.out.println(dataSource.getConnection());</span><br><span class="line">        System.out.println(dataSource.getConnection());</span><br><span class="line">        System.out.println(dataSource.getConnection());</span><br><span class="line">        System.out.println(dataSource.getConnection());</span><br><span class="line">        System.out.println(dataSource.getConnection());</span><br><span class="line">        System.out.println(dataSource.getConnection());</span><br><span class="line">        System.out.println(dataSource.getConnection());</span><br><span class="line">        System.out.println(dataSource.getConnection());</span><br><span class="line">        System.out.println(dataSource.getConnection());</span><br><span class="line">        Connection conn = dataSource.getConnection();</span><br><span class="line">        System.out.println(conn);</span><br><span class="line">        conn.close();</span><br><span class="line">        System.out.println(dataSource.getConnection());</span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure></div><h2 id="1-5-C3P0连接池技术"><a href="#1-5-C3P0连接池技术" class="headerlink" title="1.5 C3P0连接池技术"></a>1.5 C3P0连接池技术</h2><h3 id="1-5-1-使用C3P0的步骤"><a href="#1-5-1-使用C3P0的步骤" class="headerlink" title="1.5.1 使用C3P0的步骤"></a>1.5.1 使用C3P0的步骤</h3><p>1) 第一步：下载c3p0压缩包，解压缩；<br>2) 第二步：把c3p0的核心jar包导入工程中（c3p0-0.9.5.2.jar、mchange-commons-java-0.2.11.jar）；<br>3) 第三步：创建连接池对象；<br>4) 第四步：设置连接池参数；<br>5) 第五步：获取Connection对象；</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) throws PropertyVetoException, SQLException {</span><br><span class="line">        //创建连接池对象</span><br><span class="line">        ComboPooledDataSource dataSource = new ComboPooledDataSource();</span><br><span class="line">        //数据库连接参数</span><br><span class="line">        dataSource.setDriverClass("com.mysql.jdbc.Driver");</span><br><span class="line">        dataSource.setJdbcUrl("jdbc:mysql://localhost:3306/itheima");</span><br><span class="line">        dataSource.setUser("root");</span><br><span class="line">        dataSource.setPassword("root");</span><br><span class="line">        //数据库连接池参数</span><br><span class="line">        dataSource.setInitialPoolSize(3); //连接池初始连接数</span><br><span class="line">        dataSource.setMaxPoolSize(5); //连接池的最大连接数</span><br><span class="line">        dataSource.setMinPoolSize(3); //数据库的最小连接数</span><br><span class="line">        dataSource.setAcquireIncrement(2); //每次创建的连接数</span><br><span class="line">        dataSource.setCheckoutTimeout(3000); //最大等待时间（毫秒）</span><br><span class="line"> </span><br><span class="line">        System.out.println(dataSource.getConnection());</span><br><span class="line">        System.out.println(dataSource.getConnection());</span><br><span class="line">        System.out.println(dataSource.getConnection());</span><br><span class="line">        System.out.println(dataSource.getConnection());</span><br><span class="line">        Connection conn = dataSource.getConnection();</span><br><span class="line">        System.out.println(conn);</span><br><span class="line">        conn.close(); //不是关闭连接，是释放连接</span><br><span class="line">        System.out.println(dataSource.getConnection());</span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure></div><p>1.5.1 使用配置文件</p><p>1) 方式一：在src目录下创建一个c3p0-config.xml文件（该名字是固定的）；<br><a href="3083D9606F184F98985DF67F93485630" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="3083D9606F184F98985DF67F93485630" class="lazyload"></a></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><!--?xml version="1.0" encoding="UTF-8"?--></span><br><span class="line"><c3p0-config></c3p0-config></span><br><span class="line">    <!-- 默认配置 --></span><br><span class="line">    <default-config></default-config></span><br><span class="line">        <!-- 配置参数 --></span><br><span class="line">        <property name="driverClass">com.mysql.jdbc.Driver</property></span><br><span class="line">        <property name="jdbcUrl">jdbc:mysql://localhost:3306/itheima?generateParameterMetadata=true</property></span><br><span class="line">        <property name="user">root</property></span><br><span class="line">        <property name="password">root</property></span><br><span class="line">        <property name="initialPoolSize">3</property></span><br><span class="line">        <property name="maxPoolSize">5</property></span><br><span class="line">        <property name="minPoolSize">3</property></span><br><span class="line">        <property name="acquireIncrement">2</property></span><br><span class="line">        <property name="checkoutTimeout">3000</property></span><br><span class="line">    </span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure></div><p>2) 方式二：在src目录下创建一个c3p0.properties文件（该名字是固定的）；<br><a href="A5F8F26D34A8488B822F7718E74E7A8E" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="A5F8F26D34A8488B822F7718E74E7A8E" class="lazyload"></a><br><a href="25CDF7CD3D3746C5A2CE724711893B7D" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="25CDF7CD3D3746C5A2CE724711893B7D" class="lazyload"></a></p><p><strong>==注意==：使用XML文件配置方式的优先级更高。</strong></p><h1 id="二、-自定义数据库工具类"><a href="#二、-自定义数据库工具类" class="headerlink" title="二、 自定义数据库工具类"></a>二、 自定义数据库工具类</h1><ul><li>1.1 什么是元数据<br>元数据就是数据中的数据。例如：获取数据库的版本信息，获取表的字段等等。</li><li>1.2 获取数据库元数据</li><li>1.2.1 获取数据库的元数据</li></ul><p>DatabaseMetaData：数据库的元数据对象；<br><a href="D18611EB56884BCD9F30E837957BA6CC" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="D18611EB56884BCD9F30E837957BA6CC" class="lazyload"></a></p><p><strong>1.2.2 获取用户操作的元数据</strong></p><p>ParameterMetaData：参数的元数据对象；<br><a href="38A1574B7E9B40A697F6179BD3C5CF63" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="38A1574B7E9B40A697F6179BD3C5CF63" class="lazyload"></a></p><p>ResultSetMetaData：获取结果集的元数据对象；</p><p><a href="BFD6ABAB8EF94594A74490159E4FD652" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="BFD6ABAB8EF94594A74490159E4FD652" class="lazyload"></a></p><h3 id="1-3-自定义框架实现"><a href="#1-3-自定义框架实现" class="headerlink" title="1.3 自定义框架实现"></a>1.3 自定义框架实现</h3><p>1.3.1 增删改功能<br>BaseDao.java</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">//增删改操作</span><br><span class="line">public void update(String sql, Object[] params) throws SQLException {</span><br><span class="line">    //获取数据库连接</span><br><span class="line">    Connection conn = DbUtil.getConnection();</span><br><span class="line">    //创建PreparedStatement对象</span><br><span class="line">    PreparedStatement pstmt = conn.prepareStatement(sql);</span><br><span class="line"></span><br><span class="line">    //问题：如果用户传参数的个数与实际需要传入参数的个数不一致，咋办？</span><br><span class="line">    ParameterMetaData metadata = pstmt.getParameterMetaData();</span><br><span class="line">    //获取参数的个数</span><br><span class="line">    int count = metadata.getParameterCount();</span><br><span class="line">    if (params != null) {</span><br><span class="line">        if (count != params.length) {</span><br><span class="line">            throw new RuntimeException("参数个数不正确！");</span><br><span class="line">        }</span><br><span class="line">        //设置参数</span><br><span class="line">        for (int i = 1; i <= params.length; i++) {</span><br><span class="line">            pstmt.setObject(i, params[i-1]);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    //执行更新操作</span><br><span class="line">    pstmt.executeUpdate();</span><br><span class="line">    //释放连接</span><br><span class="line">    conn.close();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p>1.3.2 查询功能<br>BaseDao.java</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">//查询</span><br><span class="line">public Object find(String sql, Object[] params, ResultSetHandler handler) throws Exception {</span><br><span class="line">    //数据库连接</span><br><span class="line">    Connection conn = DbUtil.getConnection();</span><br><span class="line">    //创建PrepardStatement对象</span><br><span class="line">    PreparedStatement pstmt = conn.prepareStatement(sql);</span><br><span class="line"></span><br><span class="line">    ParameterMetaData metadata = pstmt.getParameterMetaData();</span><br><span class="line">    //获取参数的个数</span><br><span class="line">    int count = metadata.getParameterCount();</span><br><span class="line">    //设置参数</span><br><span class="line">    if (params != null) {</span><br><span class="line">        if (count != params.length) {</span><br><span class="line">            throw new RuntimeException("参数个数不正确！");</span><br><span class="line">        }</span><br><span class="line">        //设置参数</span><br><span class="line">        for (int i = 1; i <= params.length; i++) {</span><br><span class="line">            pstmt.setObject(i, params[i-1]);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    //执行查询</span><br><span class="line">    ResultSet rs = pstmt.executeQuery();</span><br><span class="line">    //问题：怎么处理结果集？结果集有可能只返回一条数据，也有可能返回多行数据。</span><br><span class="line">    return handler.handle(rs);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p>ResultSetHandler.java</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public interface ResultSetHandler {</span><br><span class="line"> </span><br><span class="line">    //专门处理结果集的方法</span><br><span class="line">    public Object handle(ResultSet rs) throws Exception;</span><br><span class="line"> </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p>BeanHandler.java</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line">    结果集处理类（专门处理单行的结果）</span><br><span class="line"> </span><br><span class="line">        规则：数据库表的列名必须要与Bean对象的属性名要一致。</span><br><span class="line">*/</span><br><span class="line">public class BeanHandler implements ResultSetHandler {</span><br><span class="line"> </span><br><span class="line">    private Class clazz;</span><br><span class="line"> </span><br><span class="line">    public BeanHandler(Class clazz) {</span><br><span class="line">        this.clazz = clazz;</span><br><span class="line">    }</span><br><span class="line"> </span><br><span class="line">    //对结果集进行处理，处理完成后返回一个Bean对象</span><br><span class="line">    public Object handle(ResultSet rs) throws Exception {</span><br><span class="line">        //先移动指针</span><br><span class="line">        if (rs.next()) {</span><br><span class="line">            //通过class类创建对象</span><br><span class="line">            Object o = clazz.newInstance();</span><br><span class="line">            //获取结果集的元数据对象</span><br><span class="line">            ResultSetMetaData metadata = rs.getMetaData();</span><br><span class="line">            //获取列的数量</span><br><span class="line">            int count = metadata.getColumnCount();</span><br><span class="line">            //获取所有列的数据</span><br><span class="line">            for (int i = 1; i <= count; i++) {</span><br><span class="line">                //获取了每一列的数据，把每一列数据设置class对象中？</span><br><span class="line">                //获取列名</span><br><span class="line">                String fieldName = metadata.getColumnLabel(i);</span><br><span class="line">                //使用反射设置对象的属性</span><br><span class="line">                Field field = clazz.getDeclaredField(fieldName);</span><br><span class="line">                //暴力反射</span><br><span class="line">                field.setAccessible(true);</span><br><span class="line">                //设置对象的属性值</span><br><span class="line">                field.set(o, rs.getObject(i));</span><br><span class="line">            }</span><br><span class="line">            return o;</span><br><span class="line">        }</span><br><span class="line">        return null;</span><br><span class="line">    }</span><br><span class="line"> </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p>BeanListHandler.java</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line">    结果集处理类（专门处理多行结果的处理类）</span><br><span class="line">*/</span><br><span class="line">public class BeanListHandler implements ResultSetHandler {</span><br><span class="line"> </span><br><span class="line">    private Class clazz;</span><br><span class="line"> </span><br><span class="line">    public BeanListHandler(Class clazz) {</span><br><span class="line">        this.clazz = clazz;</span><br><span class="line">    }</span><br><span class="line"> </span><br><span class="line">    //对结果集进行处理，处理完成后返回一个Bean对象</span><br><span class="line">    public List handle(ResultSet rs) throws Exception {</span><br><span class="line">        List result = new ArrayList();</span><br><span class="line">        //遍历结果集</span><br><span class="line">        while (rs.next()) {</span><br><span class="line">            //通过class类创建对象</span><br><span class="line">            Object o = clazz.newInstance();</span><br><span class="line">            //获取结果集的元数据对象</span><br><span class="line">            ResultSetMetaData metadata = rs.getMetaData();</span><br><span class="line">            //获取列的数量</span><br><span class="line">            int count = metadata.getColumnCount();</span><br><span class="line">            //获取所有列的数据</span><br><span class="line">            for (int i = 1; i <= count; i++) {</span><br><span class="line">                //获取了每一列的数据，把每一列数据设置class对象中？</span><br><span class="line">                //获取列名</span><br><span class="line">                String fieldName = metadata.getColumnLabel(i);</span><br><span class="line">                //使用反射设置对象的属性</span><br><span class="line">                Field field = clazz.getDeclaredField(fieldName);</span><br><span class="line">                //暴力反射</span><br><span class="line">                field.setAccessible(true);</span><br><span class="line">                //设置对象的属性值</span><br><span class="line">                field.set(o, rs.getObject(i));</span><br><span class="line">            }</span><br><span class="line">            result.add(o);</span><br><span class="line">        }</span><br><span class="line">        return result;</span><br><span class="line">    }</span><br><span class="line"> </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><h1 id="三、-DbUtil"><a href="#三、-DbUtil" class="headerlink" title="三、 DbUtil"></a>三、 DbUtil</h1><p><strong>3.1 DbUtil介绍</strong></p><p>作用：简化一些数据库的操作。</p><p><strong>3.2 DbUtil的使用步骤</strong></p><ul><li>第一步：导入DbUtil的核心jar包；</li><li>第二步：创建QueryRunner对象；</li><li>第三步：调用该对象一些方法访问数据库；</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">public class Demo5 {</span><br><span class="line">    //不带事务</span><br><span class="line">    private static QueryRunner queryRunner = new QueryRunner(new ComboPooledDataSource());</span><br><span class="line">    //带事务</span><br><span class="line">    private static QueryRunner queryRunner2 = new QueryRunner();</span><br><span class="line"> </span><br><span class="line">    public static void main(String[] args) throws SQLException {</span><br><span class="line">        String sql = "select * from employees where id = 2";</span><br><span class="line">        List<employee> empList = (List<employee>) queryRunner.query(</employee></employee></span><br><span class="line">                sql, new BeanListHandler(Employee.class));</span><br><span class="line">        System.out.println(empList);</span><br><span class="line"> </span><br><span class="line">        Employee emp = (Employee) queryRunner.query(</span><br><span class="line">                sql, new BeanHandler(Employee.class));</span><br><span class="line">        System.out.println(emp);</span><br><span class="line"> </span><br><span class="line">        sql = "insert into employees(name, age, sal) values(?, ?, ?)";</span><br><span class="line">        queryRunner.update(sql, new Object[]{"大大宝", 60,100000});</span><br><span class="line"> </span><br><span class="line">        sql = "delete from employees where id = ?";</span><br><span class="line">        queryRunner.update(sql, 5);</span><br></pre></td></tr></tbody></table></figure></div><p>带事务的QueryRunner：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">//开启事务</span><br><span class="line">    Connection conn = DbUtil.getConnection();</span><br><span class="line">    try {</span><br><span class="line">        conn.setAutoCommit(false);</span><br><span class="line">        String sql = "insert into employees(name, age, sal) values(?, ?, ?)";</span><br><span class="line">        queryRunner2.update(conn, sql, new Object[]{"大大宝1号", 60, 100000});</span><br><span class="line">        sql = "insert into employees(name, age, sal) values(?, ?, ?)";</span><br><span class="line">        queryRunner2.update(conn, sql, new Object[]{"大大宝2号", 60, 100000});</span><br><span class="line">        sql = "insert into employees(name, age, sal) values(?, ?, ?)";</span><br><span class="line">        queryRunner2.update(conn, sql, new Object[]{"大大宝3号", 60, 100000});</span><br><span class="line">        int i = 10 / 0;</span><br><span class="line">        conn.commit();</span><br><span class="line">    } catch (Exception e) {</span><br><span class="line">        conn.rollback();</span><br><span class="line">        System.out.println("事务回滚了！");</span><br><span class="line">        //throw new RuntimeException(e);</span><br><span class="line">    } finally {</span><br><span class="line">        conn.close();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><h3 id="3-4-批处理"><a href="#3-4-批处理" class="headerlink" title="3.4 批处理"></a>3.4 批处理</h3><p>执行批处理操作需要传入一个二维数组作为参数。第一维就是参数个数，第二维存储了每个参数的内容；</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">package cn.yi.test;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">import java.sql.SQLException;</span><br><span class="line">import java.util.Random;</span><br><span class="line"> </span><br><span class="line">import org.apache.commons.dbutils.QueryRunner;</span><br><span class="line">import org.junit.Test;</span><br><span class="line"> </span><br><span class="line">import cn.yi.util.DbUtil;</span><br><span class="line">/*</span><br><span class="line"> * 代码测试</span><br><span class="line"> */</span><br><span class="line">public class TestCode {</span><br><span class="line">    private static QueryRunner queryRunner = new QueryRunner(DbUtil.cpds);</span><br><span class="line"> </span><br><span class="line">    //数据库数据准备,使用批处理</span><br><span class="line">    @Test</span><br><span class="line">    public void dataPrepare() throws SQLException{</span><br><span class="line">        Random random = new Random();</span><br><span class="line">        long starTime=System.currentTimeMillis();</span><br><span class="line">        String sql = "INSERT INTO student(NAME,age,result) VALUES(?,?,?)";</span><br><span class="line">        Object[][] params = new Object[1500][3];</span><br><span class="line">        String[] str = new String[]{"张三", "李四", "王五", "赵六", "小明", "田七"};</span><br><span class="line">        int i;</span><br><span class="line">        for (i = 0; i < 1500; i++){</span><br><span class="line">            int randomNum = random.nextInt(str.length);</span><br><span class="line">            params[i][0] = str[randomNum];</span><br><span class="line">            params[i][1] = "21";</span><br><span class="line">            params[i][2] = i;</span><br><span class="line">        }</span><br><span class="line">        queryRunner.batch(sql, params);</span><br><span class="line">        long endTime=System.currentTimeMillis();</span><br><span class="line">        long Time=(endTime-starTime);</span><br><span class="line">        System.out.println("运行时间："+Time + "ms");</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div></body></html>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JDBC </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
