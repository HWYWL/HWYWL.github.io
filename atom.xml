<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>一叶秋枫</title>
  
  
  <link href="https://hwy.ac.cn/atom.xml" rel="self"/>
  
  <link href="https://hwy.ac.cn/"/>
  <updated>2023-02-11T01:39:52.708Z</updated>
  <id>https://hwy.ac.cn/</id>
  
  <author>
    <name>一叶秋枫</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>自定义Presto插件</title>
    <link href="https://hwy.ac.cn/2023/02/11/%E8%87%AA%E5%AE%9A%E4%B9%89presto%E6%8F%92%E4%BB%B6/"/>
    <id>https://hwy.ac.cn/2023/02/11/%E8%87%AA%E5%AE%9A%E4%B9%89presto%E6%8F%92%E4%BB%B6/</id>
    <published>2023-02-11T01:39:03.000Z</published>
    <updated>2023-02-11T01:39:52.708Z</updated>
    
    <content type="html"><![CDATA[<h3 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h3><p>根据国家发布的规定，我们需要把用户隐私数据进行加密存储，例如手机号、IP地址。<br>我们的数仓是保存在AWS的S3存储系统中，数据通过Presto进行查询，很多时候找数据是需要精确到具体用户的。<br>但此时我们的用户数据已加密，而Presto又不支持解密，如果使用程序解密费时费力，所以自定义插件就闪亮登场了。</p><p><img src="https://hwy-figure-bed.oss-cn-hangzhou.aliyuncs.com/blog/image/1630490684685-20191111446739_lMhbGS.png"></p><h3 id="基础版本"><a href="#基础版本" class="headerlink" title="基础版本"></a>基础版本</h3><p>我使用了AWS的EMR版本如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">JDK：1.8.0_92</span><br><span class="line">EMR版本：emr-5.30.1</span><br><span class="line">Presto版本：0.232</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">JDK：1.8.0_201</span><br><span class="line">EMR版本：emr-5.24.0</span><br><span class="line">Presto版本：0.219</span><br></pre></td></tr></table></figure><p>对了如果抄我的代码，请确认自己的是Presto维护作者，现在网上有两个版本的Presto，互相是不兼容的。<br>一个是我现在的使用的<strong>com.facebook.presto</strong>，还有一个是<strong>io.prestosql</strong>，注意注意。<br>我的程序的Presto SDK版本是0.232，测试是可以兼容低版本的，例如0.219。</p><p>源码地址：<a href="https://github.com/HWYWL/presto-third-udfs">https://github.com/HWYWL/presto-third-udfs</a><br>打包命令：mvn clean package -DskipTests&#x3D;true</p><h3 id="编写程序"><a href="#编写程序" class="headerlink" title="编写程序"></a>编写程序</h3><p>文件目录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">G:.</span><br><span class="line">├─.idea</span><br><span class="line">└─src</span><br><span class="line">    ├─main</span><br><span class="line">    │  ├─java</span><br><span class="line">    │  │  └─com</span><br><span class="line">    │  │      └─yi</span><br><span class="line">    │  │          └─udfs</span><br><span class="line">    │  │              ├─model</span><br><span class="line">    │  │              ├─scalar</span><br><span class="line">    │  │              │  ├─cryptography</span><br><span class="line">    │  │              │  ├─date</span><br><span class="line">    │  │              │  ├─geo</span><br><span class="line">    │  │              │  ├─json</span><br><span class="line">    │  │              │  └─other</span><br><span class="line">    │  │              └─utils</span><br><span class="line">    │  └─resources</span><br><span class="line">    │      └─META-INF</span><br><span class="line">    │          └─services</span><br><span class="line">    └─test</span><br><span class="line">        └─java</span><br><span class="line">            └─com</span><br><span class="line">                └─yi</span><br></pre></td></tr></table></figure><p>pom.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.yi<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>presto-third-udfs<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">presto.version</span>&gt;</span>0.232<span class="tag">&lt;/<span class="name">presto.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">slice.version</span>&gt;</span>0.38<span class="tag">&lt;/<span class="name">slice.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">joda.version</span>&gt;</span>2.8.2<span class="tag">&lt;/<span class="name">joda.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">airlift.version</span>&gt;</span>0.189<span class="tag">&lt;/<span class="name">airlift.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">commons-codec.version</span>&gt;</span>1.15<span class="tag">&lt;/<span class="name">commons-codec.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">junit.version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">junit.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">slf4j.version</span>&gt;</span>1.7.25<span class="tag">&lt;/<span class="name">slf4j.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.facebook.presto/presto-spi --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.facebook.presto<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>presto-spi<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;presto.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.airlift<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slice<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;slice.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>joda-time<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>joda-time<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;joda.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.facebook.airlift<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>json<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;airlift.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-codec<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-codec<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;commons-codec.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- Logger --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;slf4j.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jcl-over-slf4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;slf4j.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-over-slf4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;slf4j.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;junit.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>presto-third-udfs<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-release-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-shade-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">phase</span>&gt;</span>package<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">goal</span>&gt;</span>shade<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">artifactSet</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>io.airlift:log<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>joda-time:joda-time<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">artifactSet</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">relocations</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">relocation</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>io.airlift.log<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">shadedPattern</span>&gt;</span>io.airlift.log.shaded<span class="tag">&lt;/<span class="name">shadedPattern</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;/<span class="name">relocation</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">relocations</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>PrestoPlugin，继承Presto SPI的Plugin类，这样Presto启动才能加载,<br>程序会扫描com.yi.udfs.scalar包下的所有类，将带有特定注解的类加载在函数中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yi.udfs;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.facebook.presto.spi.Plugin;</span><br><span class="line"><span class="keyword">import</span> com.google.common.collect.ImmutableSet;</span><br><span class="line"><span class="keyword">import</span> com.google.common.collect.Lists;</span><br><span class="line"><span class="keyword">import</span> com.google.common.collect.Sets;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Objects;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"><span class="keyword">import</span> java.util.zip.ZipEntry;</span><br><span class="line"><span class="keyword">import</span> java.util.zip.ZipInputStream;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> YI</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> create in 2021/8/17 9:38</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PrestoPlugin</span> <span class="keyword">implements</span> <span class="title class_">Plugin</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LoggerFactory.getLogger(PrestoPlugin.class);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 加载类</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回类对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Set&lt;Class&lt;?&gt;&gt; getFunctions() &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            List&lt;Class&lt;?&gt;&gt; classes = getFunctionClasses();</span><br><span class="line">            Set&lt;Class&lt;?&gt;&gt; set = Sets.newHashSet();</span><br><span class="line">            <span class="keyword">for</span> (Class&lt;?&gt; clazz : classes) &#123;</span><br><span class="line">                <span class="keyword">if</span> (clazz.getName().startsWith(<span class="string">&quot;com.yi.udfs.scalar&quot;</span>)) &#123;</span><br><span class="line">                    logger.info(<span class="string">&quot;加载函数: &quot;</span> + clazz);</span><br><span class="line">                    set.add(clazz);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> ImmutableSet.&lt;Class&lt;?&gt;&gt;builder().addAll(set).build();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            logger.error(<span class="string">&quot;无法从jar文件加载类!&quot;</span>, e);</span><br><span class="line">            <span class="keyword">return</span> ImmutableSet.of();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过反射获取类对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 类对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Class&lt;?&gt;&gt; getFunctionClasses() <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        List&lt;Class&lt;?&gt;&gt; classes = Lists.newArrayList();</span><br><span class="line">        <span class="type">String</span> <span class="variable">classResource</span> <span class="operator">=</span> <span class="built_in">this</span>.getClass().getName().replace(<span class="string">&quot;.&quot;</span>, <span class="string">&quot;/&quot;</span>) + <span class="string">&quot;.class&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">jarURLFile</span> <span class="operator">=</span> Objects.requireNonNull(Thread.currentThread().getContextClassLoader().getResource(classResource)).getFile();</span><br><span class="line">        <span class="type">int</span> <span class="variable">jarEnd</span> <span class="operator">=</span> jarURLFile.indexOf(<span class="string">&#x27;!&#x27;</span>);</span><br><span class="line">        <span class="comment">// 这是URL格式，再次转换以获得实际的文件位置</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">jarLocation</span> <span class="operator">=</span> jarURLFile.substring(<span class="number">0</span>, jarEnd);</span><br><span class="line">        jarLocation = <span class="keyword">new</span> <span class="title class_">URL</span>(jarLocation).getFile();</span><br><span class="line"></span><br><span class="line">        <span class="type">ZipInputStream</span> <span class="variable">zip</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ZipInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(jarLocation));</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">ZipEntry</span> <span class="variable">entry</span> <span class="operator">=</span> zip.getNextEntry(); entry != <span class="literal">null</span>; entry = zip.getNextEntry()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (entry.getName().endsWith(<span class="string">&quot;.class&quot;</span>) &amp;&amp; !entry.isDirectory()) &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">className</span> <span class="operator">=</span> entry.getName().replace(<span class="string">&quot;/&quot;</span>, <span class="string">&quot;.&quot;</span>);</span><br><span class="line">                <span class="comment">// 删除.class后缀</span></span><br><span class="line">                className = className.substring(<span class="number">0</span>, className.length() - <span class="number">6</span>);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    classes.add(Class.forName(className));</span><br><span class="line">                &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">                    logger.error(<span class="string">&quot;无法加载类&#123;&#125;，异常: &#123;&#125;&quot;</span>, className, e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> classes;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>AESFunctions，一个负责aes加解密的类库，即我们需要的可以在Presto使用的函数库。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yi.udfs.scalar.cryptography;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.facebook.presto.spi.function.Description;</span><br><span class="line"><span class="keyword">import</span> com.facebook.presto.spi.function.ScalarFunction;</span><br><span class="line"><span class="keyword">import</span> com.facebook.presto.spi.function.SqlType;</span><br><span class="line"><span class="keyword">import</span> com.facebook.presto.spi.type.StandardTypes;</span><br><span class="line"><span class="keyword">import</span> com.yi.udfs.utils.AESUtil;</span><br><span class="line"><span class="keyword">import</span> com.yi.udfs.utils.StringUtil;</span><br><span class="line"><span class="keyword">import</span> io.airlift.slice.Slice;</span><br><span class="line"><span class="keyword">import</span> io.airlift.slice.Slices;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> YI</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 使用AES加密解密 AES-128-ECB加密</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> create in 2021/8/17 11:00</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AESFunctions</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Description(&quot;aes加密&quot;)</span></span><br><span class="line">    <span class="meta">@ScalarFunction(&quot;aes_encrypt&quot;)</span></span><br><span class="line">    <span class="meta">@SqlType(StandardTypes.VARCHAR)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Slice <span class="title function_">aesEncrypt</span><span class="params">(<span class="meta">@SqlType(StandardTypes.VARCHAR)</span> Slice cSrc, <span class="meta">@SqlType(StandardTypes.VARCHAR)</span> Slice cKey)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">if</span> (cSrc == <span class="literal">null</span> || StringUtil.empty(cSrc.toStringUtf8())) &#123;</span><br><span class="line">            <span class="keyword">return</span> cSrc;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 加密</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">enString</span> <span class="operator">=</span> AESUtil.Encrypt(cSrc.toStringUtf8(), cKey);</span><br><span class="line">        <span class="keyword">return</span> Slices.utf8Slice(enString);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Description(&quot;aes解密&quot;)</span></span><br><span class="line">    <span class="meta">@ScalarFunction(&quot;aes_decrypt&quot;)</span></span><br><span class="line">    <span class="meta">@SqlType(StandardTypes.VARCHAR)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Slice <span class="title function_">aesDecrypt</span><span class="params">(<span class="meta">@SqlType(StandardTypes.VARCHAR)</span> Slice cSrc, <span class="meta">@SqlType(StandardTypes.VARCHAR)</span> Slice cKey)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (cSrc == <span class="literal">null</span> || StringUtil.empty(cSrc.toStringUtf8())) &#123;</span><br><span class="line">            <span class="keyword">return</span> cSrc;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 解密</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">deString</span> <span class="operator">=</span> AESUtil.Decrypt(cSrc.toStringUtf8(), cKey);</span><br><span class="line">        <span class="keyword">return</span> Slices.utf8Slice(deString);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里解释一下注解，<br>@Description：自定义函数的注释，让人知道这个函数干什么用的。<br>@ScalarFunction：我们写SQL时写这个函数才能调用我们自定义的方法<br>@SqlType：方法的返回值<br>在入参的@SqlType可以用来表示参数的类型，自定义函数的Slice就是我们Java的String。</p><h3 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h3><p>1.如果你也是使用AWS的EMR，并且集群已经在运行了，这个只能一个一个节点替换很麻烦。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1.我们把我们生成的jar文件复制到我们节点，我们先复制到临时目录，再从临时目录sudo复制到目标目录</span><br><span class="line">不能一步到位，sudo下载的文件没有权限复制到目标目录，当然如果你文件不放在S3，就比较简单了，直接第二条命令。</span><br><span class="line">/usr/bin/aws s3 cp s3://kylin-data/presto-third-udfs.jar /home/hadoop/</span><br><span class="line">sudo mv presto-third-udfs.jar /usr/lib/presto/plugin/hive-hadoop2/</span><br><span class="line">2.重启presto，每个节点都需要重启，重启的文档如下：</span><br><span class="line">https://aws.amazon.com/cn/premiumsupport/knowledge-center/restart-service-emr/</span><br></pre></td></tr></table></figure><p>2.如果你想集群启动时自动加载插件，启动完就可以使用，你可以如下操作，还是以AWS的EMR为例。<br>我写了一个脚本放在S3文件系统，如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">aws s3 <span class="built_in">cp</span> s3://kylin-data/presto-third-udfs.jar /home/hadoop/</span><br><span class="line">sudo <span class="built_in">mkdir</span> -p /usr/lib/presto/plugin/hive-hadoop2/</span><br><span class="line">sudo <span class="built_in">cp</span> /home/hadoop/presto-third-udfs.jar /usr/lib/presto/plugin/hive-hadoop2/</span><br><span class="line"><span class="built_in">exit</span> 0</span><br></pre></td></tr></table></figure><p><strong>使用网页控制台启动，需要在引导加入此脚本</strong><br><img src="https://hwy-figure-bed.oss-cn-hangzhou.aliyuncs.com/blog/image/1630493337411-image.png"></p><p><strong>使用程序启动集群(Java)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">RunJobFlowRequest request = new RunJobFlowRequest()</span><br><span class="line">    //集群名</span><br><span class="line">    .withName(emrName)</span><br><span class="line">    //emr的版本，指定之后不需要再指定上面组件的版本号(文件合并必须使用这个版本)</span><br><span class="line">    .withReleaseLabel(&quot;emr-5.30.1&quot;)</span><br><span class="line">    //集群工作步骤，集群启动之 后会自动执行，执行完可以自动关闭或者保持运行集群</span><br><span class="line">    .withSteps(stepConfigs)</span><br><span class="line">    //集群需要安装的组件,hive,hadoop</span><br><span class="line">    .withApplications(applications)</span><br><span class="line">    //emr日志路径</span><br><span class="line">    .withLogUri(&quot;s3://apm-event-source-data/&quot;)</span><br><span class="line">    //集群相关aws服务的iam角色</span><br><span class="line">    .withServiceRole(&quot;EMR_DefaultRole&quot;)</span><br><span class="line">    //组成集群的Ec2对应的iam角色</span><br><span class="line">    .withJobFlowRole(&quot;EMR_EC2_DefaultRole&quot;)</span><br><span class="line">    .withBootstrapActions(new BootstrapActionConfig()</span><br><span class="line">        .withName(&quot;安装自定义插件&quot;)</span><br><span class="line">        .withScriptBootstrapAction(new ScriptBootstrapActionConfig()</span><br><span class="line">            .withPath(&quot;s3://kylin-data/copyJarFile.sh&quot;)))</span><br><span class="line">......</span><br></pre></td></tr></table></figure><p>就是加入引导，在引导阶段吧我们插件复制到目标目录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">.withBootstrapActions(new BootstrapActionConfig()</span><br><span class="line">.withName(&quot;安装自定义插件&quot;)</span><br><span class="line">.withScriptBootstrapAction(new ScriptBootstrapActionConfig()</span><br><span class="line">        .withPath(&quot;s3://kylin-data/copyJarFile.sh&quot;)))</span><br></pre></td></tr></table></figure><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>公共加解密密钥：J4NwAAAAAAAAAAAA</p><p>Presto加解密使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">加密函数：select aes_encrypt(&#x27;你好世界&#x27;, &#x27;J4NwAAAAAAAAAAAA&#x27;);</span><br><span class="line">输出：KbAC1EtPwRSbNmS9oaBSuA==</span><br><span class="line"></span><br><span class="line">解密函数：select aes_decrypt(&#x27;KbAC1EtPwRSbNmS9oaBSuA==&#x27;, &#x27;J4NwAAAAAAAAAAAA&#x27;);</span><br><span class="line">输出：你好世界</span><br></pre></td></tr></table></figure><p><strong>小知识：</strong>Hive是自带AES加解密函数的，使用如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">加密函数：SELECT base64(aes_encrypt(&#x27;你好世界&#x27;, &#x27;J4NwAAAAAAAAAAAA&#x27;));</span><br><span class="line">输出：KbAC1EtPwRSbNmS9oaBSuA==</span><br><span class="line"></span><br><span class="line">解密函数：SELECT aes_decrypt(unbase64(&#x27;KbAC1EtPwRSbNmS9oaBSuA==&#x27;), &#x27;J4NwAAAAAAAAAAAA&#x27;);</span><br><span class="line">输出：你好世界</span><br></pre></td></tr></table></figure><p>源码地址：<a href="https://github.com/HWYWL/presto-third-udfs">https://github.com/HWYWL/presto-third-udfs</a></p>]]></content>
    
    
    <summary type="html">自定义Presto插件。</summary>
    
    
    
    <category term="大数据" scheme="https://hwy.ac.cn/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
    <category term="大数据" scheme="https://hwy.ac.cn/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    <category term="Presto" scheme="https://hwy.ac.cn/tags/Presto/"/>
    
  </entry>
  
  <entry>
    <title>Caddy 反向代理</title>
    <link href="https://hwy.ac.cn/2023/02/07/Caddy%20%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/"/>
    <id>https://hwy.ac.cn/2023/02/07/Caddy%20%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/</id>
    <published>2023-02-07T08:49:39.000Z</published>
    <updated>2023-02-11T01:39:52.700Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基本介绍和使用"><a href="#基本介绍和使用" class="headerlink" title="基本介绍和使用"></a>基本介绍和使用</h2><p><strong>Caddy</strong> 是一款使用 <strong>Go</strong> 语言开发的 <strong>Web</strong> 服务器。其配置更为简洁，并可以自动申请及配置 <strong>SSL</strong> 证书、<strong>OCSP</strong> 装样、静态文件服务、反向代理、<strong>Kubernetes</strong> 入口等，强力推荐。</p><h3 id="安装-Caddy"><a href="#安装-Caddy" class="headerlink" title="安装 Caddy"></a>安装 Caddy</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 安装 Caddy 软件包</span><br><span class="line">yum install caddy -y</span><br></pre></td></tr></table></figure><h3 id="配置-Caddy"><a href="#配置-Caddy" class="headerlink" title="配置 Caddy"></a>配置 Caddy</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 下载 Halo 官方的 Caddy 配置模板</span><br><span class="line">curl -o /etc/caddy/conf.d/Caddyfile.conf --create-dirs https://dl.halo.run/config/Caddyfile</span><br></pre></td></tr></table></figure><p>下载完成之后，我们还需要对其进行修改。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 使用 vim 编辑 Caddyfile</span><br><span class="line">vim /etc/caddy/conf.d/Caddyfile.conf</span><br></pre></td></tr></table></figure><p>打开之后我们可以看到</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">https://www.simple.com &#123;</span><br><span class="line"> gzip</span><br><span class="line"> tls xxxx@xxx.xx</span><br><span class="line"> proxy / localhost:port &#123;</span><br><span class="line">  transparent</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>请把 <a href="https://www.simple.com/">https://www.simple.com</a> 改为自己的域名。</li><li>tls 后面的 <a href="mailto:&#x78;&#x78;&#x78;&#120;&#64;&#x78;&#x78;&#x78;&#46;&#120;&#x78;">&#x78;&#x78;&#x78;&#120;&#64;&#x78;&#x78;&#x78;&#46;&#120;&#x78;</a> 改为自己的邮箱地址，这是用于自动申请 SSL 证书用的。需要注意的是，不需要你自己配置 SSL 证书，而且会自动帮你续签。</li><li>localhost:port 请将 port 修改为你需要的运行端口，默认为 8090。</li></ul><p>修改完成之后启动 <strong>Caddy</strong> 服务即可。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># 开启自启 Caddy 服务</span><br><span class="line">systemctl enable caddy</span><br><span class="line"></span><br><span class="line"># 启动 Caddy</span><br><span class="line">service caddy start</span><br><span class="line"></span><br><span class="line"># 停止运行 Caddy</span><br><span class="line">service caddy stop</span><br><span class="line"></span><br><span class="line"># 重启 Caddy</span><br><span class="line">service caddy restart</span><br><span class="line"></span><br><span class="line"># 查看 Caddy 运行状态</span><br><span class="line">service caddy status</span><br></pre></td></tr></table></figure><blockquote><p>如果 <strong>Caddy</strong> 启动出现诸如 <strong>[&#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;caddy.service:23] Unknown lvalue ‘AmbientCapabilities’ in section ‘Service’</strong> 这样的问题，请使用 <strong>yum update -y</strong> 更新系统。然后再使用 <strong>service caddy restart</strong> 重启，已知 <strong>CentOS 7.3</strong> 会出现该问题。</p></blockquote><h2 id="进阶设置"><a href="#进阶设置" class="headerlink" title="进阶设置"></a>进阶设置</h2><p>多网址重定向到主网址，比如访问 simple.com 跳转到 <a href="http://www.simple.com/">www.simple.com</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 使用 vim 编辑 Caddyfile</span><br><span class="line">vim /etc/caddy/conf.d/Caddyfile.conf</span><br></pre></td></tr></table></figure><p>打开之后我们在原有的基础上添加以下配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">https://simple.com &#123;</span><br><span class="line">  redir https://www.simple.com&#123;url&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将 <strong><a href="https://simple.com/">https://simple.com</a></strong> 和 <strong><a href="https://www.simple.com{url}/">https://www.simple.com{url}</a></strong> 修改为自己需要的网址就行了，比如我要求访问 <strong>hwy.ac.cn</strong> 跳转到 <strong><a href="http://www.hwy.ac.cn/">www.hwy.ac.cn</a></strong>，完整的配置如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">https://hwy.ac.cn &#123;</span><br><span class="line">  redir https://www.hwy.ac.cn&#123;url&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">https://www.hwy.ac.cn &#123;</span><br><span class="line">  gzip</span><br><span class="line">  tls hwy@ac.cn</span><br><span class="line">  proxy / localhost:8090 &#123;</span><br><span class="line">    transparent</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后我们重启 <strong>Caddy</strong> 即可。</p><p>除此之外它还支持<strong>自定义负载平衡和活动运行状况检查、JSONAPI更新配置等等。。。</strong></p>]]></content>
    
    
    <summary type="html">Caddy 反向代理</summary>
    
    
    
    <category term="caddy" scheme="https://hwy.ac.cn/categories/caddy/"/>
    
    
    <category term="反向代理" scheme="https://hwy.ac.cn/tags/%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>一个轻量级的定时任务管理器</title>
    <link href="https://hwy.ac.cn/2023/01/28/%E4%B8%80%E4%B8%AA%E8%BD%BB%E9%87%8F%E7%BA%A7%E7%9A%84%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1%E7%AE%A1%E7%90%86%E5%99%A8/"/>
    <id>https://hwy.ac.cn/2023/01/28/%E4%B8%80%E4%B8%AA%E8%BD%BB%E9%87%8F%E7%BA%A7%E7%9A%84%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1%E7%AE%A1%E7%90%86%E5%99%A8/</id>
    <published>2023-01-28T02:33:01.000Z</published>
    <updated>2023-02-11T01:39:52.704Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ant-task"><a href="#ant-task" class="headerlink" title="ant-task"></a>ant-task</h1><p>一个轻量级的定时任务管理器</p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>在<strong>Spring Boot</strong>中有一个自带的**@Scheduled<strong>注解，可以用于启动定时任务，使用很方便，<br>但也存在着不足，例如定时任务直接写死、方法无参数、不能随时启停等等。<br><strong>ant-task</strong>就是为了解决这些问题而存在的，在解决问题的同时也一如既往的方便接入，</strong>ant-task**特性如下：</p><ul><li>图形化界面管理</li><li>方便快捷接入</li><li>支持随时启停任务</li><li>支持动态参数传递</li><li>支持动态修改任务时间</li><li>支持Cron表达式</li><li>支持日志ID跟踪</li></ul><p><strong>注意</strong>：因为没有使用第三方存储，所以不适合分布式项目，下个版本更新</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p><strong>maven</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;com.github.hwywl&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;ant-task&lt;/artifactId&gt;</span><br><span class="line">  &lt;version&gt;1.0.3-RELEASE&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p><strong>Gradle</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">implementation &#x27;com.github.hwywl:ant-task:1.0.3-RELEASE&#x27;</span><br></pre></td></tr></table></figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>使用很简单，只要两步即可接入（本项目依赖<strong>Spring Boot</strong>中的<strong>spring-boot-starter-web</strong>组件）。</p><ol><li>在pom.xml中引入上面的依赖。</li><li>在Spring Boot配置文件中设置如下配置,根据不同的配置文件二选一即可。</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># application.yml</span><br><span class="line"></span><br><span class="line">ant-task:</span><br><span class="line">  conf:</span><br><span class="line">    pool-size: 10</span><br><span class="line">    file-path: /home/ec2-user/server/sms/task.properties</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># application.properties</span><br><span class="line"></span><br><span class="line"># 定时任务线程池，默认为 6</span><br><span class="line">ant-task.conf.pool-size=10</span><br><span class="line"># 任务数据配置存储路径(必填)</span><br><span class="line">ant-task.conf.file-path=/home/ec2-user/server/sms/task.properties</span><br></pre></td></tr></table></figure><p>此时就已经成功接入了，是不是很简单，我们启动项目访问：<strong><a href="http://localhost:{port}/task.html">http://localhost:{port}/task.html</a></strong> 进入页面。</p><p><img src="https://hwy-figure-bed.oss-cn-hangzhou.aliyuncs.com/blog/image/1631842589969-1.png"></p><p>看到页面说明我们接入成功了，接下来我们配置一个数据试一下。</p><p>新建一个测试类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试定时任务</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> HWY</span></span><br><span class="line"><span class="comment"> * 2022年12月13日15:07:44</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component(&quot;schedulingTask&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TaskDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">taskParams</span><span class="params">(String params)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;定时执行有参任务：&quot;</span> + params);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">taskJsonParams</span><span class="params">(TaskBean params)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;定时执行有参任务：&quot;</span> + params);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">taskNoParams</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;定时执行无参任务！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">TaskBean</span>&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * id</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">private</span> Integer id;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 账户id</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">private</span> String customerId;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>写好测试类之后我们<strong>重启</strong>项目，进入上面URL那个配置界面，进行如下配置：</p><p><img src="https://hwy-figure-bed.oss-cn-hangzhou.aliyuncs.com/blog/image/1631843002464-2.png"></p><p>或者试用JSON参数配置<br><img src="https://hwy-figure-bed.oss-cn-hangzhou.aliyuncs.com/blog/image/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20221213151033.png"></p><p>配置非常简单，点击确定定时任务就开始执行了，我配置了两台测试，一个有参一个无参，来看看效果。</p><p><img src="https://hwy-figure-bed.oss-cn-hangzhou.aliyuncs.com/blog/image/1631843346023-4.png"></p><p>运行结果如下：</p><p><img src="https://hwy-figure-bed.oss-cn-hangzhou.aliyuncs.com/blog/image/1631843374250-3.png"></p><h2 id="技术栈"><a href="#技术栈" class="headerlink" title="技术栈"></a>技术栈</h2><ul><li>SpringBoot</li><li>ThreadPoolTaskScheduler 线程池</li><li>Vue</li></ul><h2 id="版本迭代"><a href="#版本迭代" class="headerlink" title="版本迭代"></a>版本迭代</h2><h3 id="1-0-3-RELEASE"><a href="#1-0-3-RELEASE" class="headerlink" title="1.0.3-RELEASE"></a>1.0.3-RELEASE</h3><ul><li>增加参数对JSON数据的支持，可以让入参的Bean对象直接接收</li><li>修复因更新导致的任务重复执行问题</li></ul><h3 id="1-0-2-RELEASE"><a href="#1-0-2-RELEASE" class="headerlink" title="1.0.2-RELEASE"></a>1.0.2-RELEASE</h3><ul><li>增加页面的方便配置</li><li>增加任务状态开关</li><li>发布到中央仓库</li></ul><h3 id="1-0-1-RELEASE"><a href="#1-0-1-RELEASE" class="headerlink" title="1.0.1-RELEASE"></a>1.0.1-RELEASE</h3><ul><li>实现基础定时功能</li><li>实现手动文件可配置化</li></ul><h2 id="感谢"><a href="#感谢" class="headerlink" title="感谢"></a>感谢</h2><ul><li>感谢<a href="https://github.com/lenve">江南一点雨</a>提供了思路</li><li>工具还有不足之处，请大家Issues ヾ(๑╹◡╹)ﾉ”</li><li>我那么可爱你不点个star吗 φ(&gt;ω&lt;*)</li></ul><h2 id="问题建议"><a href="#问题建议" class="headerlink" title="问题建议"></a>问题建议</h2><ul><li>联系我的邮箱：<a href="mailto:&#x69;&#108;&#x6f;&#x76;&#101;&#121;&#95;&#104;&#x77;&#121;&#64;&#49;&#x36;&#51;&#x2e;&#x63;&#x6f;&#109;">&#x69;&#108;&#x6f;&#x76;&#101;&#121;&#95;&#104;&#x77;&#121;&#64;&#49;&#x36;&#51;&#x2e;&#x63;&#x6f;&#109;</a></li><li>我的博客：<a href="https://www.hwy.ac.cn/">https://www.hwy.ac.cn</a></li><li>GitHub：<a href="https://github.com/HWYWL">https://github.com/HWYWL</a></li></ul>]]></content>
    
    
    <summary type="html">一个轻量级的定时任务管理器！。</summary>
    
    
    
    <category term="Java" scheme="https://hwy.ac.cn/categories/Java/"/>
    
    
    <category term="Java" scheme="https://hwy.ac.cn/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>飞桨PaddleOCR的简单使用</title>
    <link href="https://hwy.ac.cn/2022/08/04/%E9%A3%9E%E6%A1%A8PaddleOCR%E7%9A%84%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/"/>
    <id>https://hwy.ac.cn/2022/08/04/%E9%A3%9E%E6%A1%A8PaddleOCR%E7%9A%84%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/</id>
    <published>2022-08-04T10:02:30.000Z</published>
    <updated>2023-02-11T01:39:52.708Z</updated>
    
    <content type="html"><![CDATA[<p>公司目前有一个需求是自动识别用户上传的银行卡和身份证，为了信息安全考虑没有使用第三方的API，而是自己搭建了一套，搭建使用如下。</p><h1 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">我使用是AnolisOS 8.5版本，一个Centos 8的衍生版本，完全兼容Centos 8。</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装开发者工具</span></span><br><span class="line">dnf groupinstall &#x27;development tools&#x27;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">可通过查找不同版本安装</span></span><br><span class="line">yum search python | grep -i devel</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装python-devel(注意python版本)</span></span><br><span class="line">yum install -y python39-devel.x86_64</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建软连接</span></span><br><span class="line">ln -s /usr/bin/python3.9 /usr/bin/python3</span><br><span class="line">ln -s /usr/bin/python3.9 /usr/bin/python</span><br><span class="line">ln -s /usr/bin/pip3.9 /usr/bin/pip3</span><br><span class="line">ln -s /usr/bin/pip3.9 /usr/bin/pip</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">升级pip到最新版本，不然安装库会报错</span></span><br><span class="line">python -m pip install –upgrade pip</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装libGL库</span></span><br><span class="line">yum -y install mesa-libGL.x86_64</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装jdk1.8(可选)</span></span><br><span class="line">yum install -y java-1.8.0-openjdk.x86_64</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">更新系统</span></span><br><span class="line">yum update</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装paddlepaddle</span></span><br><span class="line">python -m pip install paddlepaddle -i https://mirror.baidu.com/pypi/simple</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装PaddleOCR</span></span><br><span class="line">pip install &quot;paddleocr&gt;=2.5.0&quot;</span><br></pre></td></tr></table></figure><h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> paddleocr <span class="keyword">import</span> PaddleOCR, draw_ocr</span><br><span class="line"></span><br><span class="line"><span class="comment"># Paddleocr目前支持的多语言语种可以通过修改lang参数进行切换</span></span><br><span class="line"><span class="comment"># 例如`ch`, `en`, `fr`, `german`, `korean`, `japan`</span></span><br><span class="line">ocr = PaddleOCR(use_angle_cls=<span class="literal">True</span>, lang=<span class="string">&quot;ch&quot;</span>)</span><br><span class="line">img_path = <span class="string">&#x27;/home/test.jpg&#x27;</span></span><br><span class="line">result = ocr.ocr(img_path, cls=<span class="literal">True</span>)</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> result:</span><br><span class="line">    <span class="built_in">print</span>(line)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示结果</span></span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line">image = Image.<span class="built_in">open</span>(img_path).convert(<span class="string">&#x27;RGB&#x27;</span>)</span><br><span class="line">boxes = [line[<span class="number">0</span>] <span class="keyword">for</span> line <span class="keyword">in</span> result]</span><br><span class="line">txts = [line[<span class="number">1</span>][<span class="number">0</span>] <span class="keyword">for</span> line <span class="keyword">in</span> result]</span><br><span class="line">scores = [line[<span class="number">1</span>][<span class="number">1</span>] <span class="keyword">for</span> line <span class="keyword">in</span> result]</span><br><span class="line">im_show = draw_ocr(image, boxes, txts, scores, font_path=<span class="string">&#x27;/home/simfang.ttf&#x27;</span>)</span><br><span class="line">im_show = Image.fromarray(im_show)</span><br><span class="line">im_show.save(<span class="string">&#x27;result.jpg&#x27;</span>)</span><br></pre></td></tr></table></figure><p>说明：<strong>simfang.ttf</strong> 文件其实就是字库，我随便下载一个来用，下面是我下载的地址：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://y.downyagt.com:7658/soft/simfang_downyi.com.zip</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">飞桨PaddleOCR的简单使用</summary>
    
    
    
    <category term="其他" scheme="https://hwy.ac.cn/categories/%E5%85%B6%E4%BB%96/"/>
    
    
    <category term="其他" scheme="https://hwy.ac.cn/tags/%E5%85%B6%E4%BB%96/"/>
    
  </entry>
  
  <entry>
    <title>小米路由器Pro(R3P)刷机教程</title>
    <link href="https://hwy.ac.cn/2022/04/21/%E5%B0%8F%E7%B1%B3%E8%B7%AF%E7%94%B1%E5%99%A8Pro(R3P)%E5%88%B7%E6%9C%BA%E6%95%99%E7%A8%8B/"/>
    <id>https://hwy.ac.cn/2022/04/21/%E5%B0%8F%E7%B1%B3%E8%B7%AF%E7%94%B1%E5%99%A8Pro(R3P)%E5%88%B7%E6%9C%BA%E6%95%99%E7%A8%8B/</id>
    <published>2022-04-21T06:07:40.000Z</published>
    <updated>2023-02-11T01:39:52.708Z</updated>
    
    <content type="html"><![CDATA[<h3 id="第一步解锁路由器SSH"><a href="#第一步解锁路由器SSH" class="headerlink" title="第一步解锁路由器SSH"></a>第一步解锁路由器SSH</h3><p>1.首先需要下载 小米路由器Pro 开发版的ROM固件，地址如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ROM下载地址：https://bigota.miwifi.com/xiaoqiang/rom/r3/miwifi_r3_firmware_e9f31_2.27.120.bin</span><br></pre></td></tr></table></figure><p>2.在浏览器输入<strong>192.168.31.1</strong>进入小米管理后台右上角 -&gt; 系统升级 -&gt; 手动升级<br><img src="https://hwy-figure-bed.oss-cn-hangzhou.aliyuncs.com/blog/image/20220421141502.png"></p><p>选择刚刚下载ROM文件，点击开始升级<br><img src="https://hwy-figure-bed.oss-cn-hangzhou.aliyuncs.com/blog/image/20220421141539.png"></p><p>3.等待重启</p><p>4.解锁ssh</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">解锁工具：https://www.miwifi.com/miwifi_open.html</span><br></pre></td></tr></table></figure><p><img src="https://hwy-figure-bed.oss-cn-hangzhou.aliyuncs.com/blog/image/1650522046111.png"></p><p>按照官网说明进行操作解锁</p><p><img src="https://hwy-figure-bed.oss-cn-hangzhou.aliyuncs.com/blog/image/20220421141928.png"></p><h3 id="第二步连接ssh"><a href="#第二步连接ssh" class="headerlink" title="第二步连接ssh"></a>第二步连接ssh</h3><p>使用你喜欢的shell工具连上即可，我喜欢国产的，地址如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">官网：http://www.hostbuf.com/t/988.html</span><br><span class="line">下载地址：http://www.hostbuf.com/downloads/finalshell_install.exe</span><br></pre></td></tr></table></figure><p>连上ssh</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">地址：192.168.31.1</span><br><span class="line">账号：root</span><br><span class="line">密码：自己下载ssh解锁工具包页面的密码</span><br></pre></td></tr></table></figure><p><img src="https://hwy-figure-bed.oss-cn-hangzhou.aliyuncs.com/blog/image/20220421143355.png"></p><p>能看这个界面就算是成功一半了。</p><h3 id="上传刷机固件"><a href="#上传刷机固件" class="headerlink" title="上传刷机固件"></a>上传刷机固件</h3><p>固件下载地址：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SCP下载地址：http://www.downza.cn/soft/15245.html</span><br><span class="line">固件下载地址：https://github.com/yeliulee/openwrt-ramips-mt7621-xiaomi_mir3p</span><br></pre></td></tr></table></figure><p>这是一个大佬做的固件，使用名字为<strong>openwrt-ramips-mt7621-xiaomi_mir3p-squashfs-factory.bin</strong>的固件。<br>将固件改名为firmware.bin，上传到路由器的 <strong>&#x2F;tmp</strong> 目录下</p><p>在控制台按顺序执行如下命令刷机：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">cd /tmp</span><br><span class="line">nvram set flag_try_sys1_failed=1 </span><br><span class="line">nvram set flag_try_sys2_failed=0 </span><br><span class="line">nvram set flag_boot_success=0 </span><br><span class="line">nvram commit</span><br><span class="line">dd if=firmware.bin bs=1M count=4 | mtd write - kernel1</span><br><span class="line">mtd erase rootfs0</span><br><span class="line">mtd erase rootfs1</span><br><span class="line">mtd erase overlay</span><br><span class="line">dd if=firmware.bin bs=1M skip=4 | mtd write - rootfs0</span><br><span class="line">reboot</span><br></pre></td></tr></table></figure><p>刷完不要着急，等个十分钟左右指示灯变蓝（非要着急拔电源变砖了，后果自负），然后进入后台管理即可<br><strong>路由器 IP ：192.168.1.1<br>默认用户名：root<br>默认密码：password</strong></p><h3 id="后续升级"><a href="#后续升级" class="headerlink" title="后续升级"></a>后续升级</h3><p>如果发现在网上找到了更好用的固件，想升级怎么办呢？</p><p>例如恩山论坛这位大佬的固件，地址：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://www.right.com.cn/forum/forum.php?mod=viewthread&amp;tid=4049182&amp;highlight=R3P</span><br></pre></td></tr></table></figure><p><strong>将openwrt-ramips-mt7621-xiaomi_mi-router-3-pro-squashfs-sysupgrade.bin改名为sysupgrade.bin</strong>。<br>我们只需要下载对应我们路由器的固件下来，按照上面步骤上传到  <strong>&#x2F;tmp</strong> 目录下，执行如下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /tmp</span><br><span class="line">sysupgrade -n -v /tmp/sysupgrade.bin</span><br></pre></td></tr></table></figure><p>等待路由器重启，访问<strong>192.168.1.1</strong>继续操作。</p><h3 id="从openwrt还原为官方固件"><a href="#从openwrt还原为官方固件" class="headerlink" title="从openwrt还原为官方固件"></a>从openwrt还原为官方固件</h3><p><strong>注意：美光（Micron）闪存的刷回官方固件可能会变砖。</strong></p><p>下载小米原厂固件，最好是开发版固件（请参见上面步骤）并将其重命名为miwifi.bin<br>在SSH路由器中运行以下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">fw_setenv flag_try_sys1_failed 0</span><br><span class="line">fw_setenv flag_try_sys2_failed 1</span><br><span class="line">fw_setenv flag_boot_success 0</span><br></pre></td></tr></table></figure><p>接着：<br>1.拔电关闭路由器</p><p>2.现在，（将您的U盘格式化为FAT &#x2F; FAT32，如果还不是FAT32），然后将miwifi.bin文件复制到闪存驱动器的根目录（而不是子文件夹）。<br>将您的U盘连接到路由器，按住重置按钮并打开电源。按住重置按钮，直到黄灯闪烁。等待5分钟，以安装原厂固件。</p><p>3.您现在可以登录到192.168.31.1的路由器。</p>]]></content>
    
    
    <summary type="html">小米路由器Pro(R3P)刷机教程</summary>
    
    
    
    <category term="Linux" scheme="https://hwy.ac.cn/categories/Linux/"/>
    
    
    <category term="操作系统" scheme="https://hwy.ac.cn/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    <category term="Linux" scheme="https://hwy.ac.cn/tags/Linux/"/>
    
    <category term="OpenWRT" scheme="https://hwy.ac.cn/tags/OpenWRT/"/>
    
  </entry>
  
  <entry>
    <title>Facebook ios 事件上报测试踩坑</title>
    <link href="https://hwy.ac.cn/2022/04/02/Facebook%20ios%20%E4%BA%8B%E4%BB%B6%E4%B8%8A%E6%8A%A5%E6%B5%8B%E8%AF%95%E8%B8%A9%E5%9D%91/"/>
    <id>https://hwy.ac.cn/2022/04/02/Facebook%20ios%20%E4%BA%8B%E4%BB%B6%E4%B8%8A%E6%8A%A5%E6%B5%8B%E8%AF%95%E8%B8%A9%E5%9D%91/</id>
    <published>2022-04-02T08:28:46.000Z</published>
    <updated>2023-02-11T01:39:52.704Z</updated>
    
    <content type="html"><![CDATA[<h2 id="重点提要"><a href="#重点提要" class="headerlink" title="重点提要"></a>重点提要</h2><ul><li>fbsdk至少要12.2.1</li><li>测试过程中，测试事件页面不能关闭</li><li>测试设备要安装fb app，允许跟踪（idfa权限），并且登录跟后台一样的fb账号</li><li>xcode工程配置要开启FacebookAutoLogAppEventsEnabled</li></ul><h2 id="fb后台"><a href="#fb后台" class="headerlink" title="fb后台"></a>fb后台</h2><p><img src="https://hwy-figure-bed.oss-cn-hangzhou.aliyuncs.com/blog/image/0500b8a827be746c7e23db21b6345abe-117151.jpg"></p><ul><li>事件上报接入请查看<a href="https://developers.facebook.com/docs/app-events/getting-started-app-events-ios/">官方文档</a></li><li>打开测试事件页面，测试期间不能关闭，上报成功会自动刷新页面</li><li>后台登录的fb账号要跟测试设备上登录fb账号一致</li></ul><h2 id="接入问题汇总"><a href="#接入问题汇总" class="headerlink" title="接入问题汇总"></a>接入问题汇总</h2><ul><li>Facebook SDK的版本至少要到12.2.1，<a href="https://github.com/facebook/facebook-ios-sdk/issues/1937">原因请看</a></li><li>接入文档中的配置不能漏，除了fb id之外，autoLog也要开启，如下所示</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">key</span>&gt;</span>FacebookAutoLogAppEventsEnabled<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br></pre></td></tr></table></figure><ul><li>如果想看fb事件上报的客户端日志，在应用初始化的时候调用</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[FBSDKSettings.sharedSettings enableLoggingBehavior:FBSDKLoggingBehaviorAppEvents];</span><br></pre></td></tr></table></figure><ul><li>接入事件的时候，尽量使用fb定义好的标准事件，标准事件的上报能帮助广告优化，<a href="https://developers.facebook.com/docs/app-events/reference">标准事件</a></li><li>自定义事件名称只允许英文字母、数字、中划线、下划线</li><li>fb初始化的时候呀开启广告跟踪</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[[FBSettings sharedSettings] setAdvertiserIDCollectionEnabled:YES];</span><br><span class="line">[[FBSettings sharedSettings] setAdvertiserTrackingEnabled:YES];</span><br></pre></td></tr></table></figure><h2 id="测试问题汇总"><a href="#测试问题汇总" class="headerlink" title="测试问题汇总"></a>测试问题汇总</h2><ul><li>测试设备需要安装fb应用，并登陆后台登录中的fb账号</li><li>fb要开启广告追踪（首次安装一般打开app就会询问，直接同意即可），手机设置-&gt;隐私-&gt;跟踪-&gt;fb，如果没发现fb，可能是fb版本比较久，去appstore更新即可</li><li>测试步骤<ul><li>打开fb应用，允许跟踪，并登陆fb账号</li><li>启动你要测试的app（如果是已启动，请先强退再启动），进行对应的时间上报测试</li><li>等待后台刷新页面刷新，一般几秒钟就能刷新了</li></ul></li></ul>]]></content>
    
    
    <summary type="html">Facebook ios 事件上报测试踩坑</summary>
    
    
    
    <category term="ios" scheme="https://hwy.ac.cn/categories/ios/"/>
    
    <category term="facebook" scheme="https://hwy.ac.cn/categories/ios/facebook/"/>
    
    
    <category term="ios" scheme="https://hwy.ac.cn/tags/ios/"/>
    
  </entry>
  
  <entry>
    <title>不积跬步，无以至千里|2021年终总结</title>
    <link href="https://hwy.ac.cn/2021/12/28/2021%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/"/>
    <id>https://hwy.ac.cn/2021/12/28/2021%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/</id>
    <published>2021-12-28T08:35:49.000Z</published>
    <updated>2023-02-11T01:39:52.700Z</updated>
    
    <content type="html"><![CDATA[<h1 id="2021年终总结"><a href="#2021年终总结" class="headerlink" title="2021年终总结"></a>2021年终总结</h1><p>「时光不负，创作不停」</p><h3 id="2021年匆匆而过"><a href="#2021年匆匆而过" class="headerlink" title="2021年匆匆而过"></a>2021年匆匆而过</h3><p>转眼又到年关，2021年只剩下一周，又到了一年总结的时候，回想今年发生了很多事情，不管是工作还是生活，特别是工作因为政策的原因变动很大，不过还好至少在技术上有了长足的进步，准备好爆米花我们一起吃瓜吧。</p><h2 id="工作"><a href="#工作" class="headerlink" title="工作"></a>工作</h2><h3 id="工作总结"><a href="#工作总结" class="headerlink" title="工作总结"></a>工作总结</h3><p>年初一切如旧虽有疫情但是大家都平安，这也是我进入公司的第三个年头，负责的是数据分析业务，总的来说就所有的数据都会经过我们这边，为所有的运营提供数据服务的支持。今年最大的收获就是接触到了大数据，以前一直写的都是业务层面的逻辑代码，也就是我们程序员经常自嘲的CURD工程师，在拧螺丝到造火箭的大马路上又近了一步，可喜可贺。</p><h3 id="亿点点小细节"><a href="#亿点点小细节" class="headerlink" title="亿点点小细节"></a>亿点点小细节</h3><p>在内部写过好几个工具，受到一致好评(自卖自夸)，包括大数据集群的自定义函数组件、用于项目接口链路跟踪插件、甚至重写阿里云日志服务的SDK(真的太难用了)等等。说正经的其实为了避免麻烦好学习成本的问题，我会尽量用最简单的能接入的方式进行编写，但是在内部推广中还是会遇到各种问题。最大的问题还是不愿意去尝试，其实这个可以理解，毕竟要改动一个已经写好的东西还是挺麻烦的，但是在我的热情邀请(脸皮超厚)之下同事还是纷纷对我竖起了大拇指（也有可能是拳头），效果还是很好的。</p><p>还有一个挺重要的项目就是我们做了一个自定义BI报表，只要拖拉一下就能生成一张表想要的报表，简直就是为运营量身定制的，妥妥的神器。当除了运营之外，我们还有高级定制功能，开发人员也可以使用，会写SQL就行，此时应该大吼一声还有谁(专业BI默默不说话看着我装X)。</p><p>下半年因为政策原因加强了游戏行业对实名认证和未成年用户的限制，我们也跟紧时代的步伐出海了，公司调整了业务的方向，抽调资源进行海外运营。因为在海外推广基本离不开facebook和google，所以我又去对接了他们的广告业务，技能点+1，老实说在接口方面和国内确实有点不同，还得好好适应。</p><p>总结一下就是到今年现在为止总算把历史的代码都替换掉了，没有了以前的痕迹，我们换了更快的实时计算，更安全的数据存储，更稳定的业务服务，更低云服务成本，更便捷的操作逻辑，在优化上下足了功夫。</p><h2 id="生活"><a href="#生活" class="headerlink" title="生活"></a>生活</h2><p>今年因为疫情的原因没怎么出门，就五一和老婆去了趟湛江，本来是想去吃海鲜大餐，到了之后才发现人家禁渔期，哈哈。生活如常，还有一个好消息是我儿子两岁终于不用穿纸尿裤了，会自己说去上厕所了，以前每天提垃圾下楼，满袋子的纸尿裤好重|ू･ω･&#96; )。</p><p>显卡价格依旧魔幻，所以基本没怎么玩大型单机游戏，最多的还是我和老婆两个人玩&lt;英雄联盟&gt;(她带我)，我还是和去年一样一如既往菜的抠脚。今年的国产单机中出了&lt;仙剑奇侠传7&gt;，但质量真的堪忧，不过还有一个叫&lt;戴森球计划&gt;的游戏很不错，值得推荐(万人大厂十连抽，五人作坊戴森球)。</p><p>在学历上我终于拿到本科学历了，在互联网行业学历还挺重要的，它是进入一家公司的敲门砖，当然没有也不是不可以，多多混迹于开源社区，总会有收获的。</p><p>在吃方面老婆买了一个烧烤架回来，从此打开了新世界的大门，虽然我只是一个负责吃的，但老婆这手艺丝毫不比外边的差呀，没事可以去天台烧烤。也因为我妈来帮我买带孩子导致我今年做菜的频率直线下降，<strong>黄大厨</strong>的称号看来是要没落了。</p><p>自从今年买了房，开支陡增，加上老婆换职业发展有一段空窗期，今年几乎没怎么存钱，中途因为一些意外也花了不少钱，还是要大吼一声弄牙齿是真滴贵，铁子们要保护好牙齿，既花钱又受罪。</p><p>在空闲之余开始喜欢写代码，折腾一些好玩的，比如搭建了一台家庭All in one 服务器，集NAS、下载器和各种开发需要的数据库、Linux之类为一体。可以兼顾家用和开发学习之用，咸鱼260淘来的机器，只有巴掌大小，整机功耗只有6W，平均一周才一度电，可以常年能开机。除此之外还把大数据常用的组件都学了一遍，特别是用于实时计算的Flink，为此还写了几十个demo，源码就在GitHub。</p><p><strong>家庭服务器：</strong><br><img src="https://hwy-figure-bed.oss-cn-hangzhou.aliyuncs.com/blog/image/Snipaste_2021-12-28_15-40-45.png"></p><h2 id="2021总结"><a href="#2021总结" class="headerlink" title="2021总结"></a>2021总结</h2><ul><li>分享了12篇技术文章</li><li>开源了4个组件</li><li>重构了部门主要项目</li><li>学习了大数据开发</li><li>出门旅游一次</li><li>拿到了本科毕业证</li><li>开启了烧烤的新大门</li><li>组建了一台服务器</li></ul><h2 id="2022规划"><a href="#2022规划" class="headerlink" title="2022规划"></a>2022规划</h2><ul><li>深入学习算法和Java底层原理</li><li>在大数据领域有更多的文章产出</li><li>看完《趣说中国史》《古代人的日常生活》两本书，之后可以找找感兴趣的</li><li>提高自己，努力搞钱，一起卷卷卷</li><li>掌握新的厨艺，例如糕点</li></ul><p><strong>故不积跬步，无以至千里；不积小流，无以成江海。同志们加油吧！！！</strong></p>]]></content>
    
    
    <summary type="html">不积跬步，无以至千里|2021年终总结</summary>
    
    
    
    <category term="生活" scheme="https://hwy.ac.cn/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
    <category term="生活" scheme="https://hwy.ac.cn/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>大数据文件Parquet</title>
    <link href="https://hwy.ac.cn/2021/09/06/%E5%A4%A7%E6%95%B0%E6%8D%AE%E6%96%87%E4%BB%B6Parquet/"/>
    <id>https://hwy.ac.cn/2021/09/06/%E5%A4%A7%E6%95%B0%E6%8D%AE%E6%96%87%E4%BB%B6Parquet/</id>
    <published>2021-09-06T08:10:40.000Z</published>
    <updated>2023-02-11T01:39:52.708Z</updated>
    
    <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>是Hadoop的一种列存储格式；它提供了高效的数据存储和编码。使用Dremel文件中描述的记录分解和组装算法来表示嵌套结构，<br>下面是官方的解释。</p><blockquote><p>Apache Parquet is a columnar storage format available to any project in the Hadoop ecosystem, regardless of the choice of data processing framework, data model or programming language.</p></blockquote><p>通俗点就是大数据全家桶的高效存储方式，它主要解决了如下几个问题：</p><ul><li>把IO只给查询需要用到的数据，只加载需要被计算的列</li><li>空间节省，列式的压缩效果更好</li><li>可以针对数据类型进行编码(gzip、snappy)</li><li>开启矢量化的执行引擎(不再1条1条的处理数据，而是一次处理1024条数据)</li></ul><h3 id="SDK封装"><a href="#SDK封装" class="headerlink" title="SDK封装"></a>SDK封装</h3><p>Parquet的具体原理我这边就不再赘述了，这边只讲使用。原生的api很难用，相当繁琐，所以我封装了一层。<br>只暴露简单的api使用，里面复杂的逻辑全部屏蔽掉</p><p>通过反射自动生成MessageType，自动拼装数据结构，遵循简单的原则，你给我数据我给你parquet文件。<br>目前支持的数据类型如下：</p><ul><li>int、Integer</li><li>long、Long</li><li>float、Float</li><li>double、Double</li><li>String</li></ul><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p><strong>maven</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.github.hwywl&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;parquet-plus&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.0.3-RELEASE&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p><strong>Gradle</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">implementation &#x27;com.github.hwywl:parquet-plus:1.0.3-RELEASE&#x27;</span><br></pre></td></tr></table></figure><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>可以查看github中的源码，不看也行，很简单的，使用如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ParquetTest</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">filePath</span> <span class="operator">=</span> <span class="string">&quot;F:\\a.parquet&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 写入一个数据到parquet文件</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> CustomException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">ParquetWriteTest</span><span class="params">()</span> <span class="keyword">throws</span> IOException, CustomException &#123;</span><br><span class="line">        <span class="type">TestModel</span> <span class="variable">model</span> <span class="operator">=</span> getModel();</span><br><span class="line">        ParquetUtil.writerParquet(filePath, model);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 写入多个数据到parquet文件</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> CustomException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">ParquetWriteListTest</span><span class="params">()</span> <span class="keyword">throws</span> IOException, CustomException &#123;</span><br><span class="line">        List&lt;TestModel&gt; models = getModels();</span><br><span class="line">        ParquetUtil.writerParquet(filePath, models);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将parquet文件转为对象集合</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">ParquetReadBeanTest</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        List&lt;TestModel&gt; models = ParquetUtil.readParquetBean(filePath, TestModel.class);</span><br><span class="line">        System.out.println(models);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将parquet文件转为Map集合</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">ParquetReadMapTest</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        List&lt;Map&lt;String, Object&gt;&gt; maps = ParquetUtil.readParquetMap(filePath);</span><br><span class="line">        System.out.println(maps);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将parquet文件转为对象集合,并只拿2条数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">ParquetReadBeanMaxLineTest</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        List&lt;TestModel&gt; models = ParquetUtil.readParquetBean(filePath, <span class="number">2</span>, TestModel.class);</span><br><span class="line">        System.out.println(models);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> TestModel <span class="title function_">getModel</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">TestModel</span>(<span class="number">2</span>, <span class="number">3</span>, <span class="number">6L</span>, <span class="string">&quot;校花&quot;</span>, <span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;TestModel&gt; <span class="title function_">getModels</span><span class="params">()</span> &#123;</span><br><span class="line">        List&lt;TestModel&gt; arrayList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            arrayList.add(<span class="keyword">new</span> <span class="title class_">TestModel</span>(<span class="number">2</span>, <span class="number">3</span>, <span class="number">6L</span>, <span class="string">&quot;校花&quot;</span>, <span class="number">10</span>));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> arrayList;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-0-3-RELEASE-版本更新"><a href="#1-0-3-RELEASE-版本更新" class="headerlink" title="1.0.3-RELEASE 版本更新"></a>1.0.3-RELEASE 版本更新</h3><ol><li>开放底层api</li></ol><h3 id="1-0-2-RELEASE-版本更新"><a href="#1-0-2-RELEASE-版本更新" class="headerlink" title="1.0.2-RELEASE 版本更新"></a>1.0.2-RELEASE 版本更新</h3><ol><li>修复bug</li><li>增加更简便的API</li></ol><h3 id="1-0-1-RELEASE-版本更新"><a href="#1-0-1-RELEASE-版本更新" class="headerlink" title="1.0.1-RELEASE 版本更新"></a>1.0.1-RELEASE 版本更新</h3><ol><li>增加生成parquet文件</li><li>增加parquet文件读取</li></ol><h3 id="源码地址"><a href="#源码地址" class="headerlink" title="源码地址"></a>源码地址</h3><p>GitHub：<a href="https://github.com/HWYWL/parquet-plus">https://github.com/HWYWL/parquet-plus</a></p>]]></content>
    
    
    <summary type="html">大数据文件Parquet。</summary>
    
    
    
    <category term="大数据" scheme="https://hwy.ac.cn/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
    <category term="大数据" scheme="https://hwy.ac.cn/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    <category term="Parquet" scheme="https://hwy.ac.cn/tags/Parquet/"/>
    
  </entry>
  
  <entry>
    <title>问题这样查，拒做背锅侠</title>
    <link href="https://hwy.ac.cn/2021/05/21/%E9%97%AE%E9%A2%98%E8%BF%99%E6%A0%B7%E6%9F%A5%EF%BC%8C%E6%8B%92%E5%81%9A%E8%83%8C%E9%94%85%E4%BE%A0/"/>
    <id>https://hwy.ac.cn/2021/05/21/%E9%97%AE%E9%A2%98%E8%BF%99%E6%A0%B7%E6%9F%A5%EF%BC%8C%E6%8B%92%E5%81%9A%E8%83%8C%E9%94%85%E4%BE%A0/</id>
    <published>2021-05-21T02:42:43.000Z</published>
    <updated>2023-02-11T01:39:52.708Z</updated>
    
    <content type="html"><![CDATA[<h3 id="技术的锅太多，到底该不该你背？"><a href="#技术的锅太多，到底该不该你背？" class="headerlink" title="技术的锅太多，到底该不该你背？"></a>技术的锅太多，到底该不该你背？</h3><p>话说这天一大早，那个悲催的中年架构师大刘又被手机微信群给炸醒。部门的运维兄弟在公司微信群里说：</p><p>短信的生产环境服务器 CPU 占用率过高，疯狂报警。是不是你们昨天上线看门狗导致的？</p><p>大刘迷了巴登的想了想，没错，昨天确实给短信服务装上了看门狗。但是看门狗服务肯定不会有问题（架构师必备的蜜汁自信），而且上线之前各轮测试也都测过了，没见过这个想象啊。</p><p>难道是测试妹子没测试到位？难道线上短信应用自身出现了问题？</p><p>生产无小事，小事更不能忽视，主要是怕扣绩效奖金。大刘迅速打开电脑，打开 VPN ，远程登上短信生产服务器，开始大刘最拿手的 2W1H 三板斧诊断之旅。</p><p>接下来的诊断内容有点烧脑，节奏有点快，请大家坐稳扶好。</p><h3 id="1-病号是谁（WHO）？"><a href="#1-病号是谁（WHO）？" class="headerlink" title="1. 病号是谁（WHO）？"></a>1. 病号是谁（WHO）？</h3><p>大刘拿出控制台诊断仪器，输入 top 命令一探究竟。我勒个去，不看不知道一看吓一跳，PID 为 1878 的病号，CPU 占用居然 200% 多。</p><p><img src="https://oscimg.oschina.net/oscnet/up-d3db5bb63a4114639e9356f009128f19338.png"></p><p>问题算是定位到了，但是 PID 为 1878 的病号到底是谁，难道真是昨天上线的看门狗 ？</p><p>虽然大刘久经职场，但是排查生产问题时，内心还是比较忐忑，毕竟这是生产环境。</p><p>说时迟那时快，只见大刘一个命令输入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -ef | grep 1878</span><br></pre></td></tr></table></figure><p>定睛一看，原来是放屁瞅别人，短信服务自己在作祟，和看门狗没关系，大刘心里一下子平缓了不少。</p><p>锅找到了主儿，其实这个时候大刘完全可以把这个问题甩给短信开发团队，但是大刘最喜欢做的不是甩锅，而是打破砂锅刨到底。</p><h3 id="2-病号哪里出了问题（WHERE）？"><a href="#2-病号哪里出了问题（WHERE）？" class="headerlink" title="2. 病号哪里出了问题（WHERE）？"></a>2. 病号哪里出了问题（WHERE）？</h3><p>为什么 1878 号病人占用 CPU 会这么高呢？</p><p>只见黑乎乎的控制台诊断仪器上，大刘熟练的输入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jstack -l 1878 &gt;&gt; 1878号病历.log</span><br></pre></td></tr></table></figure><p>这样便得到一份 1878 号病人的病历详情单，一会儿用得上。</p><p>到底 1878 号病人的哪个部位出了问题呢？</p><p>话没说完，只见大刘又在控制台诊断仪器上，输入一个：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">top -Hp 1878</span><br></pre></td></tr></table></figure><p>白板黑字，把 1878 号病人的器官信息全部列了出来。<br><img src="https://oscimg.oschina.net/oscnet/up-d05c2334ec1ed1234e0f3c874c7dd9369b2.png"></p><p>看到结果，甚是一惊，PID 代号为 8721 的器官占用 CPU 100% 多。</p><p>疑惑油然而生，这个 PID 代号 为 8721 的器官是啥，是头、是眼睛、还是胳膊腿呢？这些器官展示的 PID 列都是昵称，都这么善于伪装，如何揭露它的真面目呢？</p><p>还好大刘有高招，借助照妖镜算法，熟练的输入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">printf &quot;%x\n&quot; 8721</span><br></pre></td></tr></table></figure><p>果真使得代号为 8721 的器官，现了真身，真实身份居然是 2211 的呼吸道，怪不得病号一直气喘吁吁，上气不接下气。<br><img src="https://oscimg.oschina.net/oscnet/up-420f3fa4c961190cff9ce000ab71188259f.png"></p><p>到这一步还无法对症下药啊，还需要进一步确诊 2211 的呼吸道到底出了什么幺蛾子，导致 1878 号病人一直气喘吁吁，上气不接下气？</p><p>只见黑乎乎的控制台诊断仪器上，大刘再次飞一般的在输入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep 2211 -A20 1878号病历.log</span><br></pre></td></tr></table></figure><p>诊断结果随之显示在诊断仪器上。<br><img src="https://oscimg.oschina.net/oscnet/up-527ae796a90e94182588cebdd8ca77daf45.png"></p><p>曾经背了很多锅的大刘，看到诊断结果心里乐了一下，一眼就看出是高并发情况下用了 HashMap 的问题（请大家们自行寻找谷歌、百度，就不在此深入展开啦），终于拨开云雾见青天。</p><h3 id="3-如何对症下药（-HOW-）？"><a href="#3-如何对症下药（-HOW-）？" class="headerlink" title="3. 如何对症下药（ HOW ）？"></a>3. 如何对症下药（ HOW ）？</h3><p>在大刘行云流水没有一丝一毫的拖泥带水般的神操作下，1878 号病人的诊断也就结束了，这个锅就彻底被打破了。</p><p>术业有专攻，大刘就可以郑重的告诉短信开发同事具体原因了，捉得病根，开发同事也就可以对症下药啦。</p><p>大刘这套行走江湖的诊断问题方式你 get 到了没？大刘自己简单概括为 2W1H 三板斧：病号是谁、病号哪里出了问题、对症下药。</p><p><strong>1、病号是谁？（WHO）</strong></p><ul><li>第一步：采用 top 命令，找出 CPU 占用最高的病号 PID ；</li><li>第二步：通过 ps -ef | grep PID 查看病号对应的真实身份。</li></ul><p><strong>2、病号哪里出了问题？（WHERE）</strong></p><ul><li>第一步：采用 jstack -l PID &gt;&gt; PID.log 获取病号的各器官信息的病历单；</li><li>第二步：采用 top -Hp PID 拿到占用 CPU 最高的器官昵称 PID ;</li><li>第三步：采用 printf “%x\n” PID 根据器官昵称 PID 的拿到器官真实身份 TID ;</li><li>第四步：采用 grep TID -A20 pid.log 根据 TID 去病历单中匹配，确定是哪出了问题。</li></ul><p><strong>3、捉得病根、便可拿出医药箱，对症下药啦。（HOW）</strong></p><p>作为程序猿，工作中难免会遇到不少类似这样的问题。面对问题，你如果像无头苍蝇一样乱撞，撞得头破血流依然不知道缘由，在背锅即将成为现实时，那就不妨试试大刘的 2W1H 三板斧的诊断方式，说不定会帮你快速定位、解决线上问题，毕竟快速的解决生产问题会把损失降到最低。</p><p>最后，想对大家说一句：</p><p>作为程序猿，一定要有程序猿的态度。避免背锅，拒绝甩锅，打破砂锅，从你我做起。</p><p>本文转载于：<a href="https://my.oschina.net/u/4250089/blog/5048093">四猿外</a></p>]]></content>
    
    
    <summary type="html">问题这样查，拒做背锅侠。</summary>
    
    
    
    <category term="Java" scheme="https://hwy.ac.cn/categories/Java/"/>
    
    
    <category term="Java" scheme="https://hwy.ac.cn/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Aid Learning 让你的废旧手机成为Linux服务器</title>
    <link href="https://hwy.ac.cn/2021/04/28/Aid%20Learning%20Debain/"/>
    <id>https://hwy.ac.cn/2021/04/28/Aid%20Learning%20Debain/</id>
    <published>2021-04-28T01:57:56.000Z</published>
    <updated>2023-02-11T01:39:52.700Z</updated>
    
    <content type="html"><![CDATA[<h2 id="平台介绍"><a href="#平台介绍" class="headerlink" title="平台介绍"></a>平台介绍</h2><ul><li>AidLearning是一个强大的移动端的AI开发平台，它几乎支持所有深度学习神经网络开发的框架和工具。</li><li>移动端（手机）上最好的，环境最全的Linux模拟器，唯一支持图形化桌面的Linux模拟器…</li><li>唯一支持AI开发环境的模拟器、内置全球最流行Top 7的深度学习框架，内置大量深度学习的模型、例子和开发组件</li><li>唯一支持python图形化开发和调试的模拟器，支持触摸拖拽式界面设计，提高你的开发效率</li><li>支持用python开发可运行在手机的App，支持python代码直接编译生成可部署的apk文件</li><li>一键式安装，无任何依赖，你只需在手机上要安装一个10M的引导App，就可以自动完成所有环境的安装。</li><li>跨平台开发，支持云桌面（手机桌面和电脑桌面相同），既可以在手机或平版上或其他嵌入式主板上运行，也可以在电脑端基于web直接访问和开发。</li><li>支持加速库openblas，支持多线程和多进程，运行流畅、不卡顿，充分发挥ARM CPU和GPU的算力</li><li>最新版本支持python直接调用手机的gpu加速，一般深度学习的tflite模型，30fps～80fps，轻松达到（在主流手机上）</li></ul><p>通过<strong>lsb_release -a</strong>命令我们可以发现它是一个<strong>Debian 10</strong>的发行版</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">demo@localhost:~/coder$ lsb_release -a</span><br><span class="line">No LSB modules are available.</span><br><span class="line">Distributor ID: Debian</span><br><span class="line">Description:    Debian GNU/Linux 10 (buster)</span><br><span class="line">Release:        10</span><br><span class="line">Codename:       buster</span><br><span class="line">demo@localhost:~/coder$ </span><br></pre></td></tr></table></figure><h2 id="软件安装"><a href="#软件安装" class="headerlink" title="软件安装"></a>软件安装</h2><h3 id="手机软件安装"><a href="#手机软件安装" class="headerlink" title="手机软件安装"></a>手机软件安装</h3><p>手机安装完成<strong>AidLearning</strong>之后点击软件进入，根据提示它会自动安装linux，时间会比较久，可以耐心等待。安装完毕之后可以点击页面上的<br><strong>Cloud_ip</strong>那个应用。此时如果你的电脑和手机在同一个网络可以直接在电脑上访问显示的<strong>IP地址</strong>，通过电脑操作。</p><p><img src="https://z3.ax1x.com/2021/04/28/gPSEUf.jpg" alt="gPSEUf.jpg"></p><p>电脑浏览器访问，到此一个Linux安装完成</p><p><img src="https://z3.ax1x.com/2021/04/28/gPSQrn.png" alt="gPSQrn.png"></p><h3 id="Linux常用软件安装"><a href="#Linux常用软件安装" class="headerlink" title="Linux常用软件安装"></a>Linux常用软件安装</h3><p>刚安装完成的Linux其实是欠缺很多软件的，比如ssh、sudo、curl、lrzsz等等。<br>安装这些软件之前我们先使用网页版的终端命令行来更新一个自带的软件包。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># 更新软件包</span><br><span class="line">apt-get update</span><br><span class="line">apt-get upgrade</span><br><span class="line"></span><br><span class="line"># 安装sudo</span><br><span class="line">apt-get install sudo</span><br><span class="line"></span><br><span class="line"># 安装curl</span><br><span class="line">apt-get install curl</span><br><span class="line"></span><br><span class="line"># 安装lrzsz</span><br><span class="line">apt-get install lrzsz</span><br></pre></td></tr></table></figure><h3 id="安装ssh服务"><a href="#安装ssh服务" class="headerlink" title="安装ssh服务"></a>安装ssh服务</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># 安装ssh</span><br><span class="line">apt-get install ssh</span><br><span class="line"></span><br><span class="line"># 修改sshd_config文件</span><br><span class="line">vim /etc/ssh/sshd_config</span><br><span class="line"></span><br><span class="line">1.将#PasswordAuthentication no的注释去掉，并且将no修改为yes</span><br><span class="line">2.将#PermitRootLogin prohibit-password的注释去掉，将prohibit-password改为yes</span><br><span class="line">PasswordAuthentication yes</span><br><span class="line">PermitRootLogin yes</span><br><span class="line">或echo -e &quot;PasswordAuthentication yes\nPermitRootLogin yes&quot; &gt;&gt; /etc/ssh/sshd_config</span><br><span class="line">3.启动SSH服务，命令为：/etc/init.d/ssh start // 或者service ssh start</span><br><span class="line">4.验证SSH服务状态，命令为：/etc/init.d/ssh status</span><br><span class="line">5. 添加开机自启动 update-rc.d ssh enable</span><br></pre></td></tr></table></figure><p>系统出了默认的root用户之外，还有一个demo用户，可以使用这个用户登陆ssh，不知道为何ssh的root登陆不上去。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">用户名：demo</span><br><span class="line">密码：demo</span><br></pre></td></tr></table></figure><h3 id="安装JDK8"><a href="#安装JDK8" class="headerlink" title="安装JDK8"></a>安装JDK8</h3><p>通过上面软件更新之后应该是会有一个jdk 11的版本，但是目前国内用的最多的还是JDK 8。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 自带的JDK版本</span><br><span class="line">demo@localhost:~$ java -version</span><br><span class="line">openjdk version &quot;11.0.11&quot; 2021-04-20</span><br><span class="line">OpenJDK Runtime Environment (build 11.0.11+9-post-Debian-1deb10u1)</span><br><span class="line">OpenJDK 64-Bit Server VM (build 11.0.11+9-post-Debian-1deb10u1, mixed mode)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 安装JDK 8</span><br><span class="line">sudo apt install apt-transport-https ca-certificates wget dirmngr gnupg software-properties-common</span><br><span class="line"></span><br><span class="line">wget -qO - https://adoptopenjdk.jfrog.io/adoptopenjdk/api/gpg/key/public | sudo apt-key add -</span><br><span class="line"></span><br><span class="line">sudo add-apt-repository --yes https://adoptopenjdk.jfrog.io/adoptopenjdk/deb/</span><br><span class="line"></span><br><span class="line">sudo apt update</span><br><span class="line"></span><br><span class="line">sudo apt install adoptopenjdk-8-hotspot</span><br></pre></td></tr></table></figure><p>在命令行终端中输入如下命令，检查安装结果。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 此时系统上显示的还是JDK 11的版本</span><br><span class="line">java -version</span><br></pre></td></tr></table></figure><p>切换默认JDK版本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># 默认JDK切换命令</span><br><span class="line">sudo update-alternatives --config java</span><br><span class="line"></span><br><span class="line"># 输出列表如下：</span><br><span class="line">demo@localhost:~$ sudo update-alternatives --config java</span><br><span class="line">There are 2 choices for the alternative java (providing /usr/bin/java).</span><br><span class="line"></span><br><span class="line">  Selection    Path                                                Priority   Status</span><br><span class="line">------------------------------------------------------------</span><br><span class="line">* 0            /usr/lib/jvm/java-11-openjdk-arm64/bin/java          1111      auto mode</span><br><span class="line">  1            /usr/lib/jvm/adoptopenjdk-8-hotspot-arm64/bin/java   1081      manual mode</span><br><span class="line">  2            /usr/lib/jvm/java-11-openjdk-arm64/bin/java          1111      manual mode</span><br><span class="line"></span><br><span class="line">Press &lt;enter&gt; to keep the current choice[*], or type selection number: </span><br></pre></td></tr></table></figure><p>输入编号1然后回车，这是OpenJDK 8 就为当前默认版本，在此输入<strong>java -version</strong>查看输出，如</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">demo@localhost:~$ java -version</span><br><span class="line">openjdk version &quot;1.8.0_292&quot;</span><br><span class="line">OpenJDK Runtime Environment (build 1.8.0_292-b10)</span><br><span class="line">OpenJDK 64-Bit Server VM (build 25.292-b10, mixed mode)</span><br><span class="line">demo@localhost:~$ </span><br></pre></td></tr></table></figure><p>卸载默认的JDK</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt remove default-jdk</span><br></pre></td></tr></table></figure><p>卸载刚装上的JDK8</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt remove adoptopenjdk-8-hotspot</span><br></pre></td></tr></table></figure><h3 id="运行Java程序"><a href="#运行Java程序" class="headerlink" title="运行Java程序"></a>运行Java程序</h3><p>这里使用随便新建一个Spring Boot项目，使用<strong>rz</strong>命令把<strong>jar</strong>包上传到Linux，</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 启动jar</span><br><span class="line">java -jar xxx.jar</span><br></pre></td></tr></table></figure><p><img src="https://z3.ax1x.com/2021/04/28/gPFxeJ.png" alt="gPFxeJ.png"></p><p>完美运行。</p><h2 id="其他说明"><a href="#其他说明" class="headerlink" title="其他说明"></a>其他说明</h2><p>系统还自带了Python，所以不需要自己安装</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">demo@localhost:~$ python --version</span><br><span class="line">Python 3.7.3</span><br><span class="line">demo@localhost:~$ pip --version</span><br><span class="line">pip 18.1 from /usr/lib/python3/dist-packages/pip (python 3.7)</span><br><span class="line">demo@localhost:~$ </span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">Aid Learning 让你的废旧手机成为Linux服务器。</summary>
    
    
    
    <category term="Linux" scheme="https://hwy.ac.cn/categories/Linux/"/>
    
    
    <category term="操作系统" scheme="https://hwy.ac.cn/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    <category term="Linux" scheme="https://hwy.ac.cn/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Presto查询数据量过大时的参数调节</title>
    <link href="https://hwy.ac.cn/2021/04/20/Presto%E6%9F%A5%E8%AF%A2%E6%95%B0%E6%8D%AE%E9%87%8F%E8%BF%87%E5%A4%A7%E6%97%B6%E7%9A%84%E5%8F%82%E6%95%B0%E8%B0%83%E8%8A%82/"/>
    <id>https://hwy.ac.cn/2021/04/20/Presto%E6%9F%A5%E8%AF%A2%E6%95%B0%E6%8D%AE%E9%87%8F%E8%BF%87%E5%A4%A7%E6%97%B6%E7%9A%84%E5%8F%82%E6%95%B0%E8%B0%83%E8%8A%82/</id>
    <published>2021-04-20T03:49:36.000Z</published>
    <updated>2023-02-11T01:39:52.704Z</updated>
    
    <content type="html"><![CDATA[<p>查询数据量过大，执行过程中途presto会报警</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">query.max-memory、query.max-memory-per-node、query.max-total-memory-per-node、jvm</span><br></pre></td></tr></table></figure><p>会分别提示超出最大限制，调整参数配置防止任务被中断</p><h3 id="调参过程："><a href="#调参过程：" class="headerlink" title="调参过程："></a>调参过程：</h3><p>应先调整jvm的大小，并重启机器，否则不生效</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 切换root用户</span><br><span class="line">sudo -i </span><br><span class="line"></span><br><span class="line"># 对 jvm.config中-Xmx进行调参</span><br><span class="line">cd /etc/presto/conf  </span><br></pre></td></tr></table></figure><p><img src="https://z3.ax1x.com/2021/04/20/c7QjXt.png" alt="c7QjXt.png"></p><p>将默认的-Xmx53369263620<br>调整后为-Xmx533692636200 约和497GB（近500GB）<br>调整 jvm后reboot重启，等待机器重连。</p><p>重复上面sudo-i 等命令vim &#x2F;config.properties<br>分别将下图参数调整为800GB、40GB、55GB</p><p><img src="https://z3.ax1x.com/2021/04/20/c7QHte.png" alt="c7QHte.png"></p><p>默认的配比是query.max-memory-per-node的值在jvm重点的Xmx的10%左右</p><p>可通过 initctl list 查看所有正在运行的服务</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">presto的服务为 presto-server，将其终止后重启</span><br><span class="line">查看进程：sudo status presto-server</span><br><span class="line">终止进行：sudo stop presto-server</span><br><span class="line">开始进程：sudo start presto-server</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">Presto查询数据量过大时的参数调节。</summary>
    
    
    
    <category term="大数据" scheme="https://hwy.ac.cn/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
    <category term="大数据" scheme="https://hwy.ac.cn/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    <category term="Presto" scheme="https://hwy.ac.cn/tags/Presto/"/>
    
  </entry>
  
  <entry>
    <title>浅析VO、DTO、DO、PO的概念、区别和用处！</title>
    <link href="https://hwy.ac.cn/2021/04/08/%E6%B5%85%E6%9E%90VO%E3%80%81DTO%E3%80%81DO%E3%80%81PO%E7%9A%84%E6%A6%82%E5%BF%B5%E3%80%81%E5%8C%BA%E5%88%AB%E5%92%8C%E7%94%A8%E5%A4%84/"/>
    <id>https://hwy.ac.cn/2021/04/08/%E6%B5%85%E6%9E%90VO%E3%80%81DTO%E3%80%81DO%E3%80%81PO%E7%9A%84%E6%A6%82%E5%BF%B5%E3%80%81%E5%8C%BA%E5%88%AB%E5%92%8C%E7%94%A8%E5%A4%84/</id>
    <published>2021-04-08T05:44:55.000Z</published>
    <updated>2023-02-11T01:39:52.708Z</updated>
    
    <content type="html"><![CDATA[<h2 id="浅析VO、DTO、DO、PO的概念、区别和用处"><a href="#浅析VO、DTO、DO、PO的概念、区别和用处" class="headerlink" title="浅析VO、DTO、DO、PO的概念、区别和用处"></a>浅析VO、DTO、DO、PO的概念、区别和用处</h2><p>本篇文章主要讨论一下我们经常会用到的一些对象：VO、DTO、DO和PO。</p><p>由于不同的项目和开发人员有不同的命名习惯，这里我首先对上述的概念进行一个简单描述，名字只是个标识，我们重点关注其概念：</p><h3 id="概念："><a href="#概念：" class="headerlink" title="概念："></a>概念：</h3><ul><li><p>VO（View Object）：视图对象，用于展示层，它的作用是把某个指定页面（或组件）的所有数据封装起来。</p></li><li><p>DTO（Data Transfer Object）：数据传输对象，这个概念来源于J2EE的设计模式，原来的目的是为了EJB的分布式应用提供粗粒度的数据实体，以减少分布式调用的次数，从而提高分布式调用的性能和降低网络负载，但在这里，我泛指用于展示层与服务层之间的数据传输对象。</p></li><li><p>DO（Domain Object）：领域对象，就是从现实世界中抽象出来的有形或无形的业务实体。</p></li><li><p>PO（Persistent Object）：持久化对象，它跟持久层（通常是关系型数据库）的数据结构形成一一对应的映射关系，如果持久层是关系型数据库，那么，数据表中的每个字段（或若干个）就对应PO的一个（或若干个）属性。</p></li></ul><h3 id="模型："><a href="#模型：" class="headerlink" title="模型："></a>模型：</h3><p>下面以一个时序图建立简单模型来描述上述对象在三层架构应用中的位置<br><a href="https://imgtu.com/i/cJ4B2F"><img src="https://z3.ax1x.com/2021/04/08/cJ4B2F.png" alt="cJ4B2F.png"></a></p><ul><li><p>用户发出请求（可能是填写表单），表单的数据在展示层被匹配为VO。</p></li><li><p>展示层把VO转换为服务层对应方法所要求的DTO，传送给服务层。</p></li><li><p>服务层首先根据DTO的数据构造（或重建）一个DO，调用DO的业务方法完成具体业务。</p></li><li><p>服务层把DO转换为持久层对应的PO（可以使用ORM工具，也可以不用），调用持久层的持久化方法，把PO传递给它，完成持久化操作。</p></li><li><p>对于一个逆向操作，如读取数据，也是用类似的方式转换和传递，略。</p></li></ul><h3 id="VO与DTO的区别"><a href="#VO与DTO的区别" class="headerlink" title="VO与DTO的区别"></a>VO与DTO的区别</h3><p>大家可能会有个疑问（在笔者参与的项目中，很多程序员也有相同的疑惑）：既然DTO是展示层与服务层之间传递数据的对象，为什么还需要一个VO呢？对！对于绝大部分的应用场景来说，DTO和VO的属性值基本是一致的，而且他们通常都是POJO，因此没必要多此一举，但不要忘记这是实现层面的思维，对于设计层面来说，概念上还是应该存在VO和DTO，因为两者有着本质的区别，DTO代表服务层需要接收的数据和返回的数据，而VO代表展示层需要显示的数据。</p><p>用一个例子来说明可能会比较容易理解：例如服务层有一个getUser的方法返回一个系统用户，其中有一个属性是gender(性别)，对于服务层来说，它只从语义上定义：1-男性，2-女性，0-未指定，而对于展示层来说，它可能需要用“帅哥”代表男性，用“美女”代表女性，用“秘密”代表未指定。说到这里，可能你还会反驳，在服务层直接就返回“帅哥美女”不就行了吗？对于大部分应用来说，这不是问题，但设想一下，如果需求允许客户可以定制风格，而不同风格对于“性别”的表现方式不一样，又或者这个服务同时供多个客户端使用（不同门户），而不同的客户端对于表现层的要求有所不同，那么，问题就来了。再者，回到设计层面上分析，从职责单一原则来看，服务层只负责业务，与具体的表现形式无关，因此，它返回的DTO，不应该出现与表现形式的耦合。</p><p>理论归理论，这到底还是分析设计层面的思维，是否在实现层面必须这样做呢？一刀切的做法往往会得不偿失，下面我马上会分析应用中如何做出正确的选择。</p><h3 id="VO与DTO的应用"><a href="#VO与DTO的应用" class="headerlink" title="VO与DTO的应用"></a>VO与DTO的应用</h3><p>上面只是用了一个简单的例子来说明VO与DTO在概念上的区别，本节将会告诉你如何在应用中做出正确的选择。</p><p>在以下才场景中，我们可以考虑把VO与DTO二合为一（注意：是实现层面）：</p><ul><li><p>当需求非常清晰稳定，而且客户端很明确只有一个的时候，没有必要把VO和DTO区分开来，这时候VO可以退隐，用一个DTO即可，为什么是VO退隐而不是DTO？回到设计层面，服务层的职责依然不应该与展示层耦合，所以，对于前面的例子，你很容易理解，DTO对于“性别”来说，依然不能用“帅哥美女”，这个转换应该依赖于页面的脚本（如JavaScript）或其他机制（JSTL、EL、CSS）</p></li><li><p>即使客户端可以进行定制，或者存在多个不同的客户端，如果客户端能够用某种技术（脚本或其他机制）实现转换，同样可以让VO退隐</p></li></ul><p><strong>以下场景需要优先考虑VO、DTO并存：</strong></p><ul><li><p>上述场景的反面场景</p></li><li><p>因为某种技术原因，比如某个框架（如Flex）提供自动把POJO转换为UI中某些Field时，可以考虑在实现层面定义出VO，这个权衡完全取决于使用框架的自动转换能力带来的开发和维护效率提升与设计多一个VO所多做的事情带来的开发和维护效率的下降之间的比对。</p></li><li><p>如果页面出现一个“大视图”，而组成这个大视图的所有数据需要调用多个服务，返回多个DTO来组装（当然，这同样可以通过服务层提供一次性返回一个大视图的DTO来取代，但在服务层提供一个这样的方法是否合适，需要在设计层面进行权衡）。</p></li></ul><h3 id="DTO与DO的区别"><a href="#DTO与DO的区别" class="headerlink" title="DTO与DO的区别"></a>DTO与DO的区别</h3><p>首先是概念上的区别，DTO是展示层和服务层之间的数据传输对象（可以认为是两者之间的协议），而DO是对现实世界各种业务角色的抽象，这就引出了两者在数据上的区别，例如UserInfo和User（对于DTO和DO的命名规则，请参见笔者前面的一篇博文），对于一个getUser方法来说，本质上它永远不应该返回用户的密码，因此UserInfo至少比User少一个password的数据。而在领域驱动设计中，正如第一篇系列文章所说，DO不是简单的POJO，它具有领域业务逻辑。</p><h3 id="DTO与DO的应用"><a href="#DTO与DO的应用" class="headerlink" title="DTO与DO的应用"></a>DTO与DO的应用</h3><p>从上一节的例子中，细心的读者可能会发现问题：既然getUser方法返回的UserInfo不应该包含password，那么就不应该存在password这个属性定义，但如果同时有一个createUser的方法，传入的UserInfo需要包含用户的password，怎么办？在设计层面，展示层向服务层传递的DTO与服务层返回给展示层的DTO在概念上是不同的，但在实现层面，我们通常很少会这样做（定义两个UserInfo，甚至更多），因为这样做并不见得很明智，我们完全可以设计一个完全兼容的DTO，在服务层接收数据的时候，不该由展示层设置的属性（如订单的总价应该由其单价、数量、折扣等决定），无论展示层是否设置，服务层都一概忽略，而在服务层返回数据时，不该返回的数据（如用户密码），就不设置对应的属性。</p><p>对于DO来说，还有一点需要说明：为什么不在服务层中直接返回DO呢？这样可以省去DTO的编码和转换工作，原因如下：</p><ul><li><p>两者在本质上的区别可能导致彼此并不一一对应，一个DTO可能对应多个DO，反之亦然，甚至两者存在多对多的关系。</p></li><li><p>DO具有一些不应该让展示层知道的数据</p></li><li><p>DO具有业务方法，如果直接把DO传递给展示层，展示层的代码就可以绕过服务层直接调用它不应该访问的操作，对于基于AOP拦截服务层来进行访问控制的机制来说，这问题尤为突出，而在展示层调用DO的业务方法也会因为事务的问题，让事务难以控制。</p></li><li><p>对于某些ORM框架（如Hibernate）来说，通常会使用“延迟加载”技术，如果直接把DO暴露给展示层，对于大部分情况，展示层不在事务范围之内（Open session in view在大部分情况下不是一种值得推崇的设计），如果其尝试在Session关闭的情况下获取一个未加载的关联对象，会出现运行时异常（对于Hibernate来说，就是LazyInitiliaztionException）。</p></li><li><p>从设计层面来说，展示层依赖于服务层，服务层依赖于领域层，如果把DO暴露出去，就会导致展示层直接依赖于领域层，这虽然依然是单向依赖，但这种跨层依赖会导致不必要的耦合。</p></li></ul><p>对于DTO来说，也有一点必须进行说明，就是DTO应该是一个“扁平的二维对象”，举个例子来说明：如果User会关联若干个其他实体（例如Address、Account、Region等），那么getUser()返回的UserInfo，是否就需要把其关联的对象的DTO都一并返回呢？如果这样的话，必然导致数据传输量的大增，对于分布式应用来说，由于涉及数据在网络上的传输、序列化和反序列化，这种设计更不可接受。如果getUser除了要返回User的基本信息外，还需要返回一个AccountId、AccountName、RegionId、RegionName，那么，请把这些属性定义到UserInfo中，把一个“立体”的对象树“压扁”成一个“扁平的二维对象”，笔者目前参与的项目是一个分布式系统，该系统不管三七二十一，把一个对象的所有关联对象都转换为相同结构的DTO对象树并返回，导致性能非常的慢。</p><h3 id="DO与PO的区别"><a href="#DO与PO的区别" class="headerlink" title="DO与PO的区别"></a>DO与PO的区别</h3><p>DO和PO在绝大部分情况下是一一对应的，PO是只含有get&#x2F;set方法的POJO，但某些场景还是能反映出两者在概念上存在本质的区别：</p><ul><li><p>DO在某些场景下不需要进行显式的持久化，例如利用策略模式设计的商品折扣策略，会衍生出折扣策略的接口和不同折扣策略实现类，这些折扣策略实现类可以算是DO，但它们只驻留在静态内存，不需要持久化到持久层，因此，这类DO是不存在对应的PO的。</p></li><li><p>同样的道理，某些场景下，PO也没有对应的DO，例如老师Teacher和学生Student存在多对多的关系，在关系数据库中，这种关系需要表现为一个中间表，也就对应有一个TeacherAndStudentPO的PO，但这个PO在业务领域没有任何现实的意义，它完全不能与任何DO对应上。这里要特别声明，并不是所有多对多关系都没有业务含义，这跟具体业务场景有关，例如：两个PO之间的关系会影响具体业务，并且这种关系存在多种类型，那么这种多对多关系也应该表现为一个DO，又如：“角色”与“资源”之间存在多对多关系，而这种关系很明显会表现为一个DO——“权限”。</p></li><li><p>某些情况下，为了某种持久化策略或者性能的考虑，一个PO可能对应多个DO，反之亦然。例如客户Customer有其联系信息Contacts，这里是两个一对一关系的DO，但可能出于性能的考虑（极端情况，权作举例），为了减少数据库的连接查询操作，把Customer和Contacts两个DO数据合并到一张数据表中。反过来，如果一本图书Book，有一个属性是封面cover，但该属性是一副图片的二进制数据，而某些查询操作不希望把cover一并加载，从而减轻磁盘IO开销，同时假设ORM框架不支持属性级别的延迟加载，那么就需要考虑把cover独立到一张数据表中去，这样就形成一个DO对应对个PO的情况。</p></li><li><p>PO的某些属性值对于DO没有任何意义，这些属性值可能是为了解决某些持久化策略而存在的数据，例如为了实现“乐观锁”，PO存在一个version的属性，这个version对于DO来说是没有任何业务意义的，它不应该在DO中存在。同理，DO中也可能存在不需要持久化的属性。</p></li></ul><h3 id="DO与PO的应用"><a href="#DO与PO的应用" class="headerlink" title="DO与PO的应用"></a>DO与PO的应用</h3><p>由于ORM框架的功能非常强大而大行其道，而且JavaEE也推出了JPA规范，现在的业务应用开发，基本上不需要区分DO与PO，PO完全可以通过JPA，Hibernate Annotations&#x2F;hbm隐藏在DO之中。虽然如此，但有些问题我们还必须注意：</p><ul><li><p>对于DO中不需要持久化的属性，需要通过ORM显式的声明，如：在JPA中，可以利用@Transient声明。</p></li><li><p>对于PO中为了某种持久化策略而存在的属性，例如version，由于DO、PO合并了，必须在DO中声明，但由于这个属性对DO是没有任何业务意义的，需要让该属性对外隐藏起来，最常见的做法是把该属性的get&#x2F;set方法私有化，甚至不提供get&#x2F;set方法，但对于Hibernate来说，这需要特别注意，由于Hibernate从数据库读取数据转换为DO时，是利用反射机制先调用DO的空参数构造函数构造DO实例，然后再利用JavaBean的规范反射出set方法来为每个属性设值，如果不显式声明set方法，或把set方法设置为private，都会导致Hibernate无法初始化DO，从而出现运行时异常，可行的做法是把属性的set方法设置为protected。</p></li><li><p>对于一个DO对应多个PO，或者一个PO对应多个DO的场景，以及属性级别的延迟加载，Hibernate都提供了很好的支持，请参考Hibnate的相关资料。</p></li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>到目前为止，相信大家都已经比较清晰的了解VO、DTO、DO、PO的概念、区别和实际应用了。通过上面的详细分析，我们还可以总结出一个原则：分析设计层面和实现层面完全是两个独立的层面，即使实现层面通过某种技术手段可以把两个完全独立的概念合二为一，在分析设计层面，我们仍然（至少在头脑中）需要把概念上独立的东西清晰的区分开来，这个原则对于做好分析设计非常重要（工具越先进，往往会让我们越麻木）。第一篇系列博文抛砖引玉，大唱领域驱动设计的优势，但其实领域驱动设计在现实环境中还是有种种的限制，需要选择性的使用，正如我在《田七的智慧》博文中提到，我们不能永远的理想化的去选择所谓“最好的设计”，在必要的情况下，我们还是要敢于放弃，因为最合适的设计才是最好的设计。</p><p>作者：Cat Qi<br>出处：<a href="https://www.cnblogs.com/qixuejia/p/4390086.html">https://www.cnblogs.com/qixuejia/p/4390086.html</a></p>]]></content>
    
    
    <summary type="html">浅析VO、DTO、DO、PO的概念、区别和用处！</summary>
    
    
    
    <category term="Java" scheme="https://hwy.ac.cn/categories/Java/"/>
    
    
    <category term="Java" scheme="https://hwy.ac.cn/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>今天来个轻松的，花式拼接字符串！</title>
    <link href="https://hwy.ac.cn/2021/03/27/%E4%BB%8A%E5%A4%A9%E6%9D%A5%E4%B8%AA%E8%BD%BB%E6%9D%BE%E7%9A%84%EF%BC%8C%E8%8A%B1%E5%BC%8F%E6%8B%BC%E6%8E%A5%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    <id>https://hwy.ac.cn/2021/03/27/%E4%BB%8A%E5%A4%A9%E6%9D%A5%E4%B8%AA%E8%BD%BB%E6%9D%BE%E7%9A%84%EF%BC%8C%E8%8A%B1%E5%BC%8F%E6%8B%BC%E6%8E%A5%E5%AD%97%E7%AC%A6%E4%B8%B2/</id>
    <published>2021-03-27T02:45:41.000Z</published>
    <updated>2023-02-11T01:39:52.708Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>在实际开发中我们经常会遇到把集合拼接陈字符串的情况，今天我们使用原生<strong>JDK1.8</strong>花式玩转字符串拼接。<br>原理不多，实用程度<strong>MAX</strong>，我们开始吧。</p><h2 id="举例说明"><a href="#举例说明" class="headerlink" title="举例说明"></a>举例说明</h2><p>首先我们定义一个公共数据方便后续实例操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> String[] names = &#123;<span class="string">&quot;汉服&quot;</span>, <span class="string">&quot;中山装&quot;</span>, <span class="string">&quot;洛丽塔&quot;</span>&#125;;</span><br></pre></td></tr></table></figure><h3 id="最简单拼接"><a href="#最简单拼接" class="headerlink" title="最简单拼接"></a>最简单拼接</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">simpleStringJoin</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">joiner</span> <span class="operator">=</span> String.join(<span class="string">&quot;,&quot;</span>, names);</span><br><span class="line">    System.out.println(joiner);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">汉服,中山装,洛丽塔</span><br></pre></td></tr></table></figure><h3 id="遍历拼接"><a href="#遍历拼接" class="headerlink" title="遍历拼接"></a>遍历拼接</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">simpleJoiner</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">StringJoiner</span> <span class="variable">joiner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringJoiner</span>(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (String name : names) &#123;</span><br><span class="line">        joiner.add(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    System.out.println(joiner);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">汉服,中山装,洛丽塔</span><br></pre></td></tr></table></figure><h3 id="使用add手动拼接"><a href="#使用add手动拼接" class="headerlink" title="使用add手动拼接"></a>使用add手动拼接</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">simpleAddJoiner</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">StringJoiner</span> <span class="variable">joiner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringJoiner</span>(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">    joiner.add(<span class="string">&quot;汉服&quot;</span>).add(<span class="string">&quot;中山装&quot;</span>).add(<span class="string">&quot;洛丽塔&quot;</span>);</span><br><span class="line"></span><br><span class="line">    System.out.println(joiner);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">汉服,中山装,洛丽塔</span><br></pre></td></tr></table></figure><h3 id="使用lambda循环拼接"><a href="#使用lambda循环拼接" class="headerlink" title="使用lambda循环拼接"></a>使用lambda循环拼接</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">simpleListJoiner</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">StringJoiner</span> <span class="variable">joiner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringJoiner</span>(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">    List&lt;String&gt; nameLists = Arrays.asList(names);</span><br><span class="line">    nameLists.forEach(joiner::add);</span><br><span class="line"></span><br><span class="line">    System.out.println(joiner);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">汉服,中山装,洛丽塔</span><br></pre></td></tr></table></figure><h3 id="数组转集合流处理拼接"><a href="#数组转集合流处理拼接" class="headerlink" title="数组转集合流处理拼接"></a>数组转集合流处理拼接</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">simpleStreamListJoiner</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">StringJoiner</span> <span class="variable">joiner</span> <span class="operator">=</span> Arrays.stream(names)</span><br><span class="line">            .collect(Collector.of(() -&gt; <span class="keyword">new</span> <span class="title class_">StringJoiner</span>(<span class="string">&quot;,&quot;</span>), StringJoiner::add, StringJoiner::merge));</span><br><span class="line"></span><br><span class="line">    System.out.println(joiner);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">汉服,中山装,洛丽塔</span><br></pre></td></tr></table></figure><h3 id="数组转集合流处理生成字符串拼接"><a href="#数组转集合流处理生成字符串拼接" class="headerlink" title="数组转集合流处理生成字符串拼接"></a>数组转集合流处理生成字符串拼接</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">simpleStreamStringListJoiner</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">joiner</span> <span class="operator">=</span> Arrays.stream(names)</span><br><span class="line">            .collect(Collector.of(() -&gt; <span class="keyword">new</span> <span class="title class_">StringJoiner</span>(<span class="string">&quot;,&quot;</span>), StringJoiner::add, StringJoiner::merge, StringJoiner::toString));</span><br><span class="line"></span><br><span class="line">    System.out.println(joiner);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">汉服,中山装,洛丽塔</span><br></pre></td></tr></table></figure><h3 id="使用collect无符号拼接"><a href="#使用collect无符号拼接" class="headerlink" title="使用collect无符号拼接"></a>使用collect无符号拼接</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">simpleStreamStringListJoining</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">joiner</span> <span class="operator">=</span> Arrays.stream(names).collect(Collectors.joining());</span><br><span class="line"></span><br><span class="line">    System.out.println(joiner);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">汉服中山装洛丽塔</span><br></pre></td></tr></table></figure><h3 id="使用collect逗号拼接"><a href="#使用collect逗号拼接" class="headerlink" title="使用collect逗号拼接"></a>使用collect逗号拼接</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">simpleStreamDelimiterJoining</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">joiner</span> <span class="operator">=</span> Arrays.stream(names).collect(Collectors.joining(<span class="string">&quot;,&quot;</span>));</span><br><span class="line"></span><br><span class="line">    System.out.println(joiner);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">汉服,中山装,洛丽塔</span><br></pre></td></tr></table></figure><h3 id="普通多条拼接"><a href="#普通多条拼接" class="headerlink" title="普通多条拼接"></a>普通多条拼接</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">simpleMultiListJoiner</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">StringJoiner</span> <span class="variable">joiner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringJoiner</span>(<span class="string">&quot;,&quot;</span>, <span class="string">&quot;我喜欢 &quot;</span>, <span class="string">&quot; !&quot;</span>);</span><br><span class="line">    List&lt;String&gt; nameLists = Arrays.asList(names);</span><br><span class="line">    nameLists.forEach(joiner::add);</span><br><span class="line"></span><br><span class="line">    System.out.println(joiner);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">我喜欢 汉服,中山装,洛丽塔 !</span><br></pre></td></tr></table></figure><h3 id="使用collect多条拼接"><a href="#使用collect多条拼接" class="headerlink" title="使用collect多条拼接"></a>使用collect多条拼接</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">simpleStreamMultiJoining</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">joiner</span> <span class="operator">=</span> Arrays.stream(names).collect(Collectors.joining(<span class="string">&quot;,&quot;</span>, <span class="string">&quot;好喜欢 &quot;</span>, <span class="string">&quot;~~&quot;</span>));</span><br><span class="line"></span><br><span class="line">    System.out.println(joiner);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">好喜欢 汉服,中山装,洛丽塔~~</span><br></pre></td></tr></table></figure><h3 id="多个join合并拼接"><a href="#多个join合并拼接" class="headerlink" title="多个join合并拼接"></a>多个join合并拼接</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">simpleMergeListJoiner</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">StringJoiner</span> <span class="variable">joiner1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringJoiner</span>(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">    List&lt;String&gt; nameLists1 = Arrays.asList(names);</span><br><span class="line">    nameLists1.forEach(joiner1::add);</span><br><span class="line"></span><br><span class="line">    <span class="type">StringJoiner</span> <span class="variable">joiner2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringJoiner</span>(<span class="string">&quot;-&quot;</span>);</span><br><span class="line">    List&lt;String&gt; nameLists2 = Arrays.asList(names);</span><br><span class="line">    nameLists2.forEach(joiner2::add);</span><br><span class="line"></span><br><span class="line">    joiner1.merge(joiner2);</span><br><span class="line"></span><br><span class="line">    System.out.println(joiner1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">汉服,中山装,洛丽塔,汉服-中山装-洛丽塔</span><br></pre></td></tr></table></figure><h2 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h2><p>有了以上拼接方式，再也不用这拼那截的拼接字符串了。</p>]]></content>
    
    
    <summary type="html">今天来个轻松的，花式拼接字符串。</summary>
    
    
    
    <category term="Java" scheme="https://hwy.ac.cn/categories/Java/"/>
    
    
    <category term="Java" scheme="https://hwy.ac.cn/tags/Java/"/>
    
    <category term="lambda" scheme="https://hwy.ac.cn/tags/lambda/"/>
    
  </entry>
  
  <entry>
    <title>如何自动的给小姐姐发送微信消息呢</title>
    <link href="https://hwy.ac.cn/2021/03/26/%E5%A6%82%E4%BD%95%E8%87%AA%E5%8A%A8%E7%9A%84%E7%BB%99%E5%B0%8F%E5%A7%90%E5%A7%90%E5%8F%91%E9%80%81%E5%BE%AE%E4%BF%A1%E6%B6%88%E6%81%AF%E5%91%A2/"/>
    <id>https://hwy.ac.cn/2021/03/26/%E5%A6%82%E4%BD%95%E8%87%AA%E5%8A%A8%E7%9A%84%E7%BB%99%E5%B0%8F%E5%A7%90%E5%A7%90%E5%8F%91%E9%80%81%E5%BE%AE%E4%BF%A1%E6%B6%88%E6%81%AF%E5%91%A2/</id>
    <published>2021-03-26T03:44:36.000Z</published>
    <updated>2023-02-11T01:39:52.708Z</updated>
    
    <content type="html"><![CDATA[<h2 id="微信设置"><a href="#微信设置" class="headerlink" title="微信设置"></a>微信设置</h2><p>需要将我们<strong>电脑的微信</strong>设置为如下快捷方式，当然你也可以改其他的，不过需要该代码。</p><p><a href="https://imgtu.com/i/6j8RC4"><img src="https://z3.ax1x.com/2021/03/26/6j8RC4.png" alt="6j8RC4.png"></a></p><h2 id="开发"><a href="#开发" class="headerlink" title="开发"></a>开发</h2><p>为了方便操作我就不使用申请公众号开发的方式进行操作，直接模拟键盘操作控制微信。</p><h3 id="编写一个小小的微信机器人"><a href="#编写一个小小的微信机器人" class="headerlink" title="编写一个小小的微信机器人"></a>编写一个小小的微信机器人</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.datatransfer.Clipboard;</span><br><span class="line"><span class="keyword">import</span> java.awt.datatransfer.StringSelection;</span><br><span class="line"><span class="keyword">import</span> java.awt.datatransfer.Transferable;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.KeyEvent;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: YI</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 获取微信句柄操作微信</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: create in 2021/3/26 10:20</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WeChatRobot</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">Robot</span> <span class="variable">bot</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">Clipboard</span> <span class="variable">clip</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">WeChatRobot</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.clip = Toolkit.getDefaultToolkit().getSystemClipboard();</span><br><span class="line">            <span class="built_in">this</span>.bot = <span class="keyword">new</span> <span class="title class_">Robot</span>();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (AWTException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 打开微信，我这边设置了CTRL+ALT+W 快捷键打开微信</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">openWeChat</span><span class="params">()</span> &#123;</span><br><span class="line">        bot.keyPress(KeyEvent.VK_CONTROL);</span><br><span class="line">        bot.keyPress(KeyEvent.VK_ALT);</span><br><span class="line">        bot.keyPress(KeyEvent.VK_W);</span><br><span class="line"></span><br><span class="line">        bot.keyRelease(KeyEvent.VK_CONTROL);</span><br><span class="line">        bot.keyRelease(KeyEvent.VK_ALT);</span><br><span class="line"></span><br><span class="line">        bot.delay(<span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查找微信中好友名称</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name 好友/群名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">chooseFriends</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="type">Transferable</span> <span class="variable">text</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringSelection</span>(name);</span><br><span class="line">        clip.setContents(text, <span class="literal">null</span>);</span><br><span class="line">        bot.delay(<span class="number">1000</span>);</span><br><span class="line">        bot.keyPress(KeyEvent.VK_CONTROL);</span><br><span class="line">        bot.keyPress(KeyEvent.VK_F);</span><br><span class="line">        bot.keyRelease(KeyEvent.VK_CONTROL);</span><br><span class="line"></span><br><span class="line">        bot.delay(<span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">        bot.keyPress(KeyEvent.VK_CONTROL);</span><br><span class="line">        bot.keyPress(KeyEvent.VK_V);</span><br><span class="line">        bot.keyRelease(KeyEvent.VK_CONTROL);</span><br><span class="line"></span><br><span class="line">        bot.delay(<span class="number">2000</span>);</span><br><span class="line"></span><br><span class="line">        bot.keyPress(KeyEvent.VK_ENTER);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发送消息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> message 消息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendMessage</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        <span class="type">Transferable</span> <span class="variable">text</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringSelection</span>(message);</span><br><span class="line">        clip.setContents(text, <span class="literal">null</span>);</span><br><span class="line">        bot.delay(<span class="number">1000</span>);</span><br><span class="line">        bot.keyPress(KeyEvent.VK_CONTROL);</span><br><span class="line">        bot.keyPress(KeyEvent.VK_V);</span><br><span class="line">        bot.keyRelease(KeyEvent.VK_CONTROL);</span><br><span class="line">        bot.delay(<span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">        bot.keyPress(KeyEvent.VK_ENTER);</span><br><span class="line"></span><br><span class="line">        bot.delay(<span class="number">1000</span>);</span><br><span class="line">        bot.keyPress(KeyEvent.VK_CONTROL);</span><br><span class="line">        bot.keyPress(KeyEvent.VK_ALT);</span><br><span class="line">        bot.keyPress(KeyEvent.VK_W);</span><br><span class="line"></span><br><span class="line">        bot.keyRelease(KeyEvent.VK_CONTROL);</span><br><span class="line">        bot.keyRelease(KeyEvent.VK_ALT);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="编写一个发送的功能"><a href="#编写一个发送的功能" class="headerlink" title="编写一个发送的功能"></a>编写一个发送的功能</h3><p>我这里使用了两种发送方式，一种是定时延迟，一种是立即发送。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.text.ParseException;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ScheduledExecutorService;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: YI</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 发送消息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: create in 2021/3/26 10:20</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StartSendMsgTask</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">WeChatRobot</span> <span class="variable">robot</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">WeChatRobot</span>();</span><br><span class="line">    <span class="type">ScheduledExecutorService</span> <span class="variable">exe</span> <span class="operator">=</span> Executors.newSingleThreadScheduledExecutor();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 立刻发送消息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> friendName 发送的朋友/群名称</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> message    发送的内容</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendMsgNow</span><span class="params">(String friendName, String message)</span> &#123;</span><br><span class="line">        printLog(friendName, message);</span><br><span class="line">        robot.openWeChat();</span><br><span class="line">        robot.chooseFriends(friendName);</span><br><span class="line">        robot.sendMessage(message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定时发送任务</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> friendName 发送的朋友/群名称</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> timeStr    定时时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> message    发送的内容</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendMsgSchedule</span><span class="params">(String friendName, String timeStr, String message)</span> &#123;</span><br><span class="line">        exe.schedule(() -&gt; sendMsgNow(friendName, message), getDate(timeStr), TimeUnit.SECONDS);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发送内容日志</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> friendName 发送给谁</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> message    发送的消息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">printLog</span><span class="params">(String friendName, String message)</span> &#123;</span><br><span class="line">        <span class="type">SimpleDateFormat</span> <span class="variable">sdf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;-----------------发送消息-----------------&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;当前时间: &quot;</span> + sdf.format(<span class="keyword">new</span> <span class="title class_">Date</span>()));</span><br><span class="line">        System.out.println(<span class="string">&quot;发送对象: &quot;</span> + friendName);</span><br><span class="line">        System.out.println(<span class="string">&quot;发送内容: &quot;</span> + message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取定时任务的时间</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> timeStr 时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 任务延时发送时间(秒)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">long</span> <span class="title function_">getDate</span><span class="params">(String timeStr)</span> &#123;</span><br><span class="line">        <span class="type">SimpleDateFormat</span> <span class="variable">sdf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">currentDate</span> <span class="operator">=</span> sdf.format(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        <span class="type">String</span> <span class="variable">targetTime</span> <span class="operator">=</span> currentDate + <span class="string">&quot; &quot;</span> + timeStr;</span><br><span class="line"></span><br><span class="line">        sdf = <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line">        <span class="comment">//目标时间 时间戳</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">targetTimer</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            targetTimer = sdf.parse(targetTime).getTime();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ParseException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//当前时间 时间戳</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">currentTimer</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        <span class="comment">//判断是否已过目标时间</span></span><br><span class="line">        <span class="keyword">if</span> (targetTimer &lt; currentTimer) &#123;</span><br><span class="line">            <span class="comment">//目标时间加一天</span></span><br><span class="line">            targetTimer += <span class="number">1000</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//返回目标日期</span></span><br><span class="line">        <span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>(targetTimer);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> (date.getTime() - System.currentTimeMillis()) / <span class="number">1000</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="最后我们就可以使用啦"><a href="#最后我们就可以使用啦" class="headerlink" title="最后我们就可以使用啦"></a>最后我们就可以使用啦</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: YI</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 发送微信消息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: create in 2021/3/26 10:30</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Start Send Message Task!&quot;</span>);</span><br><span class="line">        <span class="comment">// 测试数据，真实数据可以使用爬虫获取</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> <span class="string">&quot;今天是2021年3月26日,星期五\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;首先今天好也想你喔（づ￣3￣）づ╭❤～，然后我就要来播送天气预报了！！\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;今天最:高温 29.0℃,最低温 20.0℃\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;多云,风力&lt;3级,空气质量是良\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;今天将在 18:39 太阳会缓缓落下,我会在家做好饭等你哟！\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;双子座今日运势\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;健康指数：92%\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;商谈指数：88%\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;幸运颜色：白色\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;幸运数字：8\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;综合运势: 今天整体财运有点背，不太适合投资或是买乐透，建议可以做个理财计划，调整一下策略。中午将会花一些时间整理自己内心的小抽屉，其实也是时候用感性的思维清理那些烦人的问题了。\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;最后阴晴之间，谨防紫外线侵扰\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;爱你٩(๑&gt;◡&lt;๑)۶傻宝宝！！！&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">StartSendMsgTask</span> <span class="variable">startSendMsgTask</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StartSendMsgTask</span>();</span><br><span class="line">        <span class="comment">// 立刻发送</span></span><br><span class="line">        startSendMsgTask.sendMsgNow(<span class="string">&quot;德玛西亚群&quot;</span>, msg);</span><br><span class="line">        <span class="comment">// 定时发送</span></span><br><span class="line">        startSendMsgTask.sendMsgSchedule(<span class="string">&quot;德玛西亚群&quot;</span>, <span class="string">&quot;11:08:30&quot;</span>, msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从代码注释可以看出我们这里可以使用立刻发送或者定时发送，其中定时发送的时间如果超过了当前时间就会自动在明天发送。</p><h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p><a href="https://imgtu.com/i/6jJVYD"><img src="https://z3.ax1x.com/2021/03/26/6jJVYD.png" alt="6jJVYD.png"></a></p><h2 id="其他版本"><a href="#其他版本" class="headerlink" title="其他版本"></a>其他版本</h2><p>以前写的邮件版本：<a href="https://github.com/HWYWL/love-mail">https://github.com/HWYWL/love-mail</a></p>]]></content>
    
    
    <summary type="html">如何自动的给小姐姐发送微信消息呢</summary>
    
    
    
    <category term="生活" scheme="https://hwy.ac.cn/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
    <category term="生活" scheme="https://hwy.ac.cn/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>JDK 16 GA 正式发布： 17个特性，一网打尽！</title>
    <link href="https://hwy.ac.cn/2021/03/17/JDK%2016%20GA%20%E6%AD%A3%E5%BC%8F%E5%8F%91%E5%B8%83%EF%BC%9A%2017%E4%B8%AA%E7%89%B9%E6%80%A7%EF%BC%8C%E4%B8%80%E7%BD%91%E6%89%93%E5%B0%BD/"/>
    <id>https://hwy.ac.cn/2021/03/17/JDK%2016%20GA%20%E6%AD%A3%E5%BC%8F%E5%8F%91%E5%B8%83%EF%BC%9A%2017%E4%B8%AA%E7%89%B9%E6%80%A7%EF%BC%8C%E4%B8%80%E7%BD%91%E6%89%93%E5%B0%BD/</id>
    <published>2021-03-17T01:55:05.000Z</published>
    <updated>2023-02-11T01:39:52.704Z</updated>
    
    <content type="html"><![CDATA[<h3 id="官方给出的JDK16所有特性一览如下，总计17个特性："><a href="#官方给出的JDK16所有特性一览如下，总计17个特性：" class="headerlink" title="官方给出的JDK16所有特性一览如下，总计17个特性："></a>官方给出的JDK16所有特性一览如下，总计17个特性：</h3><ul><li>338: Vector API (Incubator) </li><li>347: Enable C++14 Language Features </li><li>357: Migrate from Mercurial to Git </li><li>369: Migrate to GitHub </li><li>376: ZGC: Concurrent Thread-Stack Processing </li><li>380: Unix-Domain Socket Channels </li><li>386: Alpine Linux Port </li><li>387: Elastic Metaspace </li><li>388: Windows&#x2F;AArch64 Port </li><li>389: Foreign Linker API (Incubator) </li><li>390: Warnings for Value-Based Classes </li><li>392: Packaging Tool </li><li>393: Foreign-Memory Access API (Third Incubator) </li><li>394: Pattern Matching for instanceof </li><li>395: Records </li><li>396: Strongly Encapsulate JDK Internals by Default </li><li>397: Sealed Classes (Second Preview)</li></ul><p>接下来，我们一一对其进行解读。</p><h3 id="338-Vector-API"><a href="#338-Vector-API" class="headerlink" title="338: Vector API"></a>338: Vector API</h3><p>Java提供了一些Vector API, 那到底什么是Vector API呢？废话不多说，给你举个例子。我们先写一段普通的Java代码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">scalarComputation</span><span class="params">(<span class="type">float</span>[] a, <span class="type">float</span>[] b, <span class="type">float</span>[] c)</span> &#123;</span><br><span class="line">   <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; a.length; i++) &#123;</span><br><span class="line">        c[i] = (a[i] * a[i] + b[i] * b[i]) * -<span class="number">1.0f</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么，用Vector API实现等价逻辑的代码如下所示。是不是更复杂了， CRY～，嗯，没关系，反正要用到Vector API起码得是10年以后的事情了:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> VectorSpecies&lt;Float&gt; SPECIES = FloatVector.SPECIES_256;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">vectorComputation</span><span class="params">(<span class="type">float</span>[] a, <span class="type">float</span>[] b, <span class="type">float</span>[] c)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; a.length; i += SPECIES.length()) &#123;</span><br><span class="line">        <span class="type">var</span> <span class="variable">m</span> <span class="operator">=</span> SPECIES.indexInRange(i, a.length);</span><br><span class="line">  <span class="comment">// FloatVector va, vb, vc;</span></span><br><span class="line">        <span class="type">var</span> <span class="variable">va</span> <span class="operator">=</span> FloatVector.fromArray(SPECIES, a, i, m);</span><br><span class="line">        <span class="type">var</span> <span class="variable">vb</span> <span class="operator">=</span> FloatVector.fromArray(SPECIES, b, i, m);</span><br><span class="line">        <span class="type">var</span> <span class="variable">vc</span> <span class="operator">=</span> va.mul(va).</span><br><span class="line">                    add(vb.mul(vb)).</span><br><span class="line">                    neg();</span><br><span class="line">        vc.intoArray(c, i, m);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="347-Enable-C-14-Language-Features"><a href="#347-Enable-C-14-Language-Features" class="headerlink" title="347: Enable C++14 Language Features"></a>347: Enable C++14 Language Features</h3><p>一句话概括就是JDK16的C++源码可以使用C++14的语法特性。并且如果在HotSpot源码中确实有用到的话，会给出这些特性的特殊指导说明。</p><h3 id="369-Migrate-to-GitHub"><a href="#369-Migrate-to-GitHub" class="headerlink" title="369: Migrate to GitHub"></a>369: Migrate to GitHub</h3><p>OpenJDK终于也迁移到GitHub中，这个和 JEP 357: Migrate from Mercurial to Git 一起完成的。之前OpenJDK的源代码都是用Mercuial维护的，没听说过？没听说过就对了，也不用浪费时间去了解。</p><p>OpenJDK还解释了为什么选择GitHub，主要有3个原因：</p><ol><li>相比其他产品，GitHub的性能更好。</li><li>GitHub是全球最大的源码托管服务，并且有超过5kw用户。</li><li>GitHub拥有最多用于扩展的API。这些API支撑了很多文本编辑器(例如: Emacs, VS Code, Atom等), IDE工具(IDEA, Eclipse等), 命令行等对它的支持。</li></ol><p>最后，附上GitHub中OpenJDK项目地址：<a href="https://github.com/openjdk/%E3%80%82">https://github.com/openjdk/。</a><br><a href="https://imgtu.com/i/66VYsP"><img src="https://s3.ax1x.com/2021/03/17/66VYsP.png" alt="66VYsP.png"></a></p><h3 id="376-ZGC-Concurrent-Thread-Stack-Processing"><a href="#376-ZGC-Concurrent-Thread-Stack-Processing" class="headerlink" title="376: ZGC: Concurrent Thread-Stack Processing"></a>376: ZGC: Concurrent Thread-Stack Processing</h3><p>这个需求的意思是ZGC把线程栈处理从safepoint挪到并发阶段，从而减少GC的停顿时间。ZGC的目标就是消灭GC停顿和扩展性问题。为此，ZGC做了很多的工作，在把Thread-Stack从safepoint挪到并发阶段之前，还有很多其他的GC操作也做了这些优化，比如：marking, relocation, reference processing, class unloading, 以及大多数的 root processing。</p><h3 id="386-Alpine-Linux-Port"><a href="#386-Alpine-Linux-Port" class="headerlink" title="386: Alpine Linux Port"></a>386: Alpine Linux Port</h3><p>支持一些新的平台，比如Alpine Linux。Alpine Linux是一个Linux发行版, 它是一个由社区开发的Linux操作系统,该操作系统以安全为理念,面向x86路由器、防火墙、虚拟专用网、IP电话盒及服务器而设计。官方用3个词来介绍它：Small. Simple. Secure。确实很小，它的发行包不到6MB。</p><p><a href="https://imgtu.com/i/66VDRs"><img src="https://s3.ax1x.com/2021/03/17/66VDRs.png" alt="66VDRs.png"></a></p><p>此外，JEP 388: Windows&#x2F;AArch64 Port 也是类似的特性，即支持Windows平台和ARM64(AArch64)平台。</p><h3 id="392-Packaging-Tool"><a href="#392-Packaging-Tool" class="headerlink" title="392: Packaging Tool"></a>392: Packaging Tool</h3><p>这个特性在JDK14中已经被介绍过(JEP 343)，它的目的是创建一个打包工具jpackage，jpackage将Java应用程序打包到特定平台的程序包中，该程序包包含所有必需的依赖项。该应用程序可以作为普通JAR文件的集合或作为模块的集合提供。受支持的特定平台的软件包格式有：Linux: deb and rpm macOS: pkg and dmg Windows: msi and exe</p><p>打包命令参考如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ jpackage --name myapp --input lib --main-jar main.jar</span><br><span class="line"># 如果MANIFEST.MF中没有Main-Class，也可以使用如下的打包命令</span><br><span class="line">$ jpackage --name myapp --input lib --main-jar main.jar \</span><br><span class="line">  --main-class myapp.Main</span><br></pre></td></tr></table></figure><h3 id="393-Foreign-Memory-Access-API"><a href="#393-Foreign-Memory-Access-API" class="headerlink" title="393: Foreign-Memory Access API"></a>393: Foreign-Memory Access API</h3><p>引入API允许Java程序安全的、高效的访问堆外内存。这个需求的目标是希望做到如下几点：</p><ul><li>Generality: 通用性，一个简单的API就可以操作很多外部内存，例如本地内存、托管的堆内存等。</li><li>Safety: 安全性, 这些API不会破坏JVM的安全，可以放心的使用。</li><li>Control: 可控性，客户端应具有关于如何显示或者隐式控制重新分配内存段的选项。</li><li>Usability: 可用性, 对那些需要访问堆外内的程序来说，比如使用Unsafe接口操作堆外内存，新设计的API应该是更好的替代者。</li></ul><p>JDK16将这些API放到孵化的名为jdk.incubator.foreign的模块中，有3个主要的抽象: MemorySegment, MemoryAddress 和 MemoryLayout。</p><h3 id="394-Pattern-Matching-for-instanceof"><a href="#394-Pattern-Matching-for-instanceof" class="headerlink" title="394: Pattern Matching for instanceof"></a>394: Pattern Matching for instanceof</h3><p>这个特性最先出现在JDK14中(JEP 305), JDK15中(JEP 375)是第二轮预览。此次加到JDK16中是彻底完成这个特性。这个特性是为了增强Java语法，允许在instanceof中加入表达式匹配。以前我们写代码可能需要这样:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (obj <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> (String) obj;    <span class="comment">// grr...</span></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在我们只需要这样：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (obj <span class="keyword">instanceof</span> String s) &#123;</span><br><span class="line">    <span class="comment">// Let pattern matching do the work!</span></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们还可以这样:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (obj <span class="keyword">instanceof</span> String s &amp;&amp; s.length() &gt; <span class="number">5</span>) &#123;</span><br><span class="line">    flag = s.contains(<span class="string">&quot;jdk&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="395-Records"><a href="#395-Records" class="headerlink" title="395: Records"></a>395: Records</h3><p>很多人抱怨Java太冗余了，很多代码太形式主义了。比如如下这段代码所示，除了x和y的属性定义，其他的构造方法，equals、hashCode、toString方法基本上都借助IDE工具生成：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Point</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> x;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> y;</span><br><span class="line"></span><br><span class="line">    Point(<span class="type">int</span> x, <span class="type">int</span> y) &#123;</span><br><span class="line">        <span class="built_in">this</span>.x = x;</span><br><span class="line">        <span class="built_in">this</span>.y = y;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="title function_">x</span><span class="params">()</span> &#123; <span class="keyword">return</span> x; &#125;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">y</span><span class="params">()</span> &#123; <span class="keyword">return</span> y; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!(o <span class="keyword">instanceof</span> Point)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="type">Point</span> <span class="variable">other</span> <span class="operator">=</span> (Point) o;</span><br><span class="line">        <span class="keyword">return</span> other.x == x &amp;&amp; other.y == y;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Objects.hash(x, y);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> String.format(<span class="string">&quot;Point[x=%d, y=%d]&quot;</span>, x, y);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因此Java发明了一种新的Java类，我们只需要简单的几行代码即可。有点类似于lombok给我们代码带来的简洁性：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">record</span> <span class="title class_">Point</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> &#123; &#125;</span><br></pre></td></tr></table></figure><h3 id="397-Sealed-Classes"><a href="#397-Sealed-Classes" class="headerlink" title="397: Sealed Classes"></a>397: Sealed Classes</h3><p>中文翻译的含义是密封类，具体是什么意思呢？举个栗子，如下这段代码所示，Expr这个接口用sealed进行了修饰，那么只有permits后面的实现类实现这个接口，不允许其他实现类：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">package com.example.expression;</span><br><span class="line"></span><br><span class="line">public sealed interface Expr</span><br><span class="line">    permits ConstantExpr, PlusExpr, TimesExpr, NegExpr &#123; ... &#125;</span><br><span class="line"></span><br><span class="line">public final class ConstantExpr implements Expr &#123; ... &#125;</span><br><span class="line">public final class PlusExpr     implements Expr &#123; ... &#125;</span><br><span class="line">public final class TimesExpr    implements Expr &#123; ... &#125;</span><br><span class="line">public final class NegExpr      implements Expr &#123; ... &#125;</span><br></pre></td></tr></table></figure><p>sealed不仅可以修饰interface，也可以修饰类class。JEP 397 的目的是限制接口的实现，以及限制类的继承。如此一来，类和接口的作者对其写的类和接口有更好的控制权。</p><p>sealed修饰的类有3大约束：</p><ol><li>sealed修饰的类和它permits的子类必属属于相同的module(JDK9中的模块化)。如果是没有命名的module，那么需要在相同的包名下。</li><li>每一个permits的子类必须直接实现sealed的类，而不能间接实现。</li><li>每一个permits的子类必须用一个修饰符描述它是如何传播从父类继承过来的密封性的。比如子类用final修饰，表示不允许其他类继承。再比如用sealed修饰，从而继续限制子类的子类。</li></ol>]]></content>
    
    
    <summary type="html">JDK 16 GA 正式发布： 17个特性，一网打尽</summary>
    
    
    
    <category term="Java" scheme="https://hwy.ac.cn/categories/Java/"/>
    
    
    <category term="Java" scheme="https://hwy.ac.cn/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>清除某个仓库的所有Git提交，不删仓库</title>
    <link href="https://hwy.ac.cn/2021/03/05/%E5%88%A0%E9%99%A4%E6%89%80%E6%9C%89Git%E6%8F%90%E4%BA%A4/"/>
    <id>https://hwy.ac.cn/2021/03/05/%E5%88%A0%E9%99%A4%E6%89%80%E6%9C%89Git%E6%8F%90%E4%BA%A4/</id>
    <published>2021-03-05T10:03:27.000Z</published>
    <updated>2023-02-11T01:39:52.708Z</updated>
    
    <content type="html"><![CDATA[<h3 id="删除历史记录"><a href="#删除历史记录" class="headerlink" title="删除历史记录"></a>删除历史记录</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm -rf .git</span><br></pre></td></tr></table></figure><h3 id="从当前内容初始化、"><a href="#从当前内容初始化、" class="headerlink" title="从当前内容初始化、"></a>从当前内容初始化、</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br><span class="line">git add .</span><br><span class="line">git commit -m &quot;初始化提交&quot;</span><br></pre></td></tr></table></figure><h3 id="推送到远程仓库，并覆盖历史数据"><a href="#推送到远程仓库，并覆盖历史数据" class="headerlink" title="推送到远程仓库，并覆盖历史数据"></a>推送到远程仓库，并覆盖历史数据</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin git@github.com:&lt;YOUR ACCOUNT&gt;/&lt;YOUR REPOS&gt;.git</span><br><span class="line">git push -u --force origin master</span><br></pre></td></tr></table></figure><blockquote><p>来源：<a href="https://gist.github.com/stephenhardy/5470814">https://gist.github.com/stephenhardy/5470814</a></p></blockquote>]]></content>
    
    
    <summary type="html">清除某个仓库的所有Git提交，不删仓库</summary>
    
    
    
    <category term="git" scheme="https://hwy.ac.cn/categories/git/"/>
    
    
    <category term="git" scheme="https://hwy.ac.cn/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>Docker常用命令</title>
    <link href="https://hwy.ac.cn/2021/03/05/Docker%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>https://hwy.ac.cn/2021/03/05/Docker%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</id>
    <published>2021-03-05T01:47:31.000Z</published>
    <updated>2023-02-11T01:39:52.704Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1、Docker容器信息"><a href="#1、Docker容器信息" class="headerlink" title="1、Docker容器信息"></a>1、Docker容器信息</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">##查看docker容器版本</span><br><span class="line">docker version</span><br><span class="line">##查看docker容器信息</span><br><span class="line">docker info</span><br><span class="line">##查看docker容器帮助</span><br><span class="line">docker --help</span><br></pre></td></tr></table></figure><h2 id="2、镜像操作"><a href="#2、镜像操作" class="headerlink" title="2、镜像操作"></a>2、镜像操作</h2><p>注意：对于镜像的操作可使用镜像名、镜像长ID和短ID。、</p><h3 id="2-1、镜像查看"><a href="#2-1、镜像查看" class="headerlink" title="2.1、镜像查看"></a>2.1、镜像查看</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">##列出本地images</span><br><span class="line">docker images</span><br><span class="line">##含中间映像层</span><br><span class="line">docker images -a</span><br></pre></td></tr></table></figure><p><a href="https://imgtu.com/i/6e91ht"><img src="https://s3.ax1x.com/2021/03/05/6e91ht.png" alt="6e91ht.png"></a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">##只显示镜像ID</span><br><span class="line">docker images -q</span><br><span class="line">##含中间映像层</span><br><span class="line">docker images -qa   </span><br></pre></td></tr></table></figure><p><a href="https://imgtu.com/i/6e9YjS"><img src="https://s3.ax1x.com/2021/03/05/6e9YjS.png" alt="6e9YjS.png"></a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">##显示镜像摘要信息(DIGEST列)</span><br><span class="line">docker images --digests</span><br><span class="line">##显示镜像完整信息</span><br><span class="line">docker images --no-trunc</span><br></pre></td></tr></table></figure><p><a href="https://imgtu.com/i/6e9r90"><img src="https://s3.ax1x.com/2021/03/05/6e9r90.png" alt="6e9r90.png"></a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">##显示指定镜像的历史创建；参数：-H 镜像大小和日期，默认为true；--no-trunc  显示完整的提交记录；-q  仅列出提交记录ID</span><br><span class="line">docker history -H redis</span><br></pre></td></tr></table></figure><p><a href="https://imgtu.com/i/6e9fE9"><img src="https://s3.ax1x.com/2021/03/05/6e9fE9.png" alt="6e9fE9.png"></a></p><h3 id="2-2、镜像搜索"><a href="#2-2、镜像搜索" class="headerlink" title="2.2、镜像搜索"></a>2.2、镜像搜索</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">##搜索仓库MySQL镜像</span><br><span class="line">docker search mysql</span><br><span class="line">## --filter=stars=600：只显示 starts&gt;=600 的镜像</span><br><span class="line">docker search --filter=stars=600 mysql</span><br><span class="line">## --no-trunc 显示镜像完整 DESCRIPTION 描述</span><br><span class="line">docker search --no-trunc mysql</span><br><span class="line">## --automated ：只列出 AUTOMATED=OK 的镜像</span><br><span class="line">docker search  --automated mysql</span><br></pre></td></tr></table></figure><p><a href="https://imgtu.com/i/6e9441"><img src="https://s3.ax1x.com/2021/03/05/6e9441.png" alt="6e9441.png"></a></p><h3 id="2-3、镜像下载"><a href="#2-3、镜像下载" class="headerlink" title="2.3、镜像下载"></a>2.3、镜像下载</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">##下载Redis官方最新镜像，相当于：docker pull redis:latest</span><br><span class="line">docker pull redis</span><br><span class="line">##下载仓库所有Redis镜像</span><br><span class="line">docker pull -a redis</span><br><span class="line">##下载私人仓库镜像</span><br><span class="line">docker pull bitnami/redis</span><br></pre></td></tr></table></figure><h3 id="2-4、镜像删除"><a href="#2-4、镜像删除" class="headerlink" title="2.4、镜像删除"></a>2.4、镜像删除</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">##单个镜像删除，相当于：docker rmi redis:latest</span><br><span class="line">docker rmi redis</span><br><span class="line">##强制删除(针对基于镜像有运行的容器进程)</span><br><span class="line">docker rmi -f redis</span><br><span class="line">##多个镜像删除，不同镜像间以空格间隔</span><br><span class="line">docker rmi -f redis tomcat nginx</span><br><span class="line">##删除本地全部镜像</span><br><span class="line">docker rmi -f $(docker images -q)</span><br></pre></td></tr></table></figure><h3 id="2-5、镜像构建"><a href="#2-5、镜像构建" class="headerlink" title="2.5、镜像构建"></a>2.5、镜像构建</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">##（1）编写dockerfile</span><br><span class="line">cd /docker/dockerfile</span><br><span class="line">vim mycentos</span><br><span class="line">##（2）构建docker镜像</span><br><span class="line">docker build -f /docker/dockerfile/mycentos -t mycentos:1.1</span><br></pre></td></tr></table></figure><h2 id="3、容器操作"><a href="#3、容器操作" class="headerlink" title="3、容器操作"></a>3、容器操作</h2><p>注意：对于容器的操作可使用CONTAINER ID 或 NAMES。</p><h3 id="3-1、容器启动"><a href="#3-1、容器启动" class="headerlink" title="3.1、容器启动"></a>3.1、容器启动</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">##新建并启动容器，参数：-i  以交互模式运行容器；-t  为容器重新分配一个伪输入终端；--name  为容器指定一个名称</span><br><span class="line">docker run -i -t --name mycentos</span><br><span class="line">##后台启动容器，参数：-d  已守护方式启动容器</span><br><span class="line">docker run -d mycentos</span><br></pre></td></tr></table></figure><p>注意：此时使用”docker ps -a”会发现容器已经退出。这是docker的机制：要使Docker容器后台运行，就必须有一个前台进程。解决方案：将你要运行的程序以前台进程的形式运行。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">##启动一个或多个已经被停止的容器</span><br><span class="line">docker start redis</span><br><span class="line">##重启容器</span><br><span class="line">docker restart redis</span><br></pre></td></tr></table></figure><h3 id="3-2、容器进程"><a href="#3-2、容器进程" class="headerlink" title="3.2、容器进程"></a>3.2、容器进程</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">##top支持 ps 命令参数，格式：docker top [OPTIONS] CONTAINER [ps OPTIONS]</span><br><span class="line">##列出redis容器中运行进程</span><br><span class="line">docker top redis</span><br><span class="line">##查看所有运行容器的进程信息</span><br><span class="line">for i in  `docker ps |grep Up|awk &#x27;&#123;print $1&#125;&#x27;`;do echo \ &amp;&amp;docker top $i; done</span><br></pre></td></tr></table></figure><h3 id="3-3、容器日志"><a href="#3-3、容器日志" class="headerlink" title="3.3、容器日志"></a>3.3、容器日志</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">##查看redis容器日志，默认参数</span><br><span class="line">docker logs rabbitmq</span><br><span class="line">##查看redis容器日志，参数：-f  跟踪日志输出；-t   显示时间戳；--tail  仅列出最新N条容器日志；</span><br><span class="line">docker logs -f -t --tail=20 redis</span><br><span class="line">##查看容器redis从2019年05月21日后的最新10条日志。</span><br><span class="line">docker logs --since=&quot;2019-05-21&quot; --tail=10 redis</span><br></pre></td></tr></table></figure><h3 id="3-4、容器的进入与退出"><a href="#3-4、容器的进入与退出" class="headerlink" title="3.4、容器的进入与退出"></a>3.4、容器的进入与退出</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">##使用run方式在创建时进入</span><br><span class="line">docker run -it centos /bin/bash</span><br><span class="line">##关闭容器并退出</span><br><span class="line">exit</span><br><span class="line">##仅退出容器，不关闭</span><br><span class="line">快捷键：Ctrl + P + Q</span><br><span class="line">##直接进入centos 容器启动命令的终端，不会启动新进程，多个attach连接共享容器屏幕，参数：--sig-proxy=false  确保CTRL-D或CTRL-C不会关闭容器</span><br><span class="line">docker attach --sig-proxy=false centos </span><br><span class="line">##在 centos 容器中打开新的交互模式终端，可以启动新进程，参数：-i  即使没有附加也保持STDIN 打开；-t  分配一个伪终端</span><br><span class="line">docker exec -i -t  centos /bin/bash</span><br><span class="line">##以交互模式在容器中执行命令，结果返回到当前终端屏幕</span><br><span class="line">docker exec -i -t centos ls -l /tmp</span><br><span class="line">##以分离模式在容器中执行命令，程序后台运行，结果不会反馈到当前终端</span><br><span class="line">docker exec -d centos  touch cache.txt </span><br></pre></td></tr></table></figure><h3 id="3-5、查看容器"><a href="#3-5、查看容器" class="headerlink" title="3.5、查看容器"></a>3.5、查看容器</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">##查看正在运行的容器</span><br><span class="line">docker ps</span><br><span class="line">##查看正在运行的容器的ID</span><br><span class="line">docker ps -q</span><br><span class="line">##查看正在运行+历史运行过的容器</span><br><span class="line">docker ps -a</span><br><span class="line">##显示运行容器总文件大小</span><br><span class="line">docker ps -s</span><br></pre></td></tr></table></figure><p><a href="https://imgtu.com/i/6ePlSP"><img src="https://s3.ax1x.com/2021/03/05/6ePlSP.png" alt="6ePlSP.png"></a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">##显示最近创建容器</span><br><span class="line">docker ps -l</span><br><span class="line">##显示最近创建的3个容器</span><br><span class="line">docker ps -n 3</span><br><span class="line">##不截断输出</span><br><span class="line">docker ps --no-trunc </span><br></pre></td></tr></table></figure><p><a href="https://imgtu.com/i/6ePDyT"><img src="https://s3.ax1x.com/2021/03/05/6ePDyT.png" alt="6ePDyT.png"></a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">##获取镜像redis的元信息</span><br><span class="line">docker inspect redis</span><br><span class="line">##获取正在运行的容器redis的 IP</span><br><span class="line">docker inspect --format=&#x27;&#123;&#123;range .NetworkSettings.Networks&#125;&#125;&#123;&#123;.IPAddress&#125;&#125;&#123;&#123;end&#125;&#125;&#x27; redis</span><br></pre></td></tr></table></figure><h3 id="3-6、容器的停止与删除"><a href="#3-6、容器的停止与删除" class="headerlink" title="3.6、容器的停止与删除"></a>3.6、容器的停止与删除</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">##停止一个运行中的容器</span><br><span class="line">docker stop redis</span><br><span class="line">##杀掉一个运行中的容器</span><br><span class="line">docker kill redis</span><br><span class="line">##删除一个已停止的容器</span><br><span class="line">docker rm redis</span><br><span class="line">##删除一个运行中的容器</span><br><span class="line">docker rm -f redis</span><br><span class="line">##删除多个容器</span><br><span class="line">docker rm -f $(docker ps -a -q)</span><br><span class="line">docker ps -a -q | xargs docker rm</span><br><span class="line">## -l 移除容器间的网络连接，连接名为 db</span><br><span class="line">docker rm -l db </span><br><span class="line">## -v 删除容器，并删除容器挂载的数据卷</span><br><span class="line">docker rm -v redis</span><br></pre></td></tr></table></figure><h3 id="3-7、生成镜像"><a href="#3-7、生成镜像" class="headerlink" title="3.7、生成镜像"></a>3.7、生成镜像</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">##基于当前redis容器创建一个新的镜像；参数：-a 提交的镜像作者；-c 使用Dockerfile指令来创建镜像；-m :提交时的说明文字；-p :在commit时，将容器暂停</span><br><span class="line">docker commit -a=&quot;DeepInThought&quot; -m=&quot;my redis&quot; [redis容器ID]  myredis:v1.1</span><br></pre></td></tr></table></figure><h3 id="3-8、容器与主机间的数据拷贝"><a href="#3-8、容器与主机间的数据拷贝" class="headerlink" title="3.8、容器与主机间的数据拷贝"></a>3.8、容器与主机间的数据拷贝</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">##将rabbitmq容器中的文件copy至本地路径</span><br><span class="line">docker cp rabbitmq:/[container_path] [local_path]</span><br><span class="line">##将主机文件copy至rabbitmq容器</span><br><span class="line">docker cp [local_path] rabbitmq:/[container_path]/</span><br><span class="line">##将主机文件copy至rabbitmq容器，目录重命名为[container_path]（注意与非重命名copy的区别）</span><br><span class="line">docker cp [local_path] rabbitmq:/[container_path]</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">Docker常用命令。</summary>
    
    
    
    <category term="Docker" scheme="https://hwy.ac.cn/categories/Docker/"/>
    
    
    <category term="Docker" scheme="https://hwy.ac.cn/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot 2.x code examples</title>
    <link href="https://hwy.ac.cn/2020/11/15/Spring%20Boot%202.x%20code%20examples/"/>
    <id>https://hwy.ac.cn/2020/11/15/Spring%20Boot%202.x%20code%20examples/</id>
    <published>2020-11-15T02:37:13.000Z</published>
    <updated>2023-02-11T01:39:52.704Z</updated>
    
    <content type="html"><![CDATA[<h1 id="spring-boot-2-x-examples"><a href="#spring-boot-2-x-examples" class="headerlink" title="spring-boot-2.x-examples"></a>spring-boot-2.x-examples</h1><p>Spring Boot 2.x code examples 编写2.x版本以后的各种示例代码</p><p><a href="https://996.icu/"><img src="https://img.shields.io/badge/link-996.icu-red.svg" alt="996.icu"></a> <a href="https://github.com/996icu/996.ICU/blob/master/LICENSE"><img src="https://img.shields.io/badge/license-Anti%20996-blue.svg" alt="LICENSE"></a></p><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>统一基础运行环境：</p><ul><li>JDK：1.8.0_111</li><li>Maven：3.3.9</li><li>Spring Boot：2.x</li></ul><p>详细的说明请进入项目中查看，里面会配有项目的Markdown文档。</p><h3 id="目录："><a href="#目录：" class="headerlink" title="目录："></a>目录：</h3><ul><li><p><a href="https://github.com/HWYWL/spring-boot-2.x-examples/tree/master/spring-boot-elasticsearch">spring-boot-elasticsearch</a>：Elasticsearch搜索引擎基本使用</p></li><li><p><a href="https://github.com/HWYWL/spring-boot-2.x-examples/tree/master/spring-boot-solr">spring-boot-solr</a>：solr搜索引擎基本使用</p></li><li><p><a href="https://github.com/HWYWL/spring-boot-2.x-examples/tree/master/spring-boot-docker-fsatdfs">spring-boot-docker-fsatdfs</a>：FastDFS文件系统，使用docker构建环境</p></li><li><p><a href="https://github.com/HWYWL/spring-boot-2.x-examples/tree/master/spring-boot-go-fastdfs">spring-boot-go-fastdfs</a>：go-FastDFS文件系统</p></li><li><p><a href="https://github.com/HWYWL/spring-boot-2.x-examples/tree/master/spring-boot-kafka">spring-boot-kafka</a>：kafka消息队列</p></li><li><p><a href="https://github.com/HWYWL/spring-boot-2.x-examples/tree/master/spring-boot-rabbitmq">spring-boot-rabbitmq</a>：rabbitmq消息队列</p></li><li><p><a href="https://github.com/HWYWL/spring-boot-2.x-examples/tree/master/spring-boot-activemq">spring-boot-activemq</a>：activemq消息队列</p></li><li><p><a href="https://github.com/HWYWL/spring-boot-2.x-examples/tree/master/spring-boot-swagger">spring-boot-swagger</a>：Swagger是一款RESTFUL接口的文档在线自动生成+功能测试功能软件</p></li><li><p><a href="https://github.com/HWYWL/spring-boot-2.x-examples/tree/master/spring-boot-webflux">spring-boot-webflux</a>：Spring WebFlux是基于注解实现的响应式流API接口</p></li><li><p><a href="https://github.com/HWYWL/spring-boot-2.x-examples/tree/master/spring-boot-webflux-api">spring-boot-webflux-api</a>：Spring WebFlux是基于响应式流编写的API接口</p></li><li><p><a href="https://github.com/HWYWL/spring-boot-2.x-examples/tree/master/spring-boot-webflux-annotation-api">spring-boot-webflux-annotation-api</a>：Spring WebFlux是基于响应式流编写的API接口，使用注解方式实现</p></li><li><p><a href="https://github.com/HWYWL/spring-boot-2.x-examples/tree/master/spring-boot-webflux-websocket">spring-boot-webflux-websocket</a>：基于Spring WebFlux响应式流编写的WebSocket</p></li><li><p><a href="https://github.com/HWYWL/spring-boot-2.x-examples/tree/master/spring-boot-dubbo-zookeeper">spring-boot-dubbo-zookeeper</a>：整合dubbo+zookeeper的分布式项目实例</p></li><li><p><a href="https://github.com/HWYWL/spring-boot-2.x-examples/tree/master/spring-boot-dubbo-zookeeper-hystrix">spring-boot-dubbo-zookeeper-hystrix</a>：使用hystrix实现分布式项目的服务降级（XML版本）</p></li><li><p><a href="https://github.com/HWYWL/spring-boot-2.x-examples/tree/master/spring-boot-dubbo-zookeeper-hystrix-annotation">spring-boot-dubbo-zookeeper-hystrix-annotation</a>：使用hystrix实现分布式项目的服务降级（注解版本）</p></li><li><p><a href="https://github.com/HWYWL/spring-boot-2.x-examples/tree/master/spring-boot-thymeleaf">spring-boot-thymeleaf</a>：Thymeleaf模板引擎</p></li><li><p><a href="https://github.com/HWYWL/spring-boot-2.x-examples/tree/master/spring-boot-freemarker">spring-boot-freemarker</a>：FreeMarker模板引擎</p></li><li><p><a href="https://github.com/HWYWL/spring-boot-2.x-examples/tree/master/spring-boot-beetl">spring-boot-beetl</a>：beetl模板引擎</p></li><li><p><a href="https://github.com/HWYWL/spring-boot-2.x-examples/tree/master/spring-boot-exception">spring-boot-exception</a>：自定的统一异常处理</p></li><li><p><a href="https://github.com/HWYWL/spring-boot-2.x-examples/tree/master/spring-boot-mongodb">spring-boot-mongodb</a>：MongoDB是一个基于分布式文件存储的数据库</p></li><li><p><a href="https://github.com/HWYWL/spring-boot-2.x-examples/tree/master/spring-boot-webflux-mongodb">spring-boot-webflux-mongodb</a>：基于Spring WebFlux响应式流方式操作MongoDB数据库</p></li><li><p><a href="https://github.com/HWYWL/spring-boot-2.x-examples/tree/master/spring-boot-mybatis">spring-boot-mybatis</a>：MyBatis 是一款优秀的持久层框架,使用mybatis访问数据库</p></li><li><p><a href="https://github.com/HWYWL/spring-boot-2.x-examples/tree/master/spring-boot-mybatis-mutiple-datasource">spring-boot-mybatis-mutiple-datasource</a>：通过mybatis配置多数据源方式操作数据库</p></li><li><p><a href="https://github.com/HWYWL/spring-boot-2.x-examples/tree/master/spring-boot-mybatis-plus">spring-boot-mybatis-plus</a>：通过增强型mybatis操作数据库，可以省略大部分CURD</p></li><li><p><a href="https://github.com/HWYWL/spring-boot-2.x-examples/tree/master/spring-boot-current-mapper">spring-boot-current-mapper</a>：通用mapper，基于mybatis，极大的方便操作数据库，甚至可以自定义动态生成SQL</p></li><li><p><a href="https://github.com/HWYWL/spring-boot-2.x-examples/tree/master/spring-boot-mybatis-sqlite">spring-boot-mybatis-sqlite</a>：通过mybatis操作sqlite数据库</p></li><li><p><a href="https://github.com/HWYWL/spring-boot-2.x-examples/tree/master/spring-boot-anima">spring-boot-anima</a>：通用数据库操作框架，支持MySQL、SQLite、H2、Oracle、SqlServer等数据库</p></li><li><p><a href="https://github.com/HWYWL/spring-boot-2.x-examples/tree/master/spring-boot-beatlsql">spring-boot-beatlsql</a>：BeetSql是一个全功能DAO工具,目前跨数据库支持mysql,postgres,oracle,sqlserver,h2,sqllite,DB2</p></li><li><p><a href="https://github.com/HWYWL/spring-boot-2.x-examples/tree/master/spring-boot-mybatis-druid">spring-boot-mybatis-druid</a>：DRUID是阿里巴巴开源平台上一个数据库连接池实现</p></li><li><p><a href="https://github.com/HWYWL/spring-boot-2.x-examples/tree/master/spring-boot-mybatis-hikari">spring-boot-mybatis-hikari</a>：HiKariCP是数据库连接池，官方推荐使用，号称性能最好</p></li><li><p><a href="https://github.com/HWYWL/spring-boot-2.x-examples/tree/master/spring-boot-sql-interceptor">spring-boot-sql-interceptor</a>：自定义SQL拦截器，打印SQL语句和执行时间</p></li><li><p><a href="https://github.com/HWYWL/spring-boot-2.x-examples/tree/master/spring-boot-jpa">spring-boot-jpa</a>：JPA是供应商JDBCjdbc是一组规范，用于操作方便的数据库</p></li><li><p><a href="https://github.com/HWYWL/spring-boot-2.x-examples/tree/master/spring-boot-pagehelper">spring-boot-pagehelper</a>：PageHelper是一个开源的分页插件，可以非常方便的进行数据库查询分页操作</p></li><li><p><a href="https://github.com/HWYWL/spring-boot-2.x-examples/tree/master/spring-boot-security">spring-boot-security</a>：Spring Security是一个基于Spring的企业应用系统提供声明式的安全访问控制解决方案的安全框架</p></li><li><p><a href="https://github.com/HWYWL/spring-boot-2.x-examples/tree/master/spring-boot-email">spring-boot-email</a>：通过简单配置发送邮件，还可以自定义邮件模板</p></li><li><p><a href="https://github.com/HWYWL/spring-boot-2.x-examples/tree/master/spring-boot-aop-log">spring-boot-aop-log</a>：通过spring aop拦截我们web项目请求的日志，非常实用</p></li><li><p><a href="https://github.com/HWYWL/spring-boot-2.x-examples/tree/master/spring-boot-aop-annotation-log">spring-boot-aop-annotation-log</a>：通过spring 注解aop拦截我们web项目请求的日志</p></li><li><p><a href="https://github.com/HWYWL/spring-boot-2.x-examples/tree/master/spring-boot-log">spring-boot-log</a>：log彩色日志系统，可以打印漂亮的彩色日志</p></li><li><p><a href="https://github.com/HWYWL/spring-boot-2.x-examples/tree/master/spring-boot-security">spring-boot-security</a>：Spring Security是一个基于Spring的企业应用系统提供声明式的安全访问控制解决方案的安全框架</p></li><li><p><a href="https://github.com/HWYWL/spring-boot-2.x-examples/tree/master/spring-boot-redis">spring-boot-redis</a>：Redis是一个可基于内存亦可持久化的日志型、Key-Value数据库</p></li><li><p><a href="https://github.com/HWYWL/spring-boot-2.x-examples/tree/master/spring-boot-redis-pub-sub">spring-boot-redis-pub-sub</a>：通过Redis实现发布订阅服务</p></li><li><p><a href="https://github.com/HWYWL/spring-boot-2.x-examples/tree/master/spring-boot-redis-geo">spring-boot-redis-geo</a>：通过Redis实现的地理信息查询</p></li><li><p><a href="https://github.com/HWYWL/spring-boot-2.x-examples/tree/master/spring-boot-redisson-lock">spring-boot-redisson-lock</a>：基于Redis+Redisson实现的高并发锁</p></li><li><p><a href="https://github.com/HWYWL/spring-boot-2.x-examples/tree/master/spring-boot-websocket">spring-boot-websocket</a>：WebSocket聊天小项目</p></li><li><p><a href="https://github.com/HWYWL/spring-boot-2.x-examples/tree/master/spring-boot-session-token">spring-boot-session-token</a>：基于Redis实现的用户登录网站和自动超时下线</p></li><li><p><a href="https://github.com/HWYWL/spring-boot-2.x-examples/tree/master/spring-boot-memcached">spring-boot-memcached</a>：Memcached 是一个高性能的分布式内存对象缓存系统，实现了它的基本操作</p></li><li><p><a href="https://github.com/HWYWL/spring-boot-2.x-examples/tree/master/spring-boot-ehcach">spring-boot-ehcach</a>：EhCache 是一个纯Java的进程内缓存框架</p></li><li><p><a href="https://github.com/HWYWL/spring-boot-2.x-examples/tree/master/spring-boot-war">spring-boot-war</a> ：把Spring Boot项目打成war发布（默认是jar包）</p></li><li><p><a href="https://github.com/HWYWL/spring-boot-2.x-examples/tree/master/spring-boot-scheduled">spring-boot-scheduled</a>：scheduled是Spring Boot自带的小型定时任务</p></li><li><p><a href="https://github.com/HWYWL/spring-boot-2.x-examples/tree/master/spring-boot-quartz">spring-boot-quartz</a>：Quartz 是一个开源作业调度框架,这里编写了它使用实例</p></li><li><p><a href="https://github.com/HWYWL/spring-boot-2.x-examples/tree/master/spring-boot-elastic-job">spring-boot-elastic-job</a>：Elastic-job 是由当当网基于quartz 二次开发之后的分布式调度解决方案</p></li><li><p><a href="https://github.com/HWYWL/spring-boot-2.x-examples/tree/master/spring-boot-echarts">spring-boot-echarts</a>：百度的商业产品图表库，通过简单的代码可以画出炫酷的图表</p></li><li><p><a href="https://github.com/HWYWL/spring-boot-2.x-examples/tree/master/spring-boot-webmagic">spring-boot-webmagic</a>：基于WebMagic爬虫框架编写的爬虫,爬取伯乐在线和拉钩的数据</p></li><li><p><a href="https://github.com/HWYWL/spring-boot-2.x-examples/tree/master/spring-boot-system">spring-boot-system</a>：系统基本信息监控</p></li><li><p><a href="https://github.com/HWYWL/spring-boot-2.x-examples/tree/master/spring-boot-jetty">spring-boot-jetty</a>：jetty容器</p></li><li><p><a href="https://github.com/HWYWL/spring-boot-2.x-examples/tree/master/spring-boot-tomcat-jsp">spring-boot-tomcat-jsp</a>：基于Tomcat容器运行的jsp页面</p></li><li><p><a href="https://github.com/HWYWL/spring-boot-2.x-examples/tree/master/spring-boot-jetty-jsp">spring-boot-jetty-jsp</a>：基于Jetty容器运行的jsp页面</p></li><li><p><a href="https://github.com/HWYWL/spring-boot-2.x-examples/tree/master/spring-boot-xml">spring-boot-xml</a>：使用xml配置代替配置文件</p></li><li><p><a href="https://github.com/HWYWL/spring-boot-2.x-examples/tree/master/spring-boot-emoji">spring-boot-emoji</a>：emoji表情</p></li><li><p><a href="https://github.com/HWYWL/spring-boot-2.x-examples/tree/master/spring-boot-contiperf">spring-boot-contiperf</a>：轻量级的单元测试工具</p></li><li><p><a href="https://github.com/HWYWL/spring-boot-2.x-examples/tree/master/spring-boot-https">spring-boot-https</a>：配置跳转https</p></li><li><p><a href="https://github.com/HWYWL/spring-boot-2.x-examples/tree/master/spring-boot-excel">spring-boot-excel</a>：excel简单的操作工具</p></li><li><p><a href="https://github.com/HWYWL/spring-boot-2.x-examples/tree/master/spring-boot-auto-code">spring-boot-auto-code</a>：强大的代码生成器，极少的配置可生成 单表、一对一、一对多、多对多代码，支持无限级联</p></li><li><p><a href="https://github.com/HWYWL/spring-boot-2.x-examples/tree/master/spring-boot-auto-code-ui">spring-boot-auto-code-ui</a>：强大的代码生成器,通过界面可生成 单表、一对一、一对多、多对多代码，支持无限级联</p></li><li><p><a href="https://github.com/HWYWL/spring-boot-2.x-examples/tree/master/spring-boot-async">spring-boot-async</a>：异步执行我们的接口</p></li><li><p><a href="https://github.com/HWYWL/spring-boot-2.x-examples/tree/master/spring-boot-sm">spring-boot-sm</a>：SM免费图床</p></li><li><p><a href="https://github.com/HWYWL/spring-boot-2.x-examples/tree/master/spring-boot-gitee-login">spring-boot-gitee-login</a>：通过gitee(码云)授权登录我们的应用</p></li><li><p><a href="https://github.com/HWYWL/spring-boot-2.x-examples/tree/master/spring-boot-github-login">spring-boot-github-login</a>：通过GitHub授权登录我们的应用</p></li><li><p><a href="https://github.com/HWYWL/spring-boot-2.x-examples/tree/master/spring-boot-dingtalk-login">spring-boot-dingtalk-login</a>：通过钉钉扫码授权登录我们的应用</p></li><li><p><a href="https://github.com/HWYWL/spring-boot-2.x-examples/tree/master/spring-boot-weibo-login">spring-boot-weibo-login</a>：通过新浪微博授权登录我们的应用</p></li><li><p><a href="https://github.com/HWYWL/spring-boot-2.x-examples/tree/master/spring-boot-tencentcloud">spring-boot-tencentcloud</a>：通过腾讯云授权登录我们的应用</p></li><li><p><a href="https://github.com/HWYWL/spring-boot-2.x-examples/tree/master/spring-boot-oschina-login">spring-boot-oschina-login</a>：通过开源中国授权登录我们的应用</p></li><li><p><a href="https://github.com/HWYWL/spring-boot-2.x-examples/tree/master/spring-boot-current-limiting">spring-boot-current-limiting</a>：基于令牌桶算法和漏桶算法实现的纳秒级分布式无锁限流</p></li><li><p><a href="https://github.com/HWYWL/spring-boot-2.x-examples/tree/master/spring-boot-sharding-sphere">spring-boot-sharding-sphere</a>：分布式数据库中间件解决方案，标准化的数据分片、分布式事务和数据库治理功能</p></li><li><p><a href="https://github.com/HWYWL/spring-boot-2.x-examples/tree/master/spring-boot-session-redis">spring-boot-session-redis</a>：使用spring session实现分布式应用的session共享</p></li><li><p><a href="https://github.com/HWYWL/spring-boot-2.x-examples/tree/master/spring-boot-storm">spring-boot-storm</a>：使用Storm进行订单的实时计算</p></li><li><p><a href="https://github.com/HWYWL/spring-boot-2.x-examples/tree/master/spring-boot-hbase">spring-boot-hbase</a>：HBase的CRUD</p></li><li><p><a href="https://github.com/HWYWL/spring-boot-2.x-examples/tree/master/spring-boot-psql">spring-boot-psql</a>：PostgreSQL数据库操作</p></li><li><p><a href="https://github.com/HWYWL/spring-boot-2.x-examples/tree/master/spring-boot-presto">spring-boot-presto</a>：presto分布式SQL交互式查询引擎</p></li><li><p><a href="https://github.com/HWYWL/spring-boot-2.x-examples/tree/master/spring-boot-version">spring-boot-version</a>：web服务版本接口控制</p></li><li><p><a href="https://github.com/HWYWL/spring-boot-2.x-examples/tree/master/spring-boot-redshift">spring-boot-redshift</a>：Amazon Redshift 是一种快速、完全托管的 PB 级数据仓库服务</p></li><li><p><a href="https://github.com/HWYWL/spring-boot-2.x-examples/tree/master/spring-boot-lianjia">spring-boot-lianjia</a>：链家是我膨胀，为什么要手贱</p></li><li><p><a href="https://github.com/HWYWL/spring-boot-2.x-examples/tree/master/spring-boot-douban">spring-boot-douban</a>：豆瓣哪吒之魔童降世影评</p></li><li><p><a href="https://github.com/HWYWL/spring-boot-2.x-examples/tree/master/spring-boot-figure">spring-boot-figure</a>：来呀斗图呀</p></li><li><p><a href="https://github.com/HWYWL/spring-boot-2.x-examples/tree/master/spring-boot-nacos-config">spring-boot-nacos-config</a>：nacos构建云原生应用的动态服务发现、配置管理和服务管理平台。</p></li><li><p><a href="https://github.com/HWYWL/spring-boot-2.x-examples/tree/master/spring-boot-consul">spring-boot-consul</a>：consul构建云原生应用的动态服务发现、配置管理和服务管理平台。</p></li><li><p><a href="https://github.com/HWYWL/spring-boot-2.x-examples/tree/master/spring-boot-xxl-conf">spring-boot-xxl-conf</a>：一个轻量级分布式配置管理平台（推荐）。</p></li><li><p><a href="https://github.com/HWYWL/spring-boot-2.x-examples/tree/master/spring-boot-jib">spring-boot-jib</a>：简单方便的docker镜像打包插件</p></li><li><p><a href="https://github.com/HWYWL/spring-boot-2.x-examples/tree/master/spring-boot-docker-minio">spring-boot-docker-minio</a>：MinIO 是一个基于Apache License v2.0开源协议的对象存储服务。</p></li><li><p><a href="https://github.com/HWYWL/spring-boot-2.x-examples/tree/master/spring-boot-mqtt">spring-boot-mqtt</a>：基于ActiveMQ的MQTT协议服务。</p></li></ul><h3 id="感谢"><a href="#感谢" class="headerlink" title="感谢"></a>感谢</h3><ul><li>例程还有不足之处，请大家Issues ヾ(๑╹◡╹)ﾉ”</li><li>我那么可爱你不点个star吗 φ(&gt;ω&lt;*)</li></ul><h3 id="问题建议"><a href="#问题建议" class="headerlink" title="问题建议"></a>问题建议</h3><ul><li>联系我的邮箱：<a href="mailto:&#105;&#x6c;&#111;&#x76;&#101;&#121;&#95;&#x68;&#x77;&#x79;&#64;&#x31;&#54;&#x33;&#46;&#x63;&#111;&#109;">&#105;&#x6c;&#111;&#x76;&#101;&#121;&#95;&#x68;&#x77;&#x79;&#64;&#x31;&#54;&#x33;&#46;&#x63;&#111;&#109;</a></li><li>我的博客：<a href="https://www.hwy.ac.cn/">https://www.hwy.ac.cn</a></li><li>GitHub：<a href="https://github.com/HWYWL">https://github.com/HWYWL</a></li></ul>]]></content>
    
    
    <summary type="html">Spring Boot 2.x code examples。</summary>
    
    
    
    <category term="Spring boot" scheme="https://hwy.ac.cn/categories/Spring-boot/"/>
    
    
    <category term="Spring boot" scheme="https://hwy.ac.cn/tags/Spring-boot/"/>
    
  </entry>
  
  <entry>
    <title>ESP32的MicorPython库</title>
    <link href="https://hwy.ac.cn/2020/08/10/ESP32%E7%9A%84MicorPython%E5%BA%93/"/>
    <id>https://hwy.ac.cn/2020/08/10/ESP32%E7%9A%84MicorPython%E5%BA%93/</id>
    <published>2020-08-10T09:40:46.000Z</published>
    <updated>2023-02-11T01:39:52.704Z</updated>
    
    <content type="html"><![CDATA[<h1 id="yi-mp"><a href="#yi-mp" class="headerlink" title="yi-mp"></a>yi-mp</h1><p>YI MicroPython 是一个MicroPython简化操作的模块，可以快速的链接WiFi以及开启WebREPL。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>如果你的ESP32安装了MicroPython的固件就可以使用，ESP8266我没有试过，手头没这个模块。</p><p><strong>注意</strong>：使用upip命令需要联网，所以使用需要你的ESP82模块连上WiFi才能安装模块。</p><p><img src="https://hwy-figure-bed.oss-cn-hangzhou.aliyuncs.com/image/20200807182401.png"></p><p>已经将yi-mp上传到了<strong>PyPI</strong>,我们连接上ESP32的串口进行安装：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import upip</span><br><span class="line">upip.install(&#x27;yi-mp&#x27;)</span><br></pre></td></tr></table></figure><p><img src="https://hwy-figure-bed.oss-cn-hangzhou.aliyuncs.com/image/20206166x1.png"></p><p>这些库会自动安装到&#x2F;lib下面，我们可以使用以下命令查看安装路径：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; upip.get_install_path()</span><br><span class="line">&#x27;/lib&#x27;</span><br></pre></td></tr></table></figure><p>我们可以使用os命令查看下载好的文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import os</span><br><span class="line">os.listdir(&#x27;lib&#x27;)</span><br></pre></td></tr></table></figure><p><img src="https://hwy-figure-bed.oss-cn-hangzhou.aliyuncs.com/image/20200807172901.png"></p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>导入emp_boot 设置启动模式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import emp_boot</span><br></pre></td></tr></table></figure><p>设置<strong>boot.py</strong>的启动模式 这个操作会修改并覆盖<strong>boot.py</strong>文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">emp_boot.set_boot_mode()</span><br></pre></td></tr></table></figure><p><img src="https://hwy-figure-bed.oss-cn-hangzhou.aliyuncs.com/image/20200807172915.png"></p><p>如果你是开发只用就选开发者模式，方便调试和编码，如果已经是完善的程序可以长时间跑了，可以选WiFi模式节约资源。</p><p>选择之后模块会重启，然后打印一些系统信息：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line">Reboot</span><br><span class="line">I (1182645) wifi: state: run -&gt; init (0)</span><br><span class="line">I (1182645) wifi: pm stop, total sleep time: 1081965484 us / 1180618709 us</span><br><span class="line"></span><br><span class="line">I (1182645) wifi: new:&lt;3,0&gt;, old:&lt;3,0&gt;, ap:&lt;255,255&gt;, sta:&lt;3,0&gt;, prof:1</span><br><span class="line">E (1182655) event: system_event_sta_disconnected_handle_default 294 esp_wifi_internal_reg_rxcb ret=0x3014</span><br><span class="line">I (1182665) wifi: STA_DISCONNECTED, reason:8</span><br><span class="line">I (1182665) wifi: flush txq</span><br><span class="line">I (1182665) wifi: stop sw txq</span><br><span class="line">I (1182675) wifi: lmac stop hw txq</span><br><span class="line">ets Jun  8 2016 00:22:57</span><br><span class="line"></span><br><span class="line">rst:0xc (SW_CPU_RESET),boot:0x13 (SPI_FAST_FLASH_BOOT)</span><br><span class="line">configsip: 0, SPIWP:0xee</span><br><span class="line">clk_drv:0x00,q_drv:0x00,d_drv:0x00,cs0_drv:0x00,hd_drv:0x00,wp_drv:0x00</span><br><span class="line">mode:DIO, clock div:1</span><br><span class="line">load:0x3fff0018,len:4</span><br><span class="line">load:0x3fff001c,len:5180</span><br><span class="line">load:0x40078000,len:11388</span><br><span class="line">ho 0 tail 12 room 4</span><br><span class="line">load:0x40080400,len:7340</span><br><span class="line">entry 0x40080704</span><br><span class="line">I (426) psram: This chip is ESP32-D0WD</span><br><span class="line">I (426) spiram: Found 64MBit SPI RAM device</span><br><span class="line">I (426) spiram: SPI RAM mode: flash 80m sram 80m</span><br><span class="line">I (429) spiram: PSRAM initialized, cache is in low/high (2-core) mode.</span><br><span class="line">I (436) cpu_start: Pro cpu up.</span><br><span class="line">I (440) cpu_start: Application information:</span><br><span class="line">I (445) cpu_start: Compile time:     Mar 16 2020 04:36:04</span><br><span class="line">I (451) cpu_start: ELF file SHA256:  0000000000000000...</span><br><span class="line">I (457) cpu_start: ESP-IDF:          v3.3</span><br><span class="line">I (462) cpu_start: Starting app cpu, entry point is 0x40083dc0</span><br><span class="line">I (453) cpu_start: App cpu up.</span><br><span class="line">I (946) spiram: SPI SRAM memory test OK</span><br><span class="line">I (947) heap_init: Initializing. RAM available for dynamic allocation:</span><br><span class="line">I (947) heap_init: At 3FFAE6E0 len 00001920 (6 KiB): DRAM</span><br><span class="line">I (953) heap_init: At 3FFBA658 len 000259A8 (150 KiB): DRAM</span><br><span class="line">I (959) heap_init: At 3FFE0440 len 00003AE0 (14 KiB): D/IRAM</span><br><span class="line">I (966) heap_init: At 3FFE4350 len 0001BCB0 (111 KiB): D/IRAM</span><br><span class="line">I (972) heap_init: At 4009743C len 00008BC4 (34 KiB): IRAM</span><br><span class="line">I (978) cpu_start: Pro cpu start user code</span><br><span class="line">I (100) cpu_start: Chip Revision: 1</span><br><span class="line">I (101) cpu_start: Starting scheduler on PRO CPU.</span><br><span class="line">I (0) cpu_start: Starting scheduler on APP CPU.</span><br><span class="line">I (880) modsocket: Initializing</span><br><span class="line"></span><br><span class="line">       ---------------------------</span><br><span class="line">       - Python YI MicroPython   -</span><br><span class="line">       -      version 1.0.3      -</span><br><span class="line">       -     by YI               -</span><br><span class="line">       ---------------------------</span><br><span class="line"></span><br><span class="line">I (960) wifi: wifi driver task: 3ffc5164, prio:23, stack:3584, core=0</span><br><span class="line">I (2026) system_api: Base MAC address is not set, read default base MAC address from BLK0 of EFUSE</span><br><span class="line">I (2036) system_api: Base MAC address is not set, read default base MAC address from BLK0 of EFUSE</span><br><span class="line">I (2076) wifi: wifi firmware version: aeed694</span><br><span class="line">I (2076) wifi: config NVS flash: enabled</span><br><span class="line">I (2076) wifi: config nano formating: disabled</span><br><span class="line">I (2076) wifi: Init dynamic tx buffer num: 32</span><br><span class="line">I (2076) wifi: Init data frame dynamic rx buffer num: 32</span><br><span class="line">I (2086) wifi: Init management frame dynamic rx buffer num: 32</span><br><span class="line">I (2086) wifi: Init management short buffer num: 32</span><br><span class="line">I (2096) wifi: Init static rx buffer size: 1600</span><br><span class="line">I (2096) wifi: Init static rx buffer num: 10</span><br><span class="line">I (2106) wifi: Init dynamic rx buffer num: 32</span><br><span class="line">I (2186) phy: phy_version: 4102, 2fa7a43, Jul 15 2019, 13:06:06, 0, 0</span><br><span class="line">I (2186) wifi: mode : sta (ac:67:b2:24:18:dc)</span><br><span class="line">I (2186) wifi: STA_START</span><br><span class="line">创建 config/wifi_cfg.json 配置</span><br><span class="line">I (4606) network: event 1</span><br><span class="line">[0]    XXXXX                                    -53     dBm</span><br><span class="line">[1]    XXXXX-Client                             -54     dBm</span><br><span class="line">[2]    XXXXX_Test                               -54     dBm</span><br><span class="line">[3]    XXXXX                                    -57     dBm</span><br><span class="line">[4]    XXXXX_Test                               -57     dBm</span><br><span class="line">[5]    DaChuang                                 -60     dBm</span><br><span class="line">[6]    XXXXX-Client                             -61     dBm</span><br><span class="line">没有记录!</span><br><span class="line">正在扫描网络...</span><br><span class="line">I (6886) network: event 1</span><br><span class="line">[0]    XXXXX                                    -53     dBm</span><br><span class="line">[1]    XXXXX-Client                             -54     dBm</span><br><span class="line">[2]    XXXXX_Test                               -54     dBm</span><br><span class="line">[3]    XXXXX                                    -57     dBm</span><br><span class="line">[4]    XXXXX_Test                               -57     dBm</span><br><span class="line">[5]    DaChuang                                 -60     dBm</span><br><span class="line">[6]    XXXXX-Client                             -61     dBm</span><br><span class="line">您想访问哪一个? [0-6]</span><br></pre></td></tr></table></figure><p>选择wifi，输入密码，连上之后就会打印IP、网关等信息。</p><p><img src="https://hwy-figure-bed.oss-cn-hangzhou.aliyuncs.com/image/20200807173726.png"></p><p>WebREPL和串口REPL是一样的，可以到下面这个网址链接操作,他可以通过网页数据命令，让我们摆脱对数据线的依赖。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://micropython.org/webrepl/</span><br></pre></td></tr></table></figure><p>WebREPL的默认密码是123456，你也可以使用一下命令进行重置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import emp_boot</span><br><span class="line">emp_boot.set_web_repl()</span><br></pre></td></tr></table></figure><p>可以使用如下代码查看文件的内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(open(&#x27;/config/webrepl.pass&#x27;).read())</span><br></pre></td></tr></table></figure><p><img src="https://hwy-figure-bed.oss-cn-hangzhou.aliyuncs.com/image/20200807182235.png"></p><p>让我们摆脱数据线吧，啦啦啦~~~</p><p><img src="https://hwy-figure-bed.oss-cn-hangzhou.aliyuncs.com/image/20200807182627.png"></p><p>源码：<a href="https://github.com/HWYWL/yi-mp">https://github.com/HWYWL/yi-mp</a></p><h3 id="问题建议"><a href="#问题建议" class="headerlink" title="问题建议"></a>问题建议</h3><ul><li>联系我的邮箱：<a href="mailto:&#x69;&#108;&#x6f;&#x76;&#x65;&#121;&#x5f;&#104;&#119;&#121;&#64;&#x31;&#x36;&#x33;&#x2e;&#99;&#x6f;&#109;">&#x69;&#108;&#x6f;&#x76;&#x65;&#121;&#x5f;&#104;&#119;&#121;&#64;&#x31;&#x36;&#x33;&#x2e;&#99;&#x6f;&#109;</a></li><li>我的博客：<a href="https://hwy.ac.cn/">https://hwy.ac.cn</a></li><li>GitHub：<a href="https://github.com/HWYWL">https://github.com/HWYWL</a></li></ul><h2 id="感谢"><a href="#感谢" class="headerlink" title="感谢"></a>感谢</h2><p><a href="http://micropython.org/">MicroPython</a><br><a href="http://www.1zlab.com/">1Z实验室</a></p>]]></content>
    
    
    <summary type="html">ESP32的MicorPython库</summary>
    
    
    
    <category term="MCU" scheme="https://hwy.ac.cn/categories/MCU/"/>
    
    
    <category term="MCU" scheme="https://hwy.ac.cn/tags/MCU/"/>
    
  </entry>
  
  <entry>
    <title>我的开源代码将保存千年</title>
    <link href="https://hwy.ac.cn/2020/07/20/%E6%88%91%E7%9A%84%E5%BC%80%E6%BA%90%E4%BB%A3%E7%A0%81%E5%B0%86%E4%BF%9D%E5%AD%98%E5%8D%83%E5%B9%B4/"/>
    <id>https://hwy.ac.cn/2020/07/20/%E6%88%91%E7%9A%84%E5%BC%80%E6%BA%90%E4%BB%A3%E7%A0%81%E5%B0%86%E4%BF%9D%E5%AD%98%E5%8D%83%E5%B9%B4/</id>
    <published>2020-07-20T09:40:46.000Z</published>
    <updated>2023-02-11T01:39:52.708Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Arctic-Code-Vault-计划"><a href="#Arctic-Code-Vault-计划" class="headerlink" title="Arctic Code Vault 计划"></a>Arctic Code Vault 计划</h1><p><img src="https://hwy-figure-bed.oss-cn-hangzhou.aliyuncs.com/image/3.png"></p><p>“把开源代码在北极保存 1000 年！”去年，GitHub 公布了一项代码存档计划——Arctic Code Vault，要把代码埋入北极地下 250 米深的永久冻土层，希望将代码保存一千年。</p><p>现在，这不只是一个遥远的梦想了，GitHub 已经把采集到的活跃公共存储库快照保存到了位于北极的数据仓库，以备来世之用。此外，GitHub 还为开发者在配置文件中设计了纪念徽章。</p><p>下面是我的徽章，开心：</p><p><img src="https://hwy-figure-bed.oss-cn-hangzhou.aliyuncs.com/image/1.png"></p><h1 id="GitHub-代码永久保存计划启动"><a href="#GitHub-代码永久保存计划启动" class="headerlink" title="GitHub 代码永久保存计划启动"></a>GitHub 代码永久保存计划启动</h1><p>在 GitHub 环球2019开发者大会上，GitHub 首席执行官 Nat Friedman 首次介绍了 GitHub 存档程序，他说：“在这个平台上，代码应该存储在北极的一个档案中，用胶片卷起来，供后人使用。”过去几个月，GitHub 与 Piql（长期数字存储提供商）合作，将 21 TB 的 GitHub 存储库数据写入了 186 卷的 piqlFilm 数字光感档案胶片中。</p><p>开发人员和开发人员的代码创建的快照现在在存档中，现在可以在他们的GitHub配置文件上看到相应的徽章，据说，获得一个 Star 用户就可以点亮徽章，开发者贡献的相应存储库会通过悬浮窗显示出来。</p><p>GitHub 在每个存储的卷轴上都添加了一个 GitHub 代码库指南，这个由社区输入编写的语句也可以在归档程序的相关联的文章中查找到。</p><p>档案中还包含一个单独的胶卷，其中以书面形式解释了档案内容的历史和文化背景。所谓的技术树旨在提供现代软件开发、开源和各种应用程序以及流行编程语言的详细介绍。</p><p>此外，存储档案中还包括解释创造微处理器、网络、电子、半导体和前工业技术的技术条件的著作。其目的是使档案的继承人尽可能全面地了解当今的技术可能性。</p><p>GitHub 计划发布档案库中的第一个作品列表，同时征求社区的意见、建议和反馈。</p><p><img src="https://hwy-figure-bed.oss-cn-hangzhou.aliyuncs.com/image/2.png"></p><h1 id="埋藏在北极-250-米冻土层下的开源代码，将保存千年"><a href="#埋藏在北极-250-米冻土层下的开源代码，将保存千年" class="headerlink" title="埋藏在北极 250 米冻土层下的开源代码，将保存千年"></a>埋藏在北极 250 米冻土层下的开源代码，将保存千年</h1><p>去年，Github 为了保护开源代码，宣布了这项代码存档计划，并宣布在今年 2 月 2 日正式启动将此前的开源代码以 QR 码的形式存储在胶片里，并将这些胶片存放在挪威斯瓦尔巴特一座已废弃的矿井里。</p><p>斯瓦尔巴群岛的一个退役煤矿中，比北极圈更靠近北极。Arctic Code Vault 数据存储库就位于这个北极地下 250 米深的永久冻土层。</p><p>Github 认为，存储在现代设备中的信息在几代之后很可能会消失，因此需要用不同的形式和平台进行存储备份，留存于后世。</p><p>或许，1000 年后这些代码早已过时，但它们将是可以反映人类社会进步和技术发展历程的宝贵财富。</p><p>文章部分内容来自：<a href="https://baijiahao.baidu.com/s?id=1672503626646881303&wfr=spider&for=pc">思否</a>。</p>]]></content>
    
    
    <summary type="html">我的开源代码将保存千年</summary>
    
    
    
    <category term="生活" scheme="https://hwy.ac.cn/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
    <category term="生活" scheme="https://hwy.ac.cn/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
</feed>
